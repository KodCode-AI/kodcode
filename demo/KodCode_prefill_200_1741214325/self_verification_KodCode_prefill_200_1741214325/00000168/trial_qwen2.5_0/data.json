{
  "metadata": {
    "prompt_id": "00000168",
    "row_id": 168,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to parse and extract specific data from XML using `xml.etree.ElementTree`",
  "solution_code": "import xml.etree.ElementTree as ET\n\ndef extract_data_from_xml(xml_string, tag_name):\n    \"\"\"\n    Parses the XML string and extracts the text content of elements with the specified tag name.\n    \n    :param xml_string: The XML content as a string.\n    :param tag_name: The tag name of the elements to extract.\n    :return: A list of text contents of the found elements.\n    \"\"\"\n    root = ET.fromstring(xml_string)\n    extracted_data = [element.text for element in root.findall(tag_name)]\n    return extracted_data",
  "test_code": "import xml.etree.ElementTree as ET\nfrom solution import extract_data_from_xml\n\ndef test_extract_data_from_xml():\n    test_xml = '''\n    <root>\n        <data>First Data</data>\n        <data>Second Data</data>\n    </root>\n    '''\n    expected_output = ['First Data', 'Second Data']\n    assert extract_data_from_xml(test_xml, 'data') == expected_output\n\ndef test_extract_empty_xml():\n    test_xml = ''\n    expected_output = []\n    assert extract_data_from_xml(test_xml, 'data') == expected_output\n\ndef test_extract_no_matching_tag():\n    test_xml = '''\n    <root>\n        <info>Some Info</info>\n    </root>\n    '''\n    expected_output = []\n    assert extract_data_from_xml(test_xml, 'data') == expected_output\n\ndef test_extract_with_whitespace():\n    test_xml = '''\n    <root>\n        <data>\\n\\tFirst Data\\n</data>\n        <data>\\nSecond Data\\n</data>\n    </root>\n    '''\n    expected_output = ['First Data', 'Second Data']\n    assert extract_data_from_xml(test_xml, 'data') == expected_output\n\ndef test_extract_empty_tag():\n    test_xml = '''\n    <root>\n        <data></data>\n        <data>Empty Data</data>\n    </root>\n    '''\n    expected_output = ['Empty Data']\n    assert extract_data_from_xml(test_xml, 'data') == expected_output",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results0.jsonl"
}