{
  "metadata": {
    "prompt_id": "00000110",
    "row_id": 110,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to find the median of a list of numbers.",
  "solution_code": "def find_median(numbers):\n    \"\"\"\n    Returns the median of a list of numbers.\n    If the list has an odd number of elements, the median is the middle element.\n    If the list has an even number of elements, the median is the average of the two middle elements.\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    n = len(sorted_numbers)\n    mid = n // 2\n\n    if n % 2 == 0:\n        return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2\n    else:\n        return sorted_numbers[mid]",
  "test_code": "from solution import find_median\n\ndef test_find_median_single_element():\n    assert find_median([3]) == 3\n\ndef test_find_median_sorted_odd():\n    assert find_median([1, 3, 5]) == 3\n\ndef test_find_median_unsorted_odd():\n    assert find_median([5, 1, 3]) == 3\n\ndef test_find_median_sorted_even():\n    assert find_median([1, 2, 3, 4]) == 2.5\n\ndef test_find_median_unsorted_even():\n    assert find_median([3, 1, 2, 4]) == 2.5\n\ndef test_find_median_empty_list():\n    assert find_median([]) is None\n\ndef test_find_median_negatives():\n    assert find_median([-5, -4, -2, 1, 3]) == -2.0\n\ndef test_find_median_SINGLE_ELEMENT():\n    assert find_median([9]) == 9",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results0.jsonl"
}