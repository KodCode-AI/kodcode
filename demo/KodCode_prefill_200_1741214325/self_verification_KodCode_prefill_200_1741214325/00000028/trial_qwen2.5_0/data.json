{
  "metadata": {
    "prompt_id": "00000028",
    "row_id": 28,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to check if a given string is a valid double (a number with a decimal point).",
  "solution_code": "import re\n\ndef is_valid_double(s):\n    \"\"\"\n    Returns True if the input string is a valid double, otherwise False.\n    \"\"\"\n    # Regular expression for matching valid doubles\n    double_pattern = r'^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?$'\n    return bool(re.match(double_pattern, s))",
  "test_code": "import pytest\n\ndef test_is_valid_double():\n    assert is_valid_double(\"123.456\") == True\n    assert is_valid_double(\"-123.456\") == True\n    assert is_valid_double(\"+123.456\") == True\n    assert is_valid_double(\"123\") == True\n    assert is_valid_double(\".456\") == True\n    assert is_valid_double(\"123.\") == True\n    assert is_valid_double(\"123.456e-7\") == True\n    assert is_valid_double(\"123.456E7\") == True\n    assert is_valid_double(\"123.456e+7\") == True\n    assert is_valid_double(\"123.456E+7\") == True\n    assert is_valid_double(\"123.\") == True\n    assert is_valid_double(\".123\") == True\n    assert is_valid_double(\"123.123.123\") == False\n    assert is_valid_double(\"abc\") == False\n    assert is_valid_double(\"\") == False\n    assert is_valid_double(\"123e\") == False\n    assert is_valid_double(\"e123\") == False\n    assert is_valid_double(\"123e5.45\") == False\n    assert is_valid_double(\"--123.456\") == False\n    assert is_valid_double(\"-+123.456\") == False",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results0.jsonl"
}