{
  "metadata": {
    "prompt_id": "00000196",
    "row_id": 196,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to find the index of the substring within a given string using Rabin-Karp algorithm. The function should return the starting index of the first occurrence of the substring in the string. If the substring is not found, return -1.",
  "solution_code": "def rabin_karp_search(text, pattern, q=101):\n    \"\"\"\n    Returns the starting index of the first occurrence of the\n    pattern in the text using the Rabin-Karp algorithm.\n    If the pattern is not found, returns -1.\n    \"\"\"\n    if len(pattern) == 0 or len(text) < len(pattern):\n        return -1\n\n    d = 256  # Number of characters in the input alphabet\n    phash = 0  # hash value for pattern\n    thash = 0  # hash value for text\n    h = 1\n\n    # The value of h would be \"pow(d, M-1)%q\"\n    for i in range(len(pattern) - 1):\n        h = (h * d) % q\n\n    # Calculate the hash value of pattern and first window of text\n    for i in range(len(pattern)):\n        phash = (d * phash + ord(pattern[i])) % q\n        thash = (d * thash + ord(text[i])) % q\n\n    # Slide the pattern over text one by one\n    for i in range(len(text) - len(pattern) + 1):\n        # Check the hash values of current window of text and pattern\n        # If the hash values match then only check for characters one by one\n        if phash == thash:\n            # Check for characters one by one\n            for j in range(len(pattern)):\n                if text[i + j] != pattern[j]:\n                    break\n            else:\n                return i  # pattern found at index i\n\n        # Calculate hash value for next window of text: Remove leading digit,\n        # add trailing digit\n        if i < len(text) - len(pattern):\n            thash = (d * (thash - ord(text[i]) * h) + ord(text[i + len(pattern)])) % q\n\n            # We might get negative values of thash, converting it to positive\n            if thash < 0:\n                thash = thash + q\n\n    return -1  # pattern not found",
  "test_code": "def test_rabin_karp_search():\n    assert rabin_karp_search(\"ABCABCD\", \"ABCD\") == 3\n    assert rabin_karp_search(\"hello world\", \"world\") == 6\n    assert rabin_karp_search(\"a\", \"b\") == -1\n    assert rabin_karp_search(\"aaa\", \"aa\") == 0\n    assert rabin_karp_search(\"\", \"a\") == -1\n    assert rabin_karp_search(\"abc\", \"\") == 0\n    assert rabin_karp_search(\"abc\", \"a\") == 0\n    assert rabin_karp_search(\"abc\", \"abc\") == 0\n    # Test with large alphabet (lowercase and uppercase)\n    assert rabin_karp_search(\"The quick brown fox\", \"QUICK\") == 4\n\ndef test_rabin_karp_search_case_insensitive():\n    # Ensure search is case insensitive\n    assert rabin_karp_search(\"The quick Brown fox\", \"brown\") == 14",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results2.jsonl"
}