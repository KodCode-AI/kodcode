{
  "metadata": {
    "prompt_id": "00000196",
    "row_id": 196,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to find the index of the substring within a given string using Rabin-Karp algorithm. The function should return the starting index of the first occurrence of the substring in the string. If the substring is not found, return -1.",
  "solution_code": "def rabin_karp.search(substring, string):\n    \"\"\"\n    Returns the starting index of the first occurrence of substring in string using the Rabin-Karp algorithm.\n    If the substring is not found, returns -1.\n    \"\"\"\n    if len(substring) == 0 or len(string) == 0 or len(substring) > len(string):\n        return -1\n\n    pattern_length = len(substring)\n    text_length = len(string)\n    prime_num = 101\n    alphabet_length = 256\n    hash_pattern = 0\n    hash_text = 0\n    h = 1\n\n    # The value of h would be \"pow(alphabet_length, pattern_length-1)%prime_num\"\n    for i in range(pattern_length-1):\n        h = (h * alphabet_length) % prime_num\n\n    # Calculate the hash value of the pattern and first window of text\n    for i in range(pattern_length):\n        hash_pattern = (alphabet_length * hash_pattern + ord(substring[i])) % prime_num\n        hash_text = (alphabet_length * hash_text + ord(string[i])) % prime_num\n\n    # Slide the pattern over text one by one\n    for i in range(text_length - pattern_length + 1):\n        # Check the hash values of current window of text and pattern\n        # If the hash values match then only check for characters one by one\n        if hash_pattern == hash_text:\n            # Check for characters one by one\n            for j in range(pattern_length):\n                if string[i + j] != substring[j]:\n                    break\n            else:\n                return i  # pattern found at index i\n\n        # Calculate hash value for next window of text: Remove leading digit,\n        # add trailing digit\n        if i < text_length - pattern_length:\n            hash_text = (alphabet_length * (hash_text - ord(string[i]) * h) + ord(string[i + pattern_length])) % prime_num\n\n            # We might get negative values of hash_text, converting it to\n            # positive\n            if hash_text < 0:\n                hash_text = hash_text + prime_num\n\n    return -1  # pattern not found",
  "test_code": "def rabin_karp_search(substring, string):\n    return rabin_karp.search(substring, string)\n\ndef test_rabin_karp_with_matching_substring_at_start():\n    assert rabin_karp_search('test', 'testmatchingstring') == 0\n\ndef test_rabin_karp_with_matching_substring_in_middle():\n    assert rabin_karp_search('string', 'testmatchingstring') == 6\n\ndef test_rabin_karp_with_non_matching_substring():\n    assert rabin_karp_search('abc', 'teststring') == -1\n\ndef test_rabin_karp_with_empty_substring():\n    assert rabin_karp_search('', 'teststring') == -1\n\ndef test_rabin_karp_with_longer_substring_than_given_string():\n    assert rabin_karp_search('teststring', 'test') == -1",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results0.jsonl"
}