{
  "metadata": {
    "prompt_id": "00000196",
    "row_id": 196,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to find the index of the substring within a given string using Rabin-Karp algorithm. The function should return the starting index of the first occurrence of the substring in the string. If the substring is not found, return -1.",
  "solution_code": "def rabin_karp_search(text, pattern):\n    \"\"\"\n    Searches for a pattern in a given text using the Rabin-Karp algorithm.\n    Returns the first index of the pattern in the text, or -1 if not found.\n    \"\"\"\n    if len(pattern) == 0 or len(pattern) > len(text):\n        return -1\n\n    prime_num = 101\n    alphabet_len = 256\n    hash_pattern = 0\n    hash_text = 0\n    h = 1\n\n    # The value of h would be \"pow(alphabet_len, M-1)%prime_num\"\n    for i in range(len(pattern) - 1):\n        h = (h * alphabet_len) % prime_num\n\n    # Calculate the hash value of the pattern and first window of text\n    for i in range(len(pattern)):\n        hash_pattern = (alphabet_len * hash_pattern + ord(pattern[i])) % prime_num\n        hash_text = (alphabet_len * hash_text + ord(text[i])) % prime_num\n\n    # Slide the pattern over text one by one\n    for i in range(len(text) - len(pattern) + 1):\n        # Check the hash values of current window of text and pattern\n        # If the hash values match then only check for characters one by one\n        if hash_pattern == hash_text:\n            # Check for characters one by one\n            for j in range(len(pattern)):\n                if text[i + j] != pattern[j]:\n                    break\n            else:\n                # if pattern[0...M-1] = text[i, i+1, ...i+M-1]\n                return i\n\n        # Calculate hash value for next window of text: Remove leading digit,\n        # add trailing digit\n        if i < len(text) - len(pattern):\n            hash_text = (alphabet_len * (hash_text - ord(text[i]) * h) + ord(text[i + len(pattern)])) % prime_num\n\n            # We might get negative values of hash_text, converting it to\n            # positive\n            if hash_text < 0:\n                hash_text = hash_text + prime_num\n    return -1",
  "test_code": "def test_rabin_karp_search():\n    assert rabin_karp_search(\"hello world\", \"world\") == 6\n    assert rabin_karp_search(\"a quick brown fox jumps over the lazy dog\", \"quick\") == 2\n    assert rabin_karp_search(\"repeat repeat repeat\", \"repeat\") == 0\n    assert rabin_karp_search(\"pythonythonpython\", \"python\") == 6\n    assert rabin_karp_search(\"does not contain the pattern\", \"pattern\") == -1\n    assert rabin_karp_search(\"a random string with a\", \"a\") == 0\n    assert rabin_karp_search(\"the quick brown fox\", \"the quick brown fox jumps over the lazy dog\") == -1\n    assert rabin_karp_search(\"a\" * 10000, \"a\" * 100) == 0",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results1.jsonl"
}