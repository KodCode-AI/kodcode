{
  "metadata": {
    "prompt_id": "00000062",
    "row_id": 62,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to find the second maximum number in a list of integers. If the list does not contain at least two different numbers, return None.",
  "solution_code": "def second_maximum(numbers):\n    \"\"\"\n    Returns the second maximum number in the list. If there are not at least two different numbers, returns None.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    first_max = second_max = float('-inf')\n    \n    for num in numbers:\n        if num > first_max:\n            second_max = first_max\n            first_max = num\n        elif first_max > num > second_max:\n            second_max = num\n            \n    return second_max if second_max != float('-inf') else None",
  "test_code": "from solution import second_maximum\n\ndef test_second_maximum_with_multiple_different_numbers():\n    assert second_maximum([1, 3, 5, 7, 9]) == 7\n    assert second_maximum([10, 5, 10, 7, 10]) == 7\n\ndef test_second_maximum_with_one_unique_number():\n    assert second_maximum([5, 5, 5, 5]) == None\n\ndef test_second_maximum_with_no_numbers():\n    assert second_maximum([]) == None\n\ndef test_second_maximum_with_one_number():\n    assert second_maximum([5]) == None\n\ndef test_second_maximum_with_duplicates():\n    assert second_maximum([2, 2, 3, 5, 5]) == 3\n    assert second_maximum([1, 1, 4, 4, 10, 10]) == 4\n\ndef test_second_maximum_SINGLE_NUMBER():\n    assert second_maximum([9]) == None",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results0.jsonl"
}