{
  "metadata": {
    "prompt_id": "00000095",
    "row_id": 95,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to find all the root-to-leaf paths where the sum of all these path sums equals a target sum.",
  "solution_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_paths(root, target, current_sum=0, path=[], paths=[]):\n    \"\"\"\n    Finds all root-to-leaf paths in a binary tree where the sum of the path equals the target sum.\n\n    Args:\n    root (TreeNode): The root node of the binary tree.\n    target (int): The target sum of the paths.\n    current_sum (int): The current running sum of the path.\n    path (list): The current path of node values.\n    paths (list): A list of all paths that meet the criteria.\n\n    Returns:\n    list: A list of all root-to-leaf paths where the sum equals the target sum.\n    \"\"\"\n    current_sum += root.val\n    path.append(root.val)\n\n    if not root.left and not root.right:  # If leaf node\n        if current_sum == target:\n            paths.append(path.copy())\n        return paths\n\n    if root.left:\n        find_paths(root.left, target, current_sum, path, paths)\n    if root.right:\n        find_paths(root.right, target, current_sum, path, paths)\n\n    path.pop()  # Backtrack\n    return paths",
  "test_code": "def setup_tree():\n    root = TreeNode(5)\n    root.left = TreeNode(4, TreeNode(11, TreeNode(7), TreeNode(2)))\n    root.right = TreeNode(8, TreeNode(13), TreeNode(4, TreeNode(5), TreeNode(1)))\n    return root\n\ndef test_find_paths():\n    root = setup_tree()\n    target = 22\n    expected = [[5, 4, 11, 2], [5, 8, 4, 5]]\n    assert find_paths(root, target) == expected\n\ndef test_no_paths():\n    root = setup_tree()\n    target = 100  # No path in the tree has a sum of 100 or more\n    expected = []\n    assert find_paths(root, target) == expected\n\ndef test_single_node_tree():\n    root = TreeNode(5)\n    target = 5\n    expected = [[5]]\n    assert find_paths(root, target) == expected",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results0.jsonl"
}