{
  "metadata": {
    "prompt_id": "00000045",
    "row_id": 45,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to duplicate a linked list, including both the values of the nodes and the node's next pointers. Here, a duplicated linked list means creating a copy of the original linked list with new memory allocated for each node.",
  "solution_code": "class ListNode:\n    \"\"\"Simple linked list node class.\"\"\"\n    def __init__(self, value=0, next=None):\n        self.value = value\n        self.next = next\n\ndef duplicate_linked_list(head):\n    \"\"\"\n    Duplicates the linked list including both the node values and the next pointers.\n    \"\"\"\n    if head is None:\n        return None\n    \n    # Create a dummy node to help with the initial insertion\n    current_original = head\n    dummy = ListNode(0)\n    current_duplicated = dummy\n    \n    # Dictionary to store the mapping of original nodes to new nodes\n    mapping = {None: None}\n    \n    while current_original is not None:\n        new_node = ListNode(current_original.value)\n        current_duplicated.next = new_node\n        mapping[current_original] = new_node\n        \n        current_original = current_original.next\n        current_duplicated = current_duplicated.next\n    \n    # Set up the next pointers of the duplicated list\n    current_detailed = dummy.next\n    current_original = head\n    while current_detailed is not None:\n        current_detailed.next = mapping[current_original.next]\n        current_original = current_original.next\n        current_detailed = current_detailed.next\n    \n    return dummy.next",
  "test_code": "import pytest\n\n# Helper function to create linked list from a list of values\ndef create_linked_list(values):\n    if not values:\n        return None\n    head = ListNode(values[0])\n    current = head\n    for value in values[1:]:\n        current.next = ListNode(value)\n        current = current.next\n    return head\n\n# Helper function to convert a linked list to a list of values\ndef linked_list_to_list(node):\n    values = []\n    while node:\n        values.append(node.value)\n        node = node.next\n    return values\n\ndef test_duplicate_linked_list_empty_list():\n    assert linked_list_to_list(duplicate_linked_list(None)) == []\n\ndef test_duplicate_linked_list_simple_list():\n    head = create_linked_list([1, 2, 3])\n    duplicated_head = duplicate_linked_list(head)\n    assert linked_list_to_list(duplicated_head) == [1, 2, 3]\n\ndef test_duplicate_linked_list_complex_list():\n    head = create_linked_list([1, 2, 3, 4, 5])\n    duplicated_head = duplicate_linked_list(head)\n    assert linked_list_to_list(duplicated_head) == [1, 2, 3, 4, 5]\n\ndef test_duplicate_linked_list_same_elements():\n    head = create_linked_list([1, 1, 1, 1])\n    duplicated_head = duplicate_linked_list(head)\n    assert linked_list_to_list(duplicated_head) == [1, 1, 1, 1]\n\ndef test_duplicate_linked_list_with_none():\n    head = create_linked_list([None, 1, None, 2])\n    duplicated_head = duplicate_linked_list(head)\n    assert linked_list_to_list(duplicated_head) == [None, 1, None, 2]",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results0.jsonl"
}