{
  "metadata": {
    "prompt_id": "00000174",
    "row_id": 174,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to find the longest continuous substring that can be formed with at most two distinct characters in a given string. For example, for the input string \"aabacbebebe\", the function should return 7, as the longest substring that can be formed with at most two distinct characters is \"cbebebe\".",
  "solution_code": "def longest_substring_two_distinct(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of s that contains at most two distinct characters.\n    \"\"\"\n    if not s:\n        return 0\n\n    n = len(s)\n    max_length = 1\n    start, end = 0, 0\n    char_map = {}\n\n    while end < n:\n        if len(char_map) < 3:\n            char_map[s[end]] = char_map.get(s[end], 0) + 1\n            end += 1\n\n        if len(char_map) == 3:\n            max_length = max(max_length, end - start)\n            # Remove the earliest character to maintain at most 2 distinct characters\n            start_char = min(char_map, key=char_map.get)\n            char_map.pop(start_char)\n            start += char_map[start_char]\n            char_map[s[end - 1]] = 1\n\n        max_length = max(max_length, end - start)\n\n    return max_length",
  "test_code": "from solution import longest_substring_two_distinct\n\ndef test_longest_substring_two_distinct():\n    assert longest_substring_two_distinct(\"aabacbebebe\") == 7\n    assert longest_substring_two_distinct(\"abcabcabc\") == 3\n    assert longest_substring_two_distinct(\"abcd\") == 4\n    assert longest_substring_two_distinct(\"a\") == 1\n    assert longest_substring_two_distinct(\"\") == 0\n    assert longest_substring_two_distinct(\"aaabbaac\") == 6\n    assert longest_substring_two_distinct(\"zzzzzzz\") == 1\n    assert longest_substring_two_distinct(\"aabbxxbb\") == 6",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results0.jsonl"
}