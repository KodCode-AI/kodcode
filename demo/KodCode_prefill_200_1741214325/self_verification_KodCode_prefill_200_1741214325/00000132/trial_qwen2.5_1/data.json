{
  "metadata": {
    "prompt_id": "00000132",
    "row_id": 132,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to find the diameter of a binary tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree.",
  "solution_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef diameter_of_binary_tree(root: TreeNode) -> int:\n    \"\"\"\n    Returns the diameter of a binary tree.\n    \"\"\"\n    def height(node):\n        if not node:\n            return 0\n        left_height = height(node.left)\n        right_height = height(node.right)\n        nonlocal diameter\n        diameter = max(diameter, left_height + right_height)\n        return max(left_height, right_height) + 1\n\n    diameter = 0\n    height(root)\n    return diameter",
  "test_code": "from solution import diameter_of_binary_tree, TreeNode\n\ndef test_diameter_of_binary_tree():\n    # Constructing a tree\n    #       1\n    #      / \\\n    #     2   3\n    #    / \\\n    #   4   5\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    \n    assert diameter_of_binary_tree(root) == 3\n\n    # Constructing another tree\n    #          1\n    #         /\n    #        2\n    #       /\n    #      3\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.left.left = TreeNode(3)\n    \n    assert diameter_of_binary_tree(root) == 3\n\n    # Single node tree\n    root = TreeNode(1)\n    assert diameter_of_binary_tree(root) == 0\n\n    # Empty tree\n    assert diameter_of_binary_tree(None) == 0",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results1.jsonl"
}