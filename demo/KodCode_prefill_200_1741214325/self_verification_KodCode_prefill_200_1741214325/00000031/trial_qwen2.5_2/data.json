{
  "metadata": {
    "prompt_id": "00000031",
    "row_id": 31,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to find the closest element in an almost sorted array. An almost sorted array is defined as an array where each element is no more than two positions away from its sorted position in the array. For example, an array `[3, 1, 2, 4]` is an almost sorted array since each element is within one position of its sorted position.",
  "solution_code": "def closest_element_in_almost_sorted_array(arr):\n    \"\"\"\n    Find the closest element to the given element within the almost sorted array.\n    \n    :param arr: the almost sorted array\n    :return: the closest element to the one queried\n    \"\"\"\n    n = len(arr)\n    initial_index = arr.index(0) if 0 in arr else None\n    \n    if initial_index is not None:\n        closest = [arr[initial_index]]\n        for i in range(n):\n            if 0 <= (initial_index + i) < n and arr[initial_index + i] not in closest:\n                closest.append(arr[initial_index + i])\n            if 0 <= (initial_index - i) < n and arr[initial_index - i] not in closest:\n                closest.append(arr[initial_index - i])\n        return arr[closest.index(min(closest, key=lambda x: abs(x - 0)))]\n    else:\n        return None  # In case there is no zero in the array, this function returns None\n\n\nThe function `closest_element_in_almost_sorted_array` takes an almost sorted array as input and returns the closest element to zero within the defined limits. If the array does not contain `0`, it returns `None`.",
  "test_code": "import pytest\n\ndef test_closest_element_in_almost_sorted_array():\n    assert closest_element_in_almost_sorted_array([3, 1, 2, 4]) == 3\n    assert closest_element_in_almost_sorted_array([1, 2, 3, 0]) == 0\n    assert closest_element_in_almost_sorted_array([3, 0, 2, 4]) == 2\n    assert closest_element_in_almost_sorted_array([1, 3, 5, 0]) == 1\n    assert closest_element_in_almost_sorted_array([0, 3, 5, 7, 9]) == 0\n    assert closest_element_in_almost_sorted_array([2, 4, 6, 3]) is None\n\ndef test_edge_cases():\n    assert closest_element_in_almost_sorted_array([]) is None\n    assert closest_element_in_almost_sorted_array([0]) == 0\n    assert closest_element_in_almost_sorted_array([4, 2, 1, 0, 3]) == 2\n    assert closest_element_in_almost_sorted_array([1, 0, 3, 2, 4]) == 1\n\n\nIn the above test functions, we validate the function `closest_element_in_almost_sorted_array` with several almost sorted arrays to ensure it behaves as expected, including edge cases like empty arrays or arrays without `0`.",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results2.jsonl"
}