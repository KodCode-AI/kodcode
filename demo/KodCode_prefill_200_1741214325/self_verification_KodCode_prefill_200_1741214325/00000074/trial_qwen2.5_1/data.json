{
  "metadata": {
    "prompt_id": "00000074",
    "row_id": 74,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to check if a given number is perfect square or not. The function should take an integer as input and return True if the number is a perfect square, False otherwise.",
  "solution_code": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Checks if the given number is a perfect square.\n    \n    Arguments:\n    n -- an integer\n    \n    Returns:\n    True if n is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return n == root * root",
  "test_code": "import pytest\nfrom solution import is_perfect_square\n\ndef test_perfect_square_positive_numbers():\n    assert is_perfect_square(1) == True\n    assert is_perfect_square(4) == True\n    assert is_perfect_square(9) == True\n    assert is_perfect_square(16) == True\n    assert is_perfect_square(25) == True\n\ndef test_perfect_square_zero():\n    assert is_perfect_square(0) == True\n\ndef test_perfect_square_negative_numbers():\n    assert is_perfect_square(-1) == False\n    assert is_perfect_square(-4) == False\n    assert is_perfect_square(-9) == False\n\ndef test_perfect_square_non_square_numbers():\n    assert is_perfect_square(2) == False\n    assert is_perfect_square(3) == False\n    assert is_perfect_square(5) == False\n    assert is_perfect_square(6) == False\n    assert is_perfect_square(7) == False\n    assert is_perfect_square(8) == False\n    assert is_perfect_square(10) == False\n\ndef test_perfect_square_large_numbers():\n    assert is_perfect_square(2601) == True\n    assert is_perfect_square(44100) == True\n    assert is_perfect_square(15241383936) == True",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results1.jsonl"
}