{
  "metadata": {
    "prompt_id": "00000127",
    "row_id": 127,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to evaluate the value of the input infix expression. The function should take a single string argument representing the infix expression and return the corresponding value. The expression may contain integers, the operators `+`, `-`, `*`, and `/`, and parentheses `()`.",
  "solution_code": "def evaluate_infix_expression(expression):\n    \"\"\"\n    Evaluates the value of an infix expression.\n    \"\"\"\n    def apply_operator(operators, values):\n        operator = operators.pop()\n        right = values.pop()\n        left = values.pop()\n        if operator == '+':\n            values.append(left + right)\n        elif operator == '-':\n            values.append(left - right)\n        elif operator == '*':\n            values.append(left * right)\n        elif operator == '/':\n            values.append(left / right)\n\n    def greater_precedence(op1, op2):\n        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}\n        return precedence[op1] > precedence[op2]\n\n    operators = []\n    values = []\n    i = 0\n    while i < len(expression):\n        if expression[i] == ' ':\n            i += 1\n            continue\n        if expression[i].isdigit():\n            j = i\n            while j < len(expression) and expression[j].isdigit():\n                j += 1\n            values.append(int(expression[i:j]))\n            i = j\n        elif expression[i] in '+-*/':\n            while (operators and greater_precedence(operators[-1], expression[i])):\n                apply_operator(operators, values)\n            operators.append(expression[i])\n            i += 1\n        elif expression[i] == '(':\n            operators.append(expression[i])\n            i += 1\n        elif expression[i] == ')':\n            while operators[-1] != '(':\n                apply_operator(operators, values)\n            operators.pop()\n            i += 1\n    while operators:\n        apply_operator(operators, values)\n\n    return values[0]",
  "test_code": "from solution import evaluate_infix_expression\n\ndef test_infix_evaluation():\n    assert evaluate_infix_expression(\"12 + 22 * (44 - 23)\") == 330\n    assert evaluate_infix_expression(\"1 + 2 * 3\") == 7\n    assert evaluate_infix_expression(\"1 + 2 * 3 + 4\") == 9\n    assert evaluate_infix_expression(\"(1 + 2 + 3) * 4\") == 24\n    assert evaluate_infix_expression(\"10 * 2 - 3 + 5\") == 22\n    assert evaluate_infix_expression(\"100 * 2 / 2 / 5\") == 20\n    assert evaluate_infix_expression(\"(10 + 5) * 2\") == 30\n    assert evaluate_infix_expression(\"20 + (5 - 3) * 2\") == 24\n    assert evaluate_infix_expression(\"100 + 20 / 10\") == 120\n    assert evaluate_infix_expression(\"3 + 2 - 4 / 2\") == 2\n    assert evaluate_infix_expression(\"5 - (2 + 2)\") == 1\n    assert evaluate_infix_expression(\"(1 + 2) * (3 - 4)\") == -3",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results0.jsonl"
}