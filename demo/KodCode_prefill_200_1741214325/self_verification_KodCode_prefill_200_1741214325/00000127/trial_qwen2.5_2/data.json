{
  "metadata": {
    "prompt_id": "00000127",
    "row_id": 127,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to evaluate the value of the input infix expression. The function should take a single string argument representing the infix expression and return the corresponding value. The expression may contain integers, the operators `+`, `-`, `*`, and `/`, and parentheses `()`.",
  "solution_code": "def evaluate_infix_expression(expression: str) -> float:\n    \"\"\"\n    Evaluates an infix expression and returns the result.\n    \"\"\"\n    import math\n    import operator\n    \n    def apply_operator(operands, operators):\n        right = operands.pop()\n        left = operands.pop()\n        op = operators.pop()\n        oper = {\"+\": operator.add, \"-\": operator.sub, \"*\": operator.mul, \"/\": operator.truediv}\n        return operands.append(oper[op](left, right))\n\n    def greater_precedence(op1, op2):\n        precedences = {'+': 1, '-': 1, '*': 2, '/': 2}\n        return precedences[op1] > precedences[op2]\n\n    operators = []\n    operands = []\n    i = 0\n    while i < len(expression):\n        if expression[i] == ' ':\n            i += 1\n            continue\n        elif expression[i] in '0123456789.':\n            num = 0\n            while i < len(expression) and (expression[i] in '0123456789.' or expression[i] == ' '):\n                if expression[i] != ' ':\n                    num = (num * 10) + int(expression[i])\n                    i += 1\n                else:\n                    i += 1\n            operands.append(num)\n        elif expression[i] in '+-*/':\n            while (operators and operators[-1] != '(' and\n                   greater_precedence(operators[-1], expression[i])):\n                apply_operator(operands, operators)\n            operators.append(expression[i])\n            i += 1\n        elif expression[i] == '(':\n            operators.append(expression[i])\n            i += 1\n        elif expression[i] == ')':\n            while operators[-1] != '(':\n                apply_operator(operands, operators)\n            operators.pop()  # Remove the '(' from the stack\n            i += 1\n\n    while operators:\n        apply_operator(operands, operators)\n\n    return operands[-1]",
  "test_code": "from solution import evaluate_infix_expression\n\ndef test_evaluate_infix_expression():\n    assert evaluate_infix_expression(\"1 + 2 * 3\") == 7\n    assert evaluate_infix_expression(\"(1 + 5) * 2 - 3 / 4\") == 10.75\n    assert evaluate_infix_expression(\"2 + (3 - 1) * 4 / 2\") == 8.0\n    assert evaluate_infix_expression(\"9 - (7 + 3)\") == -3\n    assert evaluate_infix_expression(\"2 * 3 + 5 / 4\") == 7.75\n    assert evaluate_infix_expression(\"100 / 25 * 5\") == 20.0\n    assert evaluate_infix_expression(\"8 + 3 - 6 / 2\") == 8.0\n    assert evaluate_infix_expression(\"-2 + 1\") == -1.0\n\ndef test_decimal_operations():\n    assert evaluate_infix_expression(\"1.5 * 2.4\") == 3.6\n    assert evaluate_infix_expression(\"3.0 / 1.2\") == 2.5\n    assert evaluate_infix_expression(\"2.5 + 3.5\") == 6.0\n    assert evaluate_infix_expression(\"4.5 - 3.2\") == 1.3\n    assert evaluate_infix_expression(\"4.5 * 2.2\") == 9.9\n    assert evaluate_infix_expression(\"2.5 + 3.2 * 2\") == 9.9\n\ndef test_parenthesis():\n    assert evaluate_infix_expression(\"(1 + 2) * (3 + 4)\") == 21\n    assert evaluate_infix_expression(\"(((2) + (3) * (1)))\") == 5\n\ndef test_negative_numbers():\n    assert evaluate_infix_expression(\"-2 + 5 * 2\") == 8\n    assert evaluate_infix_expression(\"(-2 - 1) * 3\") == -9\n\ndef test\u908a\u754c\uff1a\n    # Test with minimal input\n    assert evaluate_infix_expression(\"2\") == 2\n    assert evaluate_infix_expression(\"-2\") == -2\n    # Test without any operators\n    assert evaluate_infix_expression(\"10\") == 10\n    # Test with an empty string\n    assert evaluate_infix_expression(\"\") == 0\n    # Test with an invalid string (contains non-operator and non-parentheses characters)\n    assert evaluate_infix_expression(\"2a\") == 2\n    assert evaluate_infix_expression(\"1 + (2 - 3 + -4)\") == -4\n    assert evaluate_infix_expression(\"1 + 2 - 3 * 4 / 5\") == 0.4",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results2.jsonl"
}