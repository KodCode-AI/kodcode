{
  "metadata": {
    "prompt_id": "00000005",
    "row_id": 5,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to convert a string to an integer. Consider edge cases where the string may contain leading or trailing whitespaces, and it might also contain invalid characters.",
  "solution_code": "def string_to_int(s: str) -> int:\n    \"\"\"\n    Converts a string to an integer, handling leading/trailing whitespaces and invalid characters.\n    Returns 0 for empty strings or strings with no valid digits.\n    \"\"\"\n    s = s.strip()\n    if not s:\n        return 0\n    \n    sign = 1\n    start = 0\n    if s[0] in ('-', '+'):\n        if s[0] == '-':\n            sign = -1\n        start = 1\n    \n    integer_value = 0\n    for i in range(start, len(s)):\n        if not s[i].isdigit():\n            break\n        integer_value = integer_value * 10 + int(s[i])\n    \n    if sign == -1:\n        integer_value *= -1\n    \n    return max(min(integer_value, 2**31 - 1), -2**31)",
  "test_code": "def test_string_to_int():\n    assert string_to_int(\"42\") == 42\n    assert string_to_int(\"   -42\") == -42\n    assert string_to_int(\"4193 with words\") == 4193\n    assert string_to_int(\"words and 987\") == 0\n    assert string_to_int(\"-91283472332\") == -2147483648 #\u8d85\u51faint\u8303\u56f4\u7684\u8d1f\u6570\u8f6c\u6362\u4e3a\u6700\u5c0fint\u503c\n    assert string_to_int(\"+1\") == 1\n    assert string_to_int(\"\") == 0\n    assert string_to_int(\"    \") == 0\n    assert string_to_int(\"+-2\") == 0 # \u6df7\u5408\u7b26\u53f7\uff0c\u5e94\u8be5\u89c6\u4e3a0\n    assert string_to_int(\"2147483647\") == 2147483647\n    assert string_to_int(\"-2147483648\") == -2147483648 # \u6309\u716732\u4f4d\u6574\u6570\u8303\u56f4\u8c03\u6574\n    assert string_to_int(\"2147483648\") == 2147483647 # \u8d85\u51fa\u8303\u56f4\u7684\u6b63\u6570\u8f6c\u6362\u4e3a\u6700\u5927int\u503c",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results0.jsonl"
}