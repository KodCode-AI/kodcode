{
  "metadata": {
    "prompt_id": "00000182",
    "row_id": 182,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to find all possible subsets of a set. You can return them as a list of lists.",
  "solution_code": "def find_subsets(s: set):\n    \"\"\"\n    Returns all possible subsets of a given set s as a list of lists.\n    \"\"\"\n    subsets = [[]]\n    for elem in s:\n        # For each element in the set, create new subsets by adding the element to existing subsets.\n        new_subsets = [subset + [elem] for subset in subsets]\n        subsets.extend(new_subsets)\n    return subsets",
  "test_code": "from solution import find_subsets\n\ndef test_find_subsets_empty_set():\n    assert find_subsets(set()) == [[]]\n\ndef test_find_subsets_one_element():\n    assert find_subsets({1}) == [[], [1]]\n\ndef test_find_subsets_two_elements():\n    assert find_subsets({1, 2}) == [[], [1], [2], [1, 2]]\n\ndef test_find_subsets_three_elements():\n    assert find_subsets({1, 2, 3}) == [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]\n\ndef test_find_subsets_four_elements():\n    s = {1, 2, 3, 4}\n    subsets = find_subsets(s)\n    assert len(subsets) == 16  # 2^n where n is the number of elements in the set\n    assert set(map(tuple, subsets)) == set(map(tuple, [\n        [], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3],\n        [4], [1, 4], [2, 4], [1, 2, 4], [3, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]\n    ]))",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results2.jsonl"
}