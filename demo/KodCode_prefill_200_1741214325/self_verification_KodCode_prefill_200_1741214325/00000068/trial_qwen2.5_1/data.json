{
  "metadata": {
    "prompt_id": "00000068",
    "row_id": 68,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to implement the quick sort algorithm, and explain the code line by line.",
  "solution_code": "def quick_sort(arr):\n    \"\"\"\n    Sorts an array using the Quick Sort algorithm.\n    \n    Quick Sort is a divide-and-conquer algorithm. It works by selecting a 'pivot'\n    element from the array and partitioning the other elements into two sub-arrays,\n    according to whether they are less than or greater than the pivot. The sub-arrays\n    are then sorted recursively.\n    \n    Parameters:\n    arr (list): The list of elements to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    \n    # Base case: if the array is empty or contains a single element, it is already sorted\n    if len(arr) <= 1:\n        return arr\n    \n    # Choose a pivot (here we choose the last element)\n    pivot = arr[-1]\n    \n    # Partition the array into three lists: less than, equal to, and greater than the pivot\n    less = [x for x in arr[:-1] if x < pivot]\n    greater = [x for x in arr[:-1] if x > pivot]\n    equal = [x for x in arr if x == pivot]\n    \n    # Recursively apply quick_sort to the less and greater lists and combine the results\n    return quick_sort(less) + equal + quick_sort(greater)",
  "test_code": "from solution import quick_sort\n\ndef test_quick_sort_empty():\n    assert quick_sort([]) == []\n\ndef test_quick_sort_single_element():\n    assert quick_sort([5]) == [5]\n\ndef test_quick_sort_positive_numbers():\n    assert quick_sort([3, 6, 8, 10, 1, 2, 1]) == [1, 1, 2, 3, 6, 8, 10]\n\ndef test_quick_sort_negative_numbers():\n    assert quick_sort([-3, -6, -8, -10, -1, -2, -1]) == [-10, -8, -6, -3, -2, -1, -1]\n\ndef test_quick_sort_mixed_numbers():\n    assert quick_sort([-3, 6, -8, 10, -1, 2, 1, 0]) == [-8, -3, -1, 0, 1, 2, 6, 10]\n\ndef test_quick_sort_with_duplicates():\n    assert quick_sort([8, 8, 8, 8, 5, 3, 2]) == [2, 3, 5, 8, 8, 8, 8]",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results1.jsonl"
}