{
  "metadata": {
    "prompt_id": "00000148",
    "row_id": 148,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to find the maximum depth of a binary tree. The function should return an integer representing the maximum depth.",
  "solution_code": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_depth(root):\n    \"\"\"\n    Return the max depth of a binary tree.\n    \"\"\"\n    if root is None:\n        return 0\n    else:\n        left_depth = max_depth(root.left)\n        right_depth = max_depth(root.right)\n        return max(left_depth, right_depth) + 1",
  "test_code": "from solution import max_depth, TreeNode\n\ndef create_tree(*values):\n    if not values:\n        return None\n    nodes = [None if val is None else TreeNode(val) for val in values]\n    kids = nodes[::-1]\n    root = kids.pop()\n    for node in nodes:\n        if node:\n            if kids:\n                node.left = kids.pop()\n            if kids:\n                node.right = kids.pop()\n    return root\n\n\ndef test_max_depth():\n    assert max_depth(None) == 0\n\ndef test_max_depth_single_node():\n    root = create_tree(1)\n    assert max_depth(root) == 1\n\ndef test_max_depth_complete_binary_tree():\n    #         1\n    #        / \\\n    #       2   3\n    #      / \\ / \\\n    #     4  5 6  7\n    #    / \\\n    #   8   9\n    root = create_tree(1, 2, 3, 4, 5, 6, 7, 8, 9)\n    assert max_depth(root) == 4\n\ndef test_max_depth_skewed_tree():\n    #         1\n    #          \\\n    #           2\n    #            \\\n    #             3\n    root = create_tree(1, None, 2, None, None, None, 3)\n    assert max_depth(root) == 3\n\ndef test_max_depth_unbalanced_tree():\n    #         1\n    #        /\n    #       2\n    #      /\n    #     3\n    #    /\n    #   4\n    root = create_tree(1, 2, None, 3, None, None, 4)\n    assert max_depth(root) == 4",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results0.jsonl"
}