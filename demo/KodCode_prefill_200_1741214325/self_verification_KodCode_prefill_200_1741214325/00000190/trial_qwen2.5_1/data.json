{
  "metadata": {
    "prompt_id": "00000190",
    "row_id": 190,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to determine if a number is a \"perfect square\" number. A \"perfect square\" number is an integer that is the square of an integer. For example, 16 is a perfect square because it is 4 squared.",
  "solution_code": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Checks if a given number n is a perfect square.\n    \n    A perfect square is an integer that is the square of an integer.\n    \"\"\"\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return n == root * root",
  "test_code": "import unittest\n\ndef is_perfect_square(n):\n    \"\"\"Checks if a given number n is a perfect square.\"\"\"\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return n == root * root\n\ndef test_is_perfect_square_positive_numbers():\n    assert is_perfect_square(1) == True\n    assert is_perfect_square(4) == True\n    assert is_perfect_square(16) == True\n    assert is_perfect_square(25) == True\n\ndef test_is_perfect_square_zero():\n    assert is_perfect_square(0) == True\n\ndef test_is_perfect_square_negative_numbers():\n    assert is_perfect_square(-1) == False\n    assert is_perfect_square(-16) == False\n\ndef test_is_perfect_square_non_perfect_squares():\n    assert is_perfect_square(2) == False\n    assert is_perfect_square(5) == False\n    assert is_perfect_square(10) == False\n    assert is_perfect_square(15) == False\n\ndef test_is_perfect_square_large_numbers():\n    assert is_perfect_square(1681) == True\n    assert is_perfect_square(676) == True\n    assert is_perfect_square(315186841) == True\n\nif __name__ == \"__main__\":\n    unittest.main()",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results1.jsonl"
}