{
  "metadata": {
    "prompt_id": "00000001",
    "row_id": 1,
    "seed_ids": [
      0
    ],
    "mode": "prefill"
  },
  "instruction": "Write a python function to sort an array using the selection sort algorithm.",
  "solution_code": "def selection_sort(arr):\n    \"\"\"\n    Sorts an array using the selection sort algorithm.\n    \n    Parameters:\n    arr (list): The list of elements to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        # Find the minimum element in remaining unsorted array\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        # Swap the found minimum element with the first element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr",
  "test_code": "from solution import selection_sort\n\ndef test_selection_sort_sorted_array():\n    assert selection_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_selection_sort_reversed_array():\n    assert selection_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n\ndef test_selection_sort_duplicate_elements():\n    assert selection_sort([4, 2, 2, 1, 3]) == [1, 2, 2, 3, 4]\n\ndef test_selection_sort_with_negative_numbers():\n    assert selection_sort([3, -1, -2, 6, 4]) == [-2, -1, 3, 4, 6]\n\ndef test_selection_sort_empty_list():\n    assert selection_sort([]) == []\n\ndef test_selection_sort_single_element_list():\n    assert selection_sort([5]) == [5]",
  "file_source": "KodCode_prefill_200_1741214325_sanitized_prepared_results0.jsonl"
}