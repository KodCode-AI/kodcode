{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to remove duplicate characters from a string, maintaining the original order of characters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef remove_duplicates(s):\n    \"\"\"\n    Returns a string with duplicate characters removed, while preserving the original order.\n    \"\"\"\n    seen = set()\n    result = []\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n    return ''.join(result)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import remove_duplicates\n\ndef test_remove_duplicates_empty_string():\n    assert remove_duplicates(\"\") == \"\"\n\ndef test_remove_duplicates_single_character():\n    assert remove_duplicates(\"a\") == \"a\"\n\ndef test_remove_duplicates_no_duplicates():\n    assert remove_duplicates(\"abcdef\") == \"abcdef\"\n\ndef test_remove_duplicates_with_duplicates():\n    assert remove_duplicates(\"aabbccdd\") == \"abcd\"\n    assert remove_duplicates(\"abcabcabc\") == \"abc\"\n    assert remove_duplicates(\"banana\") == \"ban\"\n    assert remove_duplicates(\"character\") == \"charte\"\n```"}], "metadata": {"prompt_id": "00000000", "row_id": 0, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to remove duplicate characters from a string, maintaining the original order of characters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort an array using the selection sort algorithm."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef selection_sort(arr):\n    \"\"\"\n    Sorts an array using the selection sort algorithm.\n    \n    Parameters:\n    arr (list): The list of elements to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        # Find the minimum element in remaining unsorted array\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        # Swap the found minimum element with the first element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import selection_sort\n\ndef test_selection_sort_sorted_array():\n    assert selection_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_selection_sort_reversed_array():\n    assert selection_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n\ndef test_selection_sort_duplicate_elements():\n    assert selection_sort([4, 2, 2, 1, 3]) == [1, 2, 2, 3, 4]\n\ndef test_selection_sort_with_negative_numbers():\n    assert selection_sort([3, -1, -2, 6, 4]) == [-2, -1, 3, 4, 6]\n\ndef test_selection_sort_empty_list():\n    assert selection_sort([]) == []\n\ndef test_selection_sort_single_element_list():\n    assert selection_sort([5]) == [5]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000001", "row_id": 1, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort an array using the selection sort algorithm."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum depth of a binary search tree (BST)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_depth_bst(root: TreeNode) -> int:\n    \"\"\"\n    Returns the maximum depth of a binary search tree.\n    \"\"\"\n    if root is None:\n        return 0\n    return 1 + max(max_depth_bst(root.left), max_depth_bst(root.right))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_depth_bst, TreeNode\n\ndef test_max_depth_bst_empty_tree():\n    assert max_depth_bst(None) == 0\n\ndef test_max_depth_bst_single_node():\n    root = TreeNode(1)\n    assert max_depth_bst(root) == 1\n\ndef test_max_depth_bst_balanced_tree():\n    root = TreeNode(2, TreeNode(1), TreeNode(3))\n    assert max_depth_bst(root) == 2\n\ndef test_max_depth_bst_unbalanced_tree_left():\n    root = TreeNode(2, TreeNode(1, TreeNode(0), None), TreeNode(3))\n    assert max_depth_bst(root) == 3\n\ndef test_max_depth_bst_unbalanced_tree_right():\n    root = TreeNode(2, TreeNode(1), TreeNode(3, None, TreeNode(4)))\n    assert max_depth_bst(root) == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000002", "row_id": 2, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum depth of a binary search tree (BST)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to merge two sorted lists into one sorted list using the merge function from the heapq module. Since heapq's merge function can be used to merge multiple iterables directly, your function should accept two lists, sort each individually if they are not already sorted, and then merge them using heapq.merge(). Ensure the output is a list, not a heapq.merge object."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nimport heapq\n\ndef merge_sorted_lists(lst1, lst2):\n    \"\"\"\n    Merges two sorted lists into one sorted list using the heapq.merge function.\n    \n    Parameters:\n    lst1 (list): First sorted list.\n    lst2 (list): Second sorted list.\n    \n    Returns:\n    list: Merged and sorted list.\n    \"\"\"\n    # Ensure both lists are sorted\n    sorted_lst1 = sorted(lst1) if lst1 else []\n    sorted_lst2 = sorted(lst2) if lst2 else []\n    # Merge the sorted lists using heapq.merge and convert the result to a list\n    merged_list = list(heapq.merge(sorted_lst1, sorted_lst2))\n    return merged_list\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\nfrom solution import merge_sorted_lists\nfrom heapq import merge as built_in_merge\n\ndef test_merge_sorted_lists_positive():\n    assert merge_sorted_lists([1, 3, 5], [2, 4, 6]) == list(built_in_merge([1, 3, 5], [2, 4, 6]))\n\ndef test_merge_empty_lists():\n    assert merge_sorted_lists([], []) == []\n    assert merge_sorted_lists([], [2, 4, 6]) == [2, 4, 6]\n    assert merge_sorted_lists([1, 3, 5], []) == [1, 3, 5]\n\ndef test_merge_with_common_elements():\n    assert merge_sorted_lists([1, 3, 5], [2, 4, 6]) == list(built_in_merge([1, 3, 5], [2, 4, 6]))\n    assert merge_sorted_lists([1, 3, 5], [5, 6]) == list(built_in_merge([1, 3, 5], [5, 6]))\n\ndef test_merge_mixed_sign_numbers():\n    assert merge_sorted_lists([-1, 0, 2], [-2, -2, 3]) == list(built_in_merge([-1, 0, 2], [-2, -2, 3]))\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000003", "row_id": 3, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to merge two sorted lists into one sorted list using the merge function from the heapq module. Since heapq's merge function can be used to merge multiple iterables directly, your function should accept two lists, sort each individually if they are not already sorted, and then merge them using heapq.merge(). Ensure the output is a list, not a heapq.merge object."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the sum of all numbers in a list using recursion."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_recursive(lst):\n    \"\"\"\n    Returns the sum of all numbers in a list using recursion.\n    \"\"\"\n    if not lst:\n        return 0\n    else:\n        return lst[0] + sum_recursive(lst[1:])\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_recursive\n\ndef test_sum_recursive_empty_list():\n    assert sum_recursive([]) == 0\n\ndef test_sum_recursive_single_element():\n    assert sum_recursive([5]) == 5\n\ndef test_sum_recursive_positive_numbers():\n    assert sum_recursive([1, 2, 3, 4, 5]) == 15\n\ndef test_sum_recursive_mixed_numbers():\n    assert sum_recursive([-1, 1, -2, 2, -3, 3]) == 0\n\ndef test_sum_recursive_large_list():\n    assert sum_recursive(range(1, 101)) == 5050\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000004", "row_id": 4, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the sum of all numbers in a list using recursion."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a string to an integer. Consider edge cases where the string may contain leading or trailing whitespaces, and it might also contain invalid characters."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef string_to_int(s: str) -> int:\n    \"\"\"\n    Converts a string to an integer, handling leading/trailing whitespaces and invalid characters.\n    Returns 0 for empty strings or strings with no valid digits.\n    \"\"\"\n    s = s.strip()\n    if not s:\n        return 0\n    \n    sign = 1\n    start = 0\n    if s[0] in ('-', '+'):\n        if s[0] == '-':\n            sign = -1\n        start = 1\n    \n    integer_value = 0\n    for i in range(start, len(s)):\n        if not s[i].isdigit():\n            break\n        integer_value = integer_value * 10 + int(s[i])\n    \n    if sign == -1:\n        integer_value *= -1\n    \n    return max(min(integer_value, 2**31 - 1), -2**31)\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef test_string_to_int():\n    assert string_to_int(\"42\") == 42\n    assert string_to_int(\"   -42\") == -42\n    assert string_to_int(\"4193 with words\") == 4193\n    assert string_to_int(\"words and 987\") == 0\n    assert string_to_int(\"-91283472332\") == -2147483648 #\u8d85\u51faint\u8303\u56f4\u7684\u8d1f\u6570\u8f6c\u6362\u4e3a\u6700\u5c0fint\u503c\n    assert string_to_int(\"+1\") == 1\n    assert string_to_int(\"\") == 0\n    assert string_to_int(\"    \") == 0\n    assert string_to_int(\"+-2\") == 0 # \u6df7\u5408\u7b26\u53f7\uff0c\u5e94\u8be5\u89c6\u4e3a0\n    assert string_to_int(\"2147483647\") == 2147483647\n    assert string_to_int(\"-2147483648\") == -2147483648 # \u6309\u716732\u4f4d\u6574\u6570\u8303\u56f4\u8c03\u6574\n    assert string_to_int(\"2147483648\") == 2147483647 # \u8d85\u51fa\u8303\u56f4\u7684\u6b63\u6570\u8f6c\u6362\u4e3a\u6700\u5927int\u503c\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000005", "row_id": 5, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a string to an integer. Consider edge cases where the string may contain leading or trailing whitespaces, and it might also contain invalid characters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to search for a specific word in a text file. The function should take two parameters: the file path and the word to search for. The function should return a list of line numbers where the word is found. If the word is not found, return an empty list. The function should ignore case sensitivity."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef search_word_in_file(file_path, search_word):\n    \"\"\"\n    Searches for a specific word in a text file and returns a list of line numbers where the word is found.\n    Ignores case sensitivity.\n    \"\"\"\n    result = []\n    try:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            for line_number, line in enumerate(file, start=1):\n                if search_word.lower() in line.lower():\n                    result.append(line_number)\n    except FileNotFoundError:\n        print(f\"The file at {file_path} was not found.\")\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_search_word_in_file():\n    import os\n\n    # Create a temporary file with some content\n    test_file_path = 'test_file.txt'\n    with open(test_file_path, 'w', encoding='utf-8') as file:\n        file.write(\"This is a test. This is only a test.\\n\")\n        file.write(\"Use a test for testing purposes.\\n\")\n        file.write(\"Testing is a common practice.\\n\")\n        file.write(\"This test is for testing functions.\\n\")\n\n    assert search_word_in_file(test_file_path, 'test') == [1, 2, 3, 4]\n    assert search_word_in_file(test_file_path, 'common') == [3]\n    assert search_word_in_file(test_file_path, 'notfound') == []\n    assert search_word_in_file(test_file_path, 'this') == [1, 2, 4]\n    assert search_word_in_file(test_file_path, 'use') == [2]\n\n    # Clean up\n    os.remove(test_file_path)\n\ndef test_search_word_case_insensitivity():\n    test_file_path = 'test_file.txt'\n    with open(test_file_path, 'w', encoding='utf-8') as file:\n        file.write(\"WORD is here, but not in capital letters.\\n\")\n        file.write(\"word is here, in lowercase.\\n\")\n\n    assert search_word_in_file(test_file_path, 'word') == [1, 2]\n    os.remove(test_file_path)\n\ndef test_file_not_found():\n    assert search_word_in_file('nonexistentfile.txt', 'anyword') == []\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000006", "row_id": 6, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to search for a specific word in a text file. The function should take two parameters: the file path and the word to search for. The function should return a list of line numbers where the word is found. If the word is not found, return an empty list. The function should ignore case sensitivity."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given set of cevablar can win a greedy game played with blueblocks, greenblocks, and redblocks)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef can_win_game(cevablar):\n    \"\"\"\n    Returns True if the given set of cevablar (list of integers representing the number of blueblocks, greenblocks, and redblocks) \n    can win a greedy game, otherwise returns False.\n    A player wins if they can make more moves than their opponent.\n    A move consists of picking either a blueblock (decrementing the blueblock count by 1), a greenblock (decrementing the greenblock count by 2), or a redblock (decrementing the redblock count by 3).\n    \"\"\"\n    blueblocks, greenblocks, redblocks = cevablar\n    total_blocks = blueblocks + greenblocks + redblocks\n    green_blocks twice = greenblocks * 2\n    red_blocks\u4e09\u6b21 = redblocks * 3\n    \n    # The opponent's initial number of moves would be the sum of all blocks\n    opponent_moves = total_blocks\n    \n    # If the sum of all blocks is less than or equal to the opponent's initial moves, the player can't win\n    if total_blocks <= opponent_moves:\n        return False\n    \n    # The player's additional moves would be the sum of all blocks minus 2\n    player_moves = total_blocks - 2\n    \n    # Calculate the total possible moves for the player considering the initial moves of the opponent\n    player_possible_moves = (player_moves + 2) // 3 * 3 + (player_moves % 3 + 2) // 2 * 2 + player_moves % 3\n    \n    # If the player's total possible moves are greater than or equal to the opponent's moves, the player can win\n    return player_possible_moves >= opponent_moves\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_can_win_game():\n    assert can_win_game([1, 1, 1]) == False\n    assert can_win_game([0, 2, 2]) == True\n    assert can_win_game([1, 2, 3]) == True\n    assert can_win_game([2, 1, 1]) == False\n    assert can_win_game([3, 3, 3]) == True\n\ndef test_can_win_game_with_zeroes():\n    assert can_win_game([0, 0, 0]) == False\n    assert can_win_game([0, 1, 1]) == True\n    assert can_win_game([1, 0, 1]) == True\n    assert can_win_game([1, 1, 0]) == True\n\ndef test_can_win_game_with_large_numbers():\n    assert can_win_game([5, 7, 9]) == True\n    assert can_win_game([10, 10, 10]) == True\n    assert can_win_game([20, 15, 10]) == True\n    assert can_win_game([50, 50, 50]) == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000007", "row_id": 7, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given set of cevablar can win a greedy game played with blueblocks, greenblocks, and redblocks)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum of two numbers without using if-else statements or comparison operators."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_without_if_else(a, b):\n    \"\"\"\n    Returns the maximum of two numbers without using if-else statements or comparison operators.\n    \"\"\"\n    return a + ((b - a) >> 31) & b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_without_if_else\n\ndef test_max_without_if_else():\n    assert max_without_if_else(1, 2) == 2\n    assert max_without_if_else(3, 1) == 3\n    assert max_without_if_else(-1, -2) == -1\n    assert max_without_if_else(-3, 1) == 1\n    assert max_without_if_else(3, -2) == 3\n    assert max_without_if_else(0, 0) == 0\n    assert max_without_if_else(-3, -3) == -3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000008", "row_id": 8, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum of two numbers without using if-else statements or comparison operators."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum product of a subarray within a given array of integers. The function should work for both positive and negative numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_product_subarray(nums):\n    \"\"\"\n    Finds the maximum product of a subarray within the given array of integers.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    max_product = min_product = result = nums[0]\n    \n    for num in nums[1:]:\n        temp_max = max(num, max_product * num, min_product * num)\n        min_product = min(num, max_product * num, min_product * num)\n        max_product = temp_max\n        \n        result = max(result, max_product)\n    \n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_product_subarray\n\ndef test_max_product_subarray_positive_numbers():\n    assert max_product_subarray([2, 3, -2, 4]) == 6\n    assert max_product_subarray([0, 2]) == 2\n\ndef test_max_product_subarray_negative_numbers():\n    assert max_product_subarray([-2, 0, -1]) == 0\n    assert max_product_subarray([-2, 3, -4]) == 24\n\ndef test_max_product_subarray_mixed_numbers():\n    assert max_product_subarray([0, -1, 2, -3, 5]) == 75\n    assert max_product_subarray([-1, -2, -3, 0]) == 6\n\ndef test_max_product_subarray_single_element():\n    assert max_product_subarray([2]) == 2\n\ndef test_max_product_subarray_empty_array():\n    assert max_product_subarray([]) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000011", "row_id": 11, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum product of a subarray within a given array of integers. The function should work for both positive and negative numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert the first and last characters of a string to uppercase and return the modified string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef convert_chars_to_uppercase(s):\n    \"\"\"\n    Converts the first and last characters of a string to uppercase and returns the modified string.\n    If the string is empty or has only one character, it returns the string as is but in uppercase.\n    \"\"\"\n    if len(s) == 0:\n        return s\n    elif len(s) == 1:\n        return s.upper()\n    else:\n        return s[0].upper() + s[1:-1] + s[-1].upper()\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_convert_chars_to_uppercase():\n    assert convert_chars_to_uppercase(\"\") == \"\"\n    assert convert_chars_to_uppercase(\"a\") == \"A\"\n    assert convert_chars_to_uppercase(\"abc\") == \"Abc\"\n    assert convert_chars_to_uppercase(\"abcd\") == \"Abcd\"\n    assert convert_chars_to_uppercase(\"aBcD\") == \"ABcD\"\n    assert convert_chars_to_uppercase(\"hello\") == \"Hhello\"\n    assert convert_chars_to_uppercase(\"WORLD\") == \"WWORLD\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000012", "row_id": 12, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert the first and last characters of a string to uppercase and return the modified string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to remove duplicates from an unsorted array and return a new sorted array with unique elements."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef remove_duplicates_and_sort(arr):\n    \"\"\"\n    Removes duplicates from an unsorted array and returns a new sorted array with unique elements.\n    \"\"\"\n    unique_elements = set(arr)\n    sorted_unique_array = sorted(unique_elements)\n    return sorted_unique_array\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_remove_duplicates_and_sort():\n    assert remove_duplicates_and_sort([4, 5, 2, 3, 4, 5, 2]) == [2, 3, 4, 5]\n    assert remove_duplicates_and_sort([10, 8, 10, 8]) == [8, 10]\n    assert remove_duplicates_and_sort([1, 1, 1, 1, 1]) == [1]\n    assert remove_duplicates_and_sort([]) == []\n    assert remove_duplicates_and_sort([7, 3, 9, 3, 5, 7, 9]) == [3, 5, 7, 9]\n```"}], "metadata": {"prompt_id": "00000013", "row_id": 13, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to remove duplicates from an unsorted array and return a new sorted array with unique elements."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to take a list of integers as input and return a new list where each element is the product of preceding elements. For example, given a list [1, 2, 3, 4], the output should be [1, 1, 2, 6] where the second element (2) is the product of the first element (1), and the third element (3) is the product of the first two elements (1*2), and so on."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef product_of_list_elements(lst):\n    \"\"\"\n    Returns a new list where each element is the product of preceding elements from the input list.\n    \"\"\"\n    if not lst:\n        return []\n    \n    result = []\n    product = 1\n    for num in lst:\n        result.append(product)\n        product *= num\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import product_of_list_elements\n\ndef test_product_of_list_elements_empty_list():\n    assert product_of_list_elements([]) == []\n\ndef test_product_of_list_elements_single_element():\n    assert product_of_list_elements([1]) == [1]\n\ndef test_product_of_list_elements_positive_numbers():\n    assert product_of_list_elements([1, 2, 3, 4]) == [1, 1, 2, 6]\n\ndef test_product_of_list_elements_mixed_sign_numbers():\n    assert product_of_list_elements([1, 2, -2, 4]) == [1, 1, -2, -4]\n\ndef test_product_of_list_elements_with_zero():\n    assert product_of_list_elements([1, 0, 2]) == [1, 0, 0]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000014", "row_id": 14, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to take a list of integers as input and return a new list where each element is the product of preceding elements. For example, given a list [1, 2, 3, 4], the output should be [1, 1, 2, 6] where the second element (2) is the product of the first element (1), and the third element (3) is the product of the first two elements (1*2), and so on."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count the number of unique characters, digits, and special characters in a given string. Count them separately and return as a tuple (unique_chars, digits, special_chars)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_chars_digits_special(s):\n    \"\"\"\n    Counts and returns the number of unique characters, digits, and special characters in a given string.\n    Returns a tuple in the form (unique_chars, digits, special_chars).\n    \"\"\"\n    char_set = set(s)\n    unique_chars = len(char_set)\n    \n    digits = sum(c.isdigit() for c in s)\n    special_chars = sum(not c.isalnum() and not c.isspace() for c in s)\n    \n    return (unique_chars, digits, special_chars)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_chars_digits_special\n\ndef test_count_chars_digits_special():\n    assert count_chars_digits_special(\"Hello, World! 123\") == (10, 3, 3)\n    assert count_chars_digits_special(\"1234567890!@#$%^&*()\") == (22, 10, 12)\n    assert count_chars_digits_special(\"AaBbCc123! \") == (6, 3, 2)\n    assert count_chars_digits_special(\"\") == (0, 0, 0)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000016", "row_id": 16, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count the number of unique characters, digits, and special characters in a given string. Count them separately and return as a tuple (unique_chars, digits, special_chars)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a Celsius temperature to Fahrenheit."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef celsius_to_fahrenheit(celsius):\n    \"\"\"\n    Converts a temperature from Celsius to Fahrenheit.\n    Formula used: F = (C * 9/5) + 32\n    \"\"\"\n    return (celsius * 9/5) + 32\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import celsius_to_fahrenheit\n\ndef test_celsius_to_fahrenheit_freezing_point():\n    assert celsius_to_fahrenheit(0) == 32\n\ndef test_celsius_to_fahrenheit_boiling_point():\n    assert celsius_to_fahrenheit(100) == 212\n\ndef test_celsius_to_fahrenheit_room_temperature():\n    assert celsius_to_fahrenheit(25) == 77\n\ndef test_celsius_to_fahrenheit_negative_temperature():\n    assert celsius_to_fahrenheit(-40) == -40\n\ndef test_celsius_to_fahrenheit_float_temperature():\n    assert celsius_to_fahrenheit(23.5) == 74.3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000017", "row_id": 17, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a Celsius temperature to Fahrenheit."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the minimal path sum from top to bottom in a binary tree. The minimal path is defined as the path that minimizes the sum of node values along the path from root to leaf."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef min_path_sum(root: TreeNode) -> int:\n    \"\"\"\n    Returns the minimal path sum from the root to any leaf node in the binary tree.\n    \"\"\"\n    if not root:\n        return 0\n    stack = [(root, root.val)]\n    min_sum = float('inf')\n    \n    while stack:\n        node, current_sum = stack.pop()\n        if not node.left and not node.right:\n            min_sum = min(min_sum, current_sum)\n        if node.left:\n            stack.append((node.left, current_sum + node.left.val))\n        if node.right:\n            stack.append((node.right, current_sum + node.right.val))\n    return min_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import min_path_sum, TreeNode\n\n# Constructing the tree:\n#       10\n#      /  \\\n#    10    20\n#   /  \\    \\\n# 2    20    13\ndef create_tree():\n    two = TreeNode(2)\n    twenty = TreeNode(20)\n    ten_left = TreeNode(10, two, twenty)\n    twenty_right = TreeNode(20)\n    root = TreeNode(10, ten_left, twenty_right)\n    twenty_right_right = TreeNode(13)\n    twenty_right.right = twenty_right_right\n    return root\n\ndef test_min_path_sum():\n    root = create_tree()\n    assert min_path_sum(root) == 42\n\ndef test_min_path_sum_single_node():\n    root = TreeNode(10)\n    assert min_path_sum(root) == 10\n\ndef test_min_path_sum_complex_tree():\n    two = TreeNode(2)\n    twenty_right_right = TreeNode(13)\n    twenty_right = TreeNode(20, None, twenty_right_right)\n    twenty_left = TreeNode(20)\n    ten_left = TreeNode(10, two, twenty_left)\n    root = TreeNode(10, ten_left, twenty_right)\n    assert min_path_sum(root) == 45\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000018", "row_id": 18, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the minimal path sum from top to bottom in a binary tree. The minimal path is defined as the path that minimizes the sum of node values along the path from root to leaf."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate and return the area of a triangle given its base and height."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef triangle_area(base, height):\n    \"\"\"\n    Returns the area of a triangle given its base and height.\n    \"\"\"\n    return 0.5 * base * height\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import triangle_area\n\ndef test_triangle_area_positive_numbers():\n    assert triangle_area(2, 3) == 3.0\n\ndef test_triangle_area_with_zero():\n    assert triangle_area(0, 5) == 0.0\n    assert triangle_area(5, 0) == 0.0\n\ndef test_triangle_area_negative_numbers():\n    assert triangle_area(-1, -1) == 0.5\n\ndef test_triangle_area_mixed_sign_numbers():\n    assert triangle_area(-1, 3) == -1.5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000020", "row_id": 20, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate and return the area of a triangle given its base and height."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the sum of all even numbers in a list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_of_even_numbers(numbers_list):\n    \"\"\"\n    Returns the sum of all even numbers in the given list.\n    \"\"\"\n    return sum(num for num in numbers_list if num % 2 == 0)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_of_even_numbers\n\ndef test_sum_of_even_numbers_empty_list():\n    assert sum_of_even_numbers([]) == 0\n\ndef test_sum_of_even_numbers_no_even_numbers():\n    assert sum_of_even_numbers([1, 3, 5, 7]) == 0\n\ndef test_sum_of_even_numbers_single_even_number():\n    assert sum_of_even_numbers([2]) == 2\n\ndef test_sum_of_even_numbers_multiple_even_numbers():\n    assert sum_of_even_numbers([2, 4, 6, 8]) == 20\n\ndef test_sum_of_even_numbers_mixed_numbers():\n    assert sum_of_even_numbers([1, 2, 3, 4, 5, 6]) == 12\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000021", "row_id": 21, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the sum of all even numbers in a list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the number of occurrences of a substring within a given string. The function should be case-insensitive."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_substring(string, substring):\n    \"\"\"\n    Returns the number of occurrences of a substring within a given string, case-insensitively.\n    \n    :param string: The main string where we want to search for occurrences.\n    :param substring: The substring we want to count within the main string.\n    :return: The count of occurrences of the substring within the string.\n    \"\"\"\n    return sum(1 for i in range(len(string)) if string[i:i+len(substring)].lower() == substring.lower())\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_count_substring_case_insensitive():\n    assert count_substring(\"Hello World\", \"world\") == 1\n    assert count_substring(\"Python Programming\", \"pro\") == 2\n    assert count_substring(\"Case Insensitive\", \"INSENSITIVE\") == 1\n    assert count_substring(\"Repeated Repeated Repeated\", \"repeated\") == 3\n\ndef test_count_substring_empty():\n    assert count_substring(\"\", \"a\") == 0\n    assert count_substring(\"a\", \"\") == 0\n\ndef test_count_substring_single_char():\n    assert count_substring(\"aaa\", \"a\") == 3\n    assert count_substring(\"aaa\", \"b\") == 0\n\ndef test_count_substring_overlapping():\n    assert count_substring(\"ABCabcABCabc\", \"abc\") == 2\n    assert count_substring(\"ABCabcABCabc\", \"ABCA\") == 1\n\ndef test_count_substring_no_occurrences():\n    assert count_substring(\"No Substring Here\", \"notexistent\") == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000022", "row_id": 22, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the number of occurrences of a substring within a given string. The function should be case-insensitive."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the number of paths from the top-left corner to the bottom-right corner of an M x N grid, where you can only move either down or right at any point in time. The function should handle cases where the grid size can be as large as 10x10 for efficiency. Use memoization to optimize the algorithm."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef num_paths_memo(m, n, memo={}):\n    \"\"\"\n    Returns the number of unique paths from the top-left corner to the bottom-right corner of an M x N grid.\n    Can only move down or right.\n    Uses memoization for optimization.\n    \"\"\"\n    if (m, n) in memo:\n        return memo[(m, n)]\n    if m == 1 or n == 1:\n        return 1\n    memo[(m, n)] = num_paths_memo(m - 1, n, memo) + num_paths_memo(m, n - 1, memo)\n    return memo[(m, n)]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import num_paths_memo\n\ndef test_num_paths_memo():\n    assert num_paths_memo(2, 3) == 3\n    assert num_paths_memo(3, 2) == 3\n    assert num_paths_memo(3, 3) == 6\n    assert num_paths_memo(1, 1) == 1\n    assert num_paths_memo(3, 7) == 28\n    assert num_paths_memo(5, 5) == 70\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000024", "row_id": 24, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the number of paths from the top-left corner to the bottom-right corner of an M x N grid, where you can only move either down or right at any point in time. The function should handle cases where the grid size can be as large as 10x10 for efficiency. Use memoization to optimize the algorithm."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum sum of a subarray of size k within an input array of integers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_sum_subarray_of_size_k(arr, k):\n    \"\"\"\n    Find the maximum sum of any subarray of size k within the input array of integers.\n    \n    :param arr: List[int] - The input array of integers.\n    :param k: int - The size of the subarray.\n    :return: int - The maximum sum of any subarray of size k.\n    \"\"\"\n    if not arr or k <= 0 or k > len(arr):\n        return None\n    \n    max_sum = window_sum = sum(arr[:k])\n    for i in range(len(arr) - k):\n        window_sum += arr[i + k] - arr[i]\n        max_sum = max(max_sum, window_sum)\n    \n    return max_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_sum_subarray_of_size_k\n\ndef test_max_sum_subarray_of_size_k():\n    assert max_sum_subarray_of_size_k([1, 4, 2, 10, 23, 3, 1, 0, 20], 4) == 39\n    assert max_sum_subarray_of_size_k([1, 4, -2, -10, 23, 3, 1, 0, 20], 4) == 27\n    assert max_sum_subarray_of_size_k([1, -4, 2, -10, 23, 3, 1, 0, 20], 4) == 26\n    assert max_sum_subarray_of_size_k([1, 4, -2, -10, 23, 3, 1, 0], 5) == 30\n    assert max_sum_subarray_of_size_k([1, 2, 3], 3) == 6\n    assert max_sum_subarray_of_size_k([1, 2, 3], 4) == None  # k > length of the array\n    assert max_sum_subarray_of_size_k([], 1) == None  # Empty array\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000025", "row_id": 25, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum sum of a subarray of size k within an input array of integers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the factorial of a number using recursion. The function should take an integer as an argument and return the factorial of that number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef factorial(n):\n    \"\"\"\n    Calculates the factorial of a number using recursion.\n    :param n: Integer, the number to calculate the factorial for.\n    :return: Integer, the factorial of n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import factorial\n\ndef test_factorial_zero():\n    assert factorial(0) == 1\n\ndef test_factorial_positive_numbers():\n    assert factorial(5) == 120\n    assert factorial(3) == 6\n\ndef test_factorial_one():\n    assert factorial(1) == 1\n\ndef test_factorial_large_number():\n    assert factorial(10) == 3628800\n\ndef test_factorial_negative_number():\n    try:\n        factorial(-1)\n    except ValueError:\n        pass\n    else:\n        assert False, \"Expected ValueError for negative input\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000026", "row_id": 26, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the factorial of a number using recursion. The function should take an integer as an argument and return the factorial of that number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the union of elements in two lists."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef union_of_lists(list1, list2):\n    \"\"\"\n    Returns the union of elements in two lists.\n    \n    Args:\n    list1: First input list.\n    list2: Second input list.\n    \n    Returns:\n    A list containing the union of the two input lists, without duplicates.\n    \"\"\"\n    return list(set(list1 + list2))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_union_of_lists():\n    assert union_of_lists([1, 2, 3], [3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert union_of_lists([1, 2, 2, 3], [3, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\n    assert union_of_lists([], [1, 2, 3]) == [1, 2, 3]\n    assert union_of_lists([1, 2, 3], []) == [1, 2, 3]\n    assert union_of_lists([], []) == []\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000027", "row_id": 27, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the union of elements in two lists."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given string is a valid double (a number with a decimal point)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport re\n\ndef is_valid_double(s):\n    \"\"\"\n    Returns True if the input string is a valid double, otherwise False.\n    \"\"\"\n    # Regular expression for matching valid doubles\n    double_pattern = r'^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?$'\n    return bool(re.match(double_pattern, s))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_is_valid_double():\n    assert is_valid_double(\"123.456\") == True\n    assert is_valid_double(\"-123.456\") == True\n    assert is_valid_double(\"+123.456\") == True\n    assert is_valid_double(\"123\") == True\n    assert is_valid_double(\".456\") == True\n    assert is_valid_double(\"123.\") == True\n    assert is_valid_double(\"123.456e-7\") == True\n    assert is_valid_double(\"123.456E7\") == True\n    assert is_valid_double(\"123.456e+7\") == True\n    assert is_valid_double(\"123.456E+7\") == True\n    assert is_valid_double(\"123.\") == True\n    assert is_valid_double(\".123\") == True\n    assert is_valid_double(\"123.123.123\") == False\n    assert is_valid_double(\"abc\") == False\n    assert is_valid_double(\"\") == False\n    assert is_valid_double(\"123e\") == False\n    assert is_valid_double(\"e123\") == False\n    assert is_valid_double(\"123e5.45\") == False\n    assert is_valid_double(\"--123.456\") == False\n    assert is_valid_double(\"-+123.456\") == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000028", "row_id": 28, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given string is a valid double (a number with a decimal point)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to implement a simple bubble sort algorithm."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef bubble_sort(arr):\n    \"\"\"\n    Sorts an array using the bubble sort algorithm.\n    \n    Parameters:\n    arr (list): The list of elements to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        # Create a flag that will allow the function to terminate early if there's nothing left to sort\n        already_sorted = True\n        for j in range(n - i - 1):\n            if arr[j] > arr[j + 1]:\n                # Swap if the element found is greater than the next element\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                already_sorted = False\n        # If there were no swaps during the last iteration, the array is already sorted, and we can terminate\n        if already_sorted:\n            break\n    return arr\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import bubble_sort\n\ndef test_bubble_sort_empty():\n    assert bubble_sort([]) == []\n\ndef test_bubble_sort_single_element():\n    assert bubble_sort([5]) == [5]\n\ndef test_bubble_sort_already_sorted():\n    assert bubble_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_bubble_sort_descending_order():\n    assert bubble_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n\ndef test_bubble_sort_random_numbers():\n    assert bubble_sort([34, 12, 24, 9, 5]) == [5, 9, 12, 24, 34]\n\ndef test_bubble_sort_with_duplicates():\n    assert bubble_sort([2, 4, 1, 2, 3]) == [1, 2, 2, 3, 4]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000029", "row_id": 29, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to implement a simple bubble sort algorithm."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine if all elements in an array are unique. Pseudocode is not necessary. Please include comments in your code to explain its functionality."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef are_elements_unique(arr):\n    \"\"\"\n    Check if all elements in the given array are unique.\n    \n    This function uses a set to track seen elements. If an element is encountered that\n    is already in the set, it means the element is not unique, and the function returns False.\n    Otherwise, if the loop completes without finding any duplicates, the function returns True.\n    \"\"\"\n    seen = set()\n    for element in arr:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import are_elements_unique\n\ndef test_are_elements_unique_all_unique():\n    assert are_elements_unique([1, 2, 3, 4, 5]) == True\n\ndef test_are_elements_unique_with_repeats():\n    assert are_elements_unique([1, 2, 3, 3, 4]) == False\n\ndef test_are_elements_unique_empty_array():\n    assert are_elements_unique([]) == True\n\ndef test_are_elements_unique_single_element():\n    assert are_elements_unique([1]) == True\n\ndef test_are_elements_unique_complex_data_types():\n    # Test with non-hashable elements\n    assert are_elements_unique([(1, 2), (1, 2), (3, 4)]) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000030", "row_id": 30, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine if all elements in an array are unique. Pseudocode is not necessary. Please include comments in your code to explain its functionality."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the closest element in an almost sorted array. An almost sorted array is defined as an array where each element is no more than two positions away from its sorted position in the array. For example, an array `[3, 1, 2, 4]` is an almost sorted array since each element is within one position of its sorted position."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef find_closest_element(arr, target):\n    \"\"\"\n    Given an almost sorted array and a target value, finds the index of the element \n    in the array which is closest to the target value. An almost sorted array is \n    defined as an array where each element is no more than two positions away from \n    its sorted position.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid - 2 >= 0 and arr[mid - 2] == target:\n            return mid - 2\n        elif mid + 2 < len(arr) and arr[mid + 2] == target:\n            return mid + 2\n        elif arr[mid - 1] == target:\n            return mid - 1\n        elif arr[mid + 1] == target:\n            return mid + 1\n        elif mid - 1 >= 0 and mid + 2 < len(arr):\n            if abs(target - arr[mid - 1]) < abs(target - arr[mid + 1]):\n                right = mid - 1\n            else:\n                left = mid + 1\n        elif mid - 1 >= 0:\n            left = mid + 1\n        elif mid + 2 < len(arr):\n            right = mid - 1\n        else:\n            break\n    # If the target is not found, return the closest value (based on index distance to target)\n    closest_diff = min(abs(arr[left] - target), abs(arr[right] - target))\n    return left if closest_diff == abs(arr[left] - target) else right\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef test_find_closest_element():\n    assert find_closest_element([2, 1, 3, 4, 0], 1) == 1\n    assert find_closest_element([10, 2, 1, 20, 30, 40], 21) == 3\n    assert find_closest_element([7, 8, 9, 5, 6, 4, 3, 2, 1], 5) == 3\n    assert find_closest_element([1, 3, 5, 7, 9, 11], 6) == 3\n    assert find_closest_element([1, 3, 2], 2) == 2\n    assert find_closest_element([0, 1, 2, 6, 5, 4], 3) == 2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000031", "row_id": 31, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the closest element in an almost sorted array. An almost sorted array is defined as an array where each element is no more than two positions away from its sorted position in the array. For example, an array `[3, 1, 2, 4]` is an almost sorted array since each element is within one position of its sorted position."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if the binary representation of a number is a palindrome."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_binary_palindrome(number):\n    \"\"\"\n    Returns True if the binary representation of the number is a palindrome, otherwise False.\n    \"\"\"\n    binary_str = bin(number)[2:]  # Convert number to binary and remove the '0b' prefix.\n    return binary_str == binary_str[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_is_binary_palindrome():\n    assert is_binary_palindrome(1) == True  # binary is '1'\n    assert is_binary_palindrome(2) == False # binary is '10'\n    assert is_binary_palindrome(3) == True  # binary is '11'\n    assert is_binary_palindrome(4) == False # binary is '100'\n    assert is_binary_palindrome(5) == True  # binary is '101'\n    assert is_binary_palindrome(6) == True  # binary is '110'\n    assert is_binary_palindrome(7) == False # binary is '111'\n    assert is_binary_palindrome(9) == True  # binary is '1001'\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000032", "row_id": 32, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if the binary representation of a number is a palindrome."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to print all prime numbers up to a given number. Also, include a simple test function with some test cases to ensure the correctness of the solution."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef print_primes(n):\n    \"\"\"\n    Prints all prime numbers up to a given number n.\n    \"\"\"\n    if n < 2:\n        return\n    \n    sieve = [True] * (n + 1)\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n + 1, x):\n                sieve[i] = False\n    \n    for x in range(2, n + 1):\n        if sieve[x]:\n            print(x, end=' ')\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import print_primes\n\ndef test_print_primes():\n    # Test with a known prime number up to 10\n    import io\n    import contextlib\n    with contextlib.redirect_stdout(io.StringIO()) as output:\n        print_primes(10)\n        result = output.getvalue().strip()\n    assert result == '2 3 5 7 ', f\"Expected '2 3 5 7 ', got '{result}'\"\n    \n    # Test with 2, which is the smallest prime number\n    with contextlib.redirect_stdout(io.StringIO()) as output:\n        print_primes(2)\n        result = output.getvalue().strip()\n    assert result == '2 ', f\"Expected '2 ', got '{result}'\"\n    \n    # Test with a larger number\n    with contextlib.redirect_stdout(io.StringIO()) as output:\n        print_primes(30)\n        result = output.getvalue().strip()\n    assert result == '2 3 5 7 11 13 17 19 23 29 ', f\"Expected '2 3 5 7 11 13 17 19 23 29 ', got '{result}'\"\n    \n    # Test with 1, which should print nothing\n    with contextlib.redirect_stdout(io.StringIO()) as output:\n        print_primes(1)\n        result = output.getvalue().strip()\n    assert result == '', f\"Expected '', got '{result}'\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000034", "row_id": 34, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to print all prime numbers up to a given number. Also, include a simple test function with some test cases to ensure the correctness of the solution."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to print all the prime numbers in a given range. What are the factors to consider while implementing this function?"}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef print_primes(start: int, end: int) -> None:\n    \"\"\"\n    This function prints all prime numbers in a given range from 'start' (inclusive) to 'end' (inclusive).\n\n    Parameters:\n    start (int): Start of the range (inclusive).\n    end (int): End of the range (inclusive).\n\n    Returns:\n    None\n    \"\"\"\n\n    def is_prime(num: int) -> bool:\n        \"\"\"Check if a given number is prime.\"\"\"\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for num in range(start, end + 1):\n        if is_prime(num):\n            print(num)\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef test_is_prime():\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(5) == True\n    assert is_prime(7) == True\n    assert is_prime(11) == True\n    assert is_prime(13) == True\n    assert is_prime(121) == False  # 121 is not a prime\n    assert is_prime(15485863) == True  # 15485863 is a large prime number\n\ndef test_print_primes():\n    # Using a non-printing output method to simulate the print behavior\n    output = []\n    original_print = print\n\n    def log(msg):\n        output.append(msg)\n\n    print = log\n\n    start = 1\n    end = 10\n    print_primes(start, end)\n    print = original_print\n\n    expected_output = [2, 3, 5, 7]\n    assert output == [2, 3, 5, 7]\n\n    # Testing with a larger range\n    start = 10\n    end = 20\n    print_primes(start, end)\n    expected_output = [11, 13, 17, 19]\n    assert output == [11, 13, 17, 19]\n\n    # Test with no primes in the range\n    start = 23\n    end = 29\n    print_primes(start, end)\n    expected_output = []\n    assert output == []\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000036", "row_id": 36, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to print all the prime numbers in a given range. What are the factors to consider while implementing this function?"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count the frequency of each character in a given string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef char_frequency(input_string):\n    \"\"\"\n    Returns a dictionary containing characters and their frequencies in the given string.\n    \"\"\"\n    frequency = {}\n    for char in input_string:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import char_frequency\n\ndef test_char_frequency_empty_string():\n    assert char_frequency(\"\") == {}\n\ndef test_char_frequency_single_character():\n    assert char_frequency(\"a\") == {'a': 1}\n\ndef test_char_frequency_multiple_characters():\n    assert char_frequency(\"aabbc\") == {'a': 2, 'b': 2, 'c': 1}\n\ndef test_char_frequency_with_spaces():\n    assert char_frequency(\"hello world\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n\ndef test_char_frequency_with_special_characters():\n    assert char_frequency(\"!!@#$%^&*()_+\") == {'!': 2, '@': 1, '#': 1, '$': 1, '%': 1, '^': 1, '&': 1, '*': 1, '(': 1, ')': 1, '_': 1, '+': 1}\n``` \n<|Test End|>"}], "metadata": {"prompt_id": "00000038", "row_id": 38, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count the frequency of each character in a given string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the most frequent element in a list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import Counter\n\ndef most_frequent(lst):\n    \"\"\"\n    Returns the most frequent element in the list. If there are multiple elements\n    with the same highest frequency, the first one encountered is returned.\n    \"\"\"\n    counter = Counter(lst)\n    most_common = counter.most_common(1)\n    if most_common:\n        return most_common[0][0]\n    return None\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import most_frequent\n\ndef test_most_frequent_single_mode():\n    assert most_frequent([1, 2, 2, 3, 3, 3]) == 3\n\ndef test_most_frequent_multiple_values():\n    assert most_frequent([1, 1, 2, 2, 3, 3]) == 1\n\ndef test_most_frequent_empty_list():\n    assert most_frequent([]) is None\n\ndef test_most_frequent_single_value():\n    assert most_frequent([5]) == 5\n\ndef test_most_frequent_with_duplicates():\n    assert most_frequent([4, 4, 4, 5, 5, 6, 6, 6, 6]) == 6\n\ndef test_most_frequent_with_negative_numbers():\n    assert most_frequent([-1, -1, 0, 1, 1, 1, 2]) == 1\n```"}], "metadata": {"prompt_id": "00000041", "row_id": 41, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the most frequent element in a list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the length of the longest increasing subsequence (LIS) in an array of integers. The function should take a list of integers as input and return the length of the LIS."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_increasing_subsequence(nums):\n    \"\"\"\n    Returns the length of the longest increasing subsequence in the given list of integers.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import longest_increasing_subsequence\n\ndef test_lis_empty():\n    assert longest_increasing_subsequence([]) == 0\n\ndef test_lis_single_element():\n    assert longest_increasing_subsequence([1]) == 1\n\ndef test_lis_constant_elements():\n    assert longest_increasing_subsequence([1, 1, 1, 1]) == 1\n\ndef test_lis_increasing_sequence():\n    assert longest_increasing_subsequence([1, 2, 3]) == 3\n\ndef test_lis_decreasing_sequence():\n    assert longest_increasing_subsequence([3, 2, 1]) == 1\n\ndef test_lis_random_sequence():\n    assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4\n\ndef test_lis_with_repeated_elements():\n    assert longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000043", "row_id": 43, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the length of the longest increasing subsequence (LIS) in an array of integers. The function should take a list of integers as input and return the length of the LIS."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the binomial coefficient for given number 'n' and 'k'. The binomial coefficient, often denoted as C(n, k), represents the number of ways to choose k items from a set of n distinct items. This function will be defined by the return statement: `return binomial_coefficient(n, k)`. The binomial coefficient can be calculated using the formula: C(n, k) = C(n-1, k-1) + C(n-1, k), with the base cases being C(n, 0) = C(n, n) = 1."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef binomial_coefficient(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k).\n    \n    Args:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n    \n    Returns:\n    int: The binomial coefficient.\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)\n```\n<|Solution End|>\n\n<|Test Begin|>``\n```python\nfrom solution import binomial_coefficient\n\ndef test_binomial_coefficient():\n    assert binomial_coefficient(5, 2) == 10\n    assert binomial_coefficient(10, 3) == 120\n    assert binomial_coefficient(0, 0) == 1\n    assert binomial_coefficient(6, 0) == 1\n    assert binomial_coefficient(6, 6) == 1\n    assert binomial_coefficient(6, 1) == 6\n    assert binomial_coefficient(6, 5) == 6\n    assert binomial_coefficient(3, 3) == 1\n    assert binomial_coefficient(3, 1) == 3\n    assert binomial_coefficient(3, 2) == 3\n    assert binomial_coefficient(7, 4) == 35\n    assert binomial_coefficient(9, 4) == 126\n    assert binomial_coefficient(12, 5) == 792\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000044", "row_id": 44, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the binomial coefficient for given number 'n' and 'k'. The binomial coefficient, often denoted as C(n, k), represents the number of ways to choose k items from a set of n distinct items. This function will be defined by the return statement: `return binomial_coefficient(n, k)`. The binomial coefficient can be calculated using the formula: C(n, k) = C(n-1, k-1) + C(n-1, k), with the base cases being C(n, 0) = C(n, n) = 1."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to duplicate a linked list, including both the values of the nodes and the node's next pointers. Here, a duplicated linked list means creating a copy of the original linked list with new memory allocated for each node."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass ListNode:\n    \"\"\"Simple linked list node class.\"\"\"\n    def __init__(self, value=0, next=None):\n        self.value = value\n        self.next = next\n\ndef duplicate_linked_list(head):\n    \"\"\"\n    Duplicates the linked list including both the node values and the next pointers.\n    \"\"\"\n    if head is None:\n        return None\n    \n    # Create a dummy node to help with the initial insertion\n    current_original = head\n    dummy = ListNode(0)\n    current_duplicated = dummy\n    \n    # Dictionary to store the mapping of original nodes to new nodes\n    mapping = {None: None}\n    \n    while current_original is not None:\n        new_node = ListNode(current_original.value)\n        current_duplicated.next = new_node\n        mapping[current_original] = new_node\n        \n        current_original = current_original.next\n        current_duplicated = current_duplicated.next\n    \n    # Set up the next pointers of the duplicated list\n    current_detailed = dummy.next\n    current_original = head\n    while current_detailed is not None:\n        current_detailed.next = mapping[current_original.next]\n        current_original = current_original.next\n        current_detailed = current_detailed.next\n    \n    return dummy.next\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\n# Helper function to create linked list from a list of values\ndef create_linked_list(values):\n    if not values:\n        return None\n    head = ListNode(values[0])\n    current = head\n    for value in values[1:]:\n        current.next = ListNode(value)\n        current = current.next\n    return head\n\n# Helper function to convert a linked list to a list of values\ndef linked_list_to_list(node):\n    values = []\n    while node:\n        values.append(node.value)\n        node = node.next\n    return values\n\ndef test_duplicate_linked_list_empty_list():\n    assert linked_list_to_list(duplicate_linked_list(None)) == []\n\ndef test_duplicate_linked_list_simple_list():\n    head = create_linked_list([1, 2, 3])\n    duplicated_head = duplicate_linked_list(head)\n    assert linked_list_to_list(duplicated_head) == [1, 2, 3]\n\ndef test_duplicate_linked_list_complex_list():\n    head = create_linked_list([1, 2, 3, 4, 5])\n    duplicated_head = duplicate_linked_list(head)\n    assert linked_list_to_list(duplicated_head) == [1, 2, 3, 4, 5]\n\ndef test_duplicate_linked_list_same_elements():\n    head = create_linked_list([1, 1, 1, 1])\n    duplicated_head = duplicate_linked_list(head)\n    assert linked_list_to_list(duplicated_head) == [1, 1, 1, 1]\n\ndef test_duplicate_linked_list_with_none():\n    head = create_linked_list([None, 1, None, 2])\n    duplicated_head = duplicate_linked_list(head)\n    assert linked_list_to_list(duplicated_head) == [None, 1, None, 2]\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000045", "row_id": 45, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to duplicate a linked list, including both the values of the nodes and the node's next pointers. Here, a duplicated linked list means creating a copy of the original linked list with new memory allocated for each node."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a number is a palindrome number. A palindrome number is a number that remains the same when its digits are reversed, such as 121 or 1331."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_palindrome_number(number: int) -> bool:\n    \"\"\"\n    Checks if a given number is a palindrome number.\n    \"\"\"\n    if number < 0:\n        return False\n    original_number = number\n    reversed_number = 0\n    while number > 0:\n        digit = number % 10\n        reversed_number = reversed_number * 10 + digit\n        number = number // 10\n    return original_number == reversed_number\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_palindrome_number\n\ndef test_palindrome_number_positive():\n    assert is_palindrome_number(121) == True\n\ndef test_palindrome_number_large():\n    assert is_palindrome_number(12321) == True\n\ndef test_palindrome_number_edge_case():\n    assert is_palindrome_number(1) == True\n\ndef test_palindrome_number_negative():\n    assert is_palindrome_number(-121) == False\n\ndef test_palindrome_number_non_palindrome():\n    assert is_palindrome_number(123) == False\n\ndef test_palindrome_number_zero():\n    assert is_palindrome_number(0) == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000046", "row_id": 46, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a number is a palindrome number. A palindrome number is a number that remains the same when its digits are reversed, such as 121 or 1331."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given string is palindrome or not."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the given string is a palindrome, False otherwise.\n    A palindrome is a word, phrase, or sequence that reads the same backward as forward.\n    \"\"\"\n    return s == s[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\\n```python\nfrom solution import is_palindrome\n\ndef test_is_palindrome_empty_string():\n    assert is_palindrome(\"\") == True\n\ndef test_is_palindrome_single_character():\n    assert is_palindrome(\"a\") == True\n\ndef test_is_palindrome_palindrome_words():\n    assert is_palindrome(\"racecar\") == True\n    assert is_palindrome(\"madam\") == True\n\ndef test_is_palindrome_non_palindrome_words():\n    assert is_palindrome(\"hello\") == False\n    assert is_palindrome(\"world\") == False\n\ndef test_is_palindrome_palindrome phrases():\n    assert is_palindrome(\"A man a plan a canal Panama\") == True\n\ndef test_is_palindrome_case_sensitive():\n    assert is_palindrome(\"No lemon, no melon\") == True\n\ndef test_is_palindrome_non_palindrome_phrases():\n    assert is_palindrome(\"This is not a palindrome\") == False\n```\\n<|Test End|>"}], "metadata": {"prompt_id": "00000047", "row_id": 47, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given string is palindrome or not."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the sum of two numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_two_numbers(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_two_numbers\n\ndef test_sum_two_positive_numbers():\n    assert sum_two_numbers(2, 3) == 5\n\ndef test_sum_with_zero():\n    assert sum_two_numbers(0, 5) == 5\n    assert sum_two_numbers(5, 0) == 5\n\ndef test_sum_negative_numbers():\n    assert sum_two_numbers(-1, -1) == -2\n\ndef test_sum_mixed_sign_numbers():\n    assert sum_two_numbers(-1, 3) == 2\n    assert sum_two_numbers(4, -4) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000049", "row_id": 49, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the sum of two numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given string is a valid palindrome. A valid palindrome is a string that reads the same forward and backward, ignoring cases and non-alphanumeric characters."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nimport re\n\ndef is_valid_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the string is a valid palindrome, False otherwise.\n    A valid palindrome reads the same forward and backward, ignoring cases and non-alphanumeric characters.\n    \"\"\"\n    # Remove non-alphanumeric characters and convert to lowercase\n    cleaned = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n    # Check if the cleaned string is equal to its reverse\n    return cleaned == cleaned[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\nfrom solution import is_valid_palindrome\n\ndef test_is_valid_palindrome():\n    assert is_valid_palindrome(\"A man, a plan, a canal: Panama\") == True\n    assert is_valid_palindrome(\"race a car\") == False\n    assert is_valid_palindrome(\" \") == True\n    assert is_valid_palindrome(\"No 'x' in Noxide\") == True\n    assert is_valid_palindrome(\"\") == True\n    assert is_valid_palindrome(\"12321\") == True\n    assert is_valid_palindrome(\"123a321\") == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000053", "row_id": 53, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given string is a valid palindrome. A valid palindrome is a string that reads the same forward and backward, ignoring cases and non-alphanumeric characters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum product of a contiguous subarray within a one-dimensional array of numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_product_subarray(nums):\n    \"\"\"\n    Finds the maximum product of a contiguous subarray within a one-dimensional array of numbers.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    max_product = min_product = result = nums[0]\n    \n    for num in nums[1:]:\n        candidates = (num, max_product * num, min_product * num)\n        max_product = max(candidates)\n        min_product = min(candidates)\n        result = max(result, max_product)\n        \n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import max_product_subarray\n\ndef test_max_product_subarray_positive():\n    assert max_product_subarray([2, 3, -2, 4]) == 6\n\ndef test_max_product_subarray_negative():\n    assert max_product_subarray([-2, 0, -1]) == 0\n\ndef test_max_product_subarray_large():\n    assert max_product_subarray([0, 2, -3, -1, 5]) == 15\n\ndef test_max_product_subarray_all_negative():\n    assert max_product_subarray([-1, -2, -3, -4]) == 24\n\ndef test_max_product_subarray_with_zero():\n    assert max_product_subarray([0, -1, 0, -2, 3, 0, -4]) == 12\n\ndef test_max_product_subarray_single_element():\n    assert max_product_subarray([-1]) == -1\n\ndef test_max_product_subarray_empty():\n    assert max_product_subarray([]) == 0\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000054", "row_id": 54, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum product of a contiguous subarray within a one-dimensional array of numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to identify if two string s1 and s2 are isomorphic. Two strings are isomorphic if the characters in s1 can be replaced to get s2. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_isomorphic(s1, s2):\n    \"\"\"\n    Returns True if s1 and s2 are isomorphic, otherwise False.\n    \"\"\"\n    if len(s1) != len(s2):\n        return False\n    \n    mapping_s1_to_s2 = {}\n    mapping_s2_to_s1 = {}\n    \n    for char_s1, char_s2 in zip(s1, s2):\n        if char_s1 in mapping_s1_to_s2:\n            if mapping_s1_to_s2[char_s1] != char_s2:\n                return False\n        else:\n            mapping_s1_to_s2[char_s1] = char_s2\n        \n        if char_s2 in mapping_s2_to_s1:\n            if mapping_s2_to_s1[char_s2] != char_s1:\n                return False\n        else:\n            mapping_s2_to_s1[char_s2] = char_s1\n    \n    return True\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_isomorphic\n\ndef test_isomorphic_strings():\n    assert is_isomorphic(\"egg\", \"add\") == True\n    assert is_isomorphic(\"foo\", \"bar\") == False\n    assert is_isomorphic(\"paper\", \"title\") == True\n    assert is_isomorphic(\"badc\", \"baba\") == False\n    assert is_isomorphic(\"abab\", \"baba\") == False\n    assert is_isomorphic(\"ab\", \"aa\") == False\n    assert is_isomorphic(\"a\", \"b\") == True\n    assert is_isomorphic(\"aa\", \"bb\") == True\n    assert is_isomorphic(\"paper\", \"exas\") == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000055", "row_id": 55, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to identify if two string s1 and s2 are isomorphic. Two strings are isomorphic if the characters in s1 can be replaced to get s2. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to add two numbers and return the result."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef add_numbers(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add_numbers\n\ndef test_add_positive_numbers():\n    assert add_numbers(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add_numbers(0, 5) == 5\n    assert add_numbers(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add_numbers(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add_numbers(-1, 3) == 2\n```"}], "metadata": {"prompt_id": "00000056", "row_id": 56, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to add two numbers and return the result."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count the number of uppercase letters in a given string. The function should also handle edge cases such as an empty string or a string with no uppercase letters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_uppercase_letters(s):\n    \"\"\"\n    Counts and returns the number of uppercase letters in the given string.\n    \"\"\"\n    return sum(1 for c in s if c.isupper())\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_count_uppercase_letters_empty_string():\n    assert count_uppercase_letters(\"\") == 0\n\ndef test_count_uppercase_letters_no_uppercase():\n    assert count_uppercase_letters(\"hello world\") == 0\n\ndef test_count_uppercase_letters_all_uppercase():\n    assert count_uppercase_letters(\"HELLO WORLD\") == 10\n\ndef test_count_uppercase_letters_mixed_case():\n    assert count_uppercase_letters(\"HeLlO WoRlD\") == 6\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000057", "row_id": 57, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count the number of uppercase letters in a given string. The function should also handle edge cases such as an empty string or a string with no uppercase letters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a given string. Here's a rough outline on how you might approach the problem:"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef reverse_string(s):\n    \"\"\"\n    Returns the reverse of the given string s.\n    \"\"\"\n    return s[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import reverse_string\n\ndef test_reverse_string_empty():\n    assert reverse_string(\"\") == \"\"\n\ndef test_reverse_string_single_char():\n    assert reverse_string(\"a\") == \"a\"\n\ndef test_reverse_string_multiple_chars():\n    assert reverse_string(\"hello\") == \"olleh\"\n\ndef test_reverse_string_with_spaces():\n    assert reverse_string(\"hello world\") == \"dlrow olleh\"\n\ndef test_reverse_string_punctuation():\n    assert reverse_string(\"hello, world!\") == \"!dlrow ,olleh\"\n```"}], "metadata": {"prompt_id": "00000058", "row_id": 58, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a given string. Here's a rough outline on how you might approach the problem:"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to filter out all the strings from a given list that contain a specific substring."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef filter_strings_with_substring(string_list, substring):\n    \"\"\"\n    Returns a list of strings from the input list that contain the specified substring.\n    \n    :param string_list: List of strings to be filtered\n    :param substring: Substring to filter the strings by\n    :return: List of strings containing the specified substring\n    \"\"\"\n    return [s for s in string_list if substring in s]\n```\n<|Solution End|>\n\n<|Test Begin|>    \n```python\ndef test_filter_strings_with_substring():\n    assert filter_strings_with_substring([\"apple\", \"banana\", \"grape\", \"berry\"], \"a\") == [\"apple\", \"banana\", \"berry\"]\n    assert filter_strings_with_substring([\"hello\", \"world\", \"hi\"], \"h\") == [\"hello\", \"hi\"]\n    assert filter_strings_with_substring([\"sun\", \"moon\", \"star\"], \"xyz\") == []\n    assert filter_strings_with_substring([\"python\", \"java\", \"ruby\"], \"py\") == [\"python\"]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000060", "row_id": 60, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to filter out all the strings from a given list that contain a specific substring."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the first occurrence of an element in an array that is not repeated (i.e., appears exactly once). If there is no such element, return -1."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_first_unique(arr):\n    \"\"\"\n    Returns the first index of the element that is not repeated in the array.\n    If no such element exists, returns -1.\n    \"\"\"\n    element_count = {}\n    \n    # Count the occurrences of each element\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Find the first element with a count of 1\n    for i, element in enumerate(arr):\n        if element_count[element] == 1:\n            return i\n    \n    return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_first_unique\n\ndef test_find_first_unique_with_repeated_elements():\n    assert find_first_unique([2, 3, 4, 3, 2]) == 2\n\ndef test_find_first_unique_with_unique_first_element():\n    assert find_first_unique([1, 2, 3, 4]) == 0\n\ndef test_find_first_unique_with_duplicates_only():\n    assert find_first_unique([1, 1, 2, 2]) == -1\n\ndef test_find_first_unique_with_empty_list():\n    assert find_first_unique([]) == -1\n\ndef test_find_first_unique_with_single_element():\n    assert find_first_unique([5]) == 0\n\ndef test_find_first_unique_with_mixed_occurrences():\n    assert find_first_unique([7, 8, 8, 9, 7]) == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000061", "row_id": 61, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the first occurrence of an element in an array that is not repeated (i.e., appears exactly once). If there is no such element, return -1."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the second maximum number in a list of integers. If the list does not contain at least two different numbers, return None."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef second_maximum(numbers):\n    \"\"\"\n    Returns the second maximum number in the list. If there are not at least two different numbers, returns None.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    first_max = second_max = float('-inf')\n    \n    for num in numbers:\n        if num > first_max:\n            second_max = first_max\n            first_max = num\n        elif first_max > num > second_max:\n            second_max = num\n            \n    return second_max if second_max != float('-inf') else None\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import second_maximum\n\ndef test_second_maximum_with_multiple_different_numbers():\n    assert second_maximum([1, 3, 5, 7, 9]) == 7\n    assert second_maximum([10, 5, 10, 7, 10]) == 7\n\ndef test_second_maximum_with_one_unique_number():\n    assert second_maximum([5, 5, 5, 5]) == None\n\ndef test_second_maximum_with_no_numbers():\n    assert second_maximum([]) == None\n\ndef test_second_maximum_with_one_number():\n    assert second_maximum([5]) == None\n\ndef test_second_maximum_with_duplicates():\n    assert second_maximum([2, 2, 3, 5, 5]) == 3\n    assert second_maximum([1, 1, 4, 4, 10, 10]) == 4\n\ndef test_second_maximum_SINGLE_NUMBER():\n    assert second_maximum([9]) == None\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000062", "row_id": 62, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the second maximum number in a list of integers. If the list does not contain at least two different numbers, return None."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a string into a list of words."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef string_to_list_of_words(s):\n    \"\"\"\n    Converts a given string into a list of words separated by spaces.\n    Args:\n    s (str): The input string.\n    \n    Returns:\n    list: A list of words from the input string.\n    \"\"\"\n    return s.split()\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import string_to_list_of_words\n\ndef test_string_to_list_of_words_basic():\n    assert string_to_list_of_words(\"hello world\") == [\"hello\", \"world\"]\n\ndef test_string_to_list_of_words_empty():\n    assert string_to_list_of_words(\"\") == []\n\ndef test_string_to_list_of_words_with_newline():\n    assert string_to_list_of_words(\"split\\nnextline\") == [\"split\", \"nextline\"]\n\ndef test_string_to_list_of_words_with_tabs():\n    assert string_to_list_of_words(\"one\\ttwo\\tthree\") == [\"one\", \"two\", \"three\"]\n\ndef test_string_to_list_of_words_with_punctuation():\n    assert string_to_list_of_words(\"end.of.sentences,are.detected.automatically\") == [\"end.of.sentences\", \"are.detected.automatically\"]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000063", "row_id": 63, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a string into a list of words."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to detect and remove duplicate elements from a list. Write a test case to validate your function."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef remove_duplicates(lst):\n    \"\"\"\n    Returns a new list with duplicates removed while preserving the original order.\n    \n    Args:\n    lst (list): The input list which may contain duplicate elements.\n    \n    Returns:\n    list: A list with unique elements.\n    \"\"\"\n    unique_elements = []\n    seen = set()\n    for item in lst:\n        if item not in seen:\n            unique_elements.append(item)\n            seen.add(item)\n    return unique_elements\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_remove_duplicates():\n    # Test with a list that has duplicates\n    assert remove_duplicates([1, 2, 2, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]\n    \n    # Test with a list that has no duplicates\n    assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    \n    # Test with an empty list\n    assert remove_duplicates([]) == []\n    \n    # Test with a list that has all the same elements\n    assert remove_duplicates([1, 1, 1, 1, 1]) == [1]\n    \n    # Test with a list that has strings with duplicates\n    assert remove_duplicates([\"apple\", \"banana\", \"apple\", \"orange\"]) == [\"apple\", \"banana\", \"orange\"]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000064", "row_id": 64, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to detect and remove duplicate elements from a list. Write a test case to validate your function."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the nth Fibonacci number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci(n):\n    \"\"\"\n    Returns the nth Fibonacci number.\n    \n    The Fibonacci sequence is defined by the following:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import fibonacci\n\ndef test_fibonacci_zero():\n    assert fibonacci(0) == 0\n\ndef test_fibonacci_one():\n    assert fibonacci(1) == 1\n\ndef test_fibonacci_two():\n    assert fibonacci(2) == 1\n\ndef test_fibonacci_five():\n    assert fibonacci(5) == 5\n\ndef test_fibonacci_ten():\n    assert fibonacci(10) == 55\n\ndef test_fibonacci_negative():\n    assert fibonacci(-1) == 0  # Assuming 0 as the base case for negative inputs\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000065", "row_id": 65, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the nth Fibonacci number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum sum of a subarray within an array of integers. This is the famous Kadane's algorithm problem."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_subarray_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers.\n    \n    Args:\n    arr (list of int): The input array.\n    \n    Returns:\n    int: The maximum subarray sum.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    max_current = max_global = arr[0]\n    for num in arr[1:]:\n        max_current = max(num, max_current + num)\n        if max_current > max_global:\n            max_global = max_current\n            \n    return max_global\n```\n<|Solution End|>\n\n<|Test Begin|>``\n```python\nfrom solution import max_subarray_sum\n\ndef test_max_subarray_sum_positive():\n    assert max_subarray_sum([1, 2, 3, -2, 5]) == 9\n\ndef test_max_subarray_sum_single_element():\n    assert max_subarray_sum([5]) == 5\n\ndef test_max_subarray_sum_all_negative():\n    assert max_subarray_sum([-1, -2, -3, -4]) == -1\n\ndef test_max_subarray_sum\u6df7\u5408\u6b63\u8d1f\u6570():\n    assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6\n\ndef test_max_subarray_sum_empty_array():\n    assert max_subarray_sum([]) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000066", "row_id": 66, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum sum of a subarray within an array of integers. This is the famous Kadane's algorithm problem."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the sum of all even numbers in a list. You should use list comprehension along with the `sum()` function to achieve this."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_of_evens(numbers):\n    \"\"\"\n    Returns the sum of all even numbers in the given list.\n    \n    Example:\n    - Given [1, 2, 3, 4, 5, 6], it should return 12 (2 + 4 + 6 = 12).\n    \"\"\"\n    return sum([num for num in numbers if num % 2 == 0])\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_of_evens\n\ndef test_sum_of_evens_empty_list():\n    assert sum_of_evens([]) == 0\n\ndef test_sum_of_evens_all_odd():\n    assert sum_of_evens([1, 3, 5, 7]) == 0\n\ndef test_sum_of_evens_all_even():\n    assert sum_of_evens([2, 4, 6, 8]) == 20\n\ndef test_sum_of_evens_mixed_numbers():\n    assert sum_of_evens([1, 2, 3, 4, 5, 6]) == 12\n\ndef test_sum_of_evens_with_zero():\n    assert sum_of_evens([0, 1, 2, 3, 4]) == 6\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000067", "row_id": 67, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the sum of all even numbers in a list. You should use list comprehension along with the `sum()` function to achieve this."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to implement the quick sort algorithm, and explain the code line by line."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef quick_sort(arr):\n    \"\"\"\n    Sorts an array using the quick sort algorithm.\n\n    Parameters:\n    arr (list): The list to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n    # Base case: if the array has 1 or 0 elements, it is already sorted\n    if len(arr) <= 1:\n        return arr\n\n    # Recursive case\n    else:\n        # Select the pivot element (here, the last element is chosen)\n        pivot = arr[-1]\n        # Partition the array into two halves based on the pivot\n        smaller_elements = [x for x in arr[:-1] if x <= pivot]\n        larger_elements = [x for x in arr[:-1] if x > pivot]\n\n        # Recursively sort the smaller and larger arrays, then combine with the pivot\n        return quick_sort(smaller_elements) + [pivot] + quick_sort(larger_elements)\n```\n\nLet's break down the code line by line:\n1. **Function Definition**: Defines a function named `quick_sort` that takes a list `arr` as its parameter.\n2. **Base Case**: Checks if the input array has 1 or 0 elements. If so, it returns the array as it is already sorted.\n3. **Recursive Case**: If the array has more than one element, continues to the next steps.\n   - **Pivot**: Chooses the last element of the array as the pivot.\n   - **Partitioning**: Uses list comprehensions to create two new lists: `smaller_elements` for elements less than or equal to the pivot, and `larger_elements` for elements greater than the pivot.\n   - **Recursive Sorting**: Recursively calls `quick_sort` on the `smaller_elements` and `larger_elements`, and combines the results with the pivot in between.\n4. **Return**: Returns the sorted list.\n\nThe pivot selection and partitioning are crucial steps in implementing the quick sort algorithm, and the recursion progresses until the base case is reached.\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import quick_sort\n\ndef test_quick_sort Albania():\n    assert quick_sort([3, 6, 8, 10, 1, 2, 1]) == [1, 1, 2, 3, 6, 8, 10]\n\ndef test_quick_sort_Burma():\n    assert quick_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n\ndef test_quick_sort_Canada():\n    assert quick_sort([10, 5, 2, 3, 7, 8, 1]) == [1, 2, 3, 5, 7, 8, 10]\n\ndef test_quick_sort_Denmark():\n    assert quick_sort([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]\n\ndef test_quick_sort_Empty_list():\n    assert quick_sort([]) == []\n\ndef test_quick_sort_One_element():\n    assert quick_sort([7]) == [7]\n\ndef test_quick_sort_Mix_of_positive_and_negative():\n    assert quick_sort([-5, -1, 5, 1]) == [-5, -1, 1, 5]\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000068", "row_id": 68, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to implement the quick sort algorithm, and explain the code line by line."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count the trailing zeros in a given number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_trailing_zeros(number):\n    \"\"\"\n    Counts and returns the number of trailing zeros in the given integer.\n    \"\"\"\n    if number == 0:\n        return 1  # Special case where the number itself is 0\n    count = 0\n    while number % 10 == 0:\n        count += 1\n        number //= 10\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_count_trailing_zeros():\n    assert count_trailing_zeros(1000) == 3\n    assert count_trailing_zeros(123000) == 3\n    assert count_trailing_zeros(123) == 0\n    assert count_trailing_zeros(0) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000069", "row_id": 69, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count the trailing zeros in a given number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the sum of all the multiples of 3 or 5 below 1000."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_of_multiples():\n    \"\"\"\n    Returns the sum of all the multiples of 3 or 5 below 1000.\n    \"\"\"\n    return sum(i for i in range(1000) if i % 3 == 0 or i % 5 == 0)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_of_multiples\n\ndef test_sum_of_multiples():\n    assert sum_of_multiples() == 233168\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000071", "row_id": 71, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the sum of all the multiples of 3 or 5 below 1000."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to perform a binary search on a sorted list of integers. The function should return the index of the target value if it is found, or -1 if it is not found. The list may not be empty."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef binary_search(arr, target):\n    \"\"\"\n    Performs a binary search on a sorted list of integers to find the index of the target value.\n    Returns the index of the target value if found, or -1 if the target is not present.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_binary_search():\n    assert binary_search([1, 2, 3, 4, 5], 3) == 2\n    assert binary_search([1, 2, 3, 4, 5], 6) == -1\n    assert binary_search([1], 1) == 0\n    assert binary_search([1, 3, 5], 3) == 1\n    assert binary_search([1, 3, 5], 2) == -1\n    assert binary_search([1, 2, 3, 4, 5, 5, 6], 5) == 4  # Duplicate values in the list\n    assert binary_search([1, 2, 3, 4, 5], -1) == -1  # Target not in the list\n    assert binary_search([10, 20, 30, 40, 50], 30) == 2  # Middle element\n    assert binary_search([10, 20, 30, 40, 50], 25) == -1  # Element not found in the middle range\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000073", "row_id": 73, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to perform a binary search on a sorted list of integers. The function should return the index of the target value if it is found, or -1 if it is not found. The list may not be empty."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given number is perfect square or not. The function should take an integer as input and return True if the number is a perfect square, False otherwise."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Check if a given number is a perfect square.\n    \"\"\"\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return n == root * root\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport math\nfrom solution import is_perfect_square\n\ndef test_is_perfect_square_positive():\n    assert is_perfect_square(1) == True\n    assert is_perfect_square(4) == True\n    assert is_perfect_square(25) == True\n\ndef test_is_perfect_square_negative():\n    assert is_perfect_square(-1) == False\n    assert is_perfect_square(-4) == False\n\ndef test_is_perfect_square_non_perfect_square():\n    assert is_perfect_square(2) == False\n    assert is_perfect_square(10) == False\n    assert is_perfect_square(15) == False\n\ndef test_is_perfect_square_large_number():\n    assert is_perfect_square(169) == True\n    assert is_perfect_square(180) == False\n\ndef test_is_perfect_square_zero():\n    assert is_perfect_square(0) == True\n\ndef test_is_perfect_square_one():\n    assert is_perfect_square(1) == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000074", "row_id": 74, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given number is perfect square or not. The function should take an integer as input and return True if the number is a perfect square, False otherwise."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a number is perfect or not."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_perfect_number(number):\n    \"\"\"\n    Returns True if the given number is a perfect number, False otherwise.\n    A perfect number is a positive integer that is equal to the sum of its proper divisors.\n    \"\"\"\n    if number <= 1:\n        return False\n    divisors_sum = sum([i for i in range(1, number) if number % i == 0])\n    return divisors_sum == number\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_perfect_number\n\ndef test_is_perfect_number_small():\n    assert not is_perfect_number(1)\n    assert is_perfect_number(6)  # 1 + 2 + 3 = 6\n    assert is_perfect_number(28) # 1 + 2 + 4 + 7 + 14 = 28\n\ndef test_is_perfect_number_large():\n    assert not is_perfect_number(100)\n    assert is_perfect_number(496) # 1 + 2 + 4 + 8 + 16 + 31 + 62 + 124 + 248 = 496\n    assert not is_perfect_number(8128) # This is a known perfect number, but not in the range where we expect false negatives\n\ndef test_is_perfect_number_negative():\n    assert not is_perfect_number(-28)\n\ndef test_is_perfect_number_zero():\n    assert not is_perfect_number(0)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000075", "row_id": 75, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a number is perfect or not."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the factorial of a number using a for loop."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef factorial(n):\n    \"\"\"\n    Calculates the factorial of a number using a for loop.\n    \n    Parameters:\n    n (int): The number to calculate the factorial of.\n    \n    Returns:\n    int: The factorial of the number n.\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import factorial\n\ndef test_factorial_zero():\n    assert factorial(0) == 1\n\ndef test_factorial_one():\n    assert factorial(1) == 1\n\ndef test_factorial_positive_numbers():\n    assert factorial(5) == 120\n    assert factorial(3) == 6\n    assert factorial(4) == 24\n\ndef test_factorial_large_number():\n    assert factorial(10) == 3628800\n```"}], "metadata": {"prompt_id": "00000076", "row_id": 76, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the factorial of a number using a for loop."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort a 2D list by its sublists in increasing order based on the sum of the elements of each sublist."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sort_2d_list(lst):\n    \"\"\"\n    Sorts a 2D list such that each sublist within the list is sorted in increasing order based on the sum of its elements.\n    \"\"\"\n    return sorted(lst, key=lambda x: sum(x))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_sort_2d_list():\n    test_list = [[3, 5, 2], [1, 2], [4, 1, 3]]\n    expected_result = [[1, 2], [3, 5, 2], [4, 1, 3]]\n    assert sort_2d_list(test_list) == expected_result\n\ndef test_sort_2d_list_with_zeros():\n    test_list = [[0, 0, 0], [1, 0], [0, 1]]\n    expected_result = [[0, 0, 0], [1, 0], [0, 1]]\n    assert sort_2d_list(test_list) == expected_result\n\ndef test_sort_2d_list_with_negative_numbers():\n    test_list = [[-1, -2, -3], [-2, -1], [-3, -1, -2]]\n    expected_result = [[-3, -2, -1], [-2, -1], [-3, -1, -2]]\n    assert sort_2d_list(test_list) == expected_result\n\ndef test_sort_2d_list_with_mixed_sign_numbers():\n    test_list = [[2, -1, -3], [0, 1], [-2, 3, 1]]\n    expected_result = [[0, 1], [2, -1, -3], [-2, 3, 1]]\n    assert sort_2d_list(test_list) == expected_result\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000077", "row_id": 77, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort a 2D list by its sublists in increasing order based on the sum of the elements of each sublist."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a string using slicing."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef reverse_string(s):\n    \"\"\"\n    Returns the reversed version of the input string using slicing.\n    \"\"\"\n    return s[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import reverse_string\n\ndef test_reverse_string_empty():\n    assert reverse_string(\"\") == \"\"\n\ndef test_reverse_string_single_char():\n    assert reverse_string(\"a\") == \"a\"\n\ndef test_reverse_string g\u00e9n\u00e9ral():\n    assert reverse_string(\"g\u00e9n\u00e9ral\") == \"la\u00eat\u00e9n\u00e9g\"\n\ndef test_reverse_string_punctuation():\n    assert reverse_string(\"hello, world!\") == \"!dlrow ,olleh\"\n\ndef test_reverse_string_with_spaces():\n    assert reverse_string(\"hello world\") == \"dlrow olleh\"\n```"}], "metadata": {"prompt_id": "00000079", "row_id": 79, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a string using slicing."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the number of unique elements in a given list. thoughts to solve: First, recognize that unique elements are those that appear only once in the list. One could iterate through the list and for each element, count how many times it appears. If it appears exactly once, it's a unique element. Another approach could be to use a data structure that inherently prevents duplicates, such as a set. A set only stores unique elements, so if a list is converted to a set, the length of the set will be the number of unique elements."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_unique_elements(lst):\n    \"\"\"\n    Returns the number of unique elements in the given list.\n    \"\"\"\n    unique_elements = set(lst)\n    return len(unique_elements)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_unique_elements\n\ndef test_count_unique_elements():\n    assert count_unique_elements([1, 2, 3, 2, 4]) == 4\n\ndef test_count_unique_elements_empty_list():\n    assert count_unique_elements([]) == 0\n\ndef test_count_unique_elements_duplicates():\n    assert count_unique_elements([1, 2, 2, 3, 3, 3]) == 2\n\ndef test_count_unique_elements_single_unique_element():\n    assert count_unique_elements([1, 1, 1, 1, 1]) == 1\n\ndef test_count_unique_elements_all_unique():\n    assert count_unique_elements([1, 2, 3, 4, 5]) == 5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000081", "row_id": 81, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the number of unique elements in a given list. thoughts to solve: First, recognize that unique elements are those that appear only once in the list. One could iterate through the list and for each element, count how many times it appears. If it appears exactly once, it's a unique element. Another approach could be to use a data structure that inherently prevents duplicates, such as a set. A set only stores unique elements, so if a list is converted to a set, the length of the set will be the number of unique elements."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find disjunctive normal form (DNF) of a 2-variable boolean formula using the sympy library. Provide a simple explanation of the function and its inputs/output."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nfrom sympy import symbols, And, Or, Not, simplify\n\ndef to_dnf(boolean_formula):\n    \"\"\"\n    Converts a 2-variable boolean formula to Disjunctive Normal Form (DNF).\n\n    Parameters:\n    boolean_formula (str): A string representing a 2-variable boolean formula, e.g., \"A and not B or B\"\n\n    Returns:\n    dnf (str): The DNF equivalent of the provided boolean formula\n    \"\"\"\n    # Define symbols\n    A, B = symbols('A B')\n    \n    # Parse the boolean formula using sympy\n    parsed_formula = eval(boolean_formula)\n    \n    # Simplify the formula\n    simplified_formula = simplify(parsed_formula)\n    \n    # Convert to DNF\n    dnf = simplify(simplified_formula, basic=True, force=True, deep=True)\n    \n    return str(dnf)\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import to_dnf\n\ndef test_to_dnf():\n    assert to_dnf(\"A and not B\") == \"A & ~B\"\n    assert to_dnf(\"A or B\") == \"(A | B)\"\n    assert to_dnf(\"not A and B\") == \"~A & B\"\n    assert to_dnf(\"A and B\") == \"(A & B)\"\n    assert to_dnf(\"not A or not B\") == \"(~A | ~B)\"\n    assert to_dnf(\"(A and not B) or (not A and B)\") == \"((A & ~B) | (~A & B))\"\n    assert to_dnf(\"(A or B) and (not A or B)\") == \"((A | B) & (~A | B))\"\n    assert to_dnf(\"(A and B) or (A and not B) or (not A and B)\") == \"((A & B) | (A & ~B) | (~A & B))\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000082", "row_id": 82, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find disjunctive normal form (DNF) of a 2-variable boolean formula using the sympy library. Provide a simple explanation of the function and its inputs/output."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the area of a circle given its radius."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport math\n\ndef calculate_circle_area(radius):\n    \"\"\"\n    Calculate the area of a circle given its radius.\n    \n    Args:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The area of the circle.\n    \"\"\"\n    return math.pi * (radius ** 2)\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\nfrom solution import calculate_circle_area\n\ndef test_area_with_radius_one():\n    assert abs(calculate_circle_area(1) - math.pi) < 1e-9\n\ndef test_area_with_radius_zero():\n    assert calculate_circle_area(0) == 0\n\ndef test_area_with_radius_negative():\n    assert abs(calculate_circle_area(-2) - (math.pi * (2 ** 2))) < 1e-9\n\ndef test_area_with_large_radius():\n    assert abs(calculate_circle_area(5) - (math.pi * (5 ** 2))) < 1e-9\n\ndef test_area_with_decimal_radius():\n    assert abs(calculate_circle_area(1.5) - (math.pi * (1.5 ** 2))) < 1e-9\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000083", "row_id": 83, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the area of a circle given its radius."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the number of times a specified value appears in a list. Here's a sample list: [1, 2, 3, 4, 5, 2, 2, 3]"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_value_occurrences(lst, value):\n    \"\"\"\n    Returns the number of times a specified value appears in a list.\n    \"\"\"\n    return lst.count(value)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_value_occurrences\n\ndef test_count_value_occurrences():\n    assert count_value_occurrences([1, 2, 3, 4, 5, 2, 2, 3], 2) == 3\n    assert count_value_occurrences([1, 1, 1, 1], 1) == 4\n    assert count_value_occurrences([1, 2, 3, 4, 5], 6) == 0\n    assert count_value_occurrences([], 1) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000084", "row_id": 84, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the number of times a specified value appears in a list. Here's a sample list: [1, 2, 3, 4, 5, 2, 2, 3]"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the minimum element in an array. You should also handle the case when the array is empty."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_minimum(arr):\n    \"\"\"\n    Returns the minimum element in the array `arr`.\n    If the array is empty, returns None.\n    \"\"\"\n    if not arr:\n        return None\n    return min(arr)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_minimum\n\ndef test_find_minimum_non_empty():\n    assert find_minimum([4, 2, 5, 1]) == 1\n    assert find_minimum([10]) == 10\n\ndef test_find_minimum_empty():\n    assert find_minimum([]) is None\n\ndef test_find_minimum_with_negative_numbers():\n    assert find_minimum([-3, -1, -2, -4]) == -4\n\ndef test_find_minimum_all_zeros():\n    assert find_minimum([0, 0, 0]) == 0\n\ndef test_find_minimum_mixed_signs():\n    assert find_minimum([-1, 0, 3, -2, 2]) == -2\n```"}], "metadata": {"prompt_id": "00000086", "row_id": 86, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the minimum element in an array. You should also handle the case when the array is empty."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse the order of characters in a string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef reverse_string(s):\n    \"\"\"\n    Reverses the order of characters in the input string.\n    \"\"\"\n    return s[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_reverse_string():\n    assert reverse_string(\"hello\") == \"olleh\"\n    \ndef test_reverse_empty_string():\n    assert reverse_string(\"\") == \"\"\n    \ndef test_reverse_single_character():\n    assert reverse_string(\"a\") == \"a\"\n    \ndef test_reverse_spaces():\n    assert reverse_string(\" a b c \") == \" c b a \"\n    \ndef test_reverse_punctuation():\n    assert reverse_string(\"hello, world!\") == \"!dlrow ,olleh\"\n```"}], "metadata": {"prompt_id": "00000087", "row_id": 87, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse the order of characters in a string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to filter out the words that contain a specific substring and return a list of words that do not contain that substring from a given list of words."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef filter_words_notContaining_substring(words, substring):\n    \"\"\"\n    Returns a list of words that do not contain the specified substring.\n    \n    :param words: List of words to filter.\n    :param substring: The substring to check for in the words.\n    :return: A list of words that do not contain the substring.\n    \"\"\"\n    return [word for word in words if substring not in word]\n```\n<|Solution End|>\n\n<|Test Begin|>    \n```python\ndef test_filter_words_notContaining_substring():\n    assert filter_words_notContaining_substring([\"hello\", \"world\", \"python\", \"alibaba\", \"cloud\"], \"o\") == [\"python\", \"cloud\"]\n    \ndef test_filter_words_notContaining_substring_empty_list():\n    assert filter_words_notContaining_substring([], \"x\") == []\n    \ndef test_filter_words_notContaining_substring_no_match():\n    assert filter_words_notContaining_substring([\"apple\", \"banana\", \"cherry\"], \"z\") == [\"apple\", \"banana\", \"cherry\"]\n    \ndef test_filter_words_notContaining_substring_with_substring():\n    assert filter_words_notContaining_substring([\"hello\", \"world\", \"homely\", \"como\"], \"lo\") == [\"hello\", \"homely\"]\n```    \n<|Test End|>"}], "metadata": {"prompt_id": "00000088", "row_id": 88, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to filter out the words that contain a specific substring and return a list of words that do not contain that substring from a given list of words."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the factorial of a given number. The function should take an integer as input and return the factorial of that integer. Additionally, the function should handle edge cases such as negative numbers and zero."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef factorial(n):\n    \"\"\"\n    Calculates the factorial of a given number n.\n    :param n: integer\n    :return: factorial of n\n    \n    Handles edge cases:\n    - Factorial of 0 is 1\n    - Factorial is not defined for negative numbers, returns None\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import factorial\n\ndef test_factorial_zero():\n    assert factorial(0) == 1\n\ndef test_factorial_positive_numbers():\n    assert factorial(5) == 120\n    assert factorial(3) == 6\n    assert factorial(1) == 1\n\ndef test_factorial_negative_numbers():\n    assert factorial(-1) is None\n\ndef test_factorial_large_number():\n    assert factorial(10) == 3628800\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000089", "row_id": 89, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the factorial of a given number. The function should take an integer as input and return the factorial of that integer. Additionally, the function should handle edge cases such as negative numbers and zero."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find all prime numbers within a given range (inclusive). The function should return a list of all prime numbers within the range."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_prime(n):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef find_primes_in_range(start, end):\n    \"\"\"\n    Returns a list of all prime numbers within the given range [start, end] inclusive.\n    \"\"\"\n    return [n for n in range(start, end + 1) if is_prime(n)]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_prime, find_primes_in_range\n\ndef test_is_prime():\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(4) == False\n    assert is_prime(5) == True\n    assert is_prime(6) == False\n    assert is_prime(29) == True\n    assert is_prime(30) == False\n\ndef test_find_primes_in_range():\n    assert find_primes_in_range(5, 15) == [5, 7, 11, 13]\n    assert find_primes_in_range(1, 10) == [2, 3, 5, 7]\n    assert find_primes_in_range(20, 22) == []\n    assert find_primes_in_range(14, 14) == []\n    assert find_primes_in_range(11, 11) == [11]\n    assert find_primes_in_range(10, 20) == [11, 13, 17, 19]\n\ndef test_find_primes_in_range_edge_cases():\n    assert find_primes_in_range(0, 5) == [2, 3, 5]\n    assert find_primes_in_range(5, 0) == []\n    assert find_primes_in_range(0, 0) == []\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000091", "row_id": 91, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find all prime numbers within a given range (inclusive). The function should return a list of all prime numbers within the range."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort a list of tuples by the second item in each tuple. The function should take a list of tuples as input and return the sorted list in ascending order based on the second item of each tuple. If the second item is the same for multiple tuples, the tuples should be sorted by their first item in ascending order."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sort_tuples_list(tuples_list):\n    \"\"\"\n    Sorts a list of tuples based on the second item in each tuple in ascending order.\n    If two tuples have the same second item, they are sorted by their first item in ascending order.\n    \"\"\"\n    return sorted(tuples_list, key=lambda x: (x[1], x[0]))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sort_tuples_list\n\ndef test_sort_tuples_list():\n    assert sort_tuples_list([(1, 3), (4, 1), (5, 2), (3, 2)]) == [(4, 1), (3, 2), (5, 2), (1, 3)]\n    assert sort_tuples_list([(2, 5), (3, 4), (1, 4), (4, 5)]) == [(1, 4), (3, 4), (2, 5), (4, 5)]\n    assert sort_tuples_list([(2, 2), (3, 2), (1, 2)]) == [(1, 2), (2, 2), (3, 2)]\n    assert sort_tuples_list([(4, 10), (5, 2), (1, 3)]) == [(1, 3), (5, 2), (4, 10)]\n    assert sort_tuples_list([]) == []\n    assert sort_tuples_list([(1, 1)]) == [(1, 1)]\n``` \n<|Test End|>"}], "metadata": {"prompt_id": "00000092", "row_id": 92, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort a list of tuples by the second item in each tuple. The function should take a list of tuples as input and return the sorted list in ascending order based on the second item of each tuple. If the second item is the same for multiple tuples, the tuples should be sorted by their first item in ascending order."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the smallest number in an array of integers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_smallest_number(arr):\n    \"\"\"\n    Returns the smallest number in an array of integers.\n    If the array is empty, returns None.\n    \"\"\"\n    if not arr:\n        return None\n    min_num = arr[0]\n    for num in arr[1:]:\n        if num < min_num:\n            min_num = num\n    return min_num\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_smallest_number\n\ndef test_find_smallest_number_with_positive_numbers():\n    assert find_smallest_number([3, 1, 4, 1, 5, 9]) == 1\n\ndef test_find_smallest_number_with_negative_numbers():\n    assert find_smallest_number([-3, -1, -4, -1, -5, -9]) == -9\n\ndef test_find_smallest_number_with_mixed_sign_numbers():\n    assert find_smallest_number([-1, 3, -4, 1, 5, -9]) == -9\n\ndef test_find_smallest_number_with_only_negative_numbers():\n    assert find_smallest_number([-2, -3, -1]) == -3\n\ndef test_find_smallest_number_with_empty_array():\n    assert find_smallest_number([]) == None\n```"}], "metadata": {"prompt_id": "00000093", "row_id": 93, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the smallest number in an array of integers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find all the root-to-leaf paths where the sum of all these path sums equals a target sum."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_paths(root, target, current_sum=0, path=[], paths=[]):\n    \"\"\"\n    Finds all root-to-leaf paths in a binary tree where the sum of the path equals the target sum.\n\n    Args:\n    root (TreeNode): The root node of the binary tree.\n    target (int): The target sum of the paths.\n    current_sum (int): The current running sum of the path.\n    path (list): The current path of node values.\n    paths (list): A list of all paths that meet the criteria.\n\n    Returns:\n    list: A list of all root-to-leaf paths where the sum equals the target sum.\n    \"\"\"\n    current_sum += root.val\n    path.append(root.val)\n\n    if not root.left and not root.right:  # If leaf node\n        if current_sum == target:\n            paths.append(path.copy())\n        return paths\n\n    if root.left:\n        find_paths(root.left, target, current_sum, path, paths)\n    if root.right:\n        find_paths(root.right, target, current_sum, path, paths)\n\n    path.pop()  # Backtrack\n    return paths\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef setup_tree():\n    root = TreeNode(5)\n    root.left = TreeNode(4, TreeNode(11, TreeNode(7), TreeNode(2)))\n    root.right = TreeNode(8, TreeNode(13), TreeNode(4, TreeNode(5), TreeNode(1)))\n    return root\n\ndef test_find_paths():\n    root = setup_tree()\n    target = 22\n    expected = [[5, 4, 11, 2], [5, 8, 4, 5]]\n    assert find_paths(root, target) == expected\n\ndef test_no_paths():\n    root = setup_tree()\n    target = 100  # No path in the tree has a sum of 100 or more\n    expected = []\n    assert find_paths(root, target) == expected\n\ndef test_single_node_tree():\n    root = TreeNode(5)\n    target = 5\n    expected = [[5]]\n    assert find_paths(root, target) == expected\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000095", "row_id": 95, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find all the root-to-leaf paths where the sum of all these path sums equals a target sum."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to evaluate an arithmetic expression given as a string. The expression includes integers, the operators '+', '-', '*', and '(', ')', and has at least one operator."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef evaluate_expression(expression: str) -> int:\n    \"\"\"\n    Evaluates an arithmetic expression given as a string.\n    The expression includes integers, the operators '+', '-', '*', and '(', ')'.\n    \n    :param expression: str, the arithmetic expression to evaluate\n    :return: int, the result of the evaluation\n    \"\"\"\n    def compute(operands, operators):\n        right = operands.pop()\n        left = operands.pop()\n        op = operators.pop()\n        if op == '+':\n            operands.append(left + right)\n        elif op == '-':\n            operands.append(left - right)\n        elif op == '*':\n            operands.append(left * right)\n\n    def parse(expression):\n        num = 0\n        operands, operators = [], []\n        i, n = 0, len(expression)\n        while i < n:\n            if expression[i].isdigit():\n                num = num * 10 + int(expression[i])\n                i += 1\n                if i == n or not expression[i].isdigit():\n                    operands.append(num)\n                    num = 0\n            elif expression[i] in '+-*/':\n                while operators and operators[-1] != '(' and (expression[i] in '+-' or (expression[i] in '*/' and operators[-1] in '*/')):\n                    compute(operands, operators)\n                operators.append(expression[i])\n                i += 1\n            elif expression[i] == '(':\n                operators.append(expression[i])\n                i += 1\n            elif expression[i] == ')':\n                while operators[-1] != '(':\n                    compute(operands, operators)\n                operators.pop()  # Remove '(' from stack\n                i += 1\n        while operators:\n            compute(operands, operators)\n        return operands[-1]\n\n    return parse(expression)\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef test_evaluate_expression():\n    assert evaluate_expression(\"3+2*2\") == 7\n    assert evaluate_expression(\" 3/2 \") == 1\n    assert evaluate_expression(\" 3+5 / 2 \") == 5\n    assert evaluate_expression(\"1 + 2 * 3 / 4 - 5\") == -2\n    assert evaluate_expression(\"(2+6)* 4 - 10 / 2\") == 14\n    assert evaluate_expression(\"-2+1\") == -1\n    assert evaluate_expression(\"2*(5+5*2)/3+(6/2+8)\") == 21\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000096", "row_id": 96, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to evaluate an arithmetic expression given as a string. The expression includes integers, the operators '+', '-', '*', and '(', ')', and has at least one operator."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to remove the duplicates from a list while preserving the original order of elements."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef remove_duplicates_preserve_order(items):\n    \"\"\"\n    Removes duplicates from a list while preserving the original order of elements.\n    Args:\n    items (list): The list from which to remove duplicates.\n    \n    Returns:\n    list: A new list with duplicates removed and original order preserved.\n    \"\"\"\n    seen = set()\n    unique_items = []\n    for item in items:\n        if item not in seen:\n            seen.add(item)\n            unique_items.append(item)\n    return unique_items\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import remove_duplicates_preserve_order\n\ndef test_remove_duplicates_preserve_order_with_duplicates():\n    assert remove_duplicates_preserve_order([1, 2, 3, 2, 1]) == [1, 2, 3]\n\ndef test_remove_duplicates_preserve_order_empty_list():\n    assert remove_duplicates_preserve_order([]) == []\n\ndef test_remove_duplicates_preserve_order_single_element():\n    assert remove_duplicates_preserve_order([5]) == [5]\n\ndef test_remove_duplicates_preserve_order_no_duplicates():\n    assert remove_duplicates_preserve_order([1, 2, 3, 4]) == [1, 2, 3, 4]\n\ndef test_remove_duplicates_preserve_order_with_negative_numbers():\n    assert remove_duplicates_preserve_order([-1, -2, -3, -2, -1, 0]) == [-1, -2, -3, 0]\n\ndef test_remove_duplicates_preserve_order_with_duplicates_and_zeros():\n    assert remove_duplicates_preserve_order([1, 2, 3, 2, 1, 0, 0, 3, 4]) == [1, 2, 3, 0, 4]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000097", "row_id": 97, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to remove the duplicates from a list while preserving the original order of elements."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the Fibonacci sequence up to a certain number of terms."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci_sequence(n):\n    \"\"\"\n    Returns a list containing the Fibonacci sequence up to n terms.\n    :param n: The number of terms in the Fibonacci sequence to generate.\n    :return: A list of integers representing the Fibonacci sequence.\n    \"\"\"\n    sequence = []\n    a, b = 0, 1\n    for _ in range(n):\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_fibonacci_sequence():\n    assert fibonacci_sequence(5) == [0, 1, 1, 2, 3]\n    assert fibonacci_sequence(1) == [0]\n    assert fibonacci_sequence(0) == []\n    assert fibonacci_sequence(10) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n\ndef test_fibonacci_sequence_negative():\n    assert fibonacci_sequence(-1) == []\n```"}], "metadata": {"prompt_id": "00000098", "row_id": 98, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the Fibonacci sequence up to a certain number of terms."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to detect a cycle in a directed graph using DFS"}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nfrom collections import defaultdict\n\ndef dfs(graph, current_node, visited, recursion_stack):\n    \"\"\"\n    Returns True if a cycle is detected in the graph using DFS.\n    \"\"\"\n    visited[current_node] = True\n    recursion_stack[current_node] = True\n\n    # Check all the adjacent nodes\n    for neighbor in graph[current_node]:\n        if not visited[neighbor]:\n            if dfs(graph, neighbor, visited, recursion_stack):\n                return True\n        elif recursion_stack[neighbor]:\n            return True\n\n    recursion_stack[current_node] = False\n    return False\n\ndef detect_cycle_in_directed_graph(graph):\n    \"\"\"\n    Returns True if the graph contains a cycle.\n    \"\"\"\n    num_nodes = len(graph)\n    visited = [False] * num_nodes\n    recursion_stack = [False] * num_nodes\n\n    for node in range(num_nodes):\n        if not visited[node]:\n            if dfs(graph, node, visited, recursion_stack):\n                return True\n\n    return False\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import detect_cycle_in_directed_graph\n\ndef create_graph(edges):\n    \"\"\"\n    Helper function to create a graph from a list of edges.\n    \"\"\"\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n    return graph\n\ndef test_empty_graph():\n    assert not detect_cycle_in_directed_graph(create_graph([]))\n\ndef test_directed_cycle():\n    assert detect_cycle_in_directed_graph(create_graph([(0, 1), (1, 2), (2, 0)]))\n\ndef test_cyclic_graph():\n    assert detect_cycle_in_directed_graph(create_graph([(0, 1), (1, 3), (3, 2), (2, 0), (2, 4), (4, 2)]))\n\ndef test_non_cyclic_graph():\n    assert not detect_cycle_in_directed_graph(create_graph([(1, 2), (3, 4)]))\n    \ndef test_self_loop():\n    assert detect_cycle_in_directed_graph(create_graph([(0, 0)]))\n    \ndef test_chain():\n    assert not detect_cycle_in_directed_graph(create_graph([(0, 1), (1, 2), (2, 3)]))\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000099", "row_id": 99, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to detect a cycle in a directed graph using DFS"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to iterate over a list and print each number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef print_numbers(numbers):\n    \"\"\"\n    Iterates over a list and prints each number.\n    \"\"\"\n    for num in numbers:\n        print(num)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import print_numbers\n\ndef test_print_numbers():\n    # Create a temporary file to capture print output\n    import io\n    import contextlib\n\n    captured_output = io.StringIO()  # Create StringIO object\n    with contextlib.redirect_stdout(captured_output):  # Redirect stdout to StringIO object\n        print_numbers([1, 2, 3, 4, 5])\n    output = captured_output.getvalue().strip().split('\\n')\n    assert output == ['1', '2', '3', '4', '5']\n\ndef test_print_numbers_with_empty_list():\n    import io\n    import contextlib\n    captured_output = io.StringIO()\n    with contextlib.redirect_stdout(captured_output):\n        print_numbers([])\n    output = captured_output.getvalue().strip()\n    assert output == ''\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000101", "row_id": 101, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to iterate over a list and print each number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given string is a valid identifier in Python."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nimport keyword\n\ndef is_valid_identifier(s):\n    \"\"\"\n    Returns True if s is a valid Python identifier, False otherwise.\n    \"\"\"\n    if not s or not isinstance(s, str): return False\n    if s[0].isdigit(): return False  # Identifiers cannot start with a digit.\n    if keyword.iskeyword(s): return False  # Keywords are not valid as identifiers.\n    return s.isidentifier()\n```\n\nThis function checks if the given string is a valid Python identifier by considering the following:\n- The string is not empty.\n- The string is a string itself.\n- The string does not start with a digit.\n- The string is not a Python keyword.\n- The string follows Python's identifier naming rules.\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\nfrom solution import is_valid_identifier\n\ndef test_is_valid_identifier():\n    assert is_valid_identifier(\"myIdentifier123\") == True\n    assert is_valid_identifier(\"123myIdentifier\") == False\n    assert is_valid_identifier(\"for\") == False\n    assert is_valid_identifier(\"\") == False\n    assert is_valid_identifier(\"validIdentifier\") == True\n    assert is_valid_identifier(\"Invalid-Identifier\") == False  # Contains invalid character '-'\n    assert is_valid_identifier(\"valid2023\") == True\n    assert is_valid_identifier(\"2023Invalid\") == False  # Starts with a number\n    assert is_valid_identifier(\"ValidIdentifier123\") == True\n\ndef test_is_valid_identifier_empty_string():\n    assert is_valid_identifier(\"\") == False\n\ndef test_is_valid_identifier_non_string_input():\n    assert is_valid_identifier(123) == False\n\ndef test_is_valid_identifier_keyword():\n    assert is_valid_identifier(\"class\") == False\n\ndef test_is_valid_identifier_capitalized():\n    assert is_valid_identifier(\"MyIdentifier\") == False\n```\n\nThis set of tests covers a variety of scenarios, ensuring that the function behaves as expected for valid and invalid identifiers, including checking for keywords and special characters that are not allowed in identifiers.\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000104", "row_id": 104, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given string is a valid identifier in Python."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the shortest distance from a point to a line in a 2D plane."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nimport math\n\ndef shortest_distance_from_point_to_line(point, line):\n    \"\"\"\n    Calculates the shortest distance from a point to a line in a 2D plane.\n    \n    Args:\n    point: A tuple (x, y) representing the point.\n    line: A tuple ((x1, y1), (x2, y2)) representing two points that define the line.\n    \n    Returns:\n    The shortest distance from the point to the line.\n    \"\"\"\n    x, y = point\n    x1, y1 = line[0]\n    x2, y2 = line[1]\n    \n    # Line equation parameters\n    A = y2 - y1\n    B = x1 - x2\n    C = (y2 - y1) * x1 - (x2 - x1) * y1\n    \n    # Distance from point to line\n    distance = abs(A * x + B * y + C) / math.sqrt(A**2 + B**2)\n    return distance\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import shortest_distance_from_point_to_line\n\ndef test_distance_same_point():\n    point = (1, 1)\n    line = ((1, 1), (3, 3))\n    assert shortest_distance_from_point_to_line(point, line) == 0\n\ndef test_distance_vertical_line():\n    point = (2, 2)\n    line = ((1, 1), (1, 4))\n    assert shortest_distance_from_point_to_line(point, line) == 1\n\ndef test_distance_horizontal_line():\n    point = (2, 2)\n    line = ((1, 1), (4, 1))\n    assert shortest_distance_from_point_to_line(point, line) == 1\n\ndef test_distance_diagonal_line():\n    point = (1, 1)\n    line = ((0, 0), (4, 4))\n    assert shortest_distance_from_point_to_line(point, line) == 0\n\ndef test_distance_oblique_line():\n    point = (3, 0)\n    line = ((0, 0), (4, 3))\n    expected = 3 / math.sqrt(2)\n    assert math.isclose(shortest_distance_from_point_to_line(point, line), expected)\n\ndef test_distance_oblique_line2():\n    point = (3, 1)\n    line = ((0, 0), (4, 3))\n    expected = 1 / math.sqrt(2)\n    assert math.isclose(shortest_distance_from_point_to_line(point, line), expected)\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000105", "row_id": 105, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the shortest distance from a point to a line in a 2D plane."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to perform insertion sort on a list of integers. Please make sure to provide detailed comments explaining each part of your code."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef insertion_sort(arr):\n    \"\"\"\n    Perform insertion sort on a list of integers.\n    \n    Parameters:\n    arr (list): The list of integers to be sorted.\n    \n    Returns:\n    list: The sorted list of integers.\n    \n    Explanation:\n    1. Iterate over the array starting from the second element (index 1).\n    2. For each element, compare it with the elements before it to place it in the correct position.\n    3. If the current element is smaller than the previous element, swap them.\n    4. Continue this process until the current element is in the correct sorted position.\n    5. Repeat the process for all elements in the array.\n    \"\"\"\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        # Move elements of arr[0..i-1], that are greater than key, to one position ahead of their current position\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import insertion_sort\n\ndef test_insertion_sort_positive_numbers():\n    assert insertion_sort([4, 5, 2, 6, 1, 3]) == [1, 2, 3, 4, 5, 6]\n\ndef test_insertion_sort_already_sorted():\n    assert insertion_sort([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\ndef test_insertion_sort_negative_numbers():\n    assert insertion_sort([-2, -5, -4, -3, -1]) == [-5, -4, -3, -2, -1]\n\ndef test_insertion_sort_mixed_sign_numbers():\n    assert insertion_sort([-1, 3, -2, 5, 0]) == [-2, -1, 0, 3, 5]\n\ndef test_insertion_sort_duplicate_numbers():\n    assert insertion_sort([4, 2, 4, 2, 1]) == [1, 2, 2, 4, 4]\n\ndef test_insertion_sort_empty_list():\n    assert insertion_sort([]) == []\n\ndef test_insertion_sort_single_element():\n    assert insertion_sort([5]) == [5]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000106", "row_id": 106, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to perform insertion sort on a list of integers. Please make sure to provide detailed comments explaining each part of your code."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find all the pairs of numbers in a list that sum to a given target."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_pairs_with_sum(numbers, target):\n    \"\"\"\n    Returns a list of tuples containing all unique pairs of numbers from the input list that sum to the target value.\n    \"\"\"\n    pairs = []\n    seen = set()\n    for number in numbers:\n        complement = target - number\n        if complement in seen:\n            pairs.append((complement, number))\n        seen.add(number)\n    return pairs\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_pairs_with_sum\n\ndef test_find_pairs_with_sum_empty_list():\n    assert find_pairs_with_sum([], 5) == []\n\ndef test_find_pairs_with_sum_single_element():\n    assert find_pairs_with_sum([1], 2) == []\n\ndef test_find_pairs_with_sum_positive_numbers():\n    assert find_pairs_with_sum([1, 2, 3, 4], 5) == [(1, 4), (2, 3)]\n\ndef test_find_pairs_with_sum_negative_numbers():\n    assert find_pairs_with_sum([-1, -2, -3, -4], -5) == [(-1, -4), (-2, -3)]\n\ndef test_find_pairs_with_sum_mixed_sign_numbers():\n    assert find_pairs_with_sum([-1, 1, 2, 3, 4], 0) == [(-1, 1), (-2, 2), (-3, 3), (-4, 4)]\n\ndef test_find_pairs_with_sum_duplicate_elements():\n    assert find_pairs_with_sum([2, 2, 2, 2], 4) == [(2, 2)]\n```"}], "metadata": {"prompt_id": "00000107", "row_id": 107, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find all the pairs of numbers in a list that sum to a given target."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count the occurrences of a substring in a given string. You should use only the built-in functions of python and no external libraries should be used."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_substring(string, substring):\n    \"\"\"\n    Counts the occurrences of a substring within a given string.\n    \n    Args:\n    string (str): The string to search within.\n    substring (str): The substring to count occurrences of.\n    \n    Returns:\n    int: The number of times the substring occurs in the string.\n    \"\"\"\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_substring\n\ndef test_count_substring_empty_string():\n    assert count_substring(\"\", \"test\") == 0\n\ndef test_count_substring_no_occurrences():\n    assert count_substring(\"hello world\", \"badchar\") == 0\n\ndef test_count_substring_single_occurrence():\n    assert count_substring(\"test test test\", \"test\") == 3\n\ndef test_count_substring_multiple_occurrences():\n    assert count_substring(\"bambambambam\", \"bam\") == 4\n\ndef test_count_substring_substring_is_empty():\n    assert count_substring(\"any string\", \"\") == 0\n\ndef test_count_substring_substring_in_middle_of_word():\n    assert count_substring(\"abracadabra\", \"a\") == 5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000108", "row_id": 108, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count the occurrences of a substring in a given string. You should use only the built-in functions of python and no external libraries should be used."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the common elements between two lists, and return a new list containing these common elements."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_common_elements(list1, list2):\n    \"\"\"\n    Returns a list of common elements between list1 and list2.\n    \"\"\"\n    return list(set(list1) & set(list2))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_common_elements\n\ndef test_find_common_elements():\n    assert find_common_elements([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]\n\ndef test_find_common_elements_empty_lists():\n    assert find_common_elements([], [1, 2, 3]) == []\n\ndef test_find_common_elements_no_common_elements():\n    assert find_common_elements([1, 2, 3], [4, 5, 6]) == []\n\ndef test_find_common_elements_with_duplicates():\n    assert find_common_elements([1, 2, 2, 3, 4], [2, 3, 3, 4, 5]) == [2, 3, 4]\n```"}], "metadata": {"prompt_id": "00000109", "row_id": 109, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the common elements between two lists, and return a new list containing these common elements."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the median of a list of numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_median(numbers):\n    \"\"\"\n    Returns the median of a list of numbers.\n    If the list has an odd number of elements, the median is the middle element.\n    If the list has an even number of elements, the median is the average of the two middle elements.\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    n = len(sorted_numbers)\n    mid = n // 2\n\n    if n % 2 == 0:\n        return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2\n    else:\n        return sorted_numbers[mid]\n```\n<|Solution End|>\n\n<|Test Begin|>\r\n```python\nfrom solution import find_median\n\ndef test_find_median_single_element():\n    assert find_median([3]) == 3\n\ndef test_find_median_sorted_odd():\n    assert find_median([1, 3, 5]) == 3\n\ndef test_find_median_unsorted_odd():\n    assert find_median([5, 1, 3]) == 3\n\ndef test_find_median_sorted_even():\n    assert find_median([1, 2, 3, 4]) == 2.5\n\ndef test_find_median_unsorted_even():\n    assert find_median([3, 1, 2, 4]) == 2.5\n\ndef test_find_median_empty_list():\n    assert find_median([]) is None\n\ndef test_find_median_negatives():\n    assert find_median([-5, -4, -2, 1, 3]) == -2.0\n\ndef test_find_median_SINGLE_ELEMENT():\n    assert find_median([9]) == 9\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000110", "row_id": 110, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the median of a list of numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to generate the Fibonacci sequence up to a given number n. The function should return a list of the Fibonacci numbers less than or equal to n."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci_sequence(n):\n    \"\"\"\n    Returns a list of Fibonacci numbers less than or equal to n.\n    \"\"\"\n    if n < 0:\n        return []\n    \n    fib_sequence = [0, 1]\n    while True:\n        next_fib = fib_sequence[-1] + fib_sequence[-2]\n        if next_fib > n:\n            break\n        fib_sequence.append(next_fib)\n    \n    return fib_sequence\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import fibonacci_sequence\n\ndef test_fibonacci_sequence_with_zero():\n    assert fibonacci_sequence(0) == [0]\n\ndef test_fibonacci_sequence_with_small_number():\n    assert fibonacci_sequence(1) == [0, 1]\n\ndef test_fibonacci_sequence_with_large_number():\n    assert fibonacci_sequence(10) == [0, 1, 1, 2, 3, 5, 8]\n\ndef test_fibonacci_sequence_with_negative_number():\n    assert fibonacci_sequence(-5) == []\n\ndef test_fibonacci_sequence_with_high_threshold():\n    assert fibonacci_sequence(100) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n```"}], "metadata": {"prompt_id": "00000112", "row_id": 112, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to generate the Fibonacci sequence up to a given number n. The function should return a list of the Fibonacci numbers less than or equal to n."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the largest rectangle in a histogram."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef largest_rectangle_in_histogram(histogram):\n    \"\"\"\n    Finds the largest rectangle that can be formed in a histogram with the given heights.\n    :param histogram: A list of non-negative integers representing the heights of the bars.\n    :return: The area of the largest rectangle.\n    \"\"\"\n    stack = []\n    max_area = 0\n    index = 0\n    while index < len(histogram):\n        if not stack or histogram[stack[-1]] <= histogram[index]:\n            stack.append(index)\n            index += 1\n        else:\n            top_of_stack = stack.pop()\n            height = histogram[top_of_stack]\n            width = index if not stack else index - stack[-1] - 1\n            max_area = max(max_area, height * width)\n    while stack:\n        top_of_stack = stack.pop()\n        height = histogram[top_of_stack]\n        width = index if not stack else len(histogram) - stack[-1] - 1\n        max_area = max(max_area, height * width)\n    return max_area\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import largest_rectangle_in_histogram\n\n# Test cases to verify the solution\ndef test_case1():\n    assert largest_rectangle_in_histogram([2, 1, 5, 6, 2, 3]) == 10\n\ndef test_case2():\n    assert largest_rectangle_in_histogram([2, 4]) == 4\n\ndef test_case3():\n    assert largest_rectangle_in_histogram([3, 1, 3]) == 6\n\ndef test_case4():\n    assert largest_rectangle_in_histogram([1, 2, 3, 4, 5]) == 9\n\ndef test_case5():\n    assert largest_rectangle_in_histogram([0, 0, 0, 0]) == 0\n\ndef test_case6():\n    assert largest_rectangle_in_histogram([1]) == 1\n\ndef test_case7():\n    assert largest_rectangle_in_histogram([6, 2, 5, 4, 5, 1, 6]) == 12\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000113", "row_id": 113, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the largest rectangle in a histogram."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine if a given number is a prime number. If it is, return True; otherwise, return False."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_prime(n):\n    \"\"\"\n    Determines if a given number n is a prime number.\n    Returns True if n is a prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_prime\n\ndef test_is_prime_with_prime_number():\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(5) == True\n    assert is_prime(11) == True\n\ndef test_is_prime_with_non_prime_number():\n    assert is_prime(4) == False\n    assert is_prime(9) == False\n    assert is_prime(15) == False\n    assert is_prime(100) == False\n\ndef test_is_prime_with_edge_cases():\n    assert is_prime(1) == False\n    assert is_prime(0) == False\n    assert is_prime(-3) == False\n    assert is_prime(-1) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000114", "row_id": 114, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine if a given number is a prime number. If it is, return True; otherwise, return False."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum number in a list of numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_max(numbers):\n    \"\"\"\n    Returns the maximum number in a list of numbers.\n    \"\"\"\n    return max(numbers)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_max\n\ndef test_find_max_positive_numbers():\n    assert find_max([1, 2, 3, 4, 5]) == 5\n\ndef test_find_max_with_negative_numbers():\n    assert find_max([-5, -2, -3, -1]) == -1\n\ndef test_find_max_mixed_sign_numbers():\n    assert find_max([-1, 0, 1, 2, -2, 3]) == 3\n\ndef test_find_max_single_element():\n    assert find_max([42]) == 42\n\ndef test_find_max_empty_list():\n    assert find_max([]) == ValueError\n    # Importing the exception here for completeness, but it's more common to handle it separately\n    # from pytest import raises\n    # with raises(ValueError):\n    #     find_max([])\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000115", "row_id": 115, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum number in a list of numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the minimum element in a list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_minimum(lst):\n    \"\"\"\n    Returns the minimum element in the given list.\n    \"\"\"\n    if not lst:  # check if the list is empty\n        return None\n    \n    min_element = lst[0]\n    for element in lst[1:]:\n        if element < min_element:\n            min_element = element\n            \n    return min_element\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_minimum\n\ndef test_find_minimum_with_positive_numbers():\n    assert find_minimum([3, 1, 4, 1, 5, 9]) == 1\n\ndef test_find_minimum_with_negative_numbers():\n    assert find_minimum([-2, -3, -1, -4]) == -4\n\ndef test_find_minimum_with_mixed_numbers():\n    assert find_minimum([-5, 0, 5, -1, 10]) == -5\n\ndef test_find_minimum_with_empty_list():\n    assert find_minimum([]) is None\n\ndef test_find_minimum_with_single_element():\n    assert find_minimum([42]) == 42\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000118", "row_id": 118, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the minimum element in a list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to replace all occurrences of a given substring in a string, but only for occurrences that are surrounded by spaces."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef replace_substring_with_spaces(text, old_substring, new_substring):\n    \"\"\"\n    Replace all occurrences of old_substring in text surrounded by spaces with new_substring.\n    \"\"\"\n    import re\n    pattern = r'\\s' + re.escape(old_substring) + r'\\s'\n    return re.sub(pattern, ' ' + new_substring + ' ', text)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import replace_substring_with_spaces\n\ndef test_replace_substring_with_spaces_single_occurrence():\n    assert replace_substring_with_spaces(\"hello world\", \"world\", \"Earth\") == \"hello Earth\"\n\ndef test_replace_substring_with_spaces_multiple_occurrences():\n    assert replace_substring_with_spaces(\"hello world world\", \"world\", \"Earth\") == \"hello Earth Earth\"\n\ndef test_replace_substring_with_spaces_edge_case():\n    assert replace_substring_with_spaces(\"world\", \"world\", \"Earth\") == \"Earth\"\n\ndef test_replace_substring_with_spaces_surrounded_by_punctuation():\n    assert replace_substring_with_spaces(\",hello ,world,\", \"world\", \"Earth\") == \",hello ,Earth,\"\n\ndef test_replace_substring_with_spaces_no_occurrences():\n    assert replace_substring_with_spaces(\"hello world\", \"universe\", \"Earth\") == \"hello world\"\n\ndef test_replace_substring_with_spaces_no_spaces_around_substring():\n    assert replace_substring_with_spaces(\"hello world\", \"world\", \"Earth\") == \"hello Earth\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000119", "row_id": 119, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to replace all occurrences of a given substring in a string, but only for occurrences that are surrounded by spaces."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to merge two dictionaries. If the same key exists in both dictionaries, their values should be summed. If not, the value from the second dictionary should simply be added to the result."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef merge_and_sum_dicts(dict1, dict2):\n    \"\"\"\n    Merges two dictionaries. If a key is present in both, sums their values.\n    If a key is only present in one dictionary, its value is taken as is.\n    \"\"\"\n    # Sum the values of keys that are present in both dictionaries\n    for key in dict2:\n        if key in dict1:\n            dict1[key] += dict2[key]\n        else:\n            dict1[key] = dict2[key]\n    return dict1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import merge_and_sum_dicts\n\ndef test_merge_and_sum_dicts():\n    dict1 = {'a': 1, 'b': 2, 'c': 3}\n    dict2 = {'b': 3, 'c': 4, 'd': 5}\n    result = merge_and_sum_dicts(dict1, dict2)\n    expected = {'a': 1, 'b': 5, 'c': 7, 'd': 5}\n    assert result == expected\n\ndef test_merge_and_sum_dicts_with_same_key():\n    dict1 = {'x': 10, 'y': 20}\n    dict2 = {'x': 5, 'y': 30}\n    result = merge_and_sum_dicts(dict1, dict2)\n    expected = {'x': 15, 'y': 50}\n    assert result == expected\n\ndef test_merge_and_sum_dicts_addition():\n    dict1 = {'p': 100}\n    dict2 = {'q': 200}\n    result = merge_and_sum_dicts(dict1, dict2)\n    expected = {'p': 100, 'q': 200}\n    assert result == expected\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000120", "row_id": 120, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to merge two dictionaries. If the same key exists in both dictionaries, their values should be summed. If not, the value from the second dictionary should simply be added to the result."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the first unique character in a string. If no unique character is found, return an underscore (_) character."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef first_unique_char(s: str) -> str:\n    \"\"\"\n    Returns the first unique character in the string s.\n    If no unique character is found, returns '_'.\n    \"\"\"\n    char_count = {}\n    \n    # Count the occurrence of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first unique character\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return '_'\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_first_unique_char():\n    assert first_unique_char(\"leetcode\") == \"l\"\n    assert first_unique_char(\"loveleetcode\") == \"v\"\n    assert first_unique_char(\"aabb\") == '_'\n    assert first_unique_char(\"preeeceeeeek\") == 'r'\n    assert first_unique_char(\"\") == '_'\n    assert first_unique_char(\"a\") == \"a\"\n    assert first_unique_char(\"aa\") == '_'\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000121", "row_id": 121, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the first unique character in a string. If no unique character is found, return an underscore (_) character."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum number in an array using recursion."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_max_recursive(arr, n):\n    \"\"\"\n    Uses recursion to find the maximum number in the array.\n    \n    Args:\n    arr: List of integers.\n    n: Number of elements in the array to consider for finding the maximum.\n    \n    Returns:\n    The maximum number in the array.\n    \"\"\"\n    if n == 1:\n        return arr[0]\n    max_of_rest = find_max_recursive(arr, n-1)\n    return max(arr[n-1], max_of_rest)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_find_max_recursive():\n    assert find_max_recursive([1, 3, 5, 7, 9], 5) == 9\n    assert find_max_recursive([10], 1) == 10\n    assert find_max_recursive([5, 3, 8, 6, 2], 5) == 8\n    assert find_max_recursive([-1, -3, -2, -5, -7], 5) == -1\n    assert find_max_recursive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 10\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000122", "row_id": 122, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum number in an array using recursion."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check for prime numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, else returns False.\n    \n    A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n<|Solution End|>\n\n<|Test Begin|>\r\n```python\r\ndef test_is_prime():\r\n    assert is_prime(2) == True\r\n    assert is_prime(3) == True\r\n    assert is_prime(4) == False\r\n    assert is_prime(5) == True\r\n    assert is_prime(17) == True\r\n    assert is_prime(18) == False\r\n    assert is_prime(19) == True\r\n    assert is_prime(20) == False\r\n    assert is_prime(23) == True\r\n    assert is_prime(25) == False\r\n    assert is_prime(29) == True\r\n    assert is_prime(97) == True\r\n    assert is_prime(100) == False\r\n    assert is_prime(101) == True\r\n    assert is_prime(102) == False\r\n    assert is_prime(103) == True\r\n    assert is_prime(104) == False\r\n    assert is_prime(105) == False\r\n    assert is_prime(106) == False\r\n    assert is_prime(107) == True\r\n    assert is_prime(108) == False\r\n    assert is_prime(109) == True\r\n    assert is_prime(110) == False\r\n\r\ndef test_special_cases():\r\n    assert is_prime(1) == False\r\n    assert is_prime(-7) == False\r\n    assert is_prime(0) == False\r\n    assert is_prime(2) == True\r\n    assert is_prime(3) == True\r\n    assert is_prime(4) == False\r\n\r\ndef test_large_numbers():\r\n    assert is_prime(982451653) == True  # Known prime number\r\n    assert is_prime(982451654) == False # Known composite number\r\n    assert is_prime(1234567891) == True # Known prime number\r\n    assert is_prime(1234567890) == False# Known composite number\r\n```\r\n<|Test End|>"}], "metadata": {"prompt_id": "00000123", "row_id": 123, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check for prime numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the single number in a list where every other number appears exactly twice. The function should have a linear time complexity and use constant space."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef single_number(nums):\n    \"\"\"\n    Find the single number in a list where every other number appears exactly twice.\n    Assumes one and only one number appears once and all others appear twice.\n    Returns the number that appears exactly once.\n\n    Args:\n    nums (List[int]): A list of integers.\n\n    Returns:\n    int: The integer that appears exactly once.\n    \"\"\"\n    unique = 0\n    for num in nums:\n        unique ^= num\n    return unique\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import single_number\n\ndef test_single_number():\n    assert single_number([2, 2, 1]) == 1\n    assert single_number([4, 1, 2, 1, 2]) == 4\n    assert single_number([8]) == 8\n    assert single_number([7, 3, 5, 3, 7, 5, 6]) == 6\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000124", "row_id": 124, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the single number in a list where every other number appears exactly twice. The function should have a linear time complexity and use constant space."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum sum of a subarray within a given array. The subarray must contain at least one number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_subarray_sum(arr):\n    \"\"\"\n    Returns the maximum sum of a contiguous subarray within the given array.\n    The subarray must contain at least one number.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Array cannot be empty\")\n        \n    max_sum = current_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import max_subarray_sum\n\ndef test_max_subarray_sum_positive_numbers():\n    assert max_subarray_sum([1, 2, 3, 4, 5]) == 15\n\ndef test_max_subarray_sum_mixed_numbers():\n    assert max_subarray_sum([-2, -3, 4, -1, -2, 1, 5, -3]) == 7\n\ndef test_max_subarray_sum_single_element():\n    assert max_subarray_sum([5]) == 5\n\ndef test_max_subarray_sum_all_negative():\n    assert max_subarray_sum([-1, -2, -3, -4]) == -1\n\ndef test_max_subarray_sum_single_negative():\n    assert max_subarray_sum([-5]) == -5\n\ndef test_max_subarray_sum_empty_array():\n    with pytest.raises(ValueError):\n        max_subarray_sum([])\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000125", "row_id": 125, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum sum of a subarray within a given array. The subarray must contain at least one number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a list of numbers is sorted in ascending order."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_sorted_ascending(numbers_list):\n    \"\"\"\n    Returns True if the list is sorted in ascending order, otherwise False.\n    \"\"\"\n    return all(numbers_list[i] <= numbers_list[i + 1] for i in range(len(numbers_list) - 1))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_sorted_ascending\n\ndef test_is_sorted_ascending_with_sorted_list():\n    assert is_sorted_ascending([1, 2, 3, 4, 5]) == True\n\ndef test_is_sorted_ascending_with_unsorted_list():\n    assert is_sorted_ascending([5, 3, 1]) == False\n\ndef test_is_sorted_ascending_with_empty_list():\n    assert is_sorted_ascending([]) == True\n\ndef test_is_sorted_ascending_with_single_element_list():\n    assert is_sorted_ascending([42]) == True\n\ndef test_is_sorted_ascending_with_consecutive_equal_elements():\n    assert is_sorted_ascending([1, 1, 2, 2, 3]) == True\n\ndef test_is_sorted_ascending_with_mixed_elements():\n    assert is_sorted_ascending([3, 1, 2, 4, 5]) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000126", "row_id": 126, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a list of numbers is sorted in ascending order."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to evaluate the value of the input infix expression. The function should take a single string argument representing the infix expression and return the corresponding value. The expression may contain integers, the operators `+`, `-`, `*`, and `/`, and parentheses `()`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef evaluate_infix_expression(expression):\n    \"\"\"\n    Evaluates the value of an infix expression.\n    \"\"\"\n    def apply_operator(operators, values):\n        operator = operators.pop()\n        right = values.pop()\n        left = values.pop()\n        if operator == '+':\n            values.append(left + right)\n        elif operator == '-':\n            values.append(left - right)\n        elif operator == '*':\n            values.append(left * right)\n        elif operator == '/':\n            values.append(left / right)\n\n    def greater_precedence(op1, op2):\n        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}\n        return precedence[op1] > precedence[op2]\n\n    operators = []\n    values = []\n    i = 0\n    while i < len(expression):\n        if expression[i] == ' ':\n            i += 1\n            continue\n        if expression[i].isdigit():\n            j = i\n            while j < len(expression) and expression[j].isdigit():\n                j += 1\n            values.append(int(expression[i:j]))\n            i = j\n        elif expression[i] in '+-*/':\n            while (operators and greater_precedence(operators[-1], expression[i])):\n                apply_operator(operators, values)\n            operators.append(expression[i])\n            i += 1\n        elif expression[i] == '(':\n            operators.append(expression[i])\n            i += 1\n        elif expression[i] == ')':\n            while operators[-1] != '(':\n                apply_operator(operators, values)\n            operators.pop()\n            i += 1\n    while operators:\n        apply_operator(operators, values)\n\n    return values[0]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import evaluate_infix_expression\n\ndef test_infix_evaluation():\n    assert evaluate_infix_expression(\"12 + 22 * (44 - 23)\") == 330\n    assert evaluate_infix_expression(\"1 + 2 * 3\") == 7\n    assert evaluate_infix_expression(\"1 + 2 * 3 + 4\") == 9\n    assert evaluate_infix_expression(\"(1 + 2 + 3) * 4\") == 24\n    assert evaluate_infix_expression(\"10 * 2 - 3 + 5\") == 22\n    assert evaluate_infix_expression(\"100 * 2 / 2 / 5\") == 20\n    assert evaluate_infix_expression(\"(10 + 5) * 2\") == 30\n    assert evaluate_infix_expression(\"20 + (5 - 3) * 2\") == 24\n    assert evaluate_infix_expression(\"100 + 20 / 10\") == 120\n    assert evaluate_infix_expression(\"3 + 2 - 4 / 2\") == 2\n    assert evaluate_infix_expression(\"5 - (2 + 2)\") == 1\n    assert evaluate_infix_expression(\"(1 + 2) * (3 - 4)\") == -3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000127", "row_id": 127, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to evaluate the value of the input infix expression. The function should take a single string argument representing the infix expression and return the corresponding value. The expression may contain integers, the operators `+`, `-`, `*`, and `/`, and parentheses `()`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the gcd(greatest common divisor) of two numbers using Euclid's algorithm. Euclid's algorithm is based on the principle that the GCD of two numbers also divides their difference. It uses the simple formula: GCD(A, B) = GCD(B, A mod B) until the remainder is 0."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor (GCD) of two numbers using Euclid's algorithm.\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import gcd\n\ndef test_gcd_for_primes():\n    assert gcd(5, 3) == 1\n    assert gcd(11, 13) == 1\n\ndef test_gcd_for_common_divisors():\n    assert gcd(10, 15) == 5\n    assert gcd(25, 15) == 5\n\ndef test_gcd_for_large_numbers():\n    assert gcd(141717570483, 6050068570483) == 483\n    assert gcd(982451653, 1628451653) == 1\n\ndef test_gcd_zero():\n    assert gcd(0, 5) == 5\n    assert gcd(5, 0) == 5\n    assert gcd(0, 0) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000129", "row_id": 129, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the gcd(greatest common divisor) of two numbers using Euclid's algorithm. Euclid's algorithm is based on the principle that the GCD of two numbers also divides their difference. It uses the simple formula: GCD(A, B) = GCD(B, A mod B) until the remainder is 0."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a string without using the built-in reverse function or slicing. Also, ensure that your function works for both strings and integer sequences treated as strings."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef reverse_string(input_str):\n    \"\"\"\n    Reverses the given string or integer sequence treated as a string without using slicing or the built-in reverse function.\n    \"\"\"\n    reverse_str = \"\"  # Initialize an empty string to store the reversed string\n    for char in input_str:\n        reverse_str = char + reverse_str  # Prepend each character to the result string\n    return reverse_str\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef test_reverse_string():\n    assert reverse_string(\"hello\") == \"olleh\"\n    assert reverse_string(\"12345\") == \"54321\"\n    assert reverse_string(\"\") == \"\"\n\ndef test_reverse_integer_sequence():\n    assert reverse_string(\"123456789\") == \"987654321\"\n    assert reverse_string(\"0\") == \"0\"\n\ndef test_reverse_special_characters():\n    assert reverse_string(\"!@#$%^&*()\") == \")(*&^%$#@!\"\n\ndef test_reverse mixed_case():\n    assert reverse_string(\"Hello World!\") == \"!dlroW olleH\"\n    assert reverse_string(\"1a2b3c\") == \"c3b2a1\"\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000131", "row_id": 131, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a string without using the built-in reverse function or slicing. Also, ensure that your function works for both strings and integer sequences treated as strings."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the diameter of a binary tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef diameter_of_binary_tree(root: TreeNode) -> int:\n    \"\"\"\n    Returns the diameter of the binary tree.\n    \"\"\"\n    def height(node: TreeNode) -> int:\n        if not node:\n            return 0\n        return 1 + max(height(node.left), height(node.right))\n    \n    if not root:\n        return 0\n    max_diameter = 0\n    def dfs(node: TreeNode) -> int:\n        nonlocal max_diameter\n        if not node:\n            return 0\n        left_height = height(node.left)\n        right_height = height(node.right)\n        max_diameter = max(max_diameter, left_height + right_height)\n        return 1 + max(left_height, right_height)\n    \n    dfs(root)\n    return max_diameter\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\nfrom solution import diameter_of_binary_tree, TreeNode\n\n# Helper function to create a binary tree\ndef create_tree(arr: list) -> TreeNode:\n    if not arr:\n        return None\n    nodes = [None if val is None else TreeNode(val) for val in arr]\n    kids = nodes[::-1]\n    root = kids.pop()\n    for node in nodes:\n        if node:\n            if kids:\n                node.left = kids.pop()\n            if kids:\n                node.right = kids.pop()\n    return root\n\ndef test_diameter_of_binary_tree_example1():\n    tree = create_tree([1, 2, 3, 4, 5])\n    assert diameter_of_binary_tree(tree) == 3\n\ndef test_diameter_of_binary_tree_example2():\n    tree = create_tree([1, 2, 3, 4, None, 5])\n    assert diameter_of_binary_tree(tree) == 4\n\ndef test_diameter_of_binary_tree_single_node():\n    tree = create_tree([1])\n    assert diameter_of_binary_tree(tree) == 0\n\ndef test_diameter_of_binary_tree_empty_tree():\n    tree = None\n    assert diameter_of_binary_tree(tree) == 0\n\ndef test_diameter_of_binary_tree_max_depth():\n    tree = create_tree([1, 2, 3, None, 4, 5, 6, 7, 8, 9])\n    assert diameter_of_binary_tree(tree) == 6\n\ndef test_diameter_of_binary_tree_unbalanced_tree():\n    tree = create_tree([1, 2, 3, 4, 5, None, 7])\n    assert diameter_of_binary_tree(tree) == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000132", "row_id": 132, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the diameter of a binary tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to multiply a number by 3 and return the result."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef multiply_by_three(number):\n    \"\"\"\n    Multiplies the given number by 3 and returns the result.\n    \"\"\"\n    return number * 3\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import multiply_by_three\n\ndef test_multiply_by_three_positive_numbers():\n    assert multiply_by_three(2) == 6\n\ndef test_multiply_by_three_with_zero():\n    assert multiply_by_three(0) == 0\n\ndef test_multiply_by_three_negative_numbers():\n    assert multiply_by_three(-1) == -3\n\ndef test_multiply_by_three_large_number():\n    assert multiply_by_three(100) == 300\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000133", "row_id": 133, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to multiply a number by 3 and return the result."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the second smallest number in a list. If the list has less than two unique numbers, return `None`. For example, for the list `[3, 5, 2, 2, 8, 1, 1, 4]`, the function should return `3`. However, for the list `[1, 1]` or `[5]`, the function should return `None`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef second_smallest(numbers):\n    \"\"\"\n    Returns the second smallest number in the list. Returns None if there are less than two unique numbers.\n    \"\"\"\n    unique_numbers = set(numbers)\n    if len(unique_numbers) < 2:\n        return None\n    else:\n        return sorted(unique_numbers)[1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import second_smallest\n\ndef test_second_smallest_with_unique_elements():\n    assert second_smallest([3, 5, 2, 8, 1, 4]) == 2\n\ndef test_second_smallest_with_duplicates():\n    assert second_smallest([3, 5, 2, 2, 8, 1, 1, 4]) == 3\n\ndef test_second_smallest_with_repeated_elements():\n    assert second_smallest([1, 1, 1, 1]) == None\n\ndef test_second_smallest_with_one_unique_element():\n    assert second_smallest([5]) == None\n\ndef test_second_smallest_with_all_duplicates():\n    assert second_smallest([10, 10, 10]) == None\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000134", "row_id": 134, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the second smallest number in a list. If the list has less than two unique numbers, return `None`. For example, for the list `[3, 5, 2, 2, 8, 1, 1, 4]`, the function should return `3`. However, for the list `[1, 1]` or `[5]`, the function should return `None`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to create a queue using a list with two methods: enqueue and dequeue. The enqueue method adds an element to the end of the queue, and the dequeue method removes the element from the front of the queue."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass Queue:\n    \"\"\"\n    A basic queue implementation using a list.\n    Methods:\n        enqueue(item): Adds an item to the end of the queue.\n        dequeue(): Removes and returns the item from the front of the queue.\n    \"\"\"\n    def __init__(self):\n        self.items = []\n\n    def enqueue(self, item):\n        self.items.append(item)\n\n    def dequeue(self):\n        if not self.is_empty():\n            return self.items.pop(0)\n        raise IndexError(\"pop from empty queue\")\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_queue_operations():\n    q = Queue()\n    assert q.is_empty() == True\n    assert q.size() == 0\n\n    q.enqueue(1)\n    q.enqueue(2)\n    assert q.dequeue() == 1\n    assert q.dequeue() == 2\n    assert q.is_empty() == True\n    assert q.size() == 0\n\n    q.enqueue(3)\n    q.enqueue(4)\n    q.enqueue(5)\n    assert q.dequeue() == 3\n    assert q.dequeue() == 4\n    assert q.dequeue() == 5\n    assert q.is_empty() == True\n    assert q.size() == 0\n\n    try:\n        q.dequeue()\n        assert False, \"Expected an IndexError but did not raise\"\n    except IndexError:\n        assert True\n\n    try:\n        q.dequeue()\n        assert False, \"Expected an IndexError but did not raise\"\n    except IndexError:\n        assert True\n\n# The following tests are designed to ensure that enqueue and dequeue work with any type of item.\ndef test_enqueue_dequeue_with_different_types():\n    q = Queue()\n    q.enqueue(1)\n    q.enqueue(\"2\")\n    assert q.dequeue() == 1\n    assert q.dequeue() == \"2\"\n\n    q.enqueue({\"key\": \"value\"})\n    q.enqueue([1, 2, 3])\n    assert q.dequeue() == {\"key\": \"value\"}\n    assert q.dequeue() == [1, 2, 3]\n\n    try:\n        q.dequeue()\n        assert False, \"Expected an IndexError but did not raise\"\n    except IndexError:\n        assert True\n\n    try:\n        q.dequeue()\n        assert False, \"Expected an IndexError but did not raise\"\n    except IndexError:\n        assert True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000136", "row_id": 136, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to create a queue using a list with two methods: enqueue and dequeue. The enqueue method adds an element to the end of the queue, and the dequeue method removes the element from the front of the queue."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the length of the longest continuous subarray with equal number of 0s and 1s."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef findMaxLength(nums):\n    \"\"\"\n    Returns the length of the longest continuous subarray with an equal number of 0s and 1s.\n    \n    :param nums: List[int] - The input array of 0s and 1s.\n    :return: int - Length of the longest continuous subarray with equal number of 0s and 1s.\n    \"\"\"\n    count = 0\n    count_dict = {0: -1}  # Initialize the count with 0 at index -1\n    max_length = 0\n    \n    for i, num in enumerate(nums):\n        if num == 1:\n            count += 1\n        else:\n            count -= 1\n        \n        if count in count_dict:\n            max_length = max(max_length, i - count_dict[count])\n        else:\n            count_dict[count] = i\n    \n    return max_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import findMaxLength\n\ndef test_findMaxLength_empty_array():\n    assert findMaxLength([]) == 0\n\ndef test_findMaxLength_single_zero():\n    assert findMaxLength([0]) == 0\n\ndef test_findMaxLength_single_one():\n    assert findMaxLength([1]) == 0\n\ndef test_findMaxLength_equal_zeros_and_ones():\n    assert findMaxLength([0, 1]) == 2\n    assert findMaxLength([1, 0]) == 2\n\ndef test_findMaxLength_longest_subarray():\n    assert findMaxLength([0, 1, 0, 1, 0]) == 4\n\ndef test_findMaxLength_mixed_sequence():\n    assert findMaxLength([1, 0, 1, 1, 0, 0, 1]) == 7\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000138", "row_id": 138, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the length of the longest continuous subarray with equal number of 0s and 1s."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum sum of a subarray within a given array. This is known as the maximum subarray problem. You should use Kadane's algorithm to implement this."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef max_subarray_kadane(arr):\n    \"\"\"\n    Finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers.\n    This implementation uses Kadane's algorithm.\n    \"\"\"\n    max_current = max_global = arr[0]\n    for num in arr[1:]:\n        max_current = max(num, max_current + num)\n        if max_current > max_global:\n            max_global = max_current\n    return max_global\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import max_subarray_kadane\n\ndef test_max_subarray_kadane_positive():\n    assert max_subarray_kadane([1, 2, 3, -2, 5]) == 9\n\ndef test_max_subarray_kadane_single_negative():\n    assert max_subarray_kadane([-1]) == -1\n\ndef test_max_subarray_kadane_all_negative():\n    assert max_subarray_kadane([-2, -3, -1, -5]) == -1\n\ndef test_max_subarray_kadane_random():\n    assert max_subarray_kadane([2, 3, -2, 1, -5, 4, -3]) == 6\n\ndef test_max_subarray_kadane_mixed():\n    assert max_subarray_kadane([5, -2, 3, 4, -1, 2, 1, -5, 4]) == 10\n\ndef test_max_subarray_kadane_empty():\n    assert max_subarray_kadane([]) == 0\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000139", "row_id": 139, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum sum of a subarray within a given array. This is known as the maximum subarray problem. You should use Kadane's algorithm to implement this."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a list of integers contains the number 5. If it does, return the index of the first occurrence of 5, otherwise, return -1."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_index_of_five(numbers_list):\n    \"\"\"\n    Returns the index of the first occurrence of 5 in the given list of integers.\n    If 5 is not in the list, returns -1.\n    \"\"\"\n    try:\n        return numbers_list.index(5)\n    except ValueError:\n        return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_find_index_of_five():\n    assert find_index_of_five([7, 5, 2, 9]) == 1\n    assert find_index_of_five([1, 2, 3, 4]) == -1\n    assert find_index_of_five([5, 1, 2, 5, 3]) == 0\n    assert find_index_of_five([6, 8, 5, 5]) == 2\n    assert find_index_of_five([5]) == 0\n```"}], "metadata": {"prompt_id": "00000140", "row_id": 140, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a list of integers contains the number 5. If it does, return the index of the first occurrence of 5, otherwise, return -1."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum product of a triplet in an array. The array can contain both positive and negative numbers. The function should return the maximum product of any three numbers in the array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_triplet_product(arr):\n    \"\"\"\n    Finds and returns the maximum product that can be obtained from any three elements in the array.\n    \"\"\"\n    if len(arr) < 3:\n        raise ValueError(\"The input array must contain at least three elements.\")\n\n    # Sort the array to make it easier to find the maximum product\n    arr.sort()\n\n    # The maximum product can be either:\n    # 1. The product of the three largest numbers\n    # 2. The product of the two smallest (potentially negative) numbers and the largest number\n    n = len(arr)\n    return max(arr[0] * arr[1] * arr[n-1], arr[n-3] * arr[n-2] * arr[n-1])\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\nfrom solution import max_triplet_product\n\ndef test_max_triplet_product_with_positive_numbers():\n    assert max_triplet_product([1, 2, 3]) == 6\n\ndef test_max_triplet_product_with_mixed_numbers():\n    assert max_triplet_product([1, 10, -5, 1, -100]) == 5000  # -5 * -100 * 10\n\ndef test_max_triplet_product_with_negative_numbers():\n    assert max_triplet_product([-1, -2, -3, -4]) == -6\n\ndef test_max_triplet_product_with_zero():\n    assert max_triplet_product([0, 0, 0]) == 0\n\ndef test_max_triplet_product_with_small_array():\n    with pytest.raises(ValueError):\n        max_triplet_product([1, 2])\n\ndef test_max_triplet_product_with_larger_numbers():\n    assert max_triplet_product([0, -2, -8, -7, 0]) == 0  # 0 * 0 * -7\n    assert max_triplet_product([-5, -4, 2, 2]) == 40  # -5 * -4 * 2\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000144", "row_id": 144, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum product of a triplet in an array. The array can contain both positive and negative numbers. The function should return the maximum product of any three numbers in the array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort a list of integers using the Bubble sort algorithm."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef bubble_sort(arr):\n    \"\"\"\n    Sorts a list of integers using the Bubble sort algorithm.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        swapped = False\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                swapped = True\n        if not swapped:\n            break\n    return arr\n```\n<|Solution End|>\n\n<|Test Begin|>``\n```python\nfrom solution import bubble_sort\n\ndef test_bubble_sort_empty_list():\n    assert bubble_sort([]) == []\n\ndef test_bubble_sort_single_element():\n    assert bubble_sort([5]) == [5]\n\ndef test_bubble_sort_sorted_list():\n    assert bubble_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_bubble_sort_reverse_sorted_list():\n    assert bubble_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n\ndef test_bubble_sort_random_list():\n    assert bubble_sort([64, 34, 25, 12, 22, 11, 90]) == [11, 12, 22, 25, 34, 64, 90]\n\ndef test_bubble_sort_with_duplicates():\n    assert bubble_sort([64, 34, 25, 12, 22, 11, 11, 90, 22]) == [11, 11, 12, 22, 22, 25, 34, 64, 90]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000145", "row_id": 145, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort a list of integers using the Bubble sort algorithm."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum depth of a binary tree. The function should return an integer representing the maximum depth."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_depth(root):\n    \"\"\"\n    Return the max depth of a binary tree.\n    \"\"\"\n    if root is None:\n        return 0\n    else:\n        left_depth = max_depth(root.left)\n        right_depth = max_depth(root.right)\n        return max(left_depth, right_depth) + 1\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import max_depth, TreeNode\n\ndef create_tree(*values):\n    if not values:\n        return None\n    nodes = [None if val is None else TreeNode(val) for val in values]\n    kids = nodes[::-1]\n    root = kids.pop()\n    for node in nodes:\n        if node:\n            if kids:\n                node.left = kids.pop()\n            if kids:\n                node.right = kids.pop()\n    return root\n\n\ndef test_max_depth():\n    assert max_depth(None) == 0\n\ndef test_max_depth_single_node():\n    root = create_tree(1)\n    assert max_depth(root) == 1\n\ndef test_max_depth_complete_binary_tree():\n    #         1\n    #        / \\\n    #       2   3\n    #      / \\ / \\\n    #     4  5 6  7\n    #    / \\\n    #   8   9\n    root = create_tree(1, 2, 3, 4, 5, 6, 7, 8, 9)\n    assert max_depth(root) == 4\n\ndef test_max_depth_skewed_tree():\n    #         1\n    #          \\\n    #           2\n    #            \\\n    #             3\n    root = create_tree(1, None, 2, None, None, None, 3)\n    assert max_depth(root) == 3\n\ndef test_max_depth_unbalanced_tree():\n    #         1\n    #        /\n    #       2\n    #      /\n    #     3\n    #    /\n    #   4\n    root = create_tree(1, 2, None, 3, None, None, 4)\n    assert max_depth(root) == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000148", "row_id": 148, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum depth of a binary tree. The function should return an integer representing the maximum depth."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the minimum number of operations required to make all elements in a list equal. The operations allowed are incrementing any element by 1 or decrementing any element by 1."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_operations_to_equal_elements(nums):\n    \"\"\"\n    Returns the minimum number of operations required to make all elements in nums equal.\n    An operation consists of incrementing or decrementing an element by 1.\n    \"\"\"\n    return sum(abs(nums[0] - num) for num in nums)\n```\n<|Solution End|>\n<|Test Begin|>\n```python\nfrom solution import min_operations_to_equal_elements\n\ndef test_min_operations_to_equal_elements():\n    assert min_operations_to_equal_elements([1, 2, 3]) == 2  # [1, 2, 3] -> [2, 2, 2] (2 operations)\n    assert min_operations_to_equal_elements([1, 1, 1]) == 0  # All elements are already equal\n    assert min_operations_to_equal_elements([1, 10, 100]) == 110  # [1, 10, 100] -> [50, 50, 50] (110 operations)\n    assert min_operations_to_equal_elements([5, 5, 3, 3]) == 4  # [5, 5, 3, 3] -> [4, 4, 4, 4] or [5, 5, 5, 5] (4 operations)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000149", "row_id": 149, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the minimum number of operations required to make all elements in a list equal. The operations allowed are incrementing any element by 1 or decrementing any element by 1."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine if a given number is a power of two. A number is a power of two if it can be represented as 2^k where k is a non-negative integer. Assume the input is always a valid integer, both positive and negative, but negative numbers should be immediately determined as not powers of two."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef is_power_of_two(n):\n    \"\"\"\n    Returns True if n is a power of two, otherwise returns False.\n    \"\"\"\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef test_is_power_of_two():\n    assert is_power_of_two(1) == True\n    assert is_power_of_two(2) == True\n    assert is_power_of_two(4) == True\n    assert is_power_of_two(3) == False\n    assert is_power_of_two(16) == True\n    assert is_power_of_two(-2) == False\n    assert is_power_of_two(0) == False\n    assert is_power_of_two(1024) == True\n    assert is_power_of_two(1023) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000150", "row_id": 150, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine if a given number is a power of two. A number is a power of two if it can be represented as 2^k where k is a non-negative integer. Assume the input is always a valid integer, both positive and negative, but negative numbers should be immediately determined as not powers of two."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a decimal number to binary without using Python's built-in bin() function. Walk me through the process and the code."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef decimal_to_binary(n: int) -> str:\n    \"\"\"\n    Converts a decimal number to its binary representation without using the built-in bin function.\n    \n    Parameters:\n    n (int): The decimal number to be converted.\n    \n    Returns:\n    str: The binary representation of the decimal number.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2  # Find the remainder when n is divided by 2\n        binary_str = str(remainder) + binary_str  # Prepend the remainder to the binary string\n        n = n // 2  # Divide n by 2 and take the floor\n    return binary_str\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef test_decimal_to_binary():\n    assert decimal_to_binary(0) == \"0\"\n    assert decimal_to_binary(1) == \"1\"\n    assert decimal_to_binary(5) == \"101\"\n    assert decimal_to_binary(10) == \"1010\"\n    assert decimal_to_binary(255) == \"11111111\"\n    assert decimal_to_binary(256) == \"100000000\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000151", "row_id": 151, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a decimal number to binary without using Python's built-in bin() function. Walk me through the process and the code."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine whether a number is even or odd without using if else statements. You can use bitwise operators only."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_even(number):\n    \"\"\"\n    Returns True if the number is even, False otherwise.\n    Uses bitwise AND operator to determine if the number is even.\n    \"\"\"\n    return (number & 1) == 0\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_even\n\ndef test_is_even():\n    assert is_even(4) is True\n    assert is_even(5) is False\n    assert is_even(0) is True\n    assert is_even(-2) is True\n    assert is_even(-3) is False\n\ndef test_is_odd():\n    assert is_even(3) is False\n    assert is_even(-1) is False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000152", "row_id": 152, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine whether a number is even or odd without using if else statements. You can use bitwise operators only."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine the number of vowels in a string. The vowels are 'a', 'e', 'i', 'o', and 'u' (both lowercase and uppercase)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_vowels(s):\n    \"\"\"\n    Returns the number of vowels in the string s.\n    Vowels are 'a', 'e', 'i', 'o', 'u', both lowercase and uppercase.\n    \"\"\"\n    vowels = set(\"aeiouAEIOU\")\n    return sum(1 for char in s if char in vowels)\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import count_vowels\n\ndef test_count_vowels_empty_string():\n    assert count_vowels(\"\") == 0\n\ndef test_count_vowels_one_vowel():\n    assert count_vowels(\"Hello\") == 2\n    assert count_vowels(\"AEIOU\") == 5\n\ndef test_count_vowels_with_consonants():\n    assert count_vowels(\"This is a Test String\") == 7\n    assert count_vowels(\"Python Programming\") == 4\n\ndef test_count_vowels_no_vowels():\n    assert count_vowels(\"Rhythm\") == 0\n    assert count_vowels(\"bcdfghjkl\") == 0\n\ndef test_count_vowels_mixed_case():\n    assert count_vowels(\"BaNaNa\") == 3\n    assert count_vowels(\"HELLO\") == 2\n    assert count_vowels(\"Chapeau\") == 2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000153", "row_id": 153, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine the number of vowels in a string. The vowels are 'a', 'e', 'i', 'o', and 'u' (both lowercase and uppercase)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a given string into a list of words. Splitting can be done based on multiple characters. For instance, splitting can be done using the characters ',', '.', and ' ' (space). How would you approach this problem?"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef split_string_into_words(s):\n    \"\"\"\n    Splits the given string into words based on the delimiters ',', '.', and ' '.\n    Args:\n    s (str): The input string to split.\n    \n    Returns:\n    list: A list of words from the input string.\n    \"\"\"\n    delimiters = [',', '.', ' ']\n    words = []\n    current_word = ''\n    for char in s:\n        if char not in delimiters:\n            current_word += char\n        else:\n            if current_word:\n                words.append(current_word)\n                current_word = ''\n    if current_word:  # Append the last word if it exists\n        words.append(current_word)\n    return words\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import split_string_into_words\n\ndef test_split_string_into_words():\n    assert split_string_into_words(\"Hello, world. This is a test.\") == [\"Hello\", \"world\", \"This\", \"is\", \"a\", \"test\"]\n    assert split_string_into_words(\"Split,these,words...using,.delimiters\") == [\"Split\", \"these\", \"words\", \"using\", \"delimiters\"]\n    assert split_string_into_words(\"OneWord\") == [\"OneWord\"]\n    assert split_string_into_words(\",,,.  ..\") == []\n    assert split_string_into_words(\"\") == []\n    assert split_string_into_words(\"a,b.c d\") == [\"a\", \"b\", \"c\", \"d\"]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000154", "row_id": 154, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a given string into a list of words. Splitting can be done based on multiple characters. For instance, splitting can be done using the characters ',', '.', and ' ' (space). How would you approach this problem?"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to solve the following problem: Given a list of lists, return the sum of all numbers in the sublists that have an even number of elements."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_even_length_sublists(list_of_lists):\n    \"\"\"\n    Given a list of lists, returns the sum of all numbers in the sublists that have an even number of elements.\n\n    :param list_of_lists: A list containing sublists of integers.\n    :return: The sum of all numbers in the sublists that have an even number of elements.\n    \"\"\"\n    total_sum = 0\n    for sublist in list_of_lists:\n        if len(sublist) % 2 == 0:\n            total_sum += sum(sublist)\n    return total_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_even_length_sublists\n\ndef test_sum_even_length_sublists_even():\n    assert sum_even_length_sublists([[1, 2, 3, 4], [5, 6], [7, 8, 9], [10]]) == 30  # 1+2+3+4 + 7+8+9 = 30\n\ndef test_sum_even_length_sublists_odd_only():\n    assert sum_even_length_sublists([[1, 2, 3], [4, 5, 6]]) == 10  # 4+5+6 = 15\n\ndef test_sum_even_length_sublists_empty():\n    assert sum_even_length_sublists([[], [1, 2], [3, 4, 5, 6], [7, 8, 9, 10]]) == 30  # 1+2 + 7+8+9+10 = 30\n\ndef test_sum_even_length_sublists_all_odd():\n    assert sum_even_length_sublists([[1, 2], [3, 4, 5], [6]]) == 6  # 1+2 = 3\n\ndef test_sum_even_length_sublists_single_element():\n    assert sum_even_length_sublists([[1], [2, 3], [4, 5, 6], [7], []]) == 0  # No even-length sublists\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000157", "row_id": 157, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to solve the following problem: Given a list of lists, return the sum of all numbers in the sublists that have an even number of elements."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to to count the number of times a character appears in a string"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_char_in_string(s, char):\n    \"\"\"\n    Returns the number of times a character appears in a string.\n    Args:\n    s (str): The string to search in.\n    char (str): The character to count.\n    \n    Returns:\n    int: The count of the character in the string.\n    \"\"\"\n    return s.count(char)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_char_in_string\n\ndef test_count_char_in_string():\n    assert count_char_in_string(\"hello world\", \"l\") == 3\n    assert count_char_in_string(\"aaaabbb\", \"a\") == 4\n    assert count_char_in_string(\"python programming\", \"p\") == 2\n    assert count_char_in_string(\"test case\", \"z\") == 0\n\ndef test_count_char_in_empty_string():\n    assert count_char_in_string(\"\", \"a\") == 0\n\ndef test_count_char_case_insensitive():\n    assert count_char_in_string(\"Hello World\", \"h\") == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000158", "row_id": 158, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to to count the number of times a character appears in a string"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a string without using extra space."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef reverse_string(s):\n    \"\"\"\n    Reverses the given string `s` without using extra space.\n    \n    Args:\n    s (str): The string to be reversed.\n\n    Returns:\n    str: The reversed string.\n    \"\"\"\n    return s[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import reverse_string\n\ndef test_reverse_string_empty():\n    assert reverse_string(\"\") == \"\"\n\ndef test_reverse_string_single_char():\n    assert reverse_string(\"a\") == \"a\"\n\ndef test_reverse_string_regular():\n    assert reverse_string(\"hello\") == \"olleh\"\n\ndef test_reverse_string_with_spaces():\n    assert reverse_string(\"hello world\") == \"dlrow olleh\"\n\ndef test_reverse_string_special_chars():\n    assert reverse_string(\"!!hello!!\") == \"!!olleh!!\"\n    assert reverse_string(\"!hello-123! nguy\u00ean!\") == \"!nghi\u00ean grievances-321 olleh!\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000159", "row_id": 159, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a string without using extra space."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the second largest number in a list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef second_largest(numbers):\n    \"\"\"\n    Returns the second largest number in the list.\n    If the list has less than 2 unique numbers, return None.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    unique_numbers = set(numbers)\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers = sorted(unique_numbers, reverse=True)\n    return unique_numbers[1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import second_largest\n\ndef test_second_largest_with_duplicates():\n    assert second_largest([10, 20, 20, 30, 40]) == 30\n\ndef test_second_largest_all_unique():\n    assert second_largest([10, 20, 30, 40, 50]) == 40\n\ndef test_second_largest_single_element():\n    assert second_largest([10]) == None\n\ndef test_second_largest_empty_list():\n    assert second_largest([]) == None\n\ndef test_second_largest_uniform_values():\n    assert second_largest([5, 5, 5, 5]) == None\n\ndef test_second_largest_one_element_duplicate():\n    assert second_largest([10, 10]) == None\n\ndef test_second_largest_negative_numbers():\n    assert second_largest([-10, -20, -15, -5]) == -10\n\ndef test_second_largest_mixed_numbers():\n    assert second_largest([1, 2, -1, -2, 0]) == 1\n```"}], "metadata": {"prompt_id": "00000160", "row_id": 160, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the second largest number in a list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to generate all possible combinations of a given list of numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nfrom itertools import combinations\n\ndef generate_combinations(numbers):\n    \"\"\"\n    Generate all possible combinations of a given list of numbers including the empty set.\n    :param numbers: List of numbers to generate combinations from.\n    :return: A list of tuples, each representing a combination.\n    \"\"\"\n    all_combinations = []\n    for r in range(len(numbers) + 1):\n        for combo in combinations(numbers, r):\n            all_combinations.append(combo)\n    return all_combinations\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\nfrom solution import generate_combinations\n\ndef test_empty_list():\n    assert generate_combinations([]) == [(),]\n\ndef test_single_element_list():\n    assert generate_combinations([1]) == [(), (1,)]\n\ndef test_two_elements_list():\n    assert generate_combinations([1, 2]) == [(), (1,), (2,), (1, 2)]\n\ndef test_three_elements_list():\n    assert generate_combinations([1, 2, 3]) == [(), (1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]\n\ndef test_with_duplicates():\n    assert generate_combinations([1, 2, 1]) == [(), (1,), (2,), (1, 1), (1, 2), (2, 1)]\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000161", "row_id": 161, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to generate all possible combinations of a given list of numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to filter out all even numbers from a list, which also handles both positive and negative integers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef filter_even_numbers(numbers):\n    \"\"\"\n    Returns a new list containing only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import filter_even_numbers\n\ndef test_filter_even_numbers_empty_list():\n    assert filter_even_numbers([]) == []\n\ndef test_filter_even_numbers_all_even():\n    assert filter_even_numbers([2, -4, 0, 6]) == []\n\ndef test_filter_even_numbers_all_odd():\n    assert filter_even_numbers([-1, 3, 5, 7]) == [-1, 3, 5, 7]\n\ndef test_filter_even_numbers_mixed():\n    assert filter_even_numbers([-2, -1, 0, 1, 2, 3]) == [-1, 1, 3]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000162", "row_id": 162, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to filter out all even numbers from a list, which also handles both positive and negative integers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to extract all the shortest words from a string of text."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef extract_shortest_words(text):\n    \"\"\"\n    Returns a list of the shortest words in the given text.\n    If there are multiple words of the same shortest length, all are included.\n    Words are considered as sequences of alphanumeric characters separated by non-alphanumeric characters.\n    \"\"\"\n    # Split the text into words based on non-alphanumeric characters\n    words = text.split()\n    # Find the minimum length of words to determine the shortest words\n    min_length = min(len(word) for word in words)\n    # Extract all words that are of the minimum length\n    shortest_words = [word for word in words if len(word) == min_length]\n    return shortest_words\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import extract_shortest_words\n\ndef test_extract_shortest_words():\n    assert extract_shortest_words(\"The quick brown fox\") == ['The', 'fox']  # 'The' and 'fox' are both 3 characters long\n    assert extract_shortest_words(\"Jumped over the lazy dog\") == ['over', 'the']  # 'over' and 'the' are both 4 characters long\n    assert extract_shortest_words(\"aaaa bbb c\") == ['aaa', 'bbb']  # 'aaa' and 'bbb' are both 3 characters long\n    assert extract_shortest_words(\"\") == []  # Empty string should return an empty list\n    assert extract_shortest_words(\"a b c d e f g\") == ['a', 'b', 'c', 'd', 'e', 'f', 'g']  # All words are one character long\n    assert extract_shortest_words(\"primirro\") == ['primirro']  # Single word, longest one\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000163", "row_id": 163, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to extract all the shortest words from a string of text."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count missing data (None) in a nested list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_missing_data(nested_list):\n    \"\"\"\n    Counts the number of missing data (None) in a nested list.\n    \n    Parameters:\n    nested_list (list): A nested list containing any type of elements.\n    \n    Returns:\n    int: The count of missing data (None) in the nested list.\n    \"\"\"\n    count = 0\n    for element in nested_list:\n        if element is None:\n            count += 1\n        elif isinstance(element, list):\n            count += count_missing_data(element)\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_missing_data\n\ndef test_count_missing_data_empty_list():\n    assert count_missing_data([]) == 0\n\ndef test_count_missing_data_single_element():\n    assert count_missing_data([1]) == 0\n\ndef test_count_missing_data_single_none():\n    assert count_missing_data([None]) == 1\n\ndef test_count_missing_data_nested_none():\n    assert count_missing_data([[None, 2], [3, None]]) == 2\n\ndef test_count_missing_data_complex_nested():\n    assert count_missing_data([[None, 2, [None, 3]], [4, None, [5, None]]]) == 5\n\ndef test_count_missing_data_no_none():\n    assert count_missing_data([[1, 2], [3, 4]]) == 0\n\ndef test_count_missing_data_mixed():\n    assert count_missing_data([None, [1, None], [2, 3], None]) == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000167", "row_id": 167, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count missing data (None) in a nested list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to parse and extract specific data from XML using `xml.etree.ElementTree`"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport xml.etree.ElementTree as ET\n\ndef extract_data_from_xml(xml_string, tag_name):\n    \"\"\"\n    Parses the XML string and extracts the text content of elements with the specified tag name.\n    \n    :param xml_string: The XML content as a string.\n    :param tag_name: The tag name of the elements to extract.\n    :return: A list of text contents of the found elements.\n    \"\"\"\n    root = ET.fromstring(xml_string)\n    extracted_data = [element.text for element in root.findall(tag_name)]\n    return extracted_data\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport xml.etree.ElementTree as ET\nfrom solution import extract_data_from_xml\n\ndef test_extract_data_from_xml():\n    test_xml = '''\n    <root>\n        <data>First Data</data>\n        <data>Second Data</data>\n    </root>\n    '''\n    expected_output = ['First Data', 'Second Data']\n    assert extract_data_from_xml(test_xml, 'data') == expected_output\n\ndef test_extract_empty_xml():\n    test_xml = ''\n    expected_output = []\n    assert extract_data_from_xml(test_xml, 'data') == expected_output\n\ndef test_extract_no_matching_tag():\n    test_xml = '''\n    <root>\n        <info>Some Info</info>\n    </root>\n    '''\n    expected_output = []\n    assert extract_data_from_xml(test_xml, 'data') == expected_output\n\ndef test_extract_with_whitespace():\n    test_xml = '''\n    <root>\n        <data>\\n\\tFirst Data\\n</data>\n        <data>\\nSecond Data\\n</data>\n    </root>\n    '''\n    expected_output = ['First Data', 'Second Data']\n    assert extract_data_from_xml(test_xml, 'data') == expected_output\n\ndef test_extract_empty_tag():\n    test_xml = '''\n    <root>\n        <data></data>\n        <data>Empty Data</data>\n    </root>\n    '''\n    expected_output = ['Empty Data']\n    assert extract_data_from_xml(test_xml, 'data') == expected_output\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000168", "row_id": 168, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to parse and extract specific data from XML using `xml.etree.ElementTree`"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to evaluate a postfix expression (Reverse Polish Notation)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef evaluate_postfix(expression: str) -> int:\n    \"\"\"\n    Evaluates a postfix expression.\n    :param expression: A string representing a postfix expression.\n    :return: The result of the expression.\n    \"\"\"\n    stack = []\n    operators = set(['+', '-', '*', '/'])\n    \n    for token in expression.split():\n        if token not in operators:\n            stack.append(int(token))\n        else:\n            if len(stack) < 2:\n                raise ValueError(\"Invalid expression\")\n            right = stack.pop()\n            left = stack.pop()\n            \n            if token == '+':\n                stack.append(left + right)\n            elif token == '-':\n                stack.append(left - right)\n            elif token == '*':\n                stack.append(left * right)\n            elif token == '/':\n                if right == 0:\n                    raise ValueError(\"Division by zero\")\n                stack.append(int(left / right))\n                \n    if len(stack) != 1:\n        raise ValueError(\"Invalid expression\")\n    \n    return stack[0]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import evaluate_postfix\n\ndef test EvaluatePostfix_valid_input():\n    assert evaluate_postfix(\"3 4 + 2 * 7 /\") == 2\n    assert evaluate_postfix(\"10 2 8 * + 100 2 / -\") == 90\n\ndef test EvaluatePostfix_single_number():\n    assert evaluate_postfix(\"5\") == 5\n\ndef test EvaluatePostfix_no_operand():\n    with pytest.raises(ValueError):\n        evaluate_postfix(\"3 +\")\n\ndef test EvaluatePostfix_division_by_zero():\n    with pytest.raises(ZeroDivisionError):\n        evaluate_postfix(\"1 0 /\")\n\ndef test EvaluatePostfix_invalid_expression():\n    with pytest.raises(ValueError):\n        evaluate_postfix(\"3 4 6 +\")\n    with pytest.raises(ValueError):\n        evaluate_postfix(\"3 a +\")\n    with pytest.raises(ValueError):\n        evaluate_postfix(\"10 2 / 10 -\")\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000169", "row_id": 169, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to evaluate a postfix expression (Reverse Polish Notation)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the sum of the first `n` natural numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_of_natural_numbers(n):\n    \"\"\"\n    Returns the sum of the first n natural numbers.\n    \n    Args:\n    n (int): The number of initial natural numbers to sum.\n    \n    Returns:\n    int: The sum of the first n natural numbers.\n    \"\"\"\n    return n * (n + 1) // 2\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_of_natural_numbers\n\ndef test_sum_of_natural_numbers_with_1():\n    assert sum_of_natural_numbers(1) == 1\n\ndef test_sum_of_natural_numbers_with_5():\n    assert sum_of_natural_numbers(5) == 15\n\ndef test_sum_of_natural_numbers_with_10():\n    assert sum_of_natural_numbers(10) == 55\n\ndef test_sum_of_natural_numbers_with_0():\n    assert sum_of_natural_numbers(0) == 0\n\ndef test_sum_of_natural_numbers_with_negative_number():\n    assert sum_of_natural_numbers(-1) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000170", "row_id": 170, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the sum of the first `n` natural numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the longest continuous substring that can be formed with at most two distinct characters in a given string. For example, for the input string \"aabacbebebe\", the function should return 7, as the longest substring that can be formed with at most two distinct characters is \"cbebebe\"."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_substring_two_distinct(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of s that contains at most two distinct characters.\n    \"\"\"\n    if not s:\n        return 0\n\n    n = len(s)\n    max_length = 1\n    start, end = 0, 0\n    char_map = {}\n\n    while end < n:\n        if len(char_map) < 3:\n            char_map[s[end]] = char_map.get(s[end], 0) + 1\n            end += 1\n\n        if len(char_map) == 3:\n            max_length = max(max_length, end - start)\n            # Remove the earliest character to maintain at most 2 distinct characters\n            start_char = min(char_map, key=char_map.get)\n            char_map.pop(start_char)\n            start += char_map[start_char]\n            char_map[s[end - 1]] = 1\n\n        max_length = max(max_length, end - start)\n\n    return max_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import longest_substring_two_distinct\n\ndef test_longest_substring_two_distinct():\n    assert longest_substring_two_distinct(\"aabacbebebe\") == 7\n    assert longest_substring_two_distinct(\"abcabcabc\") == 3\n    assert longest_substring_two_distinct(\"abcd\") == 4\n    assert longest_substring_two_distinct(\"a\") == 1\n    assert longest_substring_two_distinct(\"\") == 0\n    assert longest_substring_two_distinct(\"aaabbaac\") == 6\n    assert longest_substring_two_distinct(\"zzzzzzz\") == 1\n    assert longest_substring_two_distinct(\"aabbxxbb\") == 6\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000174", "row_id": 174, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the longest continuous substring that can be formed with at most two distinct characters in a given string. For example, for the input string \"aabacbebebe\", the function should return 7, as the longest substring that can be formed with at most two distinct characters is \"cbebebe\"."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to print the first nth Fibonacci numbers in the format `[F(1), F(2), F(3), ..., F(n)]`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci_sequence(n):\n    \"\"\"\n    Returns a list containing the first n Fibonacci numbers.\n    \"\"\"\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    \n    fib_sequence = [0, 1]\n    for i in range(2, n):\n        next_fib = fib_sequence[-1] + fib_sequence[-2]\n        fib_sequence.append(next_fib)\n    \n    return fib_sequence\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import fibonacci_sequence\n\ndef test_fibonacci_sequence_zero():\n    assert fibonacci_sequence(0) == []\n\ndef test_fibonacci_sequence_one():\n    assert fibonacci_sequence(1) == [0]\n\ndef test_fibonacci_sequence_two():\n    assert fibonacci_sequence(2) == [0, 1]\n\ndef test_fibonacci_sequence_five():\n    expected = [0, 1, 1, 2, 3]\n    assert fibonacci_sequence(5) == expected\n\ndef test_fibonacci_sequence_ten():\n    expected = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    assert fibonacci_sequence(10) == expected\n\ndef test_fibonacci_sequence_thirty():\n    # Generate the first 30 Fibonacci numbers for comparison\n    expected = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811]\n    assert fibonacci_sequence(30) == expected\n```"}], "metadata": {"prompt_id": "00000175", "row_id": 175, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to print the first nth Fibonacci numbers in the format `[F(1), F(2), F(3), ..., F(n)]`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the minimum number of deletions required to make a string a palindrome."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef min_deletions_to_palindrome(s: str) -> int:\n    \"\"\"\n    Returns the minimum number of deletions required to make a string a palindrome.\n    \"\"\"\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # Fill dp table\n    for gap in range(1, n):\n        for i in range(n - gap):\n            j = i + gap\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i][j - 1], dp[i + 1][j]) + 1\n                \n    return dp[0][n - 1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef test_min_deletions_to_palindrome():\n    assert min_deletions_to_palindrome(\"abc\") == 2\n    assert min_deletions_to_palindrome(\"abcba\") == 0\n    assert min_deletions_to_palindrome(\"abcd\") == 3\n    assert min_deletions_to_palindrome(\"aaa\") == 0\n    assert min_deletions_to_palindrome(\"abccba\") == 0\n    assert min_deletions_to_palindrome(\"ababc\") == 2\n    assert min_deletions_to_palindrome(\"aba\") == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000176", "row_id": 176, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the minimum number of deletions required to make a string a palindrome."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort an array using the Quick Sort algorithm."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef quick_sort(arr):\n    \"\"\"\n    Sorts an array using the Quick Sort algorithm.\n    \n    Parameters:\n    arr (list): The list of elements to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [x for x in arr[1:] if x <= pivot]\n        greater = [x for x in arr[1:] if x > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)\n```\n<|Solution End|>\n\n<|Test Begin|>\r\n```python\r\ndef test_quick_sort():\r\n    arr = [3, 6, 8, 10, 1, 2, 1]\r\n    sorted_arr = quick_sort(arr)\r\n    expected = [1, 1, 2, 3, 6, 8, 10]\r\n    assert sorted_arr == expected\r\n\r\ndef test_quick_sort_empty():\r\n    arr = []\r\n    sorted_arr = quick_sort(arr)\r\n    expected = []\r\n    assert sorted_arr == expected\r\n\r\ndef test_quick_sort_single_element():\r\n    arr = [5]\r\n    sorted_arr = quick_sort(arr)\r\n    expected = [5]\r\n    assert sorted_arr == expected\r\n\r\ndef test_quick_sort_negative_numbers():\r\n    arr = [3, -1, -12, 0, 15, 4]\r\n    sorted_arr = quick_sort(arr)\r\n    expected = [-12, -1, 0, 3, 4, 15]\r\n    assert sorted_arr == expected\r\n\r\ndef test_quick_sort_duplicate_elements():\r\n    arr = [4, 4, 4, 4, 4]\r\n    sorted_arr = quick_sort(arr)\r\n    expected = [4, 4, 4, 4, 4]\r\n    assert sorted_arr == expected\r\n\r\ndef test_quick_sort_already_sorted():\r\n    arr = [1, 2, 3, 4, 5]\r\n    sorted_arr = quick_sort(arr)\r\n    expected = [1, 2, 3, 4, 5]\r\n    assert sorted_arr == expected\r\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000177", "row_id": 177, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort an array using the Quick Sort algorithm."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to generate a Fibonacci sequence up to a given number `n`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef generate_fibonacci(n):\n    \"\"\"\n    Generate a Fibonacci sequence up to the given number n.\n    \n    Args:\n    n (int): The upper limit for the Fibonacci sequence.\n    \n    Returns:\n    list: A list containing the Fibonacci sequence up to n.\n    \"\"\"\n    if n <= 0:\n        return []\n    sequence = [0, 1]\n    while True:\n        next_value = sequence[-1] + sequence[-2]\n        if next_value > n:\n            break\n        sequence.append(next_value)\n    return sequence\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_generate_fibonacci():\n    assert generate_fibonacci(10) == [0, 1, 1, 2, 3, 5, 8]\n    assert generate_fibonacci(1) == [0, 1, 1]\n    assert generate_fibonacci(0) == []\n    assert generate_fibonacci(21) == [0, 1, 1, 2, 3, 5, 8, 13, 21]\n    assert generate_fibonacci(34) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    assert generate_fibonacci(-5) == []\n```"}], "metadata": {"prompt_id": "00000178", "row_id": 178, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to generate a Fibonacci sequence up to a given number `n`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given string `s` contains a sequence of consecutive repeating characters that are not adjacent to each other."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef has_separated_repeats(s: str) -> bool:\n    \"\"\"\n    Returns True if the string s contains at least one sequence of \n    consecutive repeating characters that are not adjacent to each other;\n    otherwise, returns False.\n\n    >>> has_separated_repeats(\"abcddcba\")\n    False\n    >>> has_separated_repeats(\"a\")\n    False\n    >>> has_separated_repeats(\"abdccbda\")\n    True\n    \"\"\"\n    prev_char = None\n    repeat_count = 0\n    for i, char in enumerate(s):\n        if char == prev_char:\n            repeat_count += 1\n            # Check if the repeat is not adjacent\n            if i > 0 and s[i-1] != char:\n                return True\n        else:\n            prev_char = char\n            repeat_count = 1\n\n    return False\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import has_separated_repeats\n\ndef test_no_repeats():\n    assert not has_separated_repeats(\"abcdefg\")\n\ndef test_adjacent_repeats():\n    assert not has_separated_repeats(\"aabbcc\")\n\ndef test_non_adjacent_repeats():\n    assert has_separated_repeats(\"aabbccdd\")\n\ndef test_single_char():\n    assert not has_separated_repeats(\"a\")\n\ndef test_several_non_adjacent_repeats():\n    assert has_separated_repeats(\"ababa\")\n    assert has_separated_repeats(\"abcda\")\n    assert has_separated_repeats(\"abbcdd\")\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000180", "row_id": 180, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given string `s` contains a sequence of consecutive repeating characters that are not adjacent to each other."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find Fibonacci numbers up to a given limit 'n' and store the results in a list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci_up_to(n):\n    \"\"\"\n    Returns a list of Fibonacci numbers up to a given limit 'n'.\n    \"\"\"\n    if n <= 0:\n        return []\n    fib_list = [0]\n    if n == 1:\n        return fib_list\n    fib_list.append(1)\n    while True:\n        next_fib = fib_list[-1] + fib_list[-2]\n        if next_fib > n:\n            break\n        fib_list.append(next_fib)\n    return fib_list\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import fibonacci_up_to\n\ndef test_fibonacci_up_to_zero():\n    assert fibonacci_up_to(0) == []\n\ndef test_fibonacci_up_to_one():\n    assert fibonacci_up_to(1) == [0]\n\ndef test_fibonacci_up_to_five():\n    assert fibonacci_up_to(5) == [0, 1, 1, 2, 3]\n\ndef test_fibonacci_up_to_ten():\n    assert fibonacci_up_to(10) == [0, 1, 1, 2, 3, 5, 8]\n\ndef test_fibonacci_up_to_large_limit():\n    assert fibonacci_up_to(100) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000181", "row_id": 181, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find Fibonacci numbers up to a given limit 'n' and store the results in a list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find all possible subsets of a set. You can return them as a list of lists."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom itertools import chain, combinations\n\ndef all_subsets(s):\n    \"\"\"\n    Returns a list of all possible subsets of the input set s.\n    \"\"\"\n    return list(chain.from_iterable(combinations(s, r) for r in range(len(s)+1)))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import all_subsets\n\ndef test_all_subsets_empty_set():\n    assert all_subsets(set()) == [()]\n\ndef test_all_subsets_one_element():\n    assert all_subsets({1}) == [(), (1,)]\n\ndef test_all_subsets_two_elements():\n    assert all_subsets({1, 2}) == [(), (1,), (2,), (1, 2)]\n\ndef test_all_subsets_three_elements():\n    assert all_subsets({1, 2, 3}) == [(), (1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000182", "row_id": 182, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find all possible subsets of a set. You can return them as a list of lists."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a string. What are the concepts used here?"}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef reverse_string(s):\n    \"\"\"\n    Reverses the given string.\n    \"\"\"\n    return s[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import reverse_string\n\ndef test_reverse_string_empty():\n    assert reverse_string(\"\") == \"\"\n\ndef test_reverse_string_single_char():\n    assert reverse_string(\"a\") == \"a\"\n\ndef test_reverse_string Normal():\n    assert reverse_string(\"hello\") == \"olleh\"\n\ndef test_reverse_string_with_spaces():\n    assert reverse_string(\"a b c\") == \"c b a\"\n\ndef test_reverse_string_special_chars():\n    assert reverse_string(\"!@#$%^&*()\") == \")(*&^%$#@!\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000183", "row_id": 183, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a string. What are the concepts used here?"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort a list of integers in ascending order using the quicksort algorithm. Each integer is in the range of [0, 100000]."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef quicksort(arr):\n    \"\"\"\n    Sorts an array of integers in ascending order using the quicksort algorithm.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_quicksort():\n    assert quicksort([3, 6, 8, 10, 1, 2, 1]) == [1, 1, 2, 3, 6, 8, 10]\n    assert quicksort([100, 90, 80, 70, 60, 50]) == [50, 60, 70, 80, 90, 100]\n    assert quicksort([0, 0, 0, 1, 1, 1]) == [0, 0, 0, 1, 1, 1]\n    assert quicksort([]) == []\n    assert quicksort([100000, 99999, 99998]) == [99998, 99999, 100000]\n```"}], "metadata": {"prompt_id": "00000184", "row_id": 184, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort a list of integers in ascending order using the quicksort algorithm. Each integer is in the range of [0, 100000]."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the smallest number that is a multiple of both given integers. To solve this, create a helper function to calculate the greatest common divisor (GCD) of two numbers and then use this helper function to find the least common multiple (LCM) of two numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor (GCD) of a and b using Euclid's algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    \"\"\"\n    Returns the least common multiple (LCM) of a and b using the formula lcm(a, b) = abs(a*b) // gcd(a, b).\n    \"\"\"\n    return abs(a * b) // gcd(a, b)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import gcd, lcm\n\ndef test_gcd():\n    assert gcd(3, 5) == 1\n    assert gcd(25, 15) == 5\n    assert gcd(100, 200) == 100\n\ndef test_lcm():\n    assert lcm(3, 5) == 15\n    assert lcm(25, 15) == 75\n    assert lcm(100, 200) == 200\n\ndef test_lcm_with_gcd():\n    assert lcm(2, 3) == 6  # LCM using gcd should match the direct calculation\n    assert lcm(12, 15) == 60\n    assert lcm(7, 14) == 14\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000185", "row_id": 185, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the smallest number that is a multiple of both given integers. To solve this, create a helper function to calculate the greatest common divisor (GCD) of two numbers and then use this helper function to find the least common multiple (LCM) of two numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a linked list using a stack data structure."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass ListNode:\n    \"\"\"Simple linked list node class.\"\"\"\n    def __init__(self, value=0, next=None):\n        self.value = value\n        self.next = next\n\ndef reverse_linked_list(head):\n    \"\"\"\n    Reverses a linked list in-place using a stack to temporarily store nodes.\n    \n    :param head: ListNode, the head of the linked list to be reversed\n    :return: ListNode, the new head of the reversed linked list\n    \"\"\"\n    stack = []\n    current = head\n    while current:\n        stack.append(current)\n        current = current.next\n    \n    # If the list was empty, return None or the last node.\n    if not stack:\n        return None\n    \n    new_head = stack.pop()\n    current = new_head\n    while stack:\n        current.next = stack.pop()\n        current = current.next\n    current.next = None\n    \n    return new_head\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import ListNode, reverse_linked_list\n\ndef construct_linked_list(values):\n    \"\"\"Constructs a linked list from a list of values.\"\"\"\n    if not values:\n        return None\n    head = ListNode(values[0])\n    current = head\n    for value in values[1:]:\n        current.next = ListNode(value)\n        current = current.next\n    return head\n\ndef to_list(node):\n    \"\"\"Converts a linked list to a list of values.\"\"\"\n    values = []\n    while node:\n        values.append(node.value)\n        node = node.next\n    return values\n\ndef test_reverse_linked_list():\n    # Test with a non-empty list\n    assert to_list(reverse_linked_list(construct_linked_list([1, 2, 3, 4]))) == [4, 3, 2, 1]\n\n    # Test with a single element\n    assert to_list(reverse_linked_list(construct_linked_list([5]))) == [5]\n\n    # Test with an empty list\n    assert to_list(reverse_linked_list(construct_linked_list([]))) == []\n\n    # Test with a negative number\n    assert to_list(reverse_linked_list(construct_linked_list([-5, 6, -7, 8]))) == [8, -7, 6, -5]\n\n    # Test with all negative numbers\n    assert to_list(reverse_linked_list(construct_linked_list([-1, -2, -3, -4]))) == [-4, -3, -2, -1]\n\n    # Test with repeated numbers\n    assert to_list(reverse_linked_list(construct_linked_list([1, 1, 1, 1]))) == [1, 1, 1, 1]\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000186", "row_id": 186, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a linked list using a stack data structure."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the Floyd Warshall shortest path algorithm from a given directed graph. The graph is represented using an adjacency matrix."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef floyd_warshall(graph):\n    \"\"\"\n    Finds and returns the shortest paths between all pairs of vertices using Floyd-Warshall algorithm.\n    :param graph: List[List[int]], where graph[i][j] is the weight of the edge from vertex i to vertex j.\n                  If there is no direct edge, graph[i][j] should be None.\n    :return: List[List[int]], where res[i][j] is the length of the shortest path from vertex i to vertex j.\n    \"\"\"\n    V = len(graph)\n    res = [[graph[i][j] if graph[i][j] is not None else float('inf') for j in range(V)] for i in range(V)]\n    \n    for via in range(V):\n        for start in range(V):\n            for end in range(V):\n                if res[start][end] > res[start][via] + res[via][end]:\n                    res[start][end] = res[start][via] + res[via][end]\n    return res\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef test_floyd_warshall():\n    graph = [\n        [0, 3, float('inf'), 7],\n        [8, 0, 2, float('inf')],\n        [5, float('inf'), 0, 1],\n        [2, float('inf'), float('inf'), 0]\n    ]\n    expected_result = [\n        [0, 3, 5, 7],\n        [8, 0, 2, 4],\n        [5, 7, 0, 1],\n        [2, 7, 6, 0]\n    ]\n    result = floyd_warshall(graph)\n    assert result == expected_result\n\ndef test_floyd_warshall_with_suboptimal_paths():\n    graph = [\n        [0, 2, 1],\n        [float('inf'), 0, 4],\n        [float('inf'), float('inf'), 0]\n    ]\n    expected_result = [\n        [0, 2, 1],\n        [3, 0, 3],\n        [4, 5, 0]\n    ]\n    result = floyd_warshall(graph)\n    assert result == expected_result\n\ndef test_floyd_warshall_all_positive_edges():\n    graph = [\n        [0, 3, 1],\n        [1, 0, 1],\n        [2, 2, 0]\n    ]\n    expected_result = [\n        [0, 3, 2],\n        [2, 0, 1],\n        [2, 2, 0]\n    ]\n    result = floyd_warshall(graph)\n    assert result == expected_result\n\ndef test_floyd_warshall_empty_graph():\n    graph = [[]]\n    expected_result = [[0]]\n    result = floyd_warshall(graph)\n    assert result == expected_result\n\ndef test_floyd_warshall_single_vertex():\n    graph = [[0]]\n    expected_result = [[0]]\n    result = floyd_warshall(graph)\n    assert result == expected_result\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000187", "row_id": 187, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the Floyd Warshall shortest path algorithm from a given directed graph. The graph is represented using an adjacency matrix."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the nth Fibonacci number using recursion."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci(n):\n    \"\"\"\n    Returns the nth Fibonacci number using recursion.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import fibonacci\n\ndef test_fibonacci_zero():\n    assert fibonacci(0) == 0\n\ndef test_fibonacci_one():\n    assert fibonacci(1) == 1\n\ndef test_fibonacci_two():\n    assert fibonacci(2) == 1\n\ndef test_fibonacci_three():\n    assert fibonacci(3) == 2\n\ndef test_fibonacci_five():\n    assert fibonacci(5) == 5\n\ndef test_fibonacci_ten():\n    assert fibonacci(10) == 55\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000188", "row_id": 188, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the nth Fibonacci number using recursion."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given number is a Fibonacci number or not."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_perfect_square(x):\n    s = int(x ** 0.5)\n    return s * s == x\n\ndef is_fibonacci_number(n):\n    \"\"\"\n    Returns True if n is a Fibonacci number, False otherwise.\n    \"\"\"\n    # A number is Fibonacci if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square\n    return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import is_fibonacci_number, is_perfect_square\n\ndef test_is_perfect_square():\n    assert is_perfect_square(1) == True\n    assert is_perfect_square(4) == True\n    assert is_perfect_square(9) == True\n    assert is_perfect_square(16) == True\n    assert is_perfect_square(25) == True\n    assert is_perfect_square(2) == False\n    assert is_perfect_square(3) == False\n    assert is_perfect_square(17) == False\n\ndef test_is_fibonacci_number():\n    assert is_fibonacci_number(0) == True\n    assert is_fibonacci_number(1) == True\n    assert is_fibonacci_number(5) == True\n    assert is_fibonacci_number(8) == True\n    assert is_fibonacci_number(13) == True\n    assert is_fibonacci_number(21) == True\n    assert is_fibonacci_number(34) == True\n    assert is_fibonacci_number(55) == True\n    assert is_fibonacci_number(6) == False\n    assert is_fibonacci_number(-4) == False\n    assert is_fibonacci_number(20) == False\n``` \n\n<|Test End|>"}], "metadata": {"prompt_id": "00000189", "row_id": 189, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given number is a Fibonacci number or not."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine if a number is a \"perfect square\" number. A \"perfect square\" number is an integer that is the square of an integer. For example, 16 is a perfect square because it is 4 squared."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return n == root * root\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_perfect_square\n\ndef test_perfect_squares():\n    assert is_perfect_square(1) == True\n    assert is_perfect_square(4) == True\n    assert is_perfect_square(16) == True\n    assert is_perfect_square(25) == True\n\ndef test_non_perfect_squares():\n    assert is_perfect_square(2) == False\n    assert is_perfect_square(3) == False\n    assert is_perfect_square(5) == False\n    assert is_perfect_square(17) == False\n\ndef test_zero():\n    assert is_perfect_square(0) == True\n\ndef test_negative_numbers():\n    assert is_perfect_square(-1) == False\n    assert is_perfect_square(-4) == False\n    assert is_perfect_square(-16) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000190", "row_id": 190, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine if a number is a \"perfect square\" number. A \"perfect square\" number is an integer that is the square of an integer. For example, 16 is a perfect square because it is 4 squared."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a linked list in place."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass ListNode:\n    \"\"\"Simple linked list node class.\"\"\"\n    def __init__(self, value=0, next=None):\n        self.value = value\n        self.next = next\n\ndef reverse_linked_list(head):\n    \"\"\"\n    Reverses a linked list in place and returns the new head.\n    \n    :param head: ListNode\n        The head node of the linked list to be reversed.\n    :return: ListNode\n        The new head node of the reversed linked list.\n    \"\"\"\n    prev = None\n    current = head\n    while current:\n        next_node = current.next  # Store next node\n        current.next = prev       # Reverse the current node's pointer\n        prev = current            # Move prev and current one step forward\n        current = next_node\n    return prev\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import ListNode, reverse_linked_list\n\ndef test_reverse_linked_list():\n    # Create a linked list 1 -> 2 -> 3\n    node3 = ListNode(3)\n    node2 = ListNode(2, node3)\n    node1 = ListNode(1, node2)\n    \n    # Reverse it to 3 -> 2 -> 1\n    reversed_head = reverse_linked_list(node1)\n    assert reversed_head.value == 3\n    \n    # Check the next nodes\n    assert reversed_head.next.value == 2\n    assert reversed_head.next.next.value == 1\n    \ndef test_reverse_empty_list():\n    # Reverse an empty list, should return None\n    assert reverse_linked_list(None) is None\n\ndef test_reverse_single_node():\n    # Reverse a single node list, should return the same node\n    node = ListNode(4)\n    assert reverse_linked_list(node).value == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000191", "row_id": 191, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a linked list in place."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the first repeating character in a string. If no character is repeating, return -1. For example, in the string \"programming\", the first repeating character is 'r'."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef first_repeating_char(s):\n    \"\"\"\n    Finds and returns the first repeating character in the given string.\n    If no character repeats, returns -1.\n    \"\"\"\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_first_repeating_char():\n    assert first_repeating_char(\"programming\") == 'r'\n    assert first_repeating_char(\"abcdef\") == -1\n    assert first_repeating_char(\"aabbccddeeff\") == 'a'\n    assert first_repeating_char(\"abccba\") == 'c'\n    assert first_repeating_char(\"xyz\") == -1\n    assert first_repeating_char(\"\") == -1\n    assert first_repeating_char(\"aa\") == 'a'\n\ndef test_first_repeating_char_with_numbers():\n    assert first_repeating_char(\"12341\") == '1'\n    assert first_repeating_char(\"78907\") == '7'\n    assert first_repeating_char(\"123\") == -1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000192", "row_id": 192, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the first repeating character in a string. If no character is repeating, return -1. For example, in the string \"programming\", the first repeating character is 'r'."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a given string to a list of integers, where each integer is the ASCII value of each character in the string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef string_to_ascii_list(input_string):\n    \"\"\"\n    Converts each character in the input_string to its ASCII value and returns a list of these values.\n    \n    :param input_string: str\n    :return: list of int\n    \"\"\"\n    return [ord(char) for char in input_string]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_string_to_ascii_list():\n    assert string_to_ascii_list(\"AB\") == [65, 66]\n    assert string_to_ascii_list(\"Hello\") == [72, 101, 108, 108, 111]\n    assert string_to_ascii_list(\"\") == []\n    assert string_to_ascii_list(\"123\") == [49, 50, 51]\n```"}], "metadata": {"prompt_id": "00000194", "row_id": 194, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a given string to a list of integers, where each integer is the ASCII value of each character in the string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a binary tree to its mirror. The function should take a single parameter, which is the root of the binary tree."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass TreeNode:\n    \"\"\"Simple Binary Tree Node class.\"\"\"\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef mirror_tree(node):\n    \"\"\"\n    Converts a binary tree into its mirror tree.\n    :param node: TreeNode, the root of the binary tree.\n    :return: TreeNode, the root of the mirror tree.\n    \"\"\"\n    if node is None:\n        return None\n    # Swap the left and right children\n    node.left, node.right = node.right, node.left\n    # Recursively apply to the left and right children\n    mirror_tree(node.left)\n    mirror_tree(node.right)\n    return node\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import TreeNode, mirror_tree\n\ndef test_mirror_tree():\n    # Construct a simple tree\n    #       1\n    #      / \\\n    #     2   3\n    #    / \\   \\\n    #   4   5   6\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.right = TreeNode(6)\n    \n    # Expected output after mirroring\n    #       1\n    #      / \\\n    #     3   2\n    #        / \\\n    #       6   4\n    #          /\n    #         5\n    mirrored_root = mirror_tree(root)\n    \n    assert mirrored_root.left.value == 3\n    assert mirrored_root.right.left.value == 6\n    assert mirrored_root.right.right.value == 4\n    assert mirrored_root.right.right.right.value == 5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000195", "row_id": 195, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a binary tree to its mirror. The function should take a single parameter, which is the root of the binary tree."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the index of the substring within a given string using Rabin-Karp algorithm. The function should return the starting index of the first occurrence of the substring in the string. If the substring is not found, return -1."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef rabin_karp.search(substring, string):\n    \"\"\"\n    Returns the starting index of the first occurrence of substring in string using the Rabin-Karp algorithm.\n    If the substring is not found, returns -1.\n    \"\"\"\n    if len(substring) == 0 or len(string) == 0 or len(substring) > len(string):\n        return -1\n\n    pattern_length = len(substring)\n    text_length = len(string)\n    prime_num = 101\n    alphabet_length = 256\n    hash_pattern = 0\n    hash_text = 0\n    h = 1\n\n    # The value of h would be \"pow(alphabet_length, pattern_length-1)%prime_num\"\n    for i in range(pattern_length-1):\n        h = (h * alphabet_length) % prime_num\n\n    # Calculate the hash value of the pattern and first window of text\n    for i in range(pattern_length):\n        hash_pattern = (alphabet_length * hash_pattern + ord(substring[i])) % prime_num\n        hash_text = (alphabet_length * hash_text + ord(string[i])) % prime_num\n\n    # Slide the pattern over text one by one\n    for i in range(text_length - pattern_length + 1):\n        # Check the hash values of current window of text and pattern\n        # If the hash values match then only check for characters one by one\n        if hash_pattern == hash_text:\n            # Check for characters one by one\n            for j in range(pattern_length):\n                if string[i + j] != substring[j]:\n                    break\n            else:\n                return i  # pattern found at index i\n\n        # Calculate hash value for next window of text: Remove leading digit,\n        # add trailing digit\n        if i < text_length - pattern_length:\n            hash_text = (alphabet_length * (hash_text - ord(string[i]) * h) + ord(string[i + pattern_length])) % prime_num\n\n            # We might get negative values of hash_text, converting it to\n            # positive\n            if hash_text < 0:\n                hash_text = hash_text + prime_num\n\n    return -1  # pattern not found\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef rabin_karp_search(substring, string):\n    return rabin_karp.search(substring, string)\n\ndef test_rabin_karp_with_matching_substring_at_start():\n    assert rabin_karp_search('test', 'testmatchingstring') == 0\n\ndef test_rabin_karp_with_matching_substring_in_middle():\n    assert rabin_karp_search('string', 'testmatchingstring') == 6\n\ndef test_rabin_karp_with_non_matching_substring():\n    assert rabin_karp_search('abc', 'teststring') == -1\n\ndef test_rabin_karp_with_empty_substring():\n    assert rabin_karp_search('', 'teststring') == -1\n\ndef test_rabin_karp_with_longer_substring_than_given_string():\n    assert rabin_karp_search('teststring', 'test') == -1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000196", "row_id": 196, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the index of the substring within a given string using Rabin-Karp algorithm. The function should return the starting index of the first occurrence of the substring in the string. If the substring is not found, return -1."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the nth Fibonacci number. The function should recursively call itself to find the result."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci(n):\n    \"\"\"\n    Returns the nth Fibonacci number using recursion.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import fibonacci\n\ndef test_fibonacci_zero():\n    assert fibonacci(0) == 0\n\ndef test_fibonacci_one():\n    assert fibonacci(1) == 1\n\ndef test_fibonacci_two():\n    assert fibonacci(2) == 1\n\ndef test_fibonacci_three():\n    assert fibonacci(3) == 2\n\ndef test_fibonacci_five():\n    assert fibonacci(5) == 5\n\ndef test_fibonacci_ten():\n    assert fibonacci(10) == 55\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000197", "row_id": 197, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the nth Fibonacci number. The function should recursively call itself to find the result."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the longest substring without repeating characters in a string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_substring_without_repeating(s: str) -> str:\n    \"\"\"\n    Finds the longest substring without repeating characters in a given string.\n    \"\"\"\n    if not s:\n        return \"\"\n\n    start = 0\n    max_length = 0\n    max_substring = \"\"\n    used_chars = {}\n\n    for i, char in enumerate(s):\n        if char in used_chars and start <= used_chars[char]:\n            start = used_chars[char] + 1\n        else:\n            if (i - start + 1) > max_length:\n                max_length = i - start + 1\n                max_substring = s[start:i+1]\n\n        used_chars[char] = i\n\n    return max_substring\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import longest_substring_without_repeating\n\ndef test_longest_substring_with_empty_string():\n    assert longest_substring_without_repeating(\"\") == \"\"\n\ndef test_longest_substring_single_character():\n    assert longest_substring_without_repeating(\"a\") == \"a\"\n\ndef test_longest_substring_no_repeating_characters():\n    assert longest_substring_without_repeating(\"abcd\") == \"abcd\"\n\ndef test_longest_substring_repeating_characters():\n    assert longest_substring_without_repeating(\"abcabcbb\") == \"abc\"\n    assert longest_substring_without_repeating(\"bbbbb\") == \"b\"\n    assert longest_substring_without_repeating(\"pwwkew\") == \"wke\"\n\ndef test_longest_substring_with_spaces():\n    assert longest_substring_without_repeating(\" \") == \" \"\n    assert longest_substring_without_repeating(\"a a\") == \" a\"\n    assert longest_substring_without_repeating(\"a b a\") == \" b\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000199", "row_id": 199, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the longest substring without repeating characters in a string."}}
