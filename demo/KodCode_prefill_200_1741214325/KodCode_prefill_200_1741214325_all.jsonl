{"instruction": "Write a python function to remove duplicate characters from a string, maintaining the original order of characters.", "metadata": {"prompt_id": "00000000", "row_id": 0, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.4113948345184326, "duplicate_count": 0, "min_similar_row_id": 97}
{"instruction": "Write a python function to sort an array using the selection sort algorithm.", "metadata": {"prompt_id": "00000001", "row_id": 1, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.47225022315979004, "duplicate_count": 0, "min_similar_row_id": 177}
{"instruction": "Write a python function to find the maximum depth of a binary search tree (BST).", "metadata": {"prompt_id": "00000002", "row_id": 2, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.3399399518966675, "duplicate_count": 0, "min_similar_row_id": 148}
{"instruction": "Write a python function to merge two sorted lists into one sorted list using the merge function from the heapq module. Since heapq's merge function can be used to merge multiple iterables directly, your function should accept two lists, sort each individually if they are not already sorted, and then merge them using heapq.merge(). Ensure the output is a list, not a heapq.merge object.", "metadata": {"prompt_id": "00000003", "row_id": 3, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.8951908349990845, "duplicate_count": 0, "min_similar_row_id": 92}
{"instruction": "Write a python function to calculate the sum of all numbers in a list using recursion.", "metadata": {"prompt_id": "00000004", "row_id": 4, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.25420451164245605, "duplicate_count": 0, "min_similar_row_id": 172}
{"instruction": "Write a python function to convert a string to an integer. Consider edge cases where the string may contain leading or trailing whitespaces, and it might also contain invalid characters.", "metadata": {"prompt_id": "00000005", "row_id": 5, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.5344928503036499, "duplicate_count": 0, "min_similar_row_id": 194}
{"instruction": "Write a python function to search for a specific word in a text file. The function should take two parameters: the file path and the word to search for. The function should return a list of line numbers where the word is found. If the word is not found, return an empty list. The function should ignore case sensitivity.", "metadata": {"prompt_id": "00000006", "row_id": 6, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.9130263328552246, "duplicate_count": 0, "min_similar_row_id": 73}
{"instruction": "Write a python function to check if a given set of cevablar can win a greedy game played with blueblocks, greenblocks, and redblocks).", "metadata": {"prompt_id": "00000007", "row_id": 7, "seed_ids": [0], "mode": "prefill"}, "min_distance": 1.1320164203643799, "duplicate_count": 0, "min_similar_row_id": 15}
{"instruction": "Write a python function to find the maximum of two numbers without using if-else statements or comparison operators.", "metadata": {"prompt_id": "00000008", "row_id": 8, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.3926422595977783, "duplicate_count": 0, "min_similar_row_id": 115}
{"instruction": "Write a python function to count the number of words in a given text.", "metadata": {"prompt_id": "00000009", "row_id": 9, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.09598290920257568, "duplicate_count": 1, "min_similar_row_id": 39}
{"instruction": "Write a python function to check if a number is prime or not. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself.", "metadata": {"prompt_id": "00000010", "row_id": 10, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.023351311683654785, "duplicate_count": 3, "min_similar_row_id": 137}
{"instruction": "Write a python function to find the maximum product of a subarray within a given array of integers. The function should work for both positive and negative numbers.", "metadata": {"prompt_id": "00000011", "row_id": 11, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.280548095703125, "duplicate_count": 0, "min_similar_row_id": 54}
{"instruction": "Write a python function to convert the first and last characters of a string to uppercase and return the modified string.", "metadata": {"prompt_id": "00000012", "row_id": 12, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.5292966365814209, "duplicate_count": 0, "min_similar_row_id": 57}
{"instruction": "Write a python function to remove duplicates from an unsorted array and return a new sorted array with unique elements.", "metadata": {"prompt_id": "00000013", "row_id": 13, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.3595057725906372, "duplicate_count": 0, "min_similar_row_id": 97}
{"instruction": "Write a python function to take a list of integers as input and return a new list where each element is the product of preceding elements. For example, given a list [1, 2, 3, 4], the output should be [1, 1, 2, 6] where the second element (2) is the product of the first element (1), and the third element (3) is the product of the first two elements (1*2), and so on.", "metadata": {"prompt_id": "00000014", "row_id": 14, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.886044979095459, "duplicate_count": 0, "min_similar_row_id": 161}
{"instruction": "Write a python function to solve the following problem:", "metadata": {"prompt_id": "00000015", "row_id": 15, "seed_ids": [0], "mode": "prefill"}, "min_distance": 7.152557373046875e-07, "duplicate_count": 1, "min_similar_row_id": 141}
{"instruction": "Write a python function to count the number of unique characters, digits, and special characters in a given string. Count them separately and return as a tuple (unique_chars, digits, special_chars).", "metadata": {"prompt_id": "00000016", "row_id": 16, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.5442614555358887, "duplicate_count": 0, "min_similar_row_id": 158}
{"instruction": "Write a python function to convert a Celsius temperature to Fahrenheit.", "metadata": {"prompt_id": "00000017", "row_id": 17, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.927403450012207, "duplicate_count": 0, "min_similar_row_id": 133}
{"instruction": "Write a python function to find the minimal path sum from top to bottom in a binary tree. The minimal path is defined as the path that minimizes the sum of node values along the path from root to leaf.", "metadata": {"prompt_id": "00000018", "row_id": 18, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.5972896814346313, "duplicate_count": 0, "min_similar_row_id": 95}
{"instruction": "Write a python function to reverse a string.", "metadata": {"prompt_id": "00000019", "row_id": 19, "seed_ids": [0], "mode": "prefill"}, "min_distance": 9.5367431640625e-07, "duplicate_count": 2, "min_similar_row_id": 156}
{"instruction": "Write a python function to calculate and return the area of a triangle given its base and height.", "metadata": {"prompt_id": "00000020", "row_id": 20, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.6326525211334229, "duplicate_count": 0, "min_similar_row_id": 83}
{"instruction": "Write a python function to find the sum of all even numbers in a list.", "metadata": {"prompt_id": "00000021", "row_id": 21, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.22195100784301758, "duplicate_count": 0, "min_similar_row_id": 67}
{"instruction": "Write a python function to find the number of occurrences of a substring within a given string. The function should be case-insensitive.", "metadata": {"prompt_id": "00000022", "row_id": 22, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.25612330436706543, "duplicate_count": 0, "min_similar_row_id": 108}
{"instruction": "Write a python function to calculate the factorial of a number using recursion.", "metadata": {"prompt_id": "00000023", "row_id": 23, "seed_ids": [0], "mode": "prefill"}, "min_distance": 8.344650268554688e-07, "duplicate_count": 7, "min_similar_row_id": 142}
{"instruction": "Write a python function to find the number of paths from the top-left corner to the bottom-right corner of an M x N grid, where you can only move either down or right at any point in time. The function should handle cases where the grid size can be as large as 10x10 for efficiency. Use memoization to optimize the algorithm.", "metadata": {"prompt_id": "00000024", "row_id": 24, "seed_ids": [0], "mode": "prefill"}, "min_distance": 1.0229870080947876, "duplicate_count": 0, "min_similar_row_id": 95}
{"instruction": "Write a python function to find the maximum sum of a subarray of size k within an input array of integers.", "metadata": {"prompt_id": "00000025", "row_id": 25, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.2928403615951538, "duplicate_count": 0, "min_similar_row_id": 125}
{"instruction": "Write a python function to calculate the factorial of a number using recursion. The function should take an integer as an argument and return the factorial of that number.", "metadata": {"prompt_id": "00000026", "row_id": 26, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.1491851806640625, "duplicate_count": 0, "min_similar_row_id": 135}
{"instruction": "Write a python function to find the union of elements in two lists.", "metadata": {"prompt_id": "00000027", "row_id": 27, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.4808967113494873, "duplicate_count": 0, "min_similar_row_id": 109}
{"instruction": "Write a python function to check if a given string is a valid double (a number with a decimal point).", "metadata": {"prompt_id": "00000028", "row_id": 28, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.8159394264221191, "duplicate_count": 0, "min_similar_row_id": 155}
{"instruction": "Write a python function to implement a simple bubble sort algorithm.", "metadata": {"prompt_id": "00000029", "row_id": 29, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.19386720657348633, "duplicate_count": 0, "min_similar_row_id": 145}
{"instruction": "Write a python function to determine if all elements in an array are unique. Pseudocode is not necessary. Please include comments in your code to explain its functionality.", "metadata": {"prompt_id": "00000030", "row_id": 30, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.5419347286224365, "duplicate_count": 0, "min_similar_row_id": 81}
{"instruction": "Write a python function to find the closest element in an almost sorted array. An almost sorted array is defined as an array where each element is no more than two positions away from its sorted position in the array. For example, an array `[3, 1, 2, 4]` is an almost sorted array since each element is within one position of its sorted position.", "metadata": {"prompt_id": "00000031", "row_id": 31, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.7857035398483276, "duplicate_count": 0, "min_similar_row_id": 86}
{"instruction": "Write a python function to check if the binary representation of a number is a palindrome.", "metadata": {"prompt_id": "00000032", "row_id": 32, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.20675241947174072, "duplicate_count": 0, "min_similar_row_id": 155}
{"instruction": "Write a python function to check if a number is a palindrome number.", "metadata": {"prompt_id": "00000033", "row_id": 33, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.00442814826965332, "duplicate_count": 4, "min_similar_row_id": 51}
{"instruction": "Write a python function to print all prime numbers up to a given number. Also, include a simple test function with some test cases to ensure the correctness of the solution.", "metadata": {"prompt_id": "00000034", "row_id": 34, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.35274505615234375, "duplicate_count": 0, "min_similar_row_id": 91}
{"instruction": "Write a python function to count the number of vowels in a string.", "metadata": {"prompt_id": "00000035", "row_id": 35, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.06309103965759277, "duplicate_count": 1, "min_similar_row_id": 143}
{"instruction": "Write a python function to print all the prime numbers in a given range. What are the factors to consider while implementing this function?", "metadata": {"prompt_id": "00000036", "row_id": 36, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.27988123893737793, "duplicate_count": 0, "min_similar_row_id": 91}
{"instruction": "Write a python function to calculate factorial of a number using recursion.", "metadata": {"prompt_id": "00000037", "row_id": 37, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.0032608509063720703, "duplicate_count": 7, "min_similar_row_id": 164}
{"instruction": "Write a python function to count the frequency of each character in a given string.", "metadata": {"prompt_id": "00000038", "row_id": 38, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.20084631443023682, "duplicate_count": 0, "min_similar_row_id": 158}
{"instruction": "Write a python function to count the number of words in a sentence.", "metadata": {"prompt_id": "00000039", "row_id": 39, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.09598290920257568, "duplicate_count": 1, "min_similar_row_id": 9}
{"instruction": "Write a python function to check if a given string is a palindrome. A palindrome is a string that reads the same backward as forward. Consider case sensitivity and punctuation.", "metadata": {"prompt_id": "00000040", "row_id": 40, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.04268300533294678, "duplicate_count": 3, "min_similar_row_id": 179}
{"instruction": "Write a python function to find the most frequent element in a list.", "metadata": {"prompt_id": "00000041", "row_id": 41, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.6257015466690063, "duplicate_count": 0, "min_similar_row_id": 160}
{"instruction": "Write a python function to check if a given number is a perfect square.", "metadata": {"prompt_id": "00000042", "row_id": 42, "seed_ids": [0], "mode": "prefill"}, "min_distance": 1.1920928955078125e-07, "duplicate_count": 3, "min_similar_row_id": 147}
{"instruction": "Write a python function to find the length of the longest increasing subsequence (LIS) in an array of integers. The function should take a list of integers as input and return the length of the LIS.", "metadata": {"prompt_id": "00000043", "row_id": 43, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.6926662921905518, "duplicate_count": 0, "min_similar_row_id": 138}
{"instruction": "Write a python function to calculate the binomial coefficient for given number 'n' and 'k'. The binomial coefficient, often denoted as C(n, k), represents the number of ways to choose k items from a set of n distinct items. This function will be defined by the return statement: `return binomial_coefficient(n, k)`. The binomial coefficient can be calculated using the formula: C(n, k) = C(n-1, k-1) + C(n-1, k), with the base cases being C(n, 0) = C(n, n) = 1.", "metadata": {"prompt_id": "00000044", "row_id": 44, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.8800275325775146, "duplicate_count": 0, "min_similar_row_id": 161}
{"instruction": "Write a python function to duplicate a linked list, including both the values of the nodes and the node's next pointers. Here, a duplicated linked list means creating a copy of the original linked list with new memory allocated for each node.", "metadata": {"prompt_id": "00000045", "row_id": 45, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.7303915023803711, "duplicate_count": 0, "min_similar_row_id": 191}
{"instruction": "Write a python function to check if a number is a palindrome number. A palindrome number is a number that remains the same when its digits are reversed, such as 121 or 1331.", "metadata": {"prompt_id": "00000046", "row_id": 46, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.23304486274719238, "duplicate_count": 0, "min_similar_row_id": 33}
{"instruction": "Write a python function to check if a given string is palindrome or not.", "metadata": {"prompt_id": "00000047", "row_id": 47, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.21689558029174805, "duplicate_count": 0, "min_similar_row_id": 155}
{"instruction": "Write a python function to return the factorial of a given number using recursion.", "metadata": {"prompt_id": "00000048", "row_id": 48, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.027668237686157227, "duplicate_count": 7, "min_similar_row_id": 135}
{"instruction": "Write a python function to calculate the sum of two numbers.", "metadata": {"prompt_id": "00000049", "row_id": 49, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.16563236713409424, "duplicate_count": 0, "min_similar_row_id": 56}
{"instruction": "Write a python function to determine if a number is prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Here is a code snippet that attempts to do this but has some issues:", "metadata": {"prompt_id": "00000050", "row_id": 50, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.08047759532928467, "duplicate_count": 3, "min_similar_row_id": 137}
{"instruction": "Write a python function to check if a given number is a palindrome number.", "metadata": {"prompt_id": "00000051", "row_id": 51, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.00442814826965332, "duplicate_count": 4, "min_similar_row_id": 33}
{"instruction": "Write a python function to print the Fibonacci sequence up to a given number n. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the sequence starts 0, 1, 1, 2, 3, 5, 8, 13, and so on. Your function should print all the numbers in the sequence that are less than or equal to n.", "metadata": {"prompt_id": "00000052", "row_id": 52, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.06866979598999023, "duplicate_count": 1, "min_similar_row_id": 111}
{"instruction": "Write a python function to check if a given string is a valid palindrome. A valid palindrome is a string that reads the same forward and backward, ignoring cases and non-alphanumeric characters.", "metadata": {"prompt_id": "00000053", "row_id": 53, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.1882108449935913, "duplicate_count": 0, "min_similar_row_id": 103}
{"instruction": "Write a python function to find the maximum product of a contiguous subarray within a one-dimensional array of numbers.", "metadata": {"prompt_id": "00000054", "row_id": 54, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.280548095703125, "duplicate_count": 0, "min_similar_row_id": 11}
{"instruction": "Write a python function to identify if two string s1 and s2 are isomorphic. Two strings are isomorphic if the characters in s1 can be replaced to get s2. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.", "metadata": {"prompt_id": "00000055", "row_id": 55, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.9545358419418335, "duplicate_count": 0, "min_similar_row_id": 179}
{"instruction": "Write a python function to add two numbers and return the result.", "metadata": {"prompt_id": "00000056", "row_id": 56, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.16563236713409424, "duplicate_count": 0, "min_similar_row_id": 49}
{"instruction": "Write a python function to count the number of uppercase letters in a given string. The function should also handle edge cases such as an empty string or a string with no uppercase letters.", "metadata": {"prompt_id": "00000057", "row_id": 57, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.5292966365814209, "duplicate_count": 0, "min_similar_row_id": 12}
{"instruction": "Write a python function to reverse a given string. Here's a rough outline on how you might approach the problem:", "metadata": {"prompt_id": "00000058", "row_id": 58, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.17471075057983398, "duplicate_count": 0, "min_similar_row_id": 156}
{"instruction": "Write a python function to find the maximum element in an array.", "metadata": {"prompt_id": "00000059", "row_id": 59, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.09475469589233398, "duplicate_count": 1, "min_similar_row_id": 72}
{"instruction": "Write a python function to filter out all the strings from a given list that contain a specific substring.", "metadata": {"prompt_id": "00000060", "row_id": 60, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.2710360288619995, "duplicate_count": 0, "min_similar_row_id": 88}
{"instruction": "Write a python function to find the first occurrence of an element in an array that is not repeated (i.e., appears exactly once). If there is no such element, return -1.", "metadata": {"prompt_id": "00000061", "row_id": 61, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.511512041091919, "duplicate_count": 0, "min_similar_row_id": 192}
{"instruction": "Write a python function to find the second maximum number in a list of integers. If the list does not contain at least two different numbers, return None.", "metadata": {"prompt_id": "00000062", "row_id": 62, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.3299691677093506, "duplicate_count": 0, "min_similar_row_id": 115}
{"instruction": "Write a python function to convert a string into a list of words.", "metadata": {"prompt_id": "00000063", "row_id": 63, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.3696465492248535, "duplicate_count": 0, "min_similar_row_id": 154}
{"instruction": "Write a python function to detect and remove duplicate elements from a list. Write a test case to validate your function.", "metadata": {"prompt_id": "00000064", "row_id": 64, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.6316903829574585, "duplicate_count": 0, "min_similar_row_id": 81}
{"instruction": "Write a python function to find the nth Fibonacci number.", "metadata": {"prompt_id": "00000065", "row_id": 65, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.11273527145385742, "duplicate_count": 0, "min_similar_row_id": 188}
{"instruction": "Write a python function to find the maximum sum of a subarray within an array of integers. This is the famous Kadane's algorithm problem.", "metadata": {"prompt_id": "00000066", "row_id": 66, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.32073891162872314, "duplicate_count": 0, "min_similar_row_id": 139}
{"instruction": "Write a python function to calculate the sum of all even numbers in a list. You should use list comprehension along with the `sum()` function to achieve this.", "metadata": {"prompt_id": "00000067", "row_id": 67, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.22195100784301758, "duplicate_count": 0, "min_similar_row_id": 21}
{"instruction": "Write a python function to implement the quick sort algorithm, and explain the code line by line.", "metadata": {"prompt_id": "00000068", "row_id": 68, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.2969111204147339, "duplicate_count": 0, "min_similar_row_id": 177}
{"instruction": "Write a python function to count the trailing zeros in a given number.", "metadata": {"prompt_id": "00000069", "row_id": 69, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.8435008525848389, "duplicate_count": 0, "min_similar_row_id": 38}
{"instruction": "Write a python function to calculate the factorial of a given number.", "metadata": {"prompt_id": "00000070", "row_id": 70, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.0, "duplicate_count": 1, "min_similar_row_id": 166}
{"instruction": "Write a python function to find the sum of all the multiples of 3 or 5 below 1000.", "metadata": {"prompt_id": "00000071", "row_id": 71, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.6920958757400513, "duplicate_count": 0, "min_similar_row_id": 172}
{"instruction": "Write a python function to find the maximum element in an array of integers.", "metadata": {"prompt_id": "00000072", "row_id": 72, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.09475469589233398, "duplicate_count": 1, "min_similar_row_id": 59}
{"instruction": "Write a python function to perform a binary search on a sorted list of integers. The function should return the index of the target value if it is found, or -1 if it is not found. The list may not be empty.", "metadata": {"prompt_id": "00000073", "row_id": 73, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.7698284387588501, "duplicate_count": 0, "min_similar_row_id": 140}
{"instruction": "Write a python function to check if a given number is perfect square or not. The function should take an integer as input and return True if the number is a perfect square, False otherwise.", "metadata": {"prompt_id": "00000074", "row_id": 74, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.11149346828460693, "duplicate_count": 0, "min_similar_row_id": 190}
{"instruction": "Write a python function to check if a number is perfect or not.", "metadata": {"prompt_id": "00000075", "row_id": 75, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.36122560501098633, "duplicate_count": 0, "min_similar_row_id": 102}
{"instruction": "Write a python function to calculate the factorial of a number using a for loop.", "metadata": {"prompt_id": "00000076", "row_id": 76, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.1173403263092041, "duplicate_count": 0, "min_similar_row_id": 166}
{"instruction": "Write a python function to sort a 2D list by its sublists in increasing order based on the sum of the elements of each sublist.", "metadata": {"prompt_id": "00000077", "row_id": 77, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.7160167694091797, "duplicate_count": 0, "min_similar_row_id": 92}
{"instruction": "Write a python function to check if a number is a prime number or not. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, 2, 3, 5, 7, 11, and 29 are all prime numbers.", "metadata": {"prompt_id": "00000078", "row_id": 78, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.02982640266418457, "duplicate_count": 3, "min_similar_row_id": 137}
{"instruction": "Write a python function to reverse a string using slicing.", "metadata": {"prompt_id": "00000079", "row_id": 79, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.2863425016403198, "duplicate_count": 0, "min_similar_row_id": 156}
{"instruction": "Write a python function to check if a given string is a palindrome. A palindrome is a string that reads the same backward as forward. For example, the string \"madam\" is a palindrome because \"madam\" reads the same from left to right and right to left. The function should return True if the string is a palindrome and False otherwise. Additionally, ensure that the function is case-insensitive, meaning it treats uppercase and lowercase letters as the same.", "metadata": {"prompt_id": "00000080", "row_id": 80, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.06268870830535889, "duplicate_count": 1, "min_similar_row_id": 40}
{"instruction": "Write a python function to find the number of unique elements in a given list. thoughts to solve: First, recognize that unique elements are those that appear only once in the list. One could iterate through the list and for each element, count how many times it appears. If it appears exactly once, it's a unique element. Another approach could be to use a data structure that inherently prevents duplicates, such as a set. A set only stores unique elements, so if a list is converted to a set, the length of the set will be the number of unique elements.", "metadata": {"prompt_id": "00000081", "row_id": 81, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.43979501724243164, "duplicate_count": 0, "min_similar_row_id": 84}
{"instruction": "Write a python function to find disjunctive normal form (DNF) of a 2-variable boolean formula using the sympy library. Provide a simple explanation of the function and its inputs/output.", "metadata": {"prompt_id": "00000082", "row_id": 82, "seed_ids": [0], "mode": "prefill"}, "min_distance": 1.2125636339187622, "duplicate_count": 0, "min_similar_row_id": 15}
{"instruction": "Write a python function to calculate the area of a circle given its radius.", "metadata": {"prompt_id": "00000083", "row_id": 83, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.6326525211334229, "duplicate_count": 0, "min_similar_row_id": 20}
{"instruction": "Write a python function to find the number of times a specified value appears in a list. Here's a sample list: [1, 2, 3, 4, 5, 2, 2, 3]", "metadata": {"prompt_id": "00000084", "row_id": 84, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.43979501724243164, "duplicate_count": 0, "min_similar_row_id": 81}
{"instruction": "Write a python function to check if a given positive integer is a perfect square.", "metadata": {"prompt_id": "00000085", "row_id": 85, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.03303694725036621, "duplicate_count": 3, "min_similar_row_id": 42}
{"instruction": "Write a python function to find the minimum element in an array. You should also handle the case when the array is empty.", "metadata": {"prompt_id": "00000086", "row_id": 86, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.4044443368911743, "duplicate_count": 0, "min_similar_row_id": 118}
{"instruction": "Write a python function to reverse the order of characters in a string.", "metadata": {"prompt_id": "00000087", "row_id": 87, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.15169298648834229, "duplicate_count": 0, "min_similar_row_id": 156}
{"instruction": "Write a python function to filter out the words that contain a specific substring and return a list of words that do not contain that substring from a given list of words.", "metadata": {"prompt_id": "00000088", "row_id": 88, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.2710360288619995, "duplicate_count": 0, "min_similar_row_id": 60}
{"instruction": "Write a python function to calculate the factorial of a given number. The function should take an integer as input and return the factorial of that integer. Additionally, the function should handle edge cases such as negative numbers and zero.", "metadata": {"prompt_id": "00000089", "row_id": 89, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.19703984260559082, "duplicate_count": 0, "min_similar_row_id": 70}
{"instruction": "Write a python function to reverse the words in a string.", "metadata": {"prompt_id": "00000090", "row_id": 90, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.07813692092895508, "duplicate_count": 2, "min_similar_row_id": 156}
{"instruction": "Write a python function to find all prime numbers within a given range (inclusive). The function should return a list of all prime numbers within the range.", "metadata": {"prompt_id": "00000091", "row_id": 91, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.27988123893737793, "duplicate_count": 0, "min_similar_row_id": 36}
{"instruction": "Write a python function to sort a list of tuples by the second item in each tuple. The function should take a list of tuples as input and return the sorted list in ascending order based on the second item of each tuple. If the second item is the same for multiple tuples, the tuples should be sorted by their first item in ascending order.", "metadata": {"prompt_id": "00000092", "row_id": 92, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.7160167694091797, "duplicate_count": 0, "min_similar_row_id": 77}
{"instruction": "Write a python function to find the smallest number in an array of integers.", "metadata": {"prompt_id": "00000093", "row_id": 93, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.31830310821533203, "duplicate_count": 0, "min_similar_row_id": 118}
{"instruction": "Write a python function to check if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward. Function should ignore cases, spaces, and symbols.", "metadata": {"prompt_id": "00000094", "row_id": 94, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.045062899589538574, "duplicate_count": 5, "min_similar_row_id": 103}
{"instruction": "Write a python function to find all the root-to-leaf paths where the sum of all these path sums equals a target sum.", "metadata": {"prompt_id": "00000095", "row_id": 95, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.5972896814346313, "duplicate_count": 0, "min_similar_row_id": 18}
{"instruction": "Write a python function to evaluate an arithmetic expression given as a string. The expression includes integers, the operators '+', '-', '*', and '(', ')', and has at least one operator.", "metadata": {"prompt_id": "00000096", "row_id": 96, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.5501440763473511, "duplicate_count": 0, "min_similar_row_id": 127}
{"instruction": "Write a python function to remove the duplicates from a list while preserving the original order of elements.", "metadata": {"prompt_id": "00000097", "row_id": 97, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.3595057725906372, "duplicate_count": 0, "min_similar_row_id": 13}
{"instruction": "Write a python function to calculate the Fibonacci sequence up to a certain number of terms.", "metadata": {"prompt_id": "00000098", "row_id": 98, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.1519070863723755, "duplicate_count": 0, "min_similar_row_id": 178}
{"instruction": "Write a python function to detect a cycle in a directed graph using DFS", "metadata": {"prompt_id": "00000099", "row_id": 99, "seed_ids": [0], "mode": "prefill"}, "min_distance": 1.1728922128677368, "duplicate_count": 0, "min_similar_row_id": 187}
{"instruction": "Write a python function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers, which can contain both positive and negative numbers.", "metadata": {"prompt_id": "00000100", "row_id": 100, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.08417785167694092, "duplicate_count": 1, "min_similar_row_id": 165}
{"instruction": "Write a python function to iterate over a list and print each number.", "metadata": {"prompt_id": "00000101", "row_id": 101, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.6844155788421631, "duplicate_count": 0, "min_similar_row_id": 172}
{"instruction": "Write a python function to check if a given number is a perfect square.", "metadata": {"prompt_id": "00000102", "row_id": 102, "seed_ids": [0], "mode": "prefill"}, "min_distance": 1.1920928955078125e-07, "duplicate_count": 3, "min_similar_row_id": 147}
{"instruction": "Write a python function to check if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization.", "metadata": {"prompt_id": "00000103", "row_id": 103, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.0025115013122558594, "duplicate_count": 3, "min_similar_row_id": 198}
{"instruction": "Write a python function to check if a given string is a valid identifier in Python.", "metadata": {"prompt_id": "00000104", "row_id": 104, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.7681820392608643, "duplicate_count": 0, "min_similar_row_id": 53}
{"instruction": "Write a python function to calculate the shortest distance from a point to a line in a 2D plane.", "metadata": {"prompt_id": "00000105", "row_id": 105, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.8667526245117188, "duplicate_count": 0, "min_similar_row_id": 118}
{"instruction": "Write a python function to perform insertion sort on a list of integers. Please make sure to provide detailed comments explaining each part of your code.", "metadata": {"prompt_id": "00000106", "row_id": 106, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.603905200958252, "duplicate_count": 0, "min_similar_row_id": 145}
{"instruction": "Write a python function to find all the pairs of numbers in a list that sum to a given target.", "metadata": {"prompt_id": "00000107", "row_id": 107, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.46928107738494873, "duplicate_count": 0, "min_similar_row_id": 172}
{"instruction": "Write a python function to count the occurrences of a substring in a given string. You should use only the built-in functions of python and no external libraries should be used.", "metadata": {"prompt_id": "00000108", "row_id": 108, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.25612330436706543, "duplicate_count": 0, "min_similar_row_id": 22}
{"instruction": "Write a python function to find the common elements between two lists, and return a new list containing these common elements.", "metadata": {"prompt_id": "00000109", "row_id": 109, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.4808967113494873, "duplicate_count": 0, "min_similar_row_id": 27}
{"instruction": "Write a python function to find the median of a list of numbers.", "metadata": {"prompt_id": "00000110", "row_id": 110, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.7476291656494141, "duplicate_count": 0, "min_similar_row_id": 118}
{"instruction": "Write a python function to print the Fibonacci sequence up to n terms. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.", "metadata": {"prompt_id": "00000111", "row_id": 111, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.06866979598999023, "duplicate_count": 1, "min_similar_row_id": 52}
{"instruction": "Write a python function to generate the Fibonacci sequence up to a given number n. The function should return a list of the Fibonacci numbers less than or equal to n.", "metadata": {"prompt_id": "00000112", "row_id": 112, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.23198938369750977, "duplicate_count": 0, "min_similar_row_id": 178}
{"instruction": "Write a python function to find the largest rectangle in a histogram.", "metadata": {"prompt_id": "00000113", "row_id": 113, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.7019855976104736, "duplicate_count": 0, "min_similar_row_id": 59}
{"instruction": "Write a python function to determine if a given number is a prime number. If it is, return True; otherwise, return False.", "metadata": {"prompt_id": "00000114", "row_id": 114, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.15123248100280762, "duplicate_count": 0, "min_similar_row_id": 137}
{"instruction": "Write a python function to find the maximum number in a list of numbers.", "metadata": {"prompt_id": "00000115", "row_id": 115, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.2039353847503662, "duplicate_count": 0, "min_similar_row_id": 72}
{"instruction": "Write a python function to check if a given integer is a palindrome.", "metadata": {"prompt_id": "00000116", "row_id": 116, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.04675936698913574, "duplicate_count": 4, "min_similar_row_id": 117}
{"instruction": "Write a python function to check if a number is a palindrome.", "metadata": {"prompt_id": "00000117", "row_id": 117, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.007153987884521484, "duplicate_count": 4, "min_similar_row_id": 155}
{"instruction": "Write a python function to find the minimum element in a list.", "metadata": {"prompt_id": "00000118", "row_id": 118, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.31830310821533203, "duplicate_count": 0, "min_similar_row_id": 93}
{"instruction": "Write a python function to replace all occurrences of a given substring in a string, but only for occurrences that are surrounded by spaces.", "metadata": {"prompt_id": "00000119", "row_id": 119, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.8178502321243286, "duplicate_count": 0, "min_similar_row_id": 159}
{"instruction": "Write a python function to merge two dictionaries. If the same key exists in both dictionaries, their values should be summed. If not, the value from the second dictionary should simply be added to the result.", "metadata": {"prompt_id": "00000120", "row_id": 120, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.9960134029388428, "duplicate_count": 0, "min_similar_row_id": 3}
{"instruction": "Write a python function to find the first unique character in a string. If no unique character is found, return an underscore (_) character.", "metadata": {"prompt_id": "00000121", "row_id": 121, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.4869203567504883, "duplicate_count": 0, "min_similar_row_id": 192}
{"instruction": "Write a python function to find the maximum number in an array using recursion.", "metadata": {"prompt_id": "00000122", "row_id": 122, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.3115353584289551, "duplicate_count": 0, "min_similar_row_id": 72}
{"instruction": "Write a python function to check for prime numbers.", "metadata": {"prompt_id": "00000123", "row_id": 123, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.17877888679504395, "duplicate_count": 0, "min_similar_row_id": 114}
{"instruction": "Write a python function to find the single number in a list where every other number appears exactly twice. The function should have a linear time complexity and use constant space.", "metadata": {"prompt_id": "00000124", "row_id": 124, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.5396718978881836, "duplicate_count": 0, "min_similar_row_id": 61}
{"instruction": "Write a python function to find the maximum sum of a subarray within a given array. The subarray must contain at least one number.", "metadata": {"prompt_id": "00000125", "row_id": 125, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.1952674388885498, "duplicate_count": 0, "min_similar_row_id": 165}
{"instruction": "Write a python function to check if a list of numbers is sorted in ascending order.", "metadata": {"prompt_id": "00000126", "row_id": 126, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.5699130296707153, "duplicate_count": 0, "min_similar_row_id": 145}
{"instruction": "Write a python function to evaluate the value of the input infix expression. The function should take a single string argument representing the infix expression and return the corresponding value. The expression may contain integers, the operators `+`, `-`, `*`, and `/`, and parentheses `()`.", "metadata": {"prompt_id": "00000127", "row_id": 127, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.5501440763473511, "duplicate_count": 0, "min_similar_row_id": 96}
{"instruction": "Write a python function to calculate the sum of the squares of the first n natural numbers.", "metadata": {"prompt_id": "00000128", "row_id": 128, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.0, "duplicate_count": 1, "min_similar_row_id": 171}
{"instruction": "Write a python function to calculate the gcd(greatest common divisor) of two numbers using Euclid's algorithm. Euclid's algorithm is based on the principle that the GCD of two numbers also divides their difference. It uses the simple formula: GCD(A, B) = GCD(B, A mod B) until the remainder is 0.", "metadata": {"prompt_id": "00000129", "row_id": 129, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.7354238033294678, "duplicate_count": 0, "min_similar_row_id": 185}
{"instruction": "Write a python function to check if a given string is palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization.", "metadata": {"prompt_id": "00000130", "row_id": 130, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.0030936002731323242, "duplicate_count": 3, "min_similar_row_id": 103}
{"instruction": "Write a python function to reverse a string without using the built-in reverse function or slicing. Also, ensure that your function works for both strings and integer sequences treated as strings.", "metadata": {"prompt_id": "00000131", "row_id": 131, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.3375265598297119, "duplicate_count": 0, "min_similar_row_id": 19}
{"instruction": "Write a python function to find the diameter of a binary tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree.", "metadata": {"prompt_id": "00000132", "row_id": 132, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.5602571964263916, "duplicate_count": 0, "min_similar_row_id": 148}
{"instruction": "Write a python function to multiply a number by 3 and return the result.", "metadata": {"prompt_id": "00000133", "row_id": 133, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.5698816776275635, "duplicate_count": 0, "min_similar_row_id": 56}
{"instruction": "Write a python function to find the second smallest number in a list. If the list has less than two unique numbers, return `None`. For example, for the list `[3, 5, 2, 2, 8, 1, 1, 4]`, the function should return `3`. However, for the list `[1, 1]` or `[5]`, the function should return `None`.", "metadata": {"prompt_id": "00000134", "row_id": 134, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.5162918567657471, "duplicate_count": 0, "min_similar_row_id": 118}
{"instruction": "Write a python function to calculate the factorial of a given number using recursion.", "metadata": {"prompt_id": "00000135", "row_id": 135, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.0038851499557495117, "duplicate_count": 7, "min_similar_row_id": 193}
{"instruction": "Write a python function to create a queue using a list with two methods: enqueue and dequeue. The enqueue method adds an element to the end of the queue, and the dequeue method removes the element from the front of the queue.", "metadata": {"prompt_id": "00000136", "row_id": 136, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.8525049686431885, "duplicate_count": 0, "min_similar_row_id": 106}
{"instruction": "Write a python function to check if a given number is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.", "metadata": {"prompt_id": "00000137", "row_id": 137, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.023351311683654785, "duplicate_count": 3, "min_similar_row_id": 10}
{"instruction": "Write a python function to find the length of the longest continuous subarray with equal number of 0s and 1s.", "metadata": {"prompt_id": "00000138", "row_id": 138, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.6926662921905518, "duplicate_count": 0, "min_similar_row_id": 43}
{"instruction": "Write a python function to find the maximum sum of a subarray within a given array. This is known as the maximum subarray problem. You should use Kadane's algorithm to implement this.", "metadata": {"prompt_id": "00000139", "row_id": 139, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.29433131217956543, "duplicate_count": 0, "min_similar_row_id": 125}
{"instruction": "Write a python function to check if a list of integers contains the number 5. If it does, return the index of the first occurrence of 5, otherwise, return -1.", "metadata": {"prompt_id": "00000140", "row_id": 140, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.7488389015197754, "duplicate_count": 0, "min_similar_row_id": 134}
{"instruction": "Write a python function to solve the following problem:", "metadata": {"prompt_id": "00000141", "row_id": 141, "seed_ids": [0], "mode": "prefill"}, "min_distance": 7.152557373046875e-07, "duplicate_count": 1, "min_similar_row_id": 15}
{"instruction": "Write a python function to calculate the factorial of a number using recursion.", "metadata": {"prompt_id": "00000142", "row_id": 142, "seed_ids": [0], "mode": "prefill"}, "min_distance": 8.344650268554688e-07, "duplicate_count": 7, "min_similar_row_id": 23}
{"instruction": "Write a python function to count the number of vowels and consonants in a given string.", "metadata": {"prompt_id": "00000143", "row_id": 143, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.06309103965759277, "duplicate_count": 1, "min_similar_row_id": 35}
{"instruction": "Write a python function to find the maximum product of a triplet in an array. The array can contain both positive and negative numbers. The function should return the maximum product of any three numbers in the array.", "metadata": {"prompt_id": "00000144", "row_id": 144, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.3732311725616455, "duplicate_count": 0, "min_similar_row_id": 11}
{"instruction": "Write a python function to sort a list of integers using the Bubble sort algorithm.", "metadata": {"prompt_id": "00000145", "row_id": 145, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.19386720657348633, "duplicate_count": 0, "min_similar_row_id": 29}
{"instruction": "Write a python function to calculate the sum of the elements in a list.", "metadata": {"prompt_id": "00000146", "row_id": 146, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.07574319839477539, "duplicate_count": 1, "min_similar_row_id": 172}
{"instruction": "Write a python function to check if a given number is a perfect square.", "metadata": {"prompt_id": "00000147", "row_id": 147, "seed_ids": [0], "mode": "prefill"}, "min_distance": 1.1920928955078125e-07, "duplicate_count": 3, "min_similar_row_id": 102}
{"instruction": "Write a python function to find the maximum depth of a binary tree. The function should return an integer representing the maximum depth.", "metadata": {"prompt_id": "00000148", "row_id": 148, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.3399399518966675, "duplicate_count": 0, "min_similar_row_id": 2}
{"instruction": "Write a python function to find the minimum number of operations required to make all elements in a list equal. The operations allowed are incrementing any element by 1 or decrementing any element by 1.", "metadata": {"prompt_id": "00000149", "row_id": 149, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.9242038726806641, "duplicate_count": 0, "min_similar_row_id": 118}
{"instruction": "Write a python function to determine if a given number is a power of two. A number is a power of two if it can be represented as 2^k where k is a non-negative integer. Assume the input is always a valid integer, both positive and negative, but negative numbers should be immediately determined as not powers of two.", "metadata": {"prompt_id": "00000150", "row_id": 150, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.804793119430542, "duplicate_count": 0, "min_similar_row_id": 152}
{"instruction": "Write a python function to convert a decimal number to binary without using Python's built-in bin() function. Walk me through the process and the code.", "metadata": {"prompt_id": "00000151", "row_id": 151, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.8277699947357178, "duplicate_count": 0, "min_similar_row_id": 152}
{"instruction": "Write a python function to determine whether a number is even or odd without using if else statements. You can use bitwise operators only.", "metadata": {"prompt_id": "00000152", "row_id": 152, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.5372309684753418, "duplicate_count": 0, "min_similar_row_id": 162}
{"instruction": "Write a python function to determine the number of vowels in a string. The vowels are 'a', 'e', 'i', 'o', and 'u' (both lowercase and uppercase).", "metadata": {"prompt_id": "00000153", "row_id": 153, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.21334576606750488, "duplicate_count": 0, "min_similar_row_id": 35}
{"instruction": "Write a python function to convert a given string into a list of words. Splitting can be done based on multiple characters. For instance, splitting can be done using the characters ',', '.', and ' ' (space). How would you approach this problem?", "metadata": {"prompt_id": "00000154", "row_id": 154, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.3696465492248535, "duplicate_count": 0, "min_similar_row_id": 63}
{"instruction": "Write a python function to check whether a number is a palindrome or not.", "metadata": {"prompt_id": "00000155", "row_id": 155, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.007153987884521484, "duplicate_count": 4, "min_similar_row_id": 117}
{"instruction": "Write a python function to reverse a string.", "metadata": {"prompt_id": "00000156", "row_id": 156, "seed_ids": [0], "mode": "prefill"}, "min_distance": 9.5367431640625e-07, "duplicate_count": 2, "min_similar_row_id": 19}
{"instruction": "Write a python function to solve the following problem: Given a list of lists, return the sum of all numbers in the sublists that have an even number of elements.", "metadata": {"prompt_id": "00000157", "row_id": 157, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.2559283971786499, "duplicate_count": 0, "min_similar_row_id": 21}
{"instruction": "Write a python function to to count the number of times a character appears in a string", "metadata": {"prompt_id": "00000158", "row_id": 158, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.20084631443023682, "duplicate_count": 0, "min_similar_row_id": 38}
{"instruction": "Write a python function to reverse a string without using extra space.", "metadata": {"prompt_id": "00000159", "row_id": 159, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.14752531051635742, "duplicate_count": 0, "min_similar_row_id": 156}
{"instruction": "Write a python function to find the second largest number in a list.", "metadata": {"prompt_id": "00000160", "row_id": 160, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.31979894638061523, "duplicate_count": 0, "min_similar_row_id": 115}
{"instruction": "Write a python function to generate all possible combinations of a given list of numbers.", "metadata": {"prompt_id": "00000161", "row_id": 161, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.6709508895874023, "duplicate_count": 0, "min_similar_row_id": 182}
{"instruction": "Write a python function to filter out all even numbers from a list, which also handles both positive and negative integers.", "metadata": {"prompt_id": "00000162", "row_id": 162, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.4324232339859009, "duplicate_count": 0, "min_similar_row_id": 21}
{"instruction": "Write a python function to extract all the shortest words from a string of text.", "metadata": {"prompt_id": "00000163", "row_id": 163, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.6928210258483887, "duplicate_count": 0, "min_similar_row_id": 199}
{"instruction": "Write a python function to calculate the factorial of a number using recursion.", "metadata": {"prompt_id": "00000164", "row_id": 164, "seed_ids": [0], "mode": "prefill"}, "min_distance": 8.344650268554688e-07, "duplicate_count": 7, "min_similar_row_id": 23}
{"instruction": "Write a python function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. This function should take an array of integers as input and return the maximum sum.", "metadata": {"prompt_id": "00000165", "row_id": 165, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.08417785167694092, "duplicate_count": 1, "min_similar_row_id": 100}
{"instruction": "Write a python function to calculate the factorial of a given number.", "metadata": {"prompt_id": "00000166", "row_id": 166, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.0, "duplicate_count": 1, "min_similar_row_id": 70}
{"instruction": "Write a python function to count missing data (None) in a nested list.", "metadata": {"prompt_id": "00000167", "row_id": 167, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.9893527030944824, "duplicate_count": 0, "min_similar_row_id": 9}
{"instruction": "Write a python function to parse and extract specific data from XML using `xml.etree.ElementTree`", "metadata": {"prompt_id": "00000168", "row_id": 168, "seed_ids": [0], "mode": "prefill"}, "min_distance": 1.2461745738983154, "duplicate_count": 0, "min_similar_row_id": 101}
{"instruction": "Write a python function to evaluate a postfix expression (Reverse Polish Notation).", "metadata": {"prompt_id": "00000169", "row_id": 169, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.729364275932312, "duplicate_count": 0, "min_similar_row_id": 127}
{"instruction": "Write a python function to find the sum of the first `n` natural numbers.", "metadata": {"prompt_id": "00000170", "row_id": 170, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.35248684883117676, "duplicate_count": 0, "min_similar_row_id": 128}
{"instruction": "Write a python function to calculate the sum of the squares of the first N natural numbers.", "metadata": {"prompt_id": "00000171", "row_id": 171, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.0, "duplicate_count": 1, "min_similar_row_id": 128}
{"instruction": "Write a python function to calculate the sum of numbers in a list.", "metadata": {"prompt_id": "00000172", "row_id": 172, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.07574319839477539, "duplicate_count": 1, "min_similar_row_id": 146}
{"instruction": "Write a python function to calculate the factorial of a number using recursion.", "metadata": {"prompt_id": "00000173", "row_id": 173, "seed_ids": [0], "mode": "prefill"}, "min_distance": 8.344650268554688e-07, "duplicate_count": 7, "min_similar_row_id": 23}
{"instruction": "Write a python function to find the longest continuous substring that can be formed with at most two distinct characters in a given string. For example, for the input string \"aabacbebebe\", the function should return 7, as the longest substring that can be formed with at most two distinct characters is \"cbebebe\".", "metadata": {"prompt_id": "00000174", "row_id": 174, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.382999062538147, "duplicate_count": 0, "min_similar_row_id": 199}
{"instruction": "Write a python function to print the first nth Fibonacci numbers in the format `[F(1), F(2), F(3), ..., F(n)]`.", "metadata": {"prompt_id": "00000175", "row_id": 175, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.2547731399536133, "duplicate_count": 0, "min_similar_row_id": 65}
{"instruction": "Write a python function to find the minimum number of deletions required to make a string a palindrome.", "metadata": {"prompt_id": "00000176", "row_id": 176, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.43088531494140625, "duplicate_count": 0, "min_similar_row_id": 47}
{"instruction": "Write a python function to sort an array using the Quick Sort algorithm.", "metadata": {"prompt_id": "00000177", "row_id": 177, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.2969111204147339, "duplicate_count": 0, "min_similar_row_id": 68}
{"instruction": "Write a python function to generate a Fibonacci sequence up to a given number `n`.", "metadata": {"prompt_id": "00000178", "row_id": 178, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.1519070863723755, "duplicate_count": 0, "min_similar_row_id": 98}
{"instruction": "Write a python function to check if a string is a palindrome or not. A palindrome is a string that reads the same backward as forward.", "metadata": {"prompt_id": "00000179", "row_id": 179, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.04268300533294678, "duplicate_count": 2, "min_similar_row_id": 40}
{"instruction": "Write a python function to check if a given string `s` contains a sequence of consecutive repeating characters that are not adjacent to each other.", "metadata": {"prompt_id": "00000180", "row_id": 180, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.6736243963241577, "duplicate_count": 0, "min_similar_row_id": 192}
{"instruction": "Write a python function to find Fibonacci numbers up to a given limit 'n' and store the results in a list.", "metadata": {"prompt_id": "00000181", "row_id": 181, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.27086353302001953, "duplicate_count": 0, "min_similar_row_id": 65}
{"instruction": "Write a python function to find all possible subsets of a set. You can return them as a list of lists.", "metadata": {"prompt_id": "00000182", "row_id": 182, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.6709508895874023, "duplicate_count": 0, "min_similar_row_id": 161}
{"instruction": "Write a python function to reverse a string. What are the concepts used here?", "metadata": {"prompt_id": "00000183", "row_id": 183, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.14663100242614746, "duplicate_count": 0, "min_similar_row_id": 156}
{"instruction": "Write a python function to sort a list of integers in ascending order using the quicksort algorithm. Each integer is in the range of [0, 100000].", "metadata": {"prompt_id": "00000184", "row_id": 184, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.4593515396118164, "duplicate_count": 0, "min_similar_row_id": 177}
{"instruction": "Write a python function to find the smallest number that is a multiple of both given integers. To solve this, create a helper function to calculate the greatest common divisor (GCD) of two numbers and then use this helper function to find the least common multiple (LCM) of two numbers.", "metadata": {"prompt_id": "00000185", "row_id": 185, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.7060213088989258, "duplicate_count": 0, "min_similar_row_id": 93}
{"instruction": "Write a python function to reverse a linked list using a stack data structure.", "metadata": {"prompt_id": "00000186", "row_id": 186, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.26103341579437256, "duplicate_count": 0, "min_similar_row_id": 191}
{"instruction": "Write a python function to find the Floyd Warshall shortest path algorithm from a given directed graph. The graph is represented using an adjacency matrix.", "metadata": {"prompt_id": "00000187", "row_id": 187, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.8643968105316162, "duplicate_count": 0, "min_similar_row_id": 18}
{"instruction": "Write a python function to calculate the nth Fibonacci number using recursion.", "metadata": {"prompt_id": "00000188", "row_id": 188, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.11273527145385742, "duplicate_count": 0, "min_similar_row_id": 65}
{"instruction": "Write a python function to check if a given number is a Fibonacci number or not.", "metadata": {"prompt_id": "00000189", "row_id": 189, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.30398356914520264, "duplicate_count": 0, "min_similar_row_id": 65}
{"instruction": "Write a python function to determine if a number is a \"perfect square\" number. A \"perfect square\" number is an integer that is the square of an integer. For example, 16 is a perfect square because it is 4 squared.", "metadata": {"prompt_id": "00000190", "row_id": 190, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.11149346828460693, "duplicate_count": 0, "min_similar_row_id": 74}
{"instruction": "Write a python function to reverse a linked list in place.", "metadata": {"prompt_id": "00000191", "row_id": 191, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.26103341579437256, "duplicate_count": 0, "min_similar_row_id": 186}
{"instruction": "Write a python function to find the first repeating character in a string. If no character is repeating, return -1. For example, in the string \"programming\", the first repeating character is 'r'.", "metadata": {"prompt_id": "00000192", "row_id": 192, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.4869203567504883, "duplicate_count": 0, "min_similar_row_id": 121}
{"instruction": "Write a python function to calculate the factorial of a number using recursion.", "metadata": {"prompt_id": "00000193", "row_id": 193, "seed_ids": [0], "mode": "prefill"}, "min_distance": 8.344650268554688e-07, "duplicate_count": 7, "min_similar_row_id": 23}
{"instruction": "Write a python function to convert a given string to a list of integers, where each integer is the ASCII value of each character in the string.", "metadata": {"prompt_id": "00000194", "row_id": 194, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.5344928503036499, "duplicate_count": 0, "min_similar_row_id": 5}
{"instruction": "Write a python function to convert a binary tree to its mirror. The function should take a single parameter, which is the root of the binary tree.", "metadata": {"prompt_id": "00000195", "row_id": 195, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.8705096244812012, "duplicate_count": 0, "min_similar_row_id": 148}
{"instruction": "Write a python function to find the index of the substring within a given string using Rabin-Karp algorithm. The function should return the starting index of the first occurrence of the substring in the string. If the substring is not found, return -1.", "metadata": {"prompt_id": "00000196", "row_id": 196, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.8128986358642578, "duplicate_count": 0, "min_similar_row_id": 108}
{"instruction": "Write a python function to calculate the nth Fibonacci number. The function should recursively call itself to find the result.", "metadata": {"prompt_id": "00000197", "row_id": 197, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.19752812385559082, "duplicate_count": 0, "min_similar_row_id": 188}
{"instruction": "Write a python function to check if a string is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization.", "metadata": {"prompt_id": "00000198", "row_id": 198, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.0025115013122558594, "duplicate_count": 3, "min_similar_row_id": 103}
{"instruction": "Write a python function to find the longest substring without repeating characters in a string.", "metadata": {"prompt_id": "00000199", "row_id": 199, "seed_ids": [0], "mode": "prefill"}, "min_distance": 0.382999062538147, "duplicate_count": 0, "min_similar_row_id": 174}
