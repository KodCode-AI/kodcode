{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to remove duplicate characters from a string, maintaining the original order of characters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef remove_duplicates(s):\n    \"\"\"\n    Returns a string with duplicate characters removed while maintaining the original order of characters.\n    \"\"\"\n    seen = set()\n    result = []\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n    return ''.join(result)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import remove_duplicates\n\ndef test_remove_duplicates_empty():\n    assert remove_duplicates(\"\") == \"\"\n\ndef test_remove_duplicates_no_duplicates():\n    assert remove_duplicates(\"abc\") == \"abc\"\n\ndef test_remove_duplicates_with_duplicates():\n    assert remove_duplicates(\"aabbcc\") == \"abc\"\n    assert remove_duplicates(\"aabbccddee\") == \"abcde\"\n    assert remove_duplicates(\"banana\") == \"ban\"\n\ndef test_remove_duplicates_from_words():\n    assert remove_duplicates(\"hello world\") == \"helo wrd\"\n    assert remove_duplicates(\"python programming\") == \"pyth o ramin\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000000", "row_id": 0, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to remove duplicate characters from a string, maintaining the original order of characters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort an array using the selection sort algorithm."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef selection_sort(arr):\n    \"\"\"\n    Sorts an array using the selection sort algorithm.\n    \n    Parameters:\n    arr (list): The list of elements to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    for i in range(len(arr)):\n        # Find the minimum element in remaining unsorted array\n        min_index = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        # Swap the found minimum element with the first element\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import selection_sort\n\ndef test_selection_sort_positive_numbers():\n    assert selection_sort([64, 25, 12, 22, 11]) == [11, 12, 22, 25, 64]\n\ndef test_selection_sort_negative_numbers():\n    assert selection_sort([-64, -25, -12, -22, -11]) == [-64, -25, -22, -12, -11]\n\ndef test_selection_sort_mixed_numbers():\n    assert selection_sort([64, -25, 0, 22, -11, 12]) == [-25, -11, 0, 12, 22, 64]\n\ndef test_selection_sort_empty_list():\n    assert selection_sort([]) == []\n\ndef test_selection_sort_single_element():\n    assert selection_sort([5]) == [5]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000001", "row_id": 1, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort an array using the selection sort algorithm."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum depth of a binary search tree (BST)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_depth_bst(root: TreeNode) -> int:\n    \"\"\"\n    Returns the maximum depth of a binary search tree.\n    \"\"\"\n    if not root:\n        return 0\n    left_depth = max_depth_bst(root.left)\n    right_depth = max_depth_bst(root.right)\n    return max(left_depth, right_depth) + 1\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import max_depth_bst, TreeNode\n\ndef setup_tree():\n    # Creating a simple BST\n    #       3\n    #      / \\\n    #     2   5\n    #    /   / \\\n    #   1   4   6\n    root = TreeNode(3)\n    root.left = TreeNode(2, left=TreeNode(1))\n    root.right = TreeNode(5, left=TreeNode(4), right=TreeNode(6))\n    return root\n\ndef test_max_depth_bst_empty_tree():\n    assert max_depth_bst(None) == 0\n\ndef test_max_depth_bst_simple_tree():\n    root = setup_tree()\n    assert max_depth_bst(root) == 3\n\ndef test_max_depth_bst_with_deeper_right():\n    #       3\n    #      /\n    #     2\n    #    / \\\n    #   1   5\n    #      / \\\n    #     4   6\n    root = TreeNode(3)\n    root.left = TreeNode(2, left=TreeNode(1))\n    root.right = TreeNode(5, left=TreeNode(4), right=TreeNode(6))\n    assert max_depth_bst(root) == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000002", "row_id": 2, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum depth of a binary search tree (BST)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to merge two sorted lists into one sorted list using the merge function from the heapq module. Since heapq's merge function can be used to merge multiple iterables directly, your function should accept two lists, sort each individually if they are not already sorted, and then merge them using heapq.merge(). Ensure the output is a list, not a heapq.merge object."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nimport heapq\n\ndef merge_sorted_lists(list1, list2):\n    \"\"\"\n    Merge two sorted lists into one sorted list.\n    \"\"\"\n    # Ensure the lists are sorted\n    sorted_list1 = sorted(list1)\n    sorted_list2 = sorted(list2)\n    # Merge the sorted lists using heapq.merge and convert the result to a list\n    merged_list = list(heapq.merge(sorted_list1, sorted_list2))\n    return merged_list\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport heapq\nfrom solution import merge_sorted_lists\n\ndef test_merge_sorted_lists_with_two_sorted_lists():\n    assert merge_sorted_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]\n\ndef test_merge_sorted_lists_with_duplicates():\n    assert merge_sorted_lists([1, 3, 5, 5], [2, 4, 6, 6]) == [1, 2, 3, 4, 5, 5, 6, 6]\n\ndef test_merge_sorted_lists_with_unsorted_lists():\n    assert merge_sorted_lists([3, 1, 5], [6, 4, 2]) == [1, 2, 3, 4, 5, 6]\n\ndef test_merge_sorted_lists_with_empty_lists():\n    assert merge_sorted_lists([], [1, 2, 3]) == [1, 2, 3]\n    assert merge_sorted_lists([1, 2, 3], []) == [1, 2, 3]\n    assert merge_sorted_lists([], []) == []\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000003", "row_id": 3, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to merge two sorted lists into one sorted list using the merge function from the heapq module. Since heapq's merge function can be used to merge multiple iterables directly, your function should accept two lists, sort each individually if they are not already sorted, and then merge them using heapq.merge(). Ensure the output is a list, not a heapq.merge object."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the sum of all numbers in a list using recursion."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_recursive(lst):\n    \"\"\"\n    Returns the sum of all numbers in a list using recursion.\n    \"\"\"\n    if not lst:\n        return 0\n    else:\n        return lst[0] + sum_recursive(lst[1:])\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_recursive\n\ndef test_sum_recursive_empty_list():\n    assert sum_recursive([]) == 0\n\ndef test_sum_recursive_single_element():\n    assert sum_recursive([5]) == 5\n\ndef test_sum_recursive_positive_numbers():\n    assert sum_recursive([1, 2, 3, 4, 5]) == 15\n\ndef test_sum_recursive_negative_numbers():\n    assert sum_recursive([-1, -2, -3, -4, -5]) == -15\n\ndef test_sum_recursive_mixed_numbers():\n    assert sum_recursive([1, -2, 3, -4, 5, -6]) == -3\n```"}], "metadata": {"prompt_id": "00000004", "row_id": 4, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the sum of all numbers in a list using recursion."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a string to an integer. Consider edge cases where the string may contain leading or trailing whitespaces, and it might also contain invalid characters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport string\n\ndef str_to_int(s: str) -> int:\n    \"\"\"\n    Converts a string to an integer, considering edge cases with leading/trailing whitespaces and invalid characters.\n    \"\"\"\n    # Remove leading and trailing whitespaces\n    s = s.strip()\n    \n    if not s:\n        return 0\n    \n    sign = 1\n    i = 0\n    if s[0] == '-':\n        sign = -1\n        i = 1\n    elif s[0] == '+':\n        i = 1\n\n    int_val = 0\n    for char in s[i:]:\n        if char.isdigit():\n            int_val = int_val * 10 + int(char)\n        else:\n            break\n    \n    # Handle 32-bit signed integer range\n    INT_MAX = 2**31 - 1\n    INT_MIN = -2**31\n\n    if sign * int_val > INT_MAX:\n        return INT_MAX\n    elif sign * int_val < INT_MIN:\n        return INT_MIN\n    else:\n        return sign * int_val\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_str_to_int_positive():\n    assert str_to_int(\"42\") == 42\n    assert str_to_int('0000042') == 42\n\ndef test_str_to_int_negative():\n    assert str_to_int(\"-42\") == -42\n    assert str_to_int(\"-12345678901234567890\") == -2147483648  # INT_MIN\n\ndef test_invalid_characters():\n    assert str_to_int(\"   123abc\") == 123\n    assert str_to_int(\"abc123\") == 0  # No valid digit at the start\n\ndef test_empty_string():\n    assert str_to_int(\"\") == 0\n\ndef test_trailing_whitespace():\n    assert str_to_int(\"  -42\") == -42\n\ndef test_leading_whitespace():\n    assert str_to_int(\"42   \") == 42\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000005", "row_id": 5, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a string to an integer. Consider edge cases where the string may contain leading or trailing whitespaces, and it might also contain invalid characters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to search for a specific word in a text file. The function should take two parameters: the file path and the word to search for. The function should return a list of line numbers where the word is found. If the word is not found, return an empty list. The function should ignore case sensitivity."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef search_word_in_file(file_path, word):\n    \"\"\"\n    Searches for a specific word in a text file and returns a list of line numbers\n    where the word is found. The search is case-insensitive.\n    \n    :param file_path: Path to the text file.\n    :param word: The word to search for.\n    :return: A list of line numbers where the word is found.\n    \"\"\"\n    word = word.lower()\n    found_lines = []\n    with open(file_path, 'r', encoding='utf-8') as file:\n        for line_number, line in enumerate(file, start=1):\n            if word in line.lower():\n                found_lines.append(line_number)\n    return found_lines\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport os\nfrom solution import search_word_in_file\n\n# Assuming there is a test file named 'test.txt' with the following content:\n# This is a test file.\n# The word test is present in this file.\n# Another test line. This is to check for multiple occurrences.\n\ndef setup_test_file():\n    with open('test.txt', 'w', encoding='utf-8') as file:\n        file.write(\"This is a test file.\\n\")\n        file.write(\"The word test is present in this file.\\n\")\n        file.write(\"Another test line. This is to check for multiple occurrences.\\n\")\n\ndef teardown_test_file():\n    try:\n        os.remove('test.txt')\n    except FileNotFoundError:\n        pass\n\ndef test_search_word_in_file():\n    setup_test_file()\n    result = search_word_in_file('test.txt', 'test')\n    assert result == [2, 3]\n    result = search_word_in_file('test.txt', 'file')\n    assert result == [1, 2]\n    result = search_word_in_file('test.txt', 'notfound')\n    assert result == []\n    teardown_test_file()\n\ndef test_search_word_case_insensitive():\n    setup_test_file()\n    result = search_word_in_file('test.txt', 'TEST')\n    assert result == [2, 3]\n    teardown_test_file()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000006", "row_id": 6, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to search for a specific word in a text file. The function should take two parameters: the file path and the word to search for. The function should return a list of line numbers where the word is found. If the word is not found, return an empty list. The function should ignore case sensitivity."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given set of cevablar can win a greedy game played with blueblocks, greenblocks, and redblocks)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef can_win_game(cevablar):\n    \"\"\"\n    Checks if a given set of cevablar can win the game.\n    \n    Parameters:\n    cevablar (list): A list containing the number of blueblocks, greenblocks, and redblocks.\n    \n    Returns:\n    bool: True if the given set can win the game, False otherwise.\n    \"\"\"\n    blueblocks, greenblocks, redblocks = cevablar\n    # A player can win if they can form a sequence of blocks such that each block is of a different color\n    # This means there should be at least one block of each color\n    return blueblocks > 0 and greenblocks > 0 and redblocks > 0\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import can_win_game\n\ndef test_can_win_game_with_all_nonzero_blocks():\n    assert can_win_game([1, 1, 1]) == True\n\ndef test_can_win_game_with_one_zero_block():\n    assert can_win_game([0, 1, 1]) == False\n    assert can_win_game([1, 0, 1]) == False\n    assert can_win_game([1, 1, 0]) == False\n\ndef test_can_win_game_with_two_zero_blocks():\n    assert can_win_game([0, 0, 1]) == False\n    assert can_win_game([1, 0, 0]) == False\n\ndef test_can_win_game_with_zero_blocks():\n    assert can_win_game([0, 0, 0]) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000007", "row_id": 7, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given set of cevablar can win a greedy game played with blueblocks, greenblocks, and redblocks)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum of two numbers without using if-else statements or comparison operators."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_without_conditionals(a, b):\n    \"\"\"\n    Returns the maximum of two numbers without using if-else statements or comparison operators.\n    \"\"\"\n    return a + ((b - a) >> 63) & b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_without_conditionals\n\ndef test_max_without_conditionals():\n    assert max_without_conditionals(1, 2) == 2\n    assert max_without_conditioninals(3, 1) == 3\n    assert max_without_conditioninals(-1, -2) == -1\n    assert max_without_conditioninals(-3, -1) == -1\n    assert max_without_conditioninals(0, 0) == 0\n    assert max_without_conditioninals(1, -2) == 1\n    assert max_without_conditioninals(-1, 2) == 2\n    assert max_without_conditioninals(21, 19) == 21\n    assert max_without_conditioninals(19, 21) == 21\n    assert max_without_conditioninals(100, -200) == 100\n```"}], "metadata": {"prompt_id": "00000008", "row_id": 8, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum of two numbers without using if-else statements or comparison operators."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum product of a subarray within a given array of integers. The function should work for both positive and negative numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_product_subarray(nums):\n    \"\"\"\n    Returns the maximum product of a subarray within the given array of integers.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    max_product = min_product = result = nums[0]\n    \n    for num in nums[1:]:\n        temp_max = max(num, max_product * num, min_product * num)\n        min_product = min(num, max_product * num, min_product * num)\n        max_product = temp_max\n        \n        result = max(result, max_product)\n        \n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import max_product_subarray\n\ndef test_max_product_subarray_positive_numbers():\n    assert max_product_subarray([2, 3, -2, 4]) == 6\n\ndef test_max_product_subarray_mixed_sign_numbers():\n    assert max_product_subarray([-2, 0, -1]) == 0\n\ndef test_max_product_subarray_large_numbers():\n    assert max_product_subarray([0, 2]) == 2\n    assert max_product_subarray([-1, -2, -3, 0]) == 6\n\ndef test_max_product_subarray_single_element():\n    assert max_product_subarray([1]) == 1\n\ndef test_max_product_subarray_all_negative():\n    assert max_product_subarray([-1, -2, -3, -4]) == 24\n\ndef test_max_product_subarray_all_positive():\n    assert max_product_subarray([1, 2, 3, 4]) == 24\n\ndef test_max_product_subarray_with_zero():\n    assert max_product_subarray([0, 2, 3, -5]) == 6\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000011", "row_id": 11, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum product of a subarray within a given array of integers. The function should work for both positive and negative numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert the first and last characters of a string to uppercase and return the modified string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef capitalize_first_last_char(s):\n    \"\"\"\n    Converts the first and last characters of the string to uppercase and returns the modified string.\n    If the string has less than 2 characters, it returns the string as is.\n    \"\"\"\n    if len(s) < 2:\n        return s\n    return s[0].upper() + s[1:-1] + s[-1].upper()\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import capitalize_first_last_char\n\ndef test_capitalize_first_last_char():\n    assert capitalize_first_last_char(\"hello\") == \"HeLlo\"\n    assert capitalize_first_last_char(\"a\") == \"A\"\n    assert capitalize_first_last_char(\"ab\") == \"Ab\"\n\ndef test_special_characters():\n    assert capitalize_first_last_char(\"!@#\") == \"!@#\"\n    assert capitalize_first_last_char(\"$\") == \"$\"\n\ndef test_empty_string():\n    assert capitalize_first_last_char(\"\") == \"\"\n\ndef test_single_space_string():\n    assert capitalize_first_last_char(\" \") == \"  \"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000012", "row_id": 12, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert the first and last characters of a string to uppercase and return the modified string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to remove duplicates from an unsorted array and return a new sorted array with unique elements."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef remove_duplicates_and_sort(arr):\n    \"\"\"\n    Removes duplicates from an unsorted array and returns a new sorted array with unique elements.\n    \"\"\"\n    # Convert the array to a set to remove duplicates\n    unique_elements = set(arr)\n    # Convert back to list and sort it\n    sorted_unique_elements = sorted(list(unique_elements))\n    return sorted_unique_elements\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_remove_duplicates_and_sort():\n    assert remove_duplicates_and_sort([4, 2, 1, 2, 5, 4, 3, 8, 7, 6, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n\ndef test_remove_duplicates_with_duplicates_only():\n    assert remove_duplicates_and_sort([1, 1, 1, 1, 1]) == [1]\n\ndef test_remove_duplicates_empty_array():\n    assert remove_duplicates_and_sort([]) == []\n\ndef test_remove_duplicates_and_sort_with_negative_numbers():\n    assert remove_duplicates_and_sort([-2, -3, -2, 3, -2, 4, -3]) == [-3, -2, 3, 4]\n```"}], "metadata": {"prompt_id": "00000013", "row_id": 13, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to remove duplicates from an unsorted array and return a new sorted array with unique elements."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to take a list of integers as input and return a new list where each element is the product of preceding elements. For example, given a list [1, 2, 3, 4], the output should be [1, 1, 2, 6] where the second element (2) is the product of the first element (1), and the third element (3) is the product of the first two elements (1*2), and so on."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef product_of_preceding_elements(lst):\n    \"\"\"\n    Returns a new list where each element is the product of preceding elements in the input list.\n    \"\"\"\n    result = []\n    product = 1\n    for i in lst:\n        result.append(product)\n        product *= i\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import product_of_preceding_elements\n\ndef test_product_of_preceding_elements():\n    assert product_of_preceding_elements([1, 2, 3, 4]) == [1, 1, 2, 6]\n    assert product_of_preceding_elements([2, 5, 1, 3, 0]) == [1, 2, 10, 10, 0]\n    assert product_of_preceding_elements([7, 3, 2]) == [1, 7, 21]\n    assert product_of_preceding_elements([0, 1, 2, 3]) == [1, 0, 0, 0]\n    assert product_of_preceding_elements([1, 1, 1, 1]) == [1, 1, 1, 1]\n```"}], "metadata": {"prompt_id": "00000014", "row_id": 14, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to take a list of integers as input and return a new list where each element is the product of preceding elements. For example, given a list [1, 2, 3, 4], the output should be [1, 1, 2, 6] where the second element (2) is the product of the first element (1), and the third element (3) is the product of the first two elements (1*2), and so on."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count the number of unique characters, digits, and special characters in a given string. Count them separately and return as a tuple (unique_chars, digits, special_chars)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef char_counter(input_string):\n    \"\"\"\n    Given an input string, returns a tuple containing the count of unique characters,\n    digits, and special characters.\n    \"\"\"\n    unique_chars = set(input_string)\n    unique_chars_count = len(unique_chars)\n    digits = sum(c.isdigit() for c in input_string)\n    special_chars = len(input_string) - unique_chars_count - digits\n    return (unique_chars_count, digits, special_chars)\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import char_counter\n\ndef test_char_counter_empty_string():\n    assert char_counter(\"\") == (0, 0, 0)\n\ndef test_char_counter_with_letters():\n    assert char_counter(\"abcd\") == (4, 0, 0)\n\ndef test_char_counter_with_digits():\n    assert char_counter(\"12345\") == (0, 5, 0)\n\ndef test_char_counter_with_special_characters():\n    assert char_counter(\"!@#$%^&*()\") == (0, 0, 10)\n\ndef test_char_counter_with_mixed_content():\n    assert char_counter(\"abc123!@#\") == (3, 3, 3)\n\ndef test_char_counter_with_duplicates():\n    assert char_counter(\"aabbccddee112233\") == (6, 6, 0)\n\ndef test_char_counter_with_punctuation():\n    assert char_counter(\"hello, world!\") == (8, 0, 2)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000016", "row_id": 16, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count the number of unique characters, digits, and special characters in a given string. Count them separately and return as a tuple (unique_chars, digits, special_chars)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a Celsius temperature to Fahrenheit."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef celsius_to_fahrenheit(celsius):\n    \"\"\"\n    Converts a temperature from Celsius to Fahrenheit.\n    \n    Parameters:\n    celsius (float): Temperature in Celsius.\n    \n    Returns:\n    float: Temperature in Fahrenheit.\n    \"\"\"\n    return (celsius * 9/5) + 32\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import celsius_to_fahrenheit\n\ndef test_celsius_to_fahrenheit():\n    assert round(celsius_to_fahrenheit(0), 2) == 32.00\n\ndef test_celsius_to_fahrenheit_positive():\n    assert round(celsius_to_fahrenheit(100), 2) == 212.00\n\ndef test_celsius_to_fahrenheit_negative():\n    assert round(celsius_to_fahrenheit(-40), 2) == -40.00\n\ndef test_celsius_to_fahrenheit_half():\n    assert round(celsius_to_fahrenheit(-273.15), 2) == -459.67\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000017", "row_id": 17, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a Celsius temperature to Fahrenheit."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the minimal path sum from top to bottom in a binary tree. The minimal path is defined as the path that minimizes the sum of node values along the path from root to leaf."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef minimal_path_sum(root: TreeNode) -> int:\n    \"\"\"\n    Returns the minimal path sum from top to bottom in a binary tree.\n    \"\"\"\n    def dfs(node):\n        if not node:\n            return 0, float('inf')\n        if not node.left and not node.right:\n            return 1, node.val\n        left_depth, left_sum = dfs(node.left)\n        right_depth, right_sum = dfs(node.right)\n        current_depth = max(left_depth, right_depth) + 1\n        current_sum = min(left_sum, right_sum) + node.val\n        return current_depth, current_sum\n    \n    _, result = dfs(root)\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import minimal_path_sum, TreeNode\n\ndef create_tree(*vals):\n    def add_node(index, val):\n        if not tree[index]:\n            tree[index] = TreeNode()\n        if val is not None:\n            tree[index].val = val\n        left_index = 2 * index + 1\n        right_index = 2 * index + 2\n        if left_index < len(tree):\n            add_node(left_index, vals[left_index])\n        if right_index < len(tree):\n            add_node(right_index, vals[right_index])\n    tree = [None] * 20\n    add_node(0, None)\n    for i, val in enumerate(vals):\n        if val is not None:\n            add_node(i, val)\n    return tree[0]\n\ndef test_minimal_path_sum():\n    # Create a binary tree\n    root = create_tree(\n        60, 20, 80, 40, 50, None, 100, None, 65\n    )\n    assert minimal_path_sum(root) == 180\n\n    # Create another binary tree\n    root2 = create_tree(\n        10, 20, 20, 30, 40, 30, 50\n    )\n    assert minimal_path_sum(root2) == 50\n\n    # Create a binary tree with negative values\n    root3 = create_tree(\n        -6, -2, -8, -10, -4\n    )\n    assert minimal_path_sum(root3) == -18\n\n    # Create a binary tree with a single root node\n    root4 = create_tree(1)\n    assert minimal_path_sum(root4) == 1\n\n    # Create a binary tree with all leaves at the same level\n    root5 = create_tree(\n        2, 3, 7, 8, 4, 5, None, None, 1\n    )\n    assert minimal_path_sum(root5) == 11\n\n# The following lines are for the test functions\n# and would be executed when running the script\n# directly.\nif __name__ == \"__main__\":\n    test_minimal_path_sum()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000018", "row_id": 18, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the minimal path sum from top to bottom in a binary tree. The minimal path is defined as the path that minimizes the sum of node values along the path from root to leaf."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate and return the area of a triangle given its base and height."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef calculate_triangle_area(base, height):\n    \"\"\"\n    Returns the area of a triangle given its base and height.\n    \"\"\"\n    return 0.5 * base * height\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import calculate_triangle_area\n\ndef test_calculate_triangle_area_positive_values():\n    assert calculate_triangle_area(5, 3) == 7.5\n\ndef test_calculate_triangle_area_with_zero():\n    assert calculate_triangle_area(0, 5) == 0\n    assert calculate_triangle_area(5, 0) == 0\n\ndef test_calculate_triangle_area_negative_values():\n    assert calculate_triangle_area(-4, -6) == 12\n    assert calculate_triangle_area(4, -6) == -12  # Note: The area is always positive, but testing negative values\n                                               #       to ensure the function works without issues.\n\ndef test_calculate_triangle_area_mixed_sign_values():\n    assert calculate_triangle_area(-3, 7) == 10.5\n    assert calculate_triangle_area(3, -7) == -10.5  # Again, testing for mixed signs to ensure correct handling.\n```"}], "metadata": {"prompt_id": "00000020", "row_id": 20, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate and return the area of a triangle given its base and height."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the sum of all even numbers in a list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_even_numbers(lst):\n    \"\"\"\n    Returns the sum of all even numbers in the given list.\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_even_numbers\n\ndef test_sum_even_numbers_empty_list():\n    assert sum_even_numbers([]) == 0\n\ndef test_sum_even_numbers_with_even_numbers():\n    assert sum_even_numbers([2, 4, 6, 8]) == 20\n\ndef test_sum_even_numbers_with_odd_numbers():\n    assert sum_even_numbers([1, 3, 5, 7]) == 0\n\ndef test_sum_even_numbers_with_mixed_numbers():\n    assert sum_even_numbers([1, 2, 3, 4, 5, 6]) == 12\n\ndef test_sum_even_numbers_with_negative_numbers():\n    assert sum_even_numbers([-2, -4, -6, -8]) == -20\n\ndef test_sum_even_numbers_with_odd_and_even():\n    assert sum_even_numbers([1, 2, 3, 4, 5, 6, 7, 8]) == 20\n```"}], "metadata": {"prompt_id": "00000021", "row_id": 21, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the sum of all even numbers in a list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the number of occurrences of a substring within a given string. The function should be case-insensitive."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_substring_occurrences(string, substring):\n    \"\"\"\n    Counts the number of occurrences of a substring within a given string, ignoring case.\n    \"\"\"\n    return sum(substring in string[i:].lower() for i in range(len(string)))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_count_substring_occurrences():\n    assert count_substring_occurrences(\"Hello, hello, HELLO\", \"hello\") == 3\n    assert count_substring_occurrences(\"\u6d4b\u8bd5 \u6d4b\u8bd5 \u6d4b\u8bd5\", \"\u6d4b\u8bd5\") == 3\n    assert count_substring_occurrences(\"\", \"a\") == 0\n    assert count_substring_occurrences(\"aAaAaA\", \"Aa\") == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000022", "row_id": 22, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the number of occurrences of a substring within a given string. The function should be case-insensitive."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the number of paths from the top-left corner to the bottom-right corner of an M x N grid, where you can only move either down or right at any point in time. The function should handle cases where the grid size can be as large as 10x10 for efficiency. Use memoization to optimize the algorithm."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport functools\n\ndef count_paths(m, n):\n    \"\"\"\n    Returns the number of paths from the top-left corner to the bottom-right corner of an M x N grid.\n    Movement is restricted to down and right.\n    \"\"\"\n    @functools.lru_cache(maxsize=None)\n    def dp(r, c):\n        if r == 0 or c == 0:\n            return 1\n        return dp(r - 1, c) + dp(r, c - 1)\n    \n    return dp(m - 1, n - 1)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_paths\n\ndef test_count_paths_small_grid():\n    assert count_paths(2, 2) == 2\n\ndef test_count_paths_medium_grid():\n    assert count_paths(3, 3) == 6\n    assert count_paths(4, 3) == 10\n    assert count_paths(3, 4) == 10\n\ndef test_count_paths_large_grid():\n    assert count_paths(10, 10) == 184756\n\ndef test_count_paths_with_m_equal_n():\n    for i in range(1, 11):\n        assert count_paths(i, i) == (2 * i - 2) // 2 + 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000024", "row_id": 24, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the number of paths from the top-left corner to the bottom-right corner of an M x N grid, where you can only move either down or right at any point in time. The function should handle cases where the grid size can be as large as 10x10 for efficiency. Use memoization to optimize the algorithm."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum sum of a subarray of size k within an input array of integers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_sum_subarray(arr, k):\n    \"\"\"\n    Finds the maximum sum of any subarray of size k within the input array.\n    \n    Parameters:\n    arr (list): The input array of integers.\n    k (int): The size of the subarray.\n    \n    Returns:\n    int: The maximum sum of a subarray of size k.\n    \"\"\"\n    if not arr or k <= 0 or k > len(arr):\n        return None\n    \n    max_sum = window_sum = sum(arr[:k])\n    for i in range(len(arr) - k):\n        window_sum = window_sum - arr[i] + arr[i + k]\n        max_sum = max(max_sum, window_sum)\n    \n    return max_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_sum_subarray\n\ndef test_max_sum_subarray_with_positive_numbers():\n    assert max_sum_subarray([1, 2, 3, 4, 5], 2) == 9\n\ndef test_max_sum_subarray_with_negative_numbers():\n    assert max_sum_subarray([-1, -2, -3, -4, -5], 3) == -6\n\ndef test_max_sum_subarray_with_mixed_signs():\n    assert max_sum_subarray([1, -1, 5, 2, -3, 4], 3) == 5\n\ndef test_max_sum_subarray_with_single_element():\n    assert max_sum_subarray([5], 1) == 5\n\ndef test_max_sum_subarray_with_invalid_k():\n    assert max_sum_subarray([1, 2, 3], 4) is None\n\ndef test_max_sum_subarray_with_empty_array():\n    assert max_sum_subarray([], 2) is None\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000025", "row_id": 25, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum sum of a subarray of size k within an input array of integers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the factorial of a number using recursion. The function should take an integer as an argument and return the factorial of that number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial of a number using recursion.\n    \n    Args:\n    n (int): The input number whose factorial is to be calculated.\n    \n    Returns:\n    int: The factorial of the input number.\n    \n    Raises:\n    ValueError: If the input is a negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import factorial\n\ndef test_factorial_positive_numbers():\n    assert factorial(5) == 120\n    assert factorial(3) == 6\n    assert factorial(1) == 1\n\ndef test_factorial_zero():\n    assert factorial(0) == 1\n\ndef test_factorial_negative_numbers():\n    try:\n        factorial(-1)\n        assert False, \"Expected ValueError for negative input\"\n    except ValueError as e:\n        assert str(e) == \"Factorial is not defined for negative numbers\"\n\ndef test_factorial_large_numbers():\n    assert factorial(10) == 3628800\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000026", "row_id": 26, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the factorial of a number using recursion. The function should take an integer as an argument and return the factorial of that number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the union of elements in two lists."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_union(list1, list2):\n    \"\"\"\n    Returns a list containing unique elements that are present in both list1 and list2.\n    \"\"\"\n    return list(set(list1 + list2))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_union\n\ndef test_find_union_with_unique_elements():\n    assert find_union([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\ndef test_find_union_with_common_elements():\n    assert find_union([1, 2, 2, 3], [2, 3, 3, 4]) == [1, 2, 3, 4]\n\ndef test_find_union_with_mixed_data_types():\n    assert find_union([1, 'a', 3], [2, 'a', 4]) == [1, 2, 3, 'a', 4]\n\ndef test_find_union_with_no_intersection():\n    assert find_union([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\ndef test_find_union_with_empty_lists():\n    assert find_union([], []) == []\n    assert find_union([], [1, 2, 3]) == [1, 2, 3]\n    assert find_union([1, 2, 3], []) == [1, 2, 3]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000027", "row_id": 27, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the union of elements in two lists."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given string is a valid double (a number with a decimal point)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport re\n\ndef is_valid_double(s):\n    \"\"\"\n    Returns True if the given string is a valid double, False otherwise.\n    \"\"\"\n    pattern = r'^[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?$'\n    return bool(re.match(pattern, s))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport re\nfrom solution import is_valid_double\n\ndef test_is_valid_double_positive_numbers():\n    assert is_valid_double(\"123.456\") == True\n\ndef test_is_valid_double_negative_numbers():\n    assert is_valid_double(\"-123.456\") == True\n\ndef test_is_valid_double_numbers_with_exponent():\n    assert is_valid_double(\"123.456e-2\") == True\n    assert is_valid_double(\"-123.456E+2\") == True\n\ndef test_is_valid_double_invalid_exponent():\n    assert is_valid_double(\"123.e.2\") == False\n\ndef test_is_valid_double_additional_characters():\n    assert is_valid_double(\".123\") == True\n    assert is_valid_double(\"123.\") == True\n    assert is_valid_double(\"123.0\") == True\n    assert is_valid_double(\"123e\") == False\n    assert is_valid_double(\"abc123.456\") == False\n    assert is_valid_double(\"123.456abc\") == False\n\ndef test_is_valid_double_edge_cases():\n    assert is_valid_double(\"\") == False\n    assert is_valid_double(\"e123\") == False\n    assert is_valid_double(\".e123\") == False\n    assert is_valid_double(\"123.e\") == False\n    assert is_valid_double(\"123e.\") == False\n    assert is_valid_double(\"+123.456\") == True\n    assert is_valid_double(\"-.456\") == True\n    assert is_valid_double(\".\") == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000028", "row_id": 28, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given string is a valid double (a number with a decimal point)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to implement a simple bubble sort algorithm."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef bubble_sort(arr):\n    \"\"\"\n    Sorts an array using the bubble sort algorithm.\n    \n    Parameters:\n    arr (list): The list of elements to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        # Flag to detect any swap\n        swapped = False\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                # Swap arr[j] and arr[j+1]\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                swapped = True\n        # If no two elements were swapped by inner loop, then break\n        if not swapped:\n            break\n    return arr\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import bubble_sort\n\ndef test_bubble_sort_positive_numbers():\n    assert bubble_sort([64, 34, 25, 12, 22, 11, 90]) == [11, 12, 22, 25, 34, 64, 90]\n\ndef test_bubble_sort_negative_numbers():\n    assert bubble_sort([-2, -34, -60, -1, -50]) == [-60, -50, -34, -2, -1]\n\ndef test_bubble_sort_mixed_sign_numbers():\n    assert bubble_sort([-2, 34, -60, 12, -50, 72]) == [-60, -50, -2, 12, 34, 72]\n\ndef test_bubble_sort_single_element():\n    assert bubble_sort([5]) == [5]\n\ndef test_bubble_sort_empty_list():\n    assert bubble_sort([]) == []\n\ndef test_bubble_sort_already_sorted():\n    assert bubble_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_bubble_sort_duplicate_elements():\n    assert bubble_sort([4, 2, 1, 2, 3, 4]) == [1, 2, 2, 3, 4, 4]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000029", "row_id": 29, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to implement a simple bubble sort algorithm."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine if all elements in an array are unique. Pseudocode is not necessary. Please include comments in your code to explain its functionality."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef are_elements_unique(arr):\n    \"\"\"\n    Determines if all elements in the array are unique.\n\n    Arguments:\n    arr -- list of elements\n\n    Returns:\n    bool -- True if all elements are unique, False otherwise.\n    \"\"\"\n    # Convert the list to a set and compare its length to the original list's length\n    return len(arr) == len(set(arr))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import are_elements_unique\n\ndef test_unique_elements():\n    assert are_elements_unique([1, 2, 3, 4, 5]) == True\n\ndef test_duplicate_elements():\n    assert are_elements_unique([1, 2, 3, 3, 5]) == False\n\ndef test_empty_array():\n    assert are_elements_unique([]) == True\n\ndef test_single_element_array():\n    assert are_elements_unique([42]) == True\n\ndef test_multiple_duplicates():\n    assert are_elements_unique([1, 2, 3, 3, 2, 1]) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000030", "row_id": 30, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine if all elements in an array are unique. Pseudocode is not necessary. Please include comments in your code to explain its functionality."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the closest element in an almost sorted array. An almost sorted array is defined as an array where each element is no more than two positions away from its sorted position in the array. For example, an array `[3, 1, 2, 4]` is an almost sorted array since each element is within one position of its sorted position."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_closest_element(arr, target):\n    \"\"\"\n    Finds the closest element to the target in an almost sorted array.\n    An almost sorted array is one where each element is no more than two positions away\n    from its sorted position.\n    \n    Args:\n    arr : List[int]\n        The almost sorted array.\n    target : int\n        The target value to find the closest element to.\n        \n    Returns:\n    int\n        The closest element to the target in the array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    closest_index = 0\n    min_diff = float('inf')\n\n    while left <= right:\n        mid = (left + right) // 2\n        # Check if the current element or its neighbors could be the closest\n        if abs(arr[mid] - target) < min_diff:\n            min_diff = abs(arr[mid] - target)\n            closest_index = mid\n\n        # Move the search towards the center\n        if arr[mid] == target:\n            break\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return arr[closest_index]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_closest_element\n\ndef test_closest_element_positive():\n    assert find_closest_element([4, 3, 2, 5, 1], 3) == 3  # Array and target value\n\ndef test_closest_element_large_positive_number():\n    assert find_closest_element([10, 20, 30, 60, 40, 50], 45) == 40  # Large positive numbers\n\ndef test_closest_element_zero():\n    assert find_closest_element([0, -1, 2, 1, -1], -2) == -1  # Including zero and negative values\n\ndef test_closest_element_negative():\n    assert find_closest_element([-2, -1, -5, -4, 0], -3) == -2  # Array and negative target value\n\ndef test_closest_element_one_element():\n    assert find_closest_element([5], 5) == 5  # Single element array\n\ndef test_closest_element_sorted_array():\n    assert find_closest_element([1, 2, 3, 4, 5], 3) == 3  # Sorted array\n\ndef test_closest_element_unsorted_array():\n    assert find_closest_element([5, 3, 1, 2, 4], 3) == 3  # Unsorted array with target 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000031", "row_id": 31, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the closest element in an almost sorted array. An almost sorted array is defined as an array where each element is no more than two positions away from its sorted position in the array. For example, an array `[3, 1, 2, 4]` is an almost sorted array since each element is within one position of its sorted position."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if the binary representation of a number is a palindrome."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_binary_palindrome(n: int) -> bool:\n    \"\"\"\n    Checks if the binary representation of a number is a palindrome.\n\n    :param n: Integer to check\n    :return: True if binary representation is a palindrome, False otherwise\n    \"\"\"\n    binary_str = bin(n)[2:]  # Convert to binary and remove '0b' prefix\n    return binary_str == binary_str[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\r\n```python\ndef test_is_binary_palindrome():\n    assert is_binary_palindrome(9) == True  # 9 in binary is 1001\n    assert is_binary_palindrome(4) == False  # 4 in binary is 100\n    assert is_binary_palindrome(1) == True  # 1 in binary is 1\n    assert is_binary_palindrome(2) == False  # 2 in binary is 10\n    assert is_binary_palindrome(3) == True  # 3 in binary is 11\n    assert is_binary_palindrome(7) == True  # 7 in binary is 111\n    assert is_binary_palindrome(13) == True  # 13 in binary is 1101\n    assert is_binary_palindrome(23) == False  # 23 in binary is 10111\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000032", "row_id": 32, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if the binary representation of a number is a palindrome."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to print all prime numbers up to a given number. Also, include a simple test function with some test cases to ensure the correctness of the solution."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef print_primes(n):\n    \"\"\"\n    Prints all prime numbers up to n.\n    \"\"\"\n    if n < 2:\n        return  # No primes less than 2\n    \n    for possiblePrime in range(2, n + 1):\n        # Assume number is prime until shown it is not. \n        isPrime = True\n        for num in range(2, int(possiblePrime ** 0.5) + 1):\n            if possiblePrime % num == 0:\n                isPrime = False\n                break\n        if isPrime:\n            print(possiblePrime)\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import print_primes\n\ndef test_print_primes():\n    test_cases = [\n        (5, \"2\\n3\\n5\\n\"),\n        (11, \"2\\n3\\n5\\n7\\n11\\n\"),\n        (2, \"2\\n\"),\n        (0, \"\"),\n        (1, \"\"),\n        (19, \"2\\n3\\n5\\n7\\n11\\n13\\n17\\n19\\n\")\n    ]\n    \n    for input_num, expected_output in test_cases:\n        with print_function_capturing() as output:\n            print_primes(input_num)\n        assert output.getvalue().strip() == expected_output\n```\n```python\nimport sys\nfrom contextlib import redirect_stdout\n\ndef print_function_capturing():\n    class StringIO:\n        def __init__(self):\n            self.string = \"\"\n\n        def write(self, content):\n            self.string += content\n\n        def getvalue(self):\n            return self.string\n\n    return StringIO()\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000034", "row_id": 34, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to print all prime numbers up to a given number. Also, include a simple test function with some test cases to ensure the correctness of the solution."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to print all the prime numbers in a given range. What are the factors to consider while implementing this function?"}, {"role": "assistant", "content": "<|Solution Begin|>\n\nTo write a Python function that prints all prime numbers in a given range, follow these steps:\n1. Define the function with start and end parameters that define the range.\n2. Iterate through each number in the range.\n3. For each number, check if it is a prime number.\n4. Print or return the prime numbers as needed.\n\n### Factors to consider:\n- **Efficiency:** Check for prime numbers as efficiently as possible.\n- **Edge Cases:** Handle ranges that could include negative numbers, zero, or even large numbers.\n- **Optimization:** Use the smallest possible divisors to check for primality (up to the square root of the number).\n\n```python\ndef is_prime(num):\n    \"\"\"Returns True if num is a prime number, else False.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef print_prime_numbers(start, end):\n    \"\"\"Prints all the prime numbers in the given range.\"\"\"\n    for num in range(max(2, start), end + 1):\n        if is_prime(num):\n            print(num)\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import print_prime_numbers, is_prime\n\ndef test_is_prime():\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(4) == False\n    assert is_prime(5) == True\n    assert is_prime(25) == False\n    assert is_prime(29) == True\n\ndef test_print_prime_numbers():\n    # Check a simple range\n    with test_output_capture() as output:\n        print_prime_numbers(10, 20)\n    assert output.getvalue().strip().split(\"\\n\") == [\"11\", \"13\", \"17\", \"19\"]\n\n    # Check an empty range\n    with test_output_capture() as output:\n        print_prime_numbers(15, 15)\n    assert output.getvalue().strip() == \"\"\n\n    # Check validating for range inclusivity and lower limit\n    with test_output_capture() as output:\n        print_prime_numbers(2, 3)\n    assert output.getvalue().strip().split(\"\\n\") == [\"2\", \"3\"]\n\n    # Check large range with primes at both ends\n    with test_output_capture() as output:\n        print_prime_numbers(100, 110)\n    assert output.getvalue().strip().split(\"\\n\") == [\"101\", \"103\", \"107\", \"109\"]\n\ndef test_prime_with_negativeranges():\n    # Handling negative ranges and ensuring no negative primes printed\n    with test_output_capture() as output:\n        print_prime_numbers(-5, 1)\n    assert output.getvalue().strip() == \"2\"\n\n    with test_output_capture() as output:\n        print_prime_numbers(-10, -5)  # This should not print any primes\n    assert output.getvalue().strip() == \"\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000036", "row_id": 36, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to print all the prime numbers in a given range. What are the factors to consider while implementing this function?"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count the frequency of each character in a given string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef char_frequency(input_string):\n    \"\"\"\n    Returns a dictionary containing the frequency of each character in the input_string.\n    \"\"\"\n    frequency_dict = {}\n    for char in input_string:\n        if char in frequency_dict:\n            frequency_dict[char] += 1\n        else:\n            frequency_dict[char] = 1\n    return frequency_dict\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import char_frequency\n\ndef test_char_frequency_empty_string():\n    assert char_frequency(\"\") == {}\n\ndef test_char_frequency_single_character():\n    assert char_frequency(\"a\") == {\"a\": 1}\n\ndef test_char_frequency_multiple_characters():\n    assert char_frequency(\"hello\") == {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}\n\ndef test_char_frequency_with_spaces():\n    assert char_frequency(\"hello world\") == {\"h\": 1, \"e\": 1, \"l\": 3, \"o\": 2, \" \": 1, \"w\": 1, \"r\": 1, \"d\": 1}\n\ndef test_char_frequency_with_special_characters():\n    assert char_frequency(\"#$@hello world!\") == {\"#\": 1, \"$\": 1, \"@\": 1, \"h\": 1, \"e\": 1, \"l\": 3, \"o\": 2, \" \": 1, \"w\": 1, \"r\": 1, \"d\": 1, \"!\": 1}\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000038", "row_id": 38, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count the frequency of each character in a given string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the most frequent element in a list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import Counter\n\ndef most_frequent_element(lst):\n    \"\"\"\n    Returns the most frequent element in the given list.\n    If there are multiple elements with the same highest frequency, returns the first one encountered.\n    \"\"\"\n    counter = Counter(lst)\n    most_common = counter.most_common(1)\n    return most_common[0][0] if most_common else None\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import most_frequent_element\n\ndef test_most_frequent_element_single_mode():\n    assert most_frequent_element([1, 2, 2, 3, 3, 3]) == 3\n\ndef test_most_frequent_element_multiple_modes():\n    assert most_frequent_element([1, 1, 2, 2, 3, 3]) == 1  # Returns the first mode encountered\n\ndef test_most_frequent_element_no_repeat():\n    assert most_frequent_element([1, 2, 3]) == 1\n\ndef test_most_frequent_element_empty_list():\n    assert most_frequent_element([]) is None\n\ndef test_most_frequent_element_single_element_list():\n    assert most_frequent_element([42]) == 42\n```"}], "metadata": {"prompt_id": "00000041", "row_id": 41, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the most frequent element in a list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the length of the longest increasing subsequence (LIS) in an array of integers. The function should take a list of integers as input and return the length of the LIS."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef length_of_lis(nums):\n    \"\"\"\n    Returns the length of the longest increasing subsequence in nums.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    dp = [1] * len(nums)\n    \n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import length_of_lis\n\ndef test_length_of_lis_single_element():\n    assert length_of_lis([1]) == 1\n\ndef test_length_of_lis_increasing_sequence():\n    assert length_of_lis([1, 2, 3, 4, 5]) == 5\n\ndef test_length_of_lis_decreasing_sequence():\n    assert length_of_lis([5, 4, 3, 2, 1]) == 1\n\ndef test_length_of_lis_mixed_sequence():\n    assert length_of_lis([10, 9, 2, 5, 3, 7, 101, 18]) == 4\n\ndef test_length_of_lis_empty_list():\n    assert length_of_lis([]) == 0\n\ndef test_length_of_lis_with_duplicates():\n    assert length_of_lis([0, 1, 0, 3, 2, 3]) == 4\n\ndef test_length_of_lis_random_sequence():\n    assert length_of_lis([3, 5, 6, 2, 5, 4, 19, 5, 6, 7, 12]) == 6\n```"}], "metadata": {"prompt_id": "00000043", "row_id": 43, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the length of the longest increasing subsequence (LIS) in an array of integers. The function should take a list of integers as input and return the length of the LIS."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the binomial coefficient for given number 'n' and 'k'. The binomial coefficient, often denoted as C(n, k), represents the number of ways to choose k items from a set of n distinct items. This function will be defined by the return statement: `return binomial_coefficient(n, k)`. The binomial coefficient can be calculated using the formula: C(n, k) = C(n-1, k-1) + C(n-1, k), with the base cases being C(n, 0) = C(n, n) = 1."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef binomial_coefficient(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k) using a recursive approach.\n    \"\"\"\n    # Base cases\n    if k == 0 or k == n:\n        return 1\n    # Recursive case\n    return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import binomial_coefficient\n\ndef test_binomial_coefficient_small_values():\n    assert binomial_coefficient(5, 2) == 10\n    assert binomial_coefficient(6, 3) == 20\n\ndef test_binomial_coefficient_large_values():\n    assert binomial_coefficient(20, 10) == 184756\n    assert binomial_coefficient(25, 15) == 3268760\n\ndef test_binomial_coefficient_edge_cases():\n    assert binomial_coefficient(0, 0) == 1\n    assert binomial_coefficient(1, 0) == 1\n    assert binomial_coefficient(1, 1) == 1\n\ndef test_binomial_coefficient_mixed_sign_numbers():\n    # n and k should be non-negative integers\n    assert binomial_coefficient(5, -1) is None\n    assert binomial_coefficient(-5, 2) is None\n    assert binomial_coefficient(5, 6) == 0  # n < k, which is not allowed\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000044", "row_id": 44, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the binomial coefficient for given number 'n' and 'k'. The binomial coefficient, often denoted as C(n, k), represents the number of ways to choose k items from a set of n distinct items. This function will be defined by the return statement: `return binomial_coefficient(n, k)`. The binomial coefficient can be calculated using the formula: C(n, k) = C(n-1, k-1) + C(n-1, k), with the base cases being C(n, 0) = C(n, n) = 1."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to duplicate a linked list, including both the values of the nodes and the node's next pointers. Here, a duplicated linked list means creating a copy of the original linked list with new memory allocated for each node."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef duplicate_linked_list(head):\n    \"\"\"\n    Duplicates a linked list including values and next pointers.\n    \"\"\"\n    if not head:\n        return None\n    \n    current = head\n    while current:\n        new_node = ListNode(current.val)\n        new_node.next = current.next\n        current.next = new_node\n        current = new_node.next\n    \n    current = head\n    copy_head = None\n    copy_current = None\n    \n    while current:\n        if not copy_head:\n            copy_head = copy_current = current.next\n        else:\n            copy_current.next = current.next.next\n            copy_current = copy_current.next\n        current.next = current.next.next\n        current = current.next\n    \n    return copy_head\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef create_linked_list(values):\n    if not values:\n        return None\n    head = ListNode(values[0])\n    current = head\n    for value in values[1:]:\n        current.next = ListNode(value)\n        current = current.next\n    return head\n\ndef linked_list_to_list(head):\n    result = []\n    current = head\n    while current:\n        result.append(current.val)\n        current = current.next\n    return result\n\ndef test_duplicate_linked_list():\n    # Test with a simple linked list: 1 -> 2 -> 3\n    head = create_linked_list([1, 2, 3])\n    copied_head = duplicate_linked_list(head)\n    assert linked_list_to_list(copied_head) == [1, 2, 3]\n    \n    # Test with an empty linked list\n    head = create_linked_list([])\n    copied_head = duplicate_linked_list(head)\n    assert linked_list_to_list(copied_head) == []\n    \n    # Test with a linked list with one element: 4\n    head = create_linked_list([4])\n    copied_head = duplicate_linked_list(head)\n    assert linked_list_to_list(copied_head) == [4]\n    \n    # Test with a more complex linked list: 10 -> 20 -> 30 -> 40 -> 50\n    head = create_linked_list([10, 20, 30, 40, 50])\n    copied_head = duplicate_linked_list(head)\n    assert linked_list_to_list(copied_head) == [10, 20, 30, 40, 50]\n\ntest_duplicate_linked_list()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000045", "row_id": 45, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to duplicate a linked list, including both the values of the nodes and the node's next pointers. Here, a duplicated linked list means creating a copy of the original linked list with new memory allocated for each node."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a number is a palindrome number. A palindrome number is a number that remains the same when its digits are reversed, such as 121 or 1331."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_palindrome_number(number: int) -> bool:\n    \"\"\"\n    Checks if the given number is a palindrome.\n    \n    A number is a palindrome if it reads the same backward as forward.\n    \"\"\"\n    if number < 0:\n        return False\n    original_number = number\n    reversed_number = 0\n    while number > 0:\n        digit = number % 10\n        reversed_number = reversed_number * 10 + digit\n        number = number // 10\n    return original_number == reversed_number\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_palindrome_number\n\ndef test_is_palindrome_number_positive():\n    assert is_palindrome_number(121) == True\n    assert is_palindrome_number(1331) == True\n    assert is_palindrome_number(12321) == True\n\ndef test_is_palindrome_number_negative():\n    assert is_palindrome_number(-121) == False\n\ndef test_is_palindrome_number_zero():\n    assert is_palindrome_number(0) == True\n\ndef test_is_palindrome_number_zero_padded():\n    assert is_palindrome_number(1001) == True\n\ndef test_is_palindrome_number_single_digit():\n    assert is_palindrome_number(7) == True\n\ndef test_is_palindrome_number_non_palindrome():\n    assert is_palindrome_number(123) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000046", "row_id": 46, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a number is a palindrome number. A palindrome number is a number that remains the same when its digits are reversed, such as 121 or 1331."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given string is palindrome or not."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_palindrome(s):\n    \"\"\"\n    Returns True if the string s is a palindrome, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_palindrome\n\ndef test_is_palindrome_empty_string():\n    assert is_palindrome(\"\") is True\n\ndef test_is_palindrome_single_character():\n    assert is_palindrome(\"a\") is True\n\ndef test_is_palindrome_palindrome_string():\n    assert is_palindrome(\"Racecar\") is True\n\ndef test_is_palindrome_non_palindrome_string():\n    assert is_palindrome(\"Hello\") is False\n\ndef test_is_palindrome_mixed_case_string():\n    assert is_palindrome(\"Madam, in Eden, I'm Adam\") is True\n    assert is_palindrome(\"A man, a plan, a canal: Panama\") is True\n\ndef test_is_palindrome_with_special_characters():\n    assert is_palindrome(\"A Toyota's a Toyota!\") is True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000047", "row_id": 47, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given string is palindrome or not."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the sum of two numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_two_numbers(a, b):\n    \"\"\"\n    Returns the sum of two numbers a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_two_numbers\n\ndef test_sum_positive_numbers():\n    assert sum_two_numbers(2, 3) == 5\n\ndef test_sum_with_zero():\n    assert sum_two_numbers(0, 5) == 5\n    assert sum_two_numbers(5, 0) == 5\n\ndef test_sum_negative_numbers():\n    assert sum_two_numbers(-1, -1) == -2\n\ndef test_sum_mixed_sign_numbers():\n    assert sum_two_numbers(-1, 3) == 2\n```"}], "metadata": {"prompt_id": "00000049", "row_id": 49, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the sum of two numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given string is a valid palindrome. A valid palindrome is a string that reads the same forward and backward, ignoring cases and non-alphanumeric characters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport re\n\ndef is_valid_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the string is a valid palindrome, False otherwise.\n    A valid palindrome reads the same forward and backward, ignoring cases and non-alphanumeric characters.\n    \"\"\"\n    # Remove non-alphanumeric characters and convert to lowercase\n    cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n    # Check if the cleaned string is equal to its reverse\n    return cleaned_s == cleaned_s[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import is_valid_palindrome\n\ndef test_is_valid_palindrome():\n    assert is_valid_palindrome(\"A man, a plan, a canal: Panama\") == True\n    assert is_valid_palindrome(\"race a car\") == False\n    assert is_valid_palindrome(\" \") == True\n    assert is_valid_palindrome(\"0P\") == False\n    assert is_valid_palindrome(\"No 'x' in Nixon\") == True\n    assert is_valid_palindrome(\"No lemon, no melon\") == True\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000053", "row_id": 53, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given string is a valid palindrome. A valid palindrome is a string that reads the same forward and backward, ignoring cases and non-alphanumeric characters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum product of a contiguous subarray within a one-dimensional array of numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_product_subarray(nums):\n    \"\"\"\n    Returns the maximum product of a contiguous subarray within nums.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    max_product = min_product = result = nums[0]\n    \n    for num in nums[1:]:\n        # The maximum product can be updated using the current number, max_product, or min_product\n        candidates = (num, max_product * num, min_product * num)\n        max_product = max(candidates)\n        min_product = min(candidates)\n        \n        # Update the result with the maximum product found so far\n        result = max(result, max_product)\n    \n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_max_product_subarray_positive():\n    assert max_product_subarray([2, 3, -2, 4]) == 6\n\ndef test_max_product_subarray_negative():\n    assert max_product_subarray([-2, 0, -1]) == 0\n\ndef test_max_product_subarray_with_one_negative():\n    assert max_product_subarray([0, -1]) == 0\n\ndef test_max_product_subarray_all_negative():\n    assert max_product_subarray([-2, -3, -1]) == 6\n\ndef test_max_product_subarray_single_element():\n    assert max_product_subarray([2]) == 2\n\ndef test_max_product_subarray_empty():\n    assert max_product_subarray([]) == 0\n\ndef test_max_product_subarray_mixed():\n    assert max_product_subarray([2, -5, -2, -4, 3]) == 24\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000054", "row_id": 54, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum product of a contiguous subarray within a one-dimensional array of numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to identify if two string s1 and s2 are isomorphic. Two strings are isomorphic if the characters in s1 can be replaced to get s2. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_isomorphic(s1, s2):\n    \"\"\"\n    Checks if two strings are isomorphic. Two strings are isomorphic if the characters in s1 can be replaced to get s2.\n    \"\"\"\n    if len(s1) != len(s2):\n        return False\n    \n    s1_to_s2_map = {}\n    s2_to_s1_map = {}\n    \n    for char_from_s1, char_from_s2 in zip(s1, s2):\n        if char_from_s1 in s1_to_s2_map:\n            if s1_to_s2_map[char_from_s1] != char_from_s2:\n                return False\n        else:\n            s1_to_s2_map[char_from_s1] = char_from_s2\n        \n        if char_from_s2 in s2_to_s1_map:\n            if s2_to_s1_map[char_from_s2] != char_from_s1:\n                return False\n        else:\n            s2_to_s1_map[char_from_s2] = char_from_s1\n    \n    return True\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_isomorphic\n\ndef test_isomorphic_example1():\n    assert is_isomorphic(\"egg\", \"add\") == True\n\ndef test_isomorphic_example2():\n    assert is_isomorphic(\"foo\", \"bar\") == False\n\ndef test_isomorphic_example3():\n    assert is_isomorphic(\"paper\", \"title\") == True\n\ndef test_isomorphic_identical_strings():\n    assert is_isomorphic(\"abc\", \"abc\") == True\n\ndef test_isomorphic_empty_strings():\n    assert is_isomorphic(\"\", \"\") == True\n\ndef test_isomorphic_no_characters():\n    assert is_isomorphic(\"a\", \"a\") == True\n\ndef test_isomorphic_mismatched_characters():\n    assert is_isomorphic(\"aabb\", \"ccdd\") == True\n\ndef test_isomorphic_non_unique_replacement():\n    assert is_isomorphic(\"ab\", \"aa\") == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000055", "row_id": 55, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to identify if two string s1 and s2 are isomorphic. Two strings are isomorphic if the characters in s1 can be replaced to get s2. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to add two numbers and return the result."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef add_numbers(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_add_numbers_positive_numbers():\n    assert add_numbers(2, 3) == 5\n\ndef test_add_numbers_with_zero():\n    assert add_numbers(0, 5) == 5\n    assert add_numbers(5, 0) == 5\n\ndef test_add_numbers_negative_numbers():\n    assert add_numbers(-1, -1) == -2\n\ndef test_add_numbers_mixed_sign_numbers():\n    assert add_numbers(-1, 3) == 2\n```"}], "metadata": {"prompt_id": "00000056", "row_id": 56, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to add two numbers and return the result."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count the number of uppercase letters in a given string. The function should also handle edge cases such as an empty string or a string with no uppercase letters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_uppercase(s):\n    \"\"\"\n    Returns the number of uppercase letters in the string `s`.\n    \"\"\"\n    return sum(1 for c in s if c.isupper())\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_uppercase\n\ndef test_count_uppercase_empty_string():\n    assert count_uppercase(\"\") == 0\n\ndef test_count_uppercase_no_uppercase_chars():\n    assert count_uppercase(\"hello world\") == 0\n\ndef test_count_uppercase_mixed_case():\n    assert count_uppercase(\"Hello World\") == 2\n\ndef test_count_uppercase_all_uppercase():\n    assert count_uppercase(\"HELLO WORLD\") == 10\n\ndef test_count_uppercase_punctuation():\n    assert count_uppercase(\"Hello, World!\") == 2\n\ndef test_count_uppercase_num_and_special():\n    assert count_uppercase(\"123!@#ABCDEFG\") == 7\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000057", "row_id": 57, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count the number of uppercase letters in a given string. The function should also handle edge cases such as an empty string or a string with no uppercase letters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a given string. Here's a rough outline on how you might approach the problem:"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef reverse_string(s):\n    \"\"\"\n    Returns the reverse of the given string.\n    \"\"\"\n    return s[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import reverse_string\n\ndef test_reverse_string_empty():\n    assert reverse_string(\"\") == \"\"\n\ndef test_reverse_string_single_character():\n    assert reverse_string(\"a\") == \"a\"\n\ndef test_reverse_string_normal():\n    assert reverse_string(\"hello\") == \"olleh\"\n\ndef test_reverse_string_with_spaces():\n    assert reverse_string(\"hello world\") == \"dlrow olleh\"\n\ndef test_reverse_string_with_punctuation():\n    assert reverse_string(\"hello, world!\") == \"!dlrow ,olleh\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000058", "row_id": 58, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a given string. Here's a rough outline on how you might approach the problem:"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to filter out all the strings from a given list that contain a specific substring."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef filter_strings_by_substring(string_list, substring):\n    \"\"\"\n    Filters out strings from the given list that contain the specified substring.\n\n    :param string_list: List of strings to be filtered.\n    :param substring: Substring to search for within the strings.\n    :return: A list containing only strings that do not contain the specified substring.\n    \"\"\"\n    return [s for s in string_list if substring not in s]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import filter_strings_by_substring\n\ndef test_filter_strings_by_substring_empty_list():\n    assert filter_strings_by_substring([], \"test\") == []\n\ndef test_filter_strings_by_substring_no_match():\n    assert filter_strings_by_substring([\"hello\", \"world\"], \"test\") == [\"hello\", \"world\"]\n\ndef test_filter_strings_by_substring_with_match():\n    assert filter_strings_by_substring([\"hello\", \"test\", \"world\"], \"test\") == [\"hello\", \"world\"]\n\ndef test_filter_strings_by_substring_case_insensitive():\n    assert filter_strings_by_substring([\"HELLO\", \"test\", \"WORLD\"], \"Test\") == [\"HELLO\", \"WORLD\"]\n\ndef test_filter_strings_by_substring_with_multiple_occurrences():\n    assert filter_strings_by_substring([\"apple\", \"banana\", \"cherry\", \"cantaloupe\"], \"a\") == [\"cherry\"]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000060", "row_id": 60, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to filter out all the strings from a given list that contain a specific substring."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the first occurrence of an element in an array that is not repeated (i.e., appears exactly once). If there is no such element, return -1."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_unique_element(arr):\n    \"\"\"\n    Returns the index of the first unique element in the given array.\n    If no unique element is found, returns -1.\n    \"\"\"\n    element_counts = {}\n    \n    # Count occurrences of each element\n    for i, num in enumerate(arr):\n        if num in element_counts:\n            element_counts[num] += 1\n        else:\n            element_counts[num] = 1\n    \n    # Find the first unique element's index\n    for i, num in enumerate(arr):\n        if element_counts[num] == 1:\n            return i\n    \n    return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_unique_element\n\ndef test_find_unique_element():\n    assert find_unique_element([2, 3, 4, 5, 4]) == 1\n    assert find_unique_element([1, 2, 3, 4, 4, 3, 2]) == 0\n    assert find_unique_element([1, 1, 2, 2, 3, 3]) == -1\n    assert find_unique_element([10, 20, 20, 30]) == 0\n    assert find_unique_element([7, 7, 7, 7]) == -1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000061", "row_id": 61, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the first occurrence of an element in an array that is not repeated (i.e., appears exactly once). If there is no such element, return -1."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the second maximum number in a list of integers. If the list does not contain at least two different numbers, return None."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_second_maximum(nums):\n    \"\"\"\n    Returns the second maximum number in a list of integers. Returns None if there is no such number.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    max_num = second_max_num = float('-inf')\n    for num in nums:\n        if num > max_num:\n            second_max_num, max_num = max_num, num\n        elif max_num > num > second_max_num:\n            second_max_num = num\n    return second_max_num if second_max_num != max_num else None\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import find_second_maximum\n\ndef test_find_second_maximum_with_long_list():\n    assert find_second_maximum([10, 5, 2, 8, 5, 11, 13]) == 11\n\ndef test_find_second_maximum_with_repeated_max():\n    assert find_second_maximum([10, 10, 10, 10]) == None\n\ndef test_find_second_maximum_single_element():\n    assert find_second_maximum([5]) == None\n\ndef test_find_second_maximum_empty_list():\n    assert find_second_maximum([]) == None\n\ndef test_find_second_maximum_with_negative_numbers():\n    assert find_second_maximum([-10, -5, -6, -1, -3]) == -5\n\ndef test_find_second_maximum_with_mixed_numbers():\n    assert find_second_maximum([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == 2\n\ndef test_find_second_maximum_with_two_elements():\n    assert find_second_maximum([5, 5]) == None\n\ndef test_find_second_maximum_with_descending_order():\n    assert find_second_maximum([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 9\n\ndef test_find_second_maximum_with_all_equal_elements():\n    assert find_second_maximum([2, 2, 2, 2, 2]) == None\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000062", "row_id": 62, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the second maximum number in a list of integers. If the list does not contain at least two different numbers, return None."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a string into a list of words."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef string_to_list_of_words(input_string):\n    \"\"\"\n    Converts a given string into a list of words (separated by spaces).\n    \n    :param input_string: The string to convert.\n    :return: A list of words from the input string.\n    \"\"\"\n    return input_string.split()\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import string_to_list_of_words\n\ndef test_string_to_list_of_words_single_word():\n    assert string_to_list_of_words(\"hello\") == [\"hello\"]\n\ndef test_string_to_list_of_words_multiple_words():\n    assert string_to_list_of_words(\"hello world\") == [\"hello\", \"world\"]\n\ndef test_string_to_list_of_words_with_punctuation():\n    assert string_to_list_of_words(\"hello, world!\") == [\"hello,\", \"world!\"]\n\ndef test_string_to_list_of_words_empty_string():\n    assert string_to_list_of_words(\"\") == []\n\ndef test_string_to_list_of_words_with_spaces():\n    assert string_to_list_of_words(\"  hello  world  \") == [\"hello\", \"world\"]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000063", "row_id": 63, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a string into a list of words."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to detect and remove duplicate elements from a list. Write a test case to validate your function."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef remove_duplicates(input_list):\n    \"\"\"\n    Returns a new list with duplicates removed while maintaining the original order of elements.\n    \n    :param input_list: List of elements that may contain duplicates.\n    :return: A new list with unique elements.\n    \"\"\"\n    seen = set()\n    unique_list = []\n    for item in input_list:\n        if item not in seen:\n            unique_list.append(item)\n            seen.add(item)\n    return unique_list\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import remove_duplicates\n\ndef test_remove_duplicates():\n    assert remove_duplicates([1, 2, 3, 2, 4, 1]) == [1, 2, 3, 4]\n    assert remove_duplicates(['a', 'b', 'a', 'c', 'b', 'd', 'c']) == ['a', 'b', 'c', 'd']\n    assert remove_duplicates([1, 2, 3]) == [1, 2, 3]\n    assert remove_duplicates([]) == []\n    assert remove_duplicates([None, 1, None, 2, 1]) == [None, 1, 2]\n```"}], "metadata": {"prompt_id": "00000064", "row_id": 64, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to detect and remove duplicate elements from a list. Write a test case to validate your function."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the nth Fibonacci number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci(n):\n    \"\"\"\n    Returns the nth Fibonacci number.\n    \n    The Fibonacci sequence is a series of numbers where a number is the addition of the last two numbers, starting with 0, and 1.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import fibonacci\n\ndef test_fibonacci_0():\n    assert fibonacci(0) == 0\n\ndef test_fibonacci_1():\n    assert fibonacci(1) == 1\n\ndef test_fibonacci_10():\n    assert fibonacci(10) == 55\n\ndef test_fibonacci_negative():\n    assert fibonacci(-1) == 0\n\ndef test_fibonacci_large_value():\n    assert fibonacci(50) == 12586269025\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000065", "row_id": 65, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the nth Fibonacci number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum sum of a subarray within an array of integers. This is the famous Kadane's algorithm problem."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_subarray_sum(arr):\n    \"\"\"\n    Returns the maximum sum of a contiguous subarray within the one-dimensional array of numbers.\n    \"\"\"\n    if not arr:\n        return 0\n\n    current_sum = max_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_max_subarray_sum():\n    assert max_subarray_sum([1, 2, 3, -2, 5]) == 9  # [1, 2, 3, -2, 5] -> 9\n    assert max_subarray_sum([-1, -2, -3, -4]) == -1  # Single element\n    assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6  # [4, -1, 2, 1] -> 6\n    assert max_subarray_sum([0, -1, 2, -3, 5]) == 5  # Single positive number\n    assert max_subarray_sum([-3, -6, -2, -5, -4]) == -2  # All negative numbers\n    assert max_subarray_sum([]) == 0  # Empty array\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000066", "row_id": 66, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum sum of a subarray within an array of integers. This is the famous Kadane's algorithm problem."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the sum of all even numbers in a list. You should use list comprehension along with the `sum()` function to achieve this."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_of_evens(lst):\n    \"\"\"\n    Returns the sum of all even numbers in the given list using list comprehension.\n    \"\"\"\n    return sum([x for x in lst if x % 2 == 0])\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_of_evens\n\ndef test_sum_of_evens_with_even_numbers():\n    assert sum_of_evens([1, 2, 3, 4, 5, 6]) == 12\n\ndef test_sum_of_evens_with_odd_numbers():\n    assert sum_of_evens([1, 3, 5, 7]) == 0\n\ndef test_sum_of_evens_with_mixed_numbers():\n    assert sum_of_evens([10, 23, 45, 68, 90]) == 256\n\ndef test_sum_of_evens_with_negative_numbers():\n    assert sum_of_evens([-2, -4, -6, -8]) == -20\n\ndef test_sum_of_evens_with_empty_list():\n    assert sum_of_evens([]) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000067", "row_id": 67, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the sum of all even numbers in a list. You should use list comprehension along with the `sum()` function to achieve this."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to implement the quick sort algorithm, and explain the code line by line."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef quick_sort(arr):\n    \"\"\"\n    Sorts an array using the Quick Sort algorithm.\n    \n    Quick Sort is a divide-and-conquer algorithm. It works by selecting a 'pivot'\n    element from the array and partitioning the other elements into two sub-arrays,\n    according to whether they are less than or greater than the pivot. The sub-arrays\n    are then sorted recursively.\n    \n    Parameters:\n    arr (list): The list of elements to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    \n    # Base case: if the array is empty or contains a single element, it is already sorted\n    if len(arr) <= 1:\n        return arr\n    \n    # Choose a pivot (here we choose the last element)\n    pivot = arr[-1]\n    \n    # Partition the array into three lists: less than, equal to, and greater than the pivot\n    less = [x for x in arr[:-1] if x < pivot]\n    greater = [x for x in arr[:-1] if x > pivot]\n    equal = [x for x in arr if x == pivot]\n    \n    # Recursively apply quick_sort to the less and greater lists and combine the results\n    return quick_sort(less) + equal + quick_sort(greater)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import quick_sort\n\ndef test_quick_sort_empty():\n    assert quick_sort([]) == []\n\ndef test_quick_sort_single_element():\n    assert quick_sort([5]) == [5]\n\ndef test_quick_sort_positive_numbers():\n    assert quick_sort([3, 6, 8, 10, 1, 2, 1]) == [1, 1, 2, 3, 6, 8, 10]\n\ndef test_quick_sort_negative_numbers():\n    assert quick_sort([-3, -6, -8, -10, -1, -2, -1]) == [-10, -8, -6, -3, -2, -1, -1]\n\ndef test_quick_sort_mixed_numbers():\n    assert quick_sort([-3, 6, -8, 10, -1, 2, 1, 0]) == [-8, -3, -1, 0, 1, 2, 6, 10]\n\ndef test_quick_sort_with_duplicates():\n    assert quick_sort([8, 8, 8, 8, 5, 3, 2]) == [2, 3, 5, 8, 8, 8, 8]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000068", "row_id": 68, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to implement the quick sort algorithm, and explain the code line by line."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count the trailing zeros in a given number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_trailing_zeros(n):\n    \"\"\"\n    Returns the count of trailing zeros in the given number n.\n    \"\"\"\n    count = 0\n    while n % 10 == 0 and n != 0:\n        count += 1\n        n //= 10\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_trailing_zeros\n\ndef test_trailing_zeros_grade():\n    assert count_trailing_zeros(1002000) == 3\n    assert count_trailing_zeros(10500) == 2\n    assert count_trailing_zeros(100005) == 1\n    assert count_trailing_zeros(123) == 0\n    assert count_trailing_zeros(0) == 1\n    assert count_trailing_zeros(10000000000000000000) == 19\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000069", "row_id": 69, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count the trailing zeros in a given number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the sum of all the multiples of 3 or 5 below 1000."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_of_multiples():\n    \"\"\"\n    Returns the sum of all the multiples of 3 or 5 below 1000.\n    \"\"\"\n    return sum(i for i in range(1000) if i % 3 == 0 or i % 5 == 0)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_of_multiples\n\ndef test_sum_of_multiples_1000():\n    assert sum_of_multiples() == 233168\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000071", "row_id": 71, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the sum of all the multiples of 3 or 5 below 1000."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to perform a binary search on a sorted list of integers. The function should return the index of the target value if it is found, or -1 if it is not found. The list may not be empty."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef binary_search(sorted_list, target):\n    \"\"\"\n    Performs a binary search on a sorted list to find the target value.\n    Returns the index of the target if found, otherwise returns -1.\n    \"\"\"\n    left, right = 0, len(sorted_list) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] < target:\n            left = mid + 1\n        elif sorted_list[mid] > target:\n            right = mid - 1\n        else:\n            return mid\n    return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import binary_search\n\ndef test_binary_search_found():\n    assert binary_search([1, 2, 3, 4, 5], 3) == 2\n    assert binary_search([1, 2, 3, 4, 5], 4) == 3\n    assert binary_search([-5, -3, 0, 3, 7, 8, 9], 7) == 5\n    assert binary_search([10, 20, 30, 40, 50], 30) == 2\n\ndef test_binary_search_not_found():\n    assert binary_search([1, 2, 3, 4, 5], 6) == -1\n    assert binary_search([-5, -3, 0, 3, 7, 8, 9], 4) == -1\n    assert binary_search([1, 3, 5, 7], 2) == -1\n\ndef test_binary_search_empty_list():\n    assert binary_search([], 1) == -1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000073", "row_id": 73, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to perform a binary search on a sorted list of integers. The function should return the index of the target value if it is found, or -1 if it is not found. The list may not be empty."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given number is perfect square or not. The function should take an integer as input and return True if the number is a perfect square, False otherwise."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Checks if the given number is a perfect square.\n    \n    Arguments:\n    n -- an integer\n    \n    Returns:\n    True if n is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return n == root * root\n```\n<|Solution End|>\n\n<|Test Begin|> \n```python\nimport pytest\nfrom solution import is_perfect_square\n\ndef test_perfect_square_positive_numbers():\n    assert is_perfect_square(1) == True\n    assert is_perfect_square(4) == True\n    assert is_perfect_square(9) == True\n    assert is_perfect_square(16) == True\n    assert is_perfect_square(25) == True\n\ndef test_perfect_square_zero():\n    assert is_perfect_square(0) == True\n\ndef test_perfect_square_negative_numbers():\n    assert is_perfect_square(-1) == False\n    assert is_perfect_square(-4) == False\n    assert is_perfect_square(-9) == False\n\ndef test_perfect_square_non_square_numbers():\n    assert is_perfect_square(2) == False\n    assert is_perfect_square(3) == False\n    assert is_perfect_square(5) == False\n    assert is_perfect_square(6) == False\n    assert is_perfect_square(7) == False\n    assert is_perfect_square(8) == False\n    assert is_perfect_square(10) == False\n\ndef test_perfect_square_large_numbers():\n    assert is_perfect_square(2601) == True\n    assert is_perfect_square(44100) == True\n    assert is_perfect_square(15241383936) == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000074", "row_id": 74, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given number is perfect square or not. The function should take an integer as input and return True if the number is a perfect square, False otherwise."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a number is perfect or not."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_perfect_number(n):\n    \"\"\"\n    Returns True if n is a perfect number, False otherwise.\n    A perfect number is a positive integer that is equal to the sum of its proper divisors,\n    excluding the number itself. For example, 6 is a perfect number because 1 + 2 + 3 = 6.\n    \"\"\"\n    if n < 1:\n        return False\n    divisors_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum == n\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_perfect_number\n\ndef test_is_perfect_number_six():\n    assert is_perfect_number(6) == True\n\ndef test_is_perfect_number_twenty_eight():\n    assert is_perfect_number(28) == True\n\ndef test_is_not_perfect_number_four():\n    assert is_perfect_number(4) == False\n\ndef test_is_not_perfect_number_negative_numbers():\n    assert is_perfect_number(-6) == False\n\ndef test_is_not_perfect_number_zero():\n    assert is_perfect_number(0) == False\n\ndef test_is_not_perfect_number_one():\n    assert is_perfect_number(1) == False\n\ndef test_is_not_perfect_number_large_number():\n    assert is_perfect_number(496) == True\n    assert is_perfect_number(8128) == True\n    assert is_perfect_number(33550336) == True\n    assert is_perfect_number(8589869056) == True\n    assert is_perfect_number(137438691328) == True\n    assert is_perfect_number(2305843008139952128) == True\n\ndef test_is_not_perfect_number_other_numbers():\n    assert is_perfect_number(5) == False\n    assert is_perfect_number(10) == False\n    assert is_perfect_number(15) == False\n    assert is_perfect_number(18) == False\n    assert is_perfect_number(20) == False\n    assert is_perfect_number(21) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000075", "row_id": 75, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a number is perfect or not."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the factorial of a number using a for loop."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial of a number using a for loop.\n    \n    Args:\n    n (int): The number to calculate the factorial for.\n    \n    Returns:\n    int: The factorial of the number.\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_factorial_positive_numbers():\n    assert factorial(5) == 120\n    assert factorial(3) == 6\n    assert factorial(1) == 1\n\ndef test_factorial_zero():\n    assert factorial(0) == 1\n\ndef test_factorial_large_number():\n    assert factorial(10) == 3628800\n\ndef test_factorial_negative_numbers():\n    with pytest.raises(ValueError):\n        factorial(-1)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000076", "row_id": 76, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the factorial of a number using a for loop."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort a 2D list by its sublists in increasing order based on the sum of the elements of each sublist."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sort_2d_list(input_list):\n    \"\"\"\n    Sorts a 2D list based on the sum of elements in each sublist in increasing order.\n    \n    :param input_list: A 2D list where each sublist contains numeric elements.\n    :return: A 2D list sorted based on the sum of elements in each sublist.\n    \"\"\"\n    return sorted(input_list, key=sum)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sort_2d_list\n\ndef test_sort_2d_list_empty():\n    assert sort_2d_list([]) == []\n\ndef test_sort_2d_list_single_element():\n    assert sort_2d_list([[1, 2, 3]]) == [[1, 2, 3]]\n\ndef test_sort_2d_list_positive_elements():\n    assert sort_2d_list([[1, 2, 3], [4, 5], [6]]) == [[6], [4, 5], [1, 2, 3]]\n\ndef test_sort_2d_list_negative_elements():\n    assert sort_2d_list([[-1, -2, -3], [-4, -5], [-6]]) == [[-6], [-4, -5], [-1, -2, -3]]\n\ndef test_sort_2d_list_mixed_elements():\n    assert sort_2d_list([[1, -1, 2], [-2, 2], [0]]) == [[0], [-2, 2], [1, -1, 2]]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000077", "row_id": 77, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort a 2D list by its sublists in increasing order based on the sum of the elements of each sublist."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a string using slicing."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef reverse_string(s):\n    \"\"\"\n    Returns the reversed version of the input string `s` using slicing.\n    \"\"\"\n    return s[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import reverse_string\n\ndef test_reverse_string():\n    assert reverse_string(\"hello\") == \"olleh\"\n\ndef test_reverse_empty_string():\n    assert reverse_string(\"\") == \"\"\n\ndef test_reverse_single_character():\n    assert reverse_string(\"a\") == \"a\"\n\ndef test_reverse_spaces():\n    assert reverse_string(\" a b c \") == \" c b a \"\n\ndef test_reverse_punctuation():\n    assert reverse_string(\",.!?\") == \"!?.,\"\n\ndef test_reverse_special_characters():\n    assert reverse_string(\"$%&\") == \"&%$\"\n```"}], "metadata": {"prompt_id": "00000079", "row_id": 79, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a string using slicing."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the number of unique elements in a given list. thoughts to solve: First, recognize that unique elements are those that appear only once in the list. One could iterate through the list and for each element, count how many times it appears. If it appears exactly once, it's a unique element. Another approach could be to use a data structure that inherently prevents duplicates, such as a set. A set only stores unique elements, so if a list is converted to a set, the length of the set will be the number of unique elements."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_unique_elements(lst):\n    \"\"\"\n    Returns the number of unique elements in the given list.\n    \"\"\"\n    unique_elements = set(lst)\n    return len(unique_elements)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_unique_elements\n\ndef test_count_unique_elements_empty_list():\n    assert count_unique_elements([]) == 0\n\ndef test_count_unique_elements_single_repeating_elements():\n    assert count_unique_elements([1, 1, 1, 2, 2, 3]) == 3\n    assert count_unique_elements([2, 2, 2, 2]) == 1\n\ndef test_count_unique_elements_distinct_elements():\n    assert count_unique_elements([10, 20, 30, 40, 50]) == 5\n\ndef test_count_unique_elements_mixed_elements():\n    assert count_unique_elements([1, 2, 3, 2, 4, 5, 1, 3]) == 3\n    assert count_unique_elements([1, 1, 1, 1, 1]) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000081", "row_id": 81, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the number of unique elements in a given list. thoughts to solve: First, recognize that unique elements are those that appear only once in the list. One could iterate through the list and for each element, count how many times it appears. If it appears exactly once, it's a unique element. Another approach could be to use a data structure that inherently prevents duplicates, such as a set. A set only stores unique elements, so if a list is converted to a set, the length of the set will be the number of unique elements."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find disjunctive normal form (DNF) of a 2-variable boolean formula using the sympy library. Provide a simple explanation of the function and its inputs/output."}, {"role": "assistant", "content": "<|Solution Begin|>\n\nTo find the disjunctive normal form (DNF) of a 2-variable boolean formula using the sympy library in Python, we need to:\n\n1. Define the boolean symbols (variables) for the 2 variables.\n2. Parse the boolean formula using these variables.\n3. Use sympy's `to_dnf` method to convert the boolean formula into its DNF form.\n\n```python\nfrom sympy import symbols, And, Or, Not\n\ndef dnf_formula(A, B, formula_str):\n    \"\"\"\n    Convert a 2-variable boolean formula to its DNF using sympy.\n\n    :param A: First boolean variable (symbol)\n    :param B: Second boolean variable (symbol)\n    :param formula_str: Boolean formula string in terms of A and B, using standard logical operators (and, or, not)\n    :return: DNF of the given boolean formula as a sympy expression\n    \"\"\"\n    formula = formula_str.replace('and', '&').replace('or', '|').replace('not', '~')\n    expr = eval(formula, {str(A): A, str(B): B})  # Convert string to sympy expression\n    dnf_expr = expr.to_dnf(simplify=True)\n    return dnf_expr\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import dnf_formula\nfrom sympy import symbols\n\n# Define the symbols\nA, B = symbols('A B')\n\ndef test_dnf_formula():\n    assert dnf_formula(A, B, \"A and B\").equals(A & B)\n    assert dnf_formula(A, B, \"A and not B\").equals(A & ~B)\n    assert dnf_formula(A, B, \"not A and B\").equals(~A & B)\n    assert dnf_formula(A, B, \"not A and not B\").equals(~A & ~B)\n    assert dnf_formula(A, B, \"A or B\").equals(A | B)\n    assert dnf_formula(A, B, \"A or not B\").equals(A | ~B)\n    assert dnf_formula(A, B, \"not A or B\").equals(~A | B)\n    assert dnf_formula(A, B, \"not A or not B\").equals(~A | ~B)\n    assert dnf_formula(A, B, \"(A and not B) or (not A and B)\").equals((A & ~B) | (~A & B))  # XOR DNF\n    assert dnf_formula(A, B, \"(not A and B) or (A and not B)\").equals((~A & B) | (A & ~B))  # XOR DNF\n\nif __name__ == \"__main__\":\n    import pytest\n    pytest.main()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000082", "row_id": 82, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find disjunctive normal form (DNF) of a 2-variable boolean formula using the sympy library. Provide a simple explanation of the function and its inputs/output."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the area of a circle given its radius."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport math\n\ndef calculate_circle_area(radius):\n    \"\"\"\n    Calculates the area of a circle given its radius.\n    \n    Parameters:\n    radius (float): The radius of the circle.\n    \n    Returns:\n    float: The area of the circle.\n    \"\"\"\n    return math.pi * (radius ** 2)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport math\nfrom solution import calculate_circle_area\n\ndef test_circle_area():\n    assert abs(calculate_circle_area(0) - 0) < 1e-6\n    assert abs(calculate_circle_area(1) - math.pi) < 1e-6\n    assert abs(calculate_circle_area(2) - (math.pi * 4)) < 1e-6\n    assert abs(calculate_circle_area(5) - (math.pi * 25)) < 1e-6\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000083", "row_id": 83, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the area of a circle given its radius."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the number of times a specified value appears in a list. Here's a sample list: [1, 2, 3, 4, 5, 2, 2, 3]"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_value_occurrences(lst, value):\n    \"\"\"\n    Returns the number of times 'value' appears in 'lst'.\n    \"\"\"\n    return lst.count(value)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_value_occurrences\n\ndef test_count_value_occurrences():\n    assert count_value_occurrences([1, 2, 3, 4, 5, 2, 2, 3], 2) == 3\n    assert count_value_occurrences([1, 2, 3, 4, 5, 2, 2, 3], 7) == 0\n    assert count_value_occurrences([1, 1, 1, 1, 1], 1) == 5\n    assert count_value_occurrences([], 3) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000084", "row_id": 84, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the number of times a specified value appears in a list. Here's a sample list: [1, 2, 3, 4, 5, 2, 2, 3]"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the minimum element in an array. You should also handle the case when the array is empty."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_min_element(arr):\n    \"\"\"\n    Returns the minimum element in the array. Returns None if the array is empty.\n    \"\"\"\n    if not arr:\n        return None\n    return min(arr)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_min_element\n\ndef test_find_min_element_with_values():\n    assert find_min_element([3, 1, 4, 1, 5, 9]) == 1\n\ndef test_find_min_element_with_empty_array():\n    assert find_min_element([]) == None\n\ndef test_find_min_element_with_negative_numbers():\n    assert find_min_element([-7, -3, -1, -5]) == -7\n\ndef test_find_min_element_with_mixed_signs():\n    assert find_min_element([2, -2, 0, 5, -1]) == -2\n```"}], "metadata": {"prompt_id": "00000086", "row_id": 86, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the minimum element in an array. You should also handle the case when the array is empty."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse the order of characters in a string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef reverse_string(s):\n    \"\"\"\n    Reverses the order of characters in the input string s.\n    \"\"\"\n    return s[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import reverse_string\n\ndef test_reverse_string_empty():\n    assert reverse_string(\"\") == \"\"\n\ndef test_reverse_string_single_char():\n    assert reverse_string(\"a\") == \"a\"\n\ndef test_reverse_string_simple():\n    assert reverse_string(\"hello\") == \"olleh\"\n\ndef test_reverse_string_with_spaces():\n    assert reverse_string(\"hello world\") == \"dlrow olleh\"\n\ndef test_reverse_string_punctuation():\n    assert reverse_string(\"hello, world!\") == \"!dlrow ,olleh\"\n```"}], "metadata": {"prompt_id": "00000087", "row_id": 87, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse the order of characters in a string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to filter out the words that contain a specific substring and return a list of words that do not contain that substring from a given list of words."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef filter_words(words_list, substring):\n    \"\"\"\n    Returns a list of words that do not contain the specified substring.\n    \n    :param words_list: List of words to be filtered.\n    :param substring: Substring to filter out from the words.\n    :return: List of words that do not contain the specified substring.\n    \"\"\"\n    return [word for word in words_list if substring not in word]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import filter_words\n\ndef test_filter_words_no_substring():\n    assert filter_words([\"hello\", \"world\", \"python\"], \"a\") == [\"hello\", \"world\", \"python\"]\n\ndef test_filter_words_with_substring():\n    assert filter_words([\"apple\", \"banana\", \"grape\", \"peach\"], \"a\") == [\"grape\", \"peach\"]\n\ndef test_filter_words_empty_list():\n    assert filter_words([], \"test\") == []\n\ndef test_filter_words_all_match():\n    assert filter_words([\"test\", \"blast\", \"pasta\"], \"st\") == [\"pasta\"]\n\ndef test_filter_words_caseInsensitive():\n    assert filter_words([\"Apple\", \"banana\", \"grape\"], \"a\") == [\"banana\", \"grape\"]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000088", "row_id": 88, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to filter out the words that contain a specific substring and return a list of words that do not contain that substring from a given list of words."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the factorial of a given number. The function should take an integer as input and return the factorial of that integer. Additionally, the function should handle edge cases such as negative numbers and zero."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial of a given number.\n    \n    Args:\n    n (int): The input number for which the factorial is to be calculated.\n    \n    Returns:\n    int: The factorial of the input number. Returns 1 for n=0 and raises ValueError for negative inputs.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\nfrom solution import factorial\n\ndef test_factorial_positive_numbers():\n    assert factorial(5) == 120\n    assert factorial(3) == 6\n    assert factorial(1) == 1\n\ndef test_factorial_zero():\n    assert factorial(0) == 1\n\ndef test_factorial_negative_numbers():\n    with pytest.raises(ValueError):\n        factorial(-1)\n\ndef test_factorial_large_number():\n    assert factorial(10) == 3628800\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000089", "row_id": 89, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the factorial of a given number. The function should take an integer as input and return the factorial of that integer. Additionally, the function should handle edge cases such as negative numbers and zero."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find all prime numbers within a given range (inclusive). The function should return a list of all prime numbers within the range."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_primes_in_range(start, end):\n    \"\"\"\n    Returns a list of all prime numbers within the given range [start, end].\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(start, end + 1) if is_prime(num)]\n    return primes\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_primes_in_range\n\ndef test_find_primes_in_range():\n    assert find_primes_in_range(5, 10) == [5, 7]\n    assert find_primes_in_range(10, 15) == [11, 13]\n    assert find_primes_in_range(20, 25) == [23]\n    assert find_primes_in_range(1, 5) == [2, 3, 5]\n    assert find_primes_in_range(14, 14) == []\n    assert find_primes_in_range(30, 40) == [31, 37]\n    assert find_primes_in_range(50, 60) == [53, 59]\n``` \n<|Test End|>"}], "metadata": {"prompt_id": "00000091", "row_id": 91, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find all prime numbers within a given range (inclusive). The function should return a list of all prime numbers within the range."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort a list of tuples by the second item in each tuple. The function should take a list of tuples as input and return the sorted list in ascending order based on the second item of each tuple. If the second item is the same for multiple tuples, the tuples should be sorted by their first item in ascending order."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sort_tuples_by_second_item(tuples_list):\n    \"\"\"\n    Sorts a list of tuples based on the second item in each tuple in ascending order.\n    If two tuples have the same second item, it sorts them by the first item in ascending order.\n    \n    :param tuples_list: List of tuples to be sorted\n    :return: Sorted list of tuples\n    \"\"\"\n    return sorted(tuples_list, key=lambda x: (x[1], x[0]))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sort_tuples_by_second_item\n\ndef test_sort_tuples_by_second_item():\n    assert sort_tuples_by_second_item([(1, 3), (4, 1), (5, 2), (3, 2)]) == [(4, 1), (5, 2), (3, 2), (1, 3)]\n    assert sort_tuples_by_second_item([(2, 2), (3, 1), (1, 1)]) == [(3, 1), (1, 1), (2, 2)]\n    assert sort_tuples_by_second_item([(1, 1), (2, 1), (3, 1)]) == [(1, 1), (2, 1), (3, 1)]\n    assert sort_tuples_by_second_item([(4, 2), (5, 2), (2, 1)]) == [(2, 1), (4, 2), (5, 2)]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000092", "row_id": 92, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort a list of tuples by the second item in each tuple. The function should take a list of tuples as input and return the sorted list in ascending order based on the second item of each tuple. If the second item is the same for multiple tuples, the tuples should be sorted by their first item in ascending order."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the smallest number in an array of integers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_smallest_number(arr):\n    \"\"\"\n    Returns the smallest number in the given array of integers.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Array must not be empty\")\n    smallest = arr[0]\n    for num in arr:\n        if num < smallest:\n            smallest = num\n    return smallest\n```\n<|Solution End|>\n\n<|Test Begin|>\r\n```python\nfrom solution import find_smallest_number\n\ndef test_find_smallest_number_positive_integers():\n    assert find_smallest_number([3, 1, 4, 1, 5, 9]) == 1\n\ndef test_find_smallest_number_single_element():\n    assert find_smallest_number([42]) == 42\n\ndef test_find_smallest_number_negative_integers():\n    assert find_smallest_number([-5, -2, -10, -1]) == -10\n\ndef test_find_smallest_number_empty_array():\n    with pytest.raises(ValueError):\n        find_smallest_number([])\n\ndef test_find_smallest_number_mixed_signs():\n    assert find_smallest_number([-1, 1, -3, 3, -2, 2]) == -3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000093", "row_id": 93, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the smallest number in an array of integers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find all the root-to-leaf paths where the sum of all these path sums equals a target sum."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_paths(root, target, path_sum, current_sum=0, path=[]):\n    \"\"\"\n    Returns all root-to-leaf paths in the tree where the sum of the path equals the target.\n    \"\"\"\n    if root is None:\n        return []\n\n    current_sum += root.val\n    path.append(root.val)\n\n    if root.left is None and root.right is None:\n        if current_sum == target:\n            return [path.copy()]\n        else:\n            path.pop()\n            return []\n\n    left_paths = find_paths(root.left, target, path_sum, current_sum, path)\n    right_paths = find_paths(root.right, target, path_sum, current_sum, path)\n\n    path.pop()\n    return left_paths + right_paths\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import TreeNode, find_paths\n\ndef test_find_paths_simple_target():\n    root = TreeNode(5, TreeNode(4, TreeNode(11, TreeNode(7), TreeNode(2))), TreeNode(8, TreeNode(13), TreeNode(4, TreeNode(1))))\n    target = 22\n    expected = [[5, 4, 11, 2], [5, 8, 4, 1]]\n    assert sorted(find_paths(root, target, 0)) == expected\n\ndef test_find_paths_without_target():\n    root = TreeNode(5, TreeNode(4, TreeNode(11, TreeNode(7), TreeNode(2))), TreeNode(8, TreeNode(13), TreeNode(4, TreeNode(1))))\n    target = 21\n    assert find_paths(root, target, 0) == []\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000095", "row_id": 95, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find all the root-to-leaf paths where the sum of all these path sums equals a target sum."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to evaluate an arithmetic expression given as a string. The expression includes integers, the operators '+', '-', '*', and '(', ')', and has at least one operator."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport re\nimport operator\n\ndef arithmetic_eval(expression):\n    \"\"\"\n    Evaluates an arithmetic expression given as a string.\n    \n    Supported operations: +, -, *, (, )\n    \"\"\"\n    operators = {'+': operator.add, '-': operator.sub, '*': operator.mul}\n    def calculate(expr):\n        if isinstance(expr, int):\n            return expr\n        op = expr[1]\n        if op == '-':\n            return -calculate(expr[2])\n        elif op == '*':\n            return calculate(expr[2]) * calculate(expr[3])\n        elif op == '+':\n            return calculate(expr[2]) + calculate(expr[3])\n    \n    def parse_expression(expr):\n        stack = []\n        i = 0\n        while i < len(expr):\n            if expr[i].isdigit():\n                start = i\n                while i < len(expr) and expr[i].isdigit():\n                    i += 1\n                stack.append(int(expr[start:i]))\n                continue\n            if expr[i] in '+-*(':\n                stack.append(expr[i])\n                i += 1\n                continue\n            if expr[i] == ')':\n                sub_expr = []\n                while stack[-1] != '(':\n                    sub_expr.append(stack.pop())\n                stack.pop()  # Remove the '('\n                sub_expr.reverse()\n                stack.append(calculate(sub_expr))\n                i += 1\n        return stack\n    \n    tokens = parse_expression(expression)\n    return calculate(tokens)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_arithmetic_eval():\n    assert arithmetic_eval(\"1 + 2 * 3\") == 7\n    assert arithmetic_eval(\"(1 + 2) * 3 - 4\") == 3\n    assert arithmetic_eval(\"4 - (2 * (1 + 1))\") == 0\n    assert arithmetic_eval(\"2 * 3 + 1\") == 7\n    assert arithmetic_eval(\"2 - 3 + 1\") == 0\n    assert arithmetic_eval(\"2 * (3 + 1) - 4\") == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000096", "row_id": 96, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to evaluate an arithmetic expression given as a string. The expression includes integers, the operators '+', '-', '*', and '(', ')', and has at least one operator."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to remove the duplicates from a list while preserving the original order of elements."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef remove_duplicates_preserve_order(input_list):\n    \"\"\"\n    Removes duplicates from a list while preserving the original order of elements.\n    \n    :param input_list: List from which to remove duplicates.\n    :return: A new list with duplicates removed and original order preserved.\n    \"\"\"\n    seen = set()\n    result = []\n    for item in input_list:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import remove_duplicates_preserve_order\n\ndef test_remove_duplicates_with_duplicates():\n    assert remove_duplicates_preserve_order([1, 2, 3, 2, 1, 5, 6, 5, 5, 3]) == [1, 2, 3, 5, 6]\n\ndef test_remove_duplicates_empty_list():\n    assert remove_duplicates_preserve_order([]) == []\n\ndef test_remove_duplicates_single_element():\n    assert remove_duplicates_preserve_order([42]) == [42]\n\ndef test_remove_duplicates_no_duplicates():\n    assert remove_duplicates_preserve_order([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]\n\ndef test_remove_duplicates_with_negatives():\n    assert remove_duplicates_preserve_order([-1, -4, -1, -3, 0, -3, 2, -1, 2]) == [-1, -4, -3, 0, 2]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000097", "row_id": 97, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to remove the duplicates from a list while preserving the original order of elements."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the Fibonacci sequence up to a certain number of terms."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci(n):\n    \"\"\"\n    Returns the first n terms of the Fibonacci sequence.\n    The Fibonacci sequence is a series of numbers where each number is the sum \n    of the two preceding ones, usually starting with 0 and 1.\n    \n    Parameters:\n    n (int): The number of terms in the Fibonacci sequence to generate.\n    \n    Returns:\n    list: A list containing the first n terms of the Fibonacci sequence.\n    \"\"\"\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    \n    sequence = [0, 1]\n    for i in range(2, n):\n        next_value = sequence[-1] + sequence[-2]\n        sequence.append(next_value)\n    \n    return sequence\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import fibonacci\n\ndef test_fibonacci_zero_terms():\n    assert fibonacci(0) == []\n\ndef test_fibonacci_one_term():\n    assert fibonacci(1) == [0]\n\ndef test_fibonacci_two_terms():\n    assert fibonacci(2) == [0, 1]\n\ndef test_fibonacci_five_terms():\n    assert fibonacci(5) == [0, 1, 1, 2, 3]\n\ndef test_fibonacci_ten_terms():\n    assert fibonacci(10) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000098", "row_id": 98, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the Fibonacci sequence up to a certain number of terms."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to detect a cycle in a directed graph using DFS"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict\n\ndef has_cycle_dfs(graph, vertex, visited, rec_stack):\n    \"\"\"\n    This function uses Depth First Search to detect if there is a cycle in a directed graph.\n    It uses a dictionary to store visited and recursion stack status for each vertex.\n    :param graph: adjacency list representation of the graph\n    :param vertex: current vertex\n    :param visited: set of visited vertices\n    :param rec_stack: set to keep track of vertices in the current recursion stack\n    :return: True if a cycle is detected, False otherwise\n    \"\"\"\n    visited[vertex] = True\n    rec_stack[vertex] = True\n\n    for neighbor in graph[vertex]:\n        if not visited[neighbor]:\n            if has_cycle_dfs(graph, neighbor, visited, rec_stack):\n                return True\n        elif rec_stack[neighbor]:\n            return True\n\n    rec_stack[vertex] = False\n    return False\n\ndef detect_cycle(graph):\n    \"\"\"\n    Returns True if the graph contains a cycle, False otherwise.\n    \"\"\"\n    visited = defaultdict(bool)\n    rec_stack = defaultdict(bool)\n\n    for node in graph:\n        if not visited[node]:\n            if has_cycle_dfs(graph, node, visited, rec_stack):\n                return True\n\n    return False\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import detect_cycle\n\ndef test_digraph_with_cycle():\n    # Example of a graph with a cycle: a -> b, b -> c, c -> a\n    graph = {\n        'a': ['b'],\n        'b': ['c'],\n        'c': ['a'],\n    }\n    assert detect_cycle(graph) == True\n\ndef test_digraph_without_cycle():\n    # Example of a graph without a cycle: a -> b, b -> c\n    graph = {\n        'a': ['b'],\n        'b': ['c'],\n    }\n    assert detect_cycle(graph) == False\n\ndef test_digraph_single_node():\n    # Single node graph should not contain a cycle\n    graph = {\n        'a': [],\n    }\n    assert detect_cycle(graph) == False\n\ndef test_digraph_complex_cycle():\n    # Example of a graph with a different cycle: a -> b, b -> c, c -> d, d -> a\n    graph = {\n        'a': ['b'],\n        'b': ['c'],\n        'c': ['d'],\n        'd': ['a'],\n    }\n    assert detect_cycle(graph) == True\n\ndef test_digraph_complex_no_cycle():\n    # Example of a graph without any cycles: a -> b, b -> c, c -> d\n    graph = {\n        'a': ['b'],\n        'b': ['c'],\n        'c': ['d'],\n    }\n    assert detect_cycle(graph) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000099", "row_id": 99, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to detect a cycle in a directed graph using DFS"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to iterate over a list and print each number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef print_numbers(numbers_list):\n    \"\"\"\n    Iterates over a list of numbers and prints each number.\n    \"\"\"\n    for number in numbers_list:\n        print(number)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_print_numbers():\n    # Test with a simple list of numbers\n    with capture_stdout(print_numbers, [1, 2, 3]) as output:\n        assert output == \"1\\n2\\n3\\n\"\n\n    # Test with an empty list\n    with capture_stdout(print_numbers, []) as output:\n        assert output == \"\"\n\n    # Test with a list containing a single number\n    with capture_stdout(print_numbers, [42]) as output:\n        assert output == \"42\\n\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000101", "row_id": 101, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to iterate over a list and print each number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given string is a valid identifier in Python."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport re\n\ndef is_valid_identifier(name):\n    \"\"\"\n    Returns True if the given string is a valid Python identifier, otherwise False.\n    A valid Python identifier starts with a letter (a-z, A-Z) or an underscore (_),\n    followed by zero or more letters, digits (0-9), or underscores.\n    \"\"\"\n    pattern = r'^[a-zA-Z_][a-zA-Z_0-9]*$'\n    return bool(re.match(pattern, name))\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef test_is_valid_identifier():\n    assert is_valid_identifier(\"var1\") == True\n    assert is_valid_identifier(\"_myVar\") == True\n    assert is_valid_identifier(\"99vars\") == False\n    assert is_valid_identifier(\"xyz!\") == False\n    assert is_valid_identifier(\"valid_identifier123\") == True\n    assert is_valid_identifier(\"class_name\") == False  # Does not start with a lowercase letter\n\ndef test_is_valid_with_digits():\n    assert is_valid_identifier(\"var_123\") == True\n    assert is_valid_identifier(\"123Var\") == False\n\ndef test_is_valid_with_special_chars():\n    assert is_valid_identifier(\"_\") == True\n    assert is_valid_identifier(\"__\") == True\n    assert is_valid_identifier(\"___\") == True\n    assert is_valid_identifier(\"_123\") == True\n    assert is_valid_identifier(\"123_\") == False\n\ndef test_is_valid_with_underscore_within():\n    assert is_valid_identifier(\"valid_var_name\") == True\n    assert is_valid_identifier(\"valid_var_name_\") == True\n\ndef test_is_valid_empty_string():\n    assert is_valid_identifier(\"\") == False\n\ndef test_is_valid_starting_with_digit():\n    assert is_valid_identifier(\"123valid\") == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000104", "row_id": 104, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given string is a valid identifier in Python."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the shortest distance from a point to a line in a 2D plane."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport math\n\ndef distance_point_to_line(point, line_point1, line_point2):\n    \"\"\"\n    Calculates the shortest distance from a point to a line in 2D.\n    :param point: A tuple (x, y) representing the point.\n    :param line_point1: A tuple (x, y) representing the first point on the line.\n    :param line_point2: A tuple (x, y) representing the second point on the line.\n    :return: The shortest distance from the point to the line.\n    \"\"\"\n    x1, y1 = point\n    x2, y2 = line_point1\n    x3, y3 = line_point2\n    numerator = abs((y3 - y2) * x1 - (x3 - x2) * y1 + x3 * y2 - y3 * x2)\n    denominator = math.sqrt((y3 - y2)**2 + (x3 - x2)**2)\n    return numerator / denominator\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_distance_point_to_line_horizontal_line():\n    assert math.isclose(distance_point_to_line((5, 3), (1, 3), (4, 3)), 4)\n\ndef test_distance_point_to_line_vertical_line():\n    assert math.isclose(distance_point_to_line((3, 5), (3, 1), (3, 4)), 4)\n\ndef test_distance_point_to_line_45_degree_line():\n    assert math.isclose(distance_point_to_line((0, 0), (0, 2), (2, 0)), 2 * math.sqrt(2))\n\ndef test_distance_point_to_line_parallel_to_y_axis():\n    assert math.isclose(distance_point_to_line((4, 2), (4, 1), (4, 3)), 1)\n\ndef test_distance_point_to_line_parallel_to_x_axis():\n    assert math.isclose(distance_point_to_line((2, 5), (1, 5), (3, 5)), 1)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000105", "row_id": 105, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the shortest distance from a point to a line in a 2D plane."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to perform insertion sort on a list of integers. Please make sure to provide detailed comments explaining each part of your code."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef insertion_sort(arr):\n    \"\"\"\n    Sorts an array of integers using the insertion sort algorithm.\n    \n    This algorithm works by iterating over the elements, and for each element, \n    shifting the already sorted elements to the right to make space for the \n    new element and inserting the element in the correct position.\n    \n    Parameters:\n    - arr: List[int], the list of integers to be sorted.\n    \n    Returns:\n    - List[int], the sorted list.\n    \"\"\"\n    # Loop through 1 to len(arr)\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        # Move elements of arr[0..i-1], that are greater than key, \n        # to one position ahead of their current position\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_insertion_sort_empty_list():\n    assert insertion_sort([]) == []\n\ndef test_insertion_sort_sorted_list():\n    assert insertion_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_insertion_sort_reverse_sorted_list():\n    assert insertion_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n\ndef test_insertion_sort_with_duplicates():\n    assert insertion_sort([4, 3, 2, 5, 3, 5]) == [2, 3, 3, 4, 5, 5]\n\ndef test_insertion_sort_random_list():\n    assert insertion_sort([3, 6, 1, 8, 4]) == [1, 3, 4, 6, 8]\n\ndef test_insertion_sort_negative_numbers():\n    assert insertion_sort([-5, -2, -3, -1]) == [-5, -3, -2, -1]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000106", "row_id": 106, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to perform insertion sort on a list of integers. Please make sure to provide detailed comments explaining each part of your code."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find all the pairs of numbers in a list that sum to a given target."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_pairs_with_sum(numbers, target):\n    \"\"\"\n    Returns a list of tuples representing the pairs of numbers in 'numbers' that sum to 'target'.\n    \"\"\"\n    seen = set()\n    pairs = set()\n    for number in numbers:\n        complement = target - number\n        if complement in seen:\n            pairs.add((min(number, complement), max(number, complement)))\n        seen.add(number)\n    return list(pairs)\n```\n<|Solution End|>\n\n<|Test Begin|>  \n```python\ndef test_find_pairs_with_sum():\n    assert find_pairs_with_sum([1, 3, 2, 2], 4) == [(1, 3), (2, 2)]\n    assert find_pairs_with_sum([1, 5, 7, -1], 6) == [(-1, 7), (1, 5)]\n    assert find_pairs_with_sum([1, 2, 3, 7, -2, -7, 1], 5) == [(-2, 7), (1, 4), (1, 4)]\n    assert find_pairs_with_sum([], 4) == []\n    assert find_pairs_with_sum([1, 2, 3, 4], 8) == []\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000107", "row_id": 107, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find all the pairs of numbers in a list that sum to a given target."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count the occurrences of a substring in a given string. You should use only the built-in functions of python and no external libraries should be used."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_substring_occurrences(string, substring):\n    \"\"\"\n    Counts the number of times the substring occurs in the given string.\n    \n    :param string: The main string to search in.\n    :param substring: The substring to search for.\n    :return: The number of times the substring occurs in the string.\n    \"\"\"\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_substring_occurrences\n\ndef test_count_substring_occurrences_empty():\n    assert count_substring_occurrences(\"\", \"a\") == 0\n\ndef test_count_substring_occurrences_single():\n    assert count_substring_occurrences(\"aaa\", \"a\") == 3\n    assert count_substring_occurrences(\"aaa\", \"aa\") == 1\n\ndef test_count_substring_occurrences_multiple():\n    assert count_substring_occurrences(\"abababab\", \"ab\") == 4\n    assert count_substring_occurrences(\"mississippi\", \"iss\") == 2\n\ndef test_count_substring_occurrences_overlap():\n    assert count_substring_occurrences(\"banana\", \"ana\") == 1\n    assert count_substring_occurrences(\"pineapple\", \"apple\") == 1\n    assert count_substring_occurrences(\"hellohellohello\", \"hello\") == 3\n\ndef test_count_substring_occurrences_not_found():\n    assert count_substring_occurrences(\"hello\", \"world\") == 0\n    assert count_substring_occurrences(\"abcd\", \"ef\") == 0\n\ndef test_count_substring_occurrences_with_case_insensitive():\n    assert count_substring_occurrences(\"HelloWorld\", \"oW\") == 0\n    assert count_substring_occurrences(\"HelloWorld\", \"oW\", case_sensitive=False) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000108", "row_id": 108, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count the occurrences of a substring in a given string. You should use only the built-in functions of python and no external libraries should be used."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the common elements between two lists, and return a new list containing these common elements."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_common_elements(list1, list2):\n    \"\"\"\n    Returns a new list containing the common elements between two input lists.\n    \"\"\"\n    return list(set(list1) & set(list2))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_find_common_elements():\n    assert find_common_elements([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]\n    assert find_common_elements(['apple', 'banana', 'cherry'], ['banana', 'date', 'fig']) == ['banana']\n    assert find_common_elements([], [1, 2, 3]) == []\n    assert find_common_elements([1, 2, 3], []) == []\n    assert find_common_elements([10, 20, 30], [10, 40, 50]) == [10]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000109", "row_id": 109, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the common elements between two lists, and return a new list containing these common elements."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the median of a list of numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_median(numbers):\n    \"\"\"\n    Returns the median of a list of numbers.\n    If the list has an odd number of elements, returns the middle element.\n    If the list has an even number of elements, returns the average of the two middle elements.\n    \"\"\"\n    n = len(numbers)\n    if n == 0:\n        raise ValueError(\"The list is empty.\")\n    sorted_numbers = sorted(numbers)\n    mid_index = n // 2\n    \n    if n % 2 == 1:\n        return sorted_numbers[mid_index]\n    else:\n        return (sorted_numbers[mid_index - 1] + sorted_numbers[mid_index]) / 2\n```\n<|Solution End|>\n\n<|Test Begin|>``\n```python\nimport pytest\nfrom solution import find_median\n\ndef test_find_median_odd():\n    assert find_median([7, 3, 5, 2, 9]) == 5\n\ndef test_find_median_even():\n    assert find_median([7, 3, 5, 2, 9, 8]) == 6.5\n\ndef test_find_median_single_element():\n    assert find_median([42]) == 42\n\ndef test_find_median_empty_list():\n    with pytest.raises(ValueError):\n        find_median([])\n\ndef test_find_median_duplicate_elements():\n    assert find_median([3, 5, 5, 7, 11]) == 5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000110", "row_id": 110, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the median of a list of numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to generate the Fibonacci sequence up to a given number n. The function should return a list of the Fibonacci numbers less than or equal to n."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef generate_fibonacci(n):\n    \"\"\"\n    Generates the Fibonacci sequence up to a given number n and returns a list of the Fibonacci numbers less than or equal to n.\n    \"\"\"\n    if n < 0:\n        return []\n    \n    fib_sequence = [0]\n    a, b = 0, 1\n    while b <= n:\n        fib_sequence.append(b)\n        a, b = b, a + b\n    return fib_sequence\n```\n<|Solution End|>\n\n<|Test Begin|> \n```python\ndef test_generate_fibonacci_with_small_numbers():\n    assert generate_fibonacci(10) == [0, 1, 1, 2, 3, 5, 8]\n\ndef test_generate_fibonacci_with_large_number():\n    assert generate_fibonacci(100) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n\ndef test_generate_fibonacci_with_zero():\n    assert generate_fibonacci(0) == [0]\n\ndef test_generate_fibonacci_with_negative_number():\n    assert generate_fibonacci(-5) == []\n\ndef test_generate_fibonacci_with_single_element():\n    assert generate_fibonacci(1) == [0, 1]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000112", "row_id": 112, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to generate the Fibonacci sequence up to a given number n. The function should return a list of the Fibonacci numbers less than or equal to n."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the largest rectangle in a histogram."}, {"role": "assistant", "content": "<|Solution Begin|>\n\nTo find the largest rectangle in a histogram, we can use a stack-based approach. The idea is to maintain a stack of indices of the histogram bars, ensuring that the heights of the bars are in non-decreasing order. While iterating through the histogram, if we encounter a bar that is shorter than the bar at the index on top of the stack, it means we can calculate the area of a rectangle with the top bar as the shortest bar. We then pop the stack, calculate the area, and update the maximum area if needed. This process continues until we have processed all the bars.\n\n```python\ndef largest_rectangle_in_histogram(heights):\n    \"\"\"\n    Finds the largest rectangle in a histogram.\n    Args:\n    heights: A list of integers representing the heights of the histogram bars.\n\n    Returns:\n    The area of the largest rectangle in the histogram.\n    \"\"\"\n    if not heights:\n        return 0\n\n    stack = [-1]  # Initialize the stack with a sentinel value -1\n    max_area = 0\n\n    for i, h in enumerate(heights):\n        # Pop from stack until the current bar is not taller than the bar at the\n        # index on top of the stack\n        while stack[-1] != -1 and heights[stack[-1]] >= h:\n            height = heights[stack.pop()]\n            # Compute the width of the rectangle with the popped height\n            width = i - stack[-1] - 1\n            max_area = max(max_area, height * width)\n        stack.append(i)\n\n    # Process the remaining bars in the stack\n    while stack[-1] != -1:\n        height = heights[stack.pop()]\n        width = len(heights) - stack[-1] - 1\n        max_area = max(max_area, height * width)\n\n    return max_area\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import largest_rectangle_in_histogram\n\ndef test_rectangle_single_bar():\n    heights = [5]\n    expected_area = 5\n    assert largest_rectangle_in_histogram(heights) == expected_area\n\ndef test_rectangle_two_tall_bars():\n    heights = [2, 2]\n    expected_area = 4\n    assert largest_rectangle_in_histogram(heights) == expected_area\n\ndef test_rectangle_decreasing_heights():\n    heights = [2, 1, 5, 6, 2, 3]\n    expected_area = 10\n    # The largest rectangle is formed by the last two bars with height 5 and 6\n    assert largest_rectangle_in_histogram(heights) == expected_area\n\ndef test_rectangle_mixed_heights():\n    heights = [1, 3, 1, 4, 2, 1]\n    expected_area = 6\n    assert largest_rectangle_in_histogram(heights) == expected_area\n\ndef test_rectangle_downwards_slope():\n    heights = [6, 2, 5, 4, 5, 1, 6]\n    expected_area = 12\n    assert largest_rectangle_in_histogram(heights) == expected_area\n\ndef test_rectangle_all_zero():\n    heights = [0, 0, 0, 0]\n    expected_area = 0\n    assert largest_rectangle_in_histogram(heights) == expected_area\n\ndef test_rectangle_all_same_height():\n    heights = [5, 5, 5, 5]\n    expected_area = 16\n    assert largest_rectangle_in_histogram(heights) == expected_area\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000113", "row_id": 113, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the largest rectangle in a histogram."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine if a given number is a prime number. If it is, return True; otherwise, return False."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_prime(n):\n    \"\"\"\n    Returns True if the given number is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_prime\n\ndef test_is_prime_two():\n    assert is_prime(2) == True\n\ndef test_is_prime_three():\n    assert is_prime(3) == True\n\ndef test_is_prime_four():\n    assert is_prime(4) == False\n\ndef test_is_prime_negative_number():\n    assert is_prime(-7) == False\n\ndef test_is_prime_large_number():\n    assert is_prime(11227278127) == True\n\ndef test_is_prime_seven():\n    assert is_prime(7) == True\n\ndef test_is_prime_eight_to_fifteen():\n    for i in range(8, 16):\n        assert is_prime(i) == False\n\ndef test_is_prime_big_prime():\n    assert is_prime(2999999937) == True\n\ndef test_is_prime_non_prime():\n    assert is_prime(15) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000114", "row_id": 114, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine if a given number is a prime number. If it is, return True; otherwise, return False."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum number in a list of numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_max(numbers):\n    \"\"\"\n    Returns the maximum number in a list of numbers.\n    \n    Args:\n    numbers (list): A list of numbers.\n    \n    Returns:\n    int or float: The maximum number in the list.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list is empty\")\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_max\n\ndef test_find_max_with_positive_numbers():\n    assert find_max([2, 3, 1]) == 3\n\ndef test_find_max_with_negative_numbers():\n    assert find_max([-1, -5, -3]) == -1\n\ndef test_find_max_with_mixed_sign_numbers():\n    assert find_max([-1, 0, 5, 3, -2]) == 5\n\ndef test_find_max_with_single_element():\n    assert find_max([42]) == 42\n\ndef test_find_max_empty_list():\n    with pytest.raises(ValueError):\n        find_max([])\n\ndef test_find_max_with_floats():\n    assert find_max([1.5, 2.3, 0.7]) == 2.3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000115", "row_id": 115, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum number in a list of numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the minimum element in a list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_min_element(lst):\n    \"\"\"\n    Returns the minimum element in the list lst.\n    \n    Args:\n    lst (list): A list of numbers.\n    \n    Returns:\n    The minimum element in the list.\n    \"\"\"\n    if not lst:  # Check if the list is empty\n        return None\n    min_element = lst[0]\n    for element in lst[1:]:\n        if element < min_element:\n            min_element = element\n    return min_element\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_min_element\n\ndef test_find_min_element_positive_numbers():\n    assert find_min_element([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 1\n\ndef test_find_min_element_negative_numbers():\n    assert find_min_element([-7, -3, -1, -4, -2]) == -7\n\ndef test_find_min_element_mixed_sign_numbers():\n    assert find_min_element([-1, 0, 1, -2, 2]) == -2\n\ndef test_find_min_element_single_element():\n    assert find_min_element([42]) == 42\n\ndef test_find_min_element_empty_list():\n    assert find_min_element([]) == None\n\ndef test_find_min_element_with_zeros():\n    assert find_min_element([0, 2, 0, 1]) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000118", "row_id": 118, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the minimum element in a list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to replace all occurrences of a given substring in a string, but only for occurrences that are surrounded by spaces."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef replace_surrounded_substring(text, old_substring, new_substring):\n    \"\"\"\n    Replaces all occurrences of old_substring in text that are surrounded by spaces with new_substring.\n    \"\"\"\n    pattern = r'\\b{}\\b'.format(re.escape(old_substring))\n    return re.sub(pattern, new_substring, text)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport re\nfrom solution import replace_surrounded_substring\n\ndef test_replace_surrounded_substring():\n    test_text = \"hello world, this is a test sentence with the word hello\"\n    assert replace_surrounded_substring(test_text, \"hello\", \"goodbye\") == \"goodbye world, this is a test sentence with the word goodbye\"\n\ndef test_no_change_if_not_surrounded():\n    test_text = \"hel lo world, this is a test sen tence with the word hello\"\n    assert replace_surrounded_substring(test_text, \"hello\", \"goodbye\") == test_text\n\ndef test_case_sensitivity():\n    test_text = \"hello World, this is a test sentence with the word hello\"\n    assert replace_surrounded_substring(test_text, \"hello\", \"goodbye\") == \"goodbye World, this is a test sentence with the word goodbye\"\n\ndef test_multiple_occurrences():\n    test_text = \"hello hello hello, this is a test sentence with the words hello and goodbye\"\n    assert replace_surrounded_substring(test_text, \"hello\", \"goodbye\") == \"goodbye goodbye goodbye, this is a test sentence with the words goodbye and goodbye\"\n\ndef test_replacement_with_same_substring():\n    test_text = \"hello hello hello, this is a test sentence with the words hello and goodbye\"\n    assert replace_surrounded_substring(test_text, \"hello\", \"hello\") == test_text\n\ndef test_replacement_with_empty_string():\n    test_text = \"hello world, this is a test sentence with the word hello\"\n    assert replace_surrounded_substring(test_text, \"hello\", \"\") == \" world, this is a test sentence with the word \"\n\ndef test_replacement_with_space():\n    test_text = \"hello world, this is a test sentence with the word hello\"\n    assert replace_surrounded_substring(test_text, \"hello\", \" \") == \" world, this is a test sentence with the word  \"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000119", "row_id": 119, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to replace all occurrences of a given substring in a string, but only for occurrences that are surrounded by spaces."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to merge two dictionaries. If the same key exists in both dictionaries, their values should be summed. If not, the value from the second dictionary should simply be added to the result."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef merge_dictionaries(dict1, dict2):\n    \"\"\"\n    Merges two dictionaries. If the same key exists in both dictionaries,\n    their values will be summed up. If not, the value from the second dictionary\n    will simply be added to the result.\n    \"\"\"\n    merged_dict = dict1.copy()  # Start with a copy of the first dictionary\n    for key, value in dict2.items():\n        merged_dict[key] = merged_dict.get(key, 0) + value\n    return merged_dict\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import merge_dictionaries\n\ndef test_merge_dictionaries_same_key():\n    assert merge_dictionaries({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'a': 1, 'b': 5, 'c': 4}\n\ndef test_merge_dictionaries_no_overlap():\n    assert merge_dictionaries({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\ndef test_merge_dictionaries_with_zeros():\n    assert merge_dictionaries({'x': 0, 'y': 0}, {'y': 1, 'z': 2}) == {'x': 0, 'y': 1, 'z': 2}\n\ndef test_merge_dictionaries_negative_values():\n    assert merge_dictionaries({'a': -2, 'b': -3}, {'b': -1, 'c': -5}) == {'a': -2, 'b': -4, 'c': -5}\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000120", "row_id": 120, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to merge two dictionaries. If the same key exists in both dictionaries, their values should be summed. If not, the value from the second dictionary should simply be added to the result."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the first unique character in a string. If no unique character is found, return an underscore (_) character."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef first_unique_char(s):\n    \"\"\"\n    Returns the first unique character in the string s. If no unique character is found, returns '_'.\n    \"\"\"\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return '_'\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import first_unique_char\n\ndef test_first_unique_char_with_unique_character():\n    assert first_unique_char(\"abcdcaf\") == 'a'\n\ndef test_first_unique_char_with_no_unique_characters():\n    assert first_unique_char(\"aaaaa\") == '_'\n\ndef test_first_unique_char_from_middle():\n    assert first_unique_char(\"aabbcdc\") == 'c'\n\ndef test_first_unique_char_at_end():\n    assert first_unique_char(\"abcddcba\") == 'd'\n\ndef test_first_unique_char_with_duplicate_characters_in_the_beginning():\n    assert first_unique_char(\"ababac\") == 'c'\n\ndef test_first_unique_char_empty_string():\n    assert first_unique_char(\"\") == '_'\n```"}], "metadata": {"prompt_id": "00000121", "row_id": 121, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the first unique character in a string. If no unique character is found, return an underscore (_) character."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum number in an array using recursion."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_max_recursive(arr):\n    \"\"\"\n    Recursively find the maximum number in an array.\n    \n    :param arr: List of numbers\n    :return: Maximum number in the array\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        sub_max = find_max_recursive(arr[1:])\n        return arr[0] if arr[0] > sub_max else sub_max\n```\n<|Solution End|>\n<|Test Begin|>\n```python\nfrom solution import find_max_recursive\n\ndef test_find_max_recursive_empty():\n    assert find_max_recursive([]) == None\n\ndef test_find_max_recursive_positive():\n    assert find_max_recursive([1, 5, 3, 9, 2]) == 9\n\ndef test_find_max_recursive_negative():\n    assert find_max_recursive([-1, -5, -3, -9, -2]) == -1\n\ndef test_find_max_recursive_mixed():\n    assert find_max_recursive([1, -5, 3, -9, 2]) == 3\n\ndef test_find_max_recursive_single_element():\n    assert find_max_recursive([42]) == 42\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000122", "row_id": 122, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum number in an array using recursion."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check for prime numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, else returns False.\n    A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_prime\n\ndef test_is_prime_for_small_numbers():\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(1) == False\n    assert is_prime(0) == False\n    assert is_prime(-1) == False\n\ndef test_is_prime_for_prime_numbers():\n    assert is_prime(5) == True\n    assert is_prime(11) == True\n    assert is_prime(17) == True\n\ndef test_is_prime_for_non_prime_numbers():\n    assert is_prime(4) == False\n    assert is_prime(9) == False\n    assert is_prime(25) == False\n    assert is_prime(15) == False\n\ndef test_is_prime_for_large_prime_numbers():\n    assert is_prime(137) == True\n    assert is_prime(8723) == True\n\ndef test_is_prime_for Twin_prime_numbers():\n    assert is_prime(11) == True and is_prime(13) == True\n    assert is_prime(17) == True and is_prime(19) == True\n    assert is_prime(29) == True and is_prime(31) == True\n```"}], "metadata": {"prompt_id": "00000123", "row_id": 123, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check for prime numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the single number in a list where every other number appears exactly twice. The function should have a linear time complexity and use constant space."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef single_number(nums):\n    \"\"\"\n    Returns the single number in a list where every other number appears exactly twice.\n    \"\"\"\n    single = 0\n    for num in nums:\n        single ^= num\n    return single\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_single_number():\n    assert single_number([2, 2, 1]) == 1\n    assert single_number([4, 1, 2, 1, 2]) == 4\n    assert single_number([1]) == 1\n    assert single_number([0, 1, 0]) == 1\n    nums = [7, 3, 5, 3, 7, 5, 1, 1, 6]\n    assert single_number(nums) == 6\n\ndef test_single_number_against_duplicates():\n    assert single_number([2, 2, 2, 3, 3, 3, 4]) == 4\n    assert single_number([5, 5, 5, 5, 5, 5, 7]) == 7\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000124", "row_id": 124, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the single number in a list where every other number appears exactly twice. The function should have a linear time complexity and use constant space."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum sum of a subarray within a given array. The subarray must contain at least one number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_subarray_sum(arr):\n    \"\"\"\n    Returns the maximum sum of a contiguous subarray within the given array.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: Maximum sum of a contiguous subarray.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Array is empty\")\n    \n    max_sum = current_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_subarray_sum\n\ndef test_max_subarray_sum_positive_numbers():\n    assert max_subarray_sum([1, 2, 3, 4]) == 10\n\ndef test_max_subarray_sum_negative_numbers():\n    assert max_subarray_sum([-1, -2, -3, -4]) == -1\n\ndef test_max_subarray_sum_with_zeros():\n    assert max_subarray_sum([0, 0, 1, -1, 0]) == 1\n\ndef test_max_subarray_sum_mixed_values():\n    assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6\n\ndef test_max_subarray_sum_single_element():\n    assert max_subarray_sum([-7]) == -7\n\ndef test_max_subarray_sum_empty_array():\n    with pytest.raises(ValueError):\n        max_subarray_sum([])\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000125", "row_id": 125, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum sum of a subarray within a given array. The subarray must contain at least one number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a list of numbers is sorted in ascending order."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_ascending(lst):\n    \"\"\"\n    Returns True if the list is sorted in ascending order, otherwise False.\n    \"\"\"\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_is_ascending():\n    assert is_ascending([1, 2, 3, 4, 5]) == True\n    assert is_ascending([10, 20, 20, 30, 40]) == True\n    assert is_ascending([5, 4, 3, 2, 1]) == False\n    assert is_ascending([1, 2, 3, 3, 4, 5]) == True\n    assert is_ascending([1, 2, 3, 5, 4]) == False\n    assert is_ascending([]) == True\n    assert is_ascending([7]) == True\n    assert is_ascending([1, 3, 2]) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000126", "row_id": 126, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a list of numbers is sorted in ascending order."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to evaluate the value of the input infix expression. The function should take a single string argument representing the infix expression and return the corresponding value. The expression may contain integers, the operators `+`, `-`, `*`, and `/`, and parentheses `()`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport operator\nimport re\n\ndef evaluate_infix_expression(expression):\n    \"\"\"\n    Evaluates the given infix expression and returns the result.\n    Supports integers, +, -, *, /, and parentheses.\n    \"\"\"\n    def precedence(op):\n        if op in (\"+\", \"-\"):\n            return 1\n        if op in (\"*\", \"/\"):\n            return 2\n        return 0\n    \n    def apply_operator(operands, operators):\n        op = operators.pop()\n        right = operands.pop()\n        left = operands.pop()\n        operands.append(eval(f\"{left} {op} {right}\"))\n    \n    def evaluate(expression):\n        operands = []\n        operators = []\n        i = 0\n        while i < len(expression):\n            if expression[i].isdigit():\n                start = i\n                while i < len(expression) and expression[i].isdigit():\n                    i += 1\n                operands.append(int(expression[start:i]))\n                i -= 1\n            elif expression[i] in \"+-*/\":\n                while (operators and operators[-1] != \"(\" and\n                       precedence(operators[-1]) >= precedence(expression[i])):\n                    apply_operator(operands, operators)\n                operators.append(expression[i])\n            elif expression[i] == \"(\":\n                operators.append(expression[i])\n            elif expression[i] == \")\":\n                while operators[-1] != \"(\":\n                    apply_operator(operands, operators)\n                operators.pop()  # Remove '(' from operators\n            i += 1\n        \n        while operators:\n            apply_operator(operands, operators)\n        \n        return operands[0]\n    \n    expression = re.sub(r'\\s+', '', expression)\n    return evaluate(expression)\n\n# Predefined operations\nops = {\n    '+': operator.add,\n    '-': operator.sub,\n    '*': operator.mul,\n    '/': operator.truediv\n}\nfor op in ops:\n    setattr(evaluate_infix_expression, op, ops[op])\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import evaluate_infix_expression\n\ndef test_simple_addition():\n    assert evaluate_infix_expression(\"2 + 3\") == 5\n\ndef test_simple_subtraction():\n    assert evaluate_infix_expression(\"5 - 3\") == 2\n\ndef test_simple_multiplication():\n    assert evaluate_infix_expression(\"4 * 5\") == 20\n\ndef test_simple_division():\n    assert evaluate_infix_expression(\"8 / 2\") == 4\n\ndef test_precedence_addition_subtraction():\n    assert evaluate_infix_expression(\"2 + 3 - 1\") == 4\n\ndef test_precedence_multiplication_division():\n    assert evaluate_infix_expression(\"2 * 3 / 2\") == 3\n\ndef test_precedence_mixed_operations():\n    assert evaluate_infix_expression(\"2 + 3 * 4 - 6 / 3\") == 10\n\ndef test_parentheses_evaluation():\n    assert evaluate_infix_expression(\"(2 + 3) * 4\") == 20\n\ndef test_negative_numbers():\n    assert evaluate_infix_expression(\"-2 + 3 * 4\") == 10\n\ndef test_complex_expression():\n    assert evaluate_infix_expression(\"10 + 2 * (3 + 4) - 5 / (2 + 1)\") == 20\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000127", "row_id": 127, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to evaluate the value of the input infix expression. The function should take a single string argument representing the infix expression and return the corresponding value. The expression may contain integers, the operators `+`, `-`, `*`, and `/`, and parentheses `()`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the gcd(greatest common divisor) of two numbers using Euclid's algorithm. Euclid's algorithm is based on the principle that the GCD of two numbers also divides their difference. It uses the simple formula: GCD(A, B) = GCD(B, A mod B) until the remainder is 0."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of two numbers using Euclid's algorithm.\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import gcd\n\ndef test_gcd_positive_numbers():\n    assert gcd(48, 18) == 6\n\ndef test_gcd_with_zero():\n    assert gcd(0, 5) == 5\n    assert gcd(0, 0) == 0\n\ndef test_gcd_negative_numbers():\n    assert gcd(-25, 10) == 5\n    assert gcd(-15, -10) == 5\n\ndef test_gcd_mixed_sign_numbers():\n    assert gcd(-20, 15) == 5\n    assert gcd(20, -15) == 5\n\ndef test_gcd_large_numbers():\n    assert gcd(123456, 56789) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000129", "row_id": 129, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the gcd(greatest common divisor) of two numbers using Euclid's algorithm. Euclid's algorithm is based on the principle that the GCD of two numbers also divides their difference. It uses the simple formula: GCD(A, B) = GCD(B, A mod B) until the remainder is 0."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a string without using the built-in reverse function or slicing. Also, ensure that your function works for both strings and integer sequences treated as strings."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef reverse_string(s):\n    \"\"\"\n    Reverses the input string without using the built-in reverse function or slicing.\n    \n    Parameters:\n    s (str or int): The string or integer sequence to be reversed.\n    \n    Returns:\n    str: The reversed string.\n    \"\"\"\n    reversed_string = ''\n    for char in s:\n        reversed_string = char + reversed_string\n    return reversed_string\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import reverse_string\n\ndef test_reverse_string_empty():\n    assert reverse_string('') == ''\n\ndef test_reverse_string_single_character():\n    assert reverse_string('a') == 'a'\n    assert reverse_string(9) == '9'\n\ndef test_reverse_string_lowercase():\n    assert reverse_string('hello') == 'olleh'\n    \ndef test_reverse_string_uppercase():\n    assert reverse_string('WORLD') == 'DLROW'\n    \ndef test_reverse_string_mixed_case():\n    assert reverse_string('HelloWorld') == 'dlroWolleH'\n    \ndef test_reverse_string_with_spaces():\n    assert reverse_string('   ') == '   '\n    \ndef test_reverse_string_with_integers():\n    assert reverse_string(12345) == '54321'\n``` \n\n<|Test End|>"}], "metadata": {"prompt_id": "00000131", "row_id": 131, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a string without using the built-in reverse function or slicing. Also, ensure that your function works for both strings and integer sequences treated as strings."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the diameter of a binary tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef diameter_of_binary_tree(root: TreeNode) -> int:\n    \"\"\"\n    Returns the diameter of a binary tree.\n    \"\"\"\n    def height(node):\n        if not node:\n            return 0\n        left_height = height(node.left)\n        right_height = height(node.right)\n        nonlocal diameter\n        diameter = max(diameter, left_height + right_height)\n        return max(left_height, right_height) + 1\n\n    diameter = 0\n    height(root)\n    return diameter\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import diameter_of_binary_tree, TreeNode\n\ndef test_diameter_of_binary_tree():\n    # Constructing a tree\n    #       1\n    #      / \\\n    #     2   3\n    #    / \\\n    #   4   5\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    \n    assert diameter_of_binary_tree(root) == 3\n\n    # Constructing another tree\n    #          1\n    #         /\n    #        2\n    #       /\n    #      3\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.left.left = TreeNode(3)\n    \n    assert diameter_of_binary_tree(root) == 3\n\n    # Single node tree\n    root = TreeNode(1)\n    assert diameter_of_binary_tree(root) == 0\n\n    # Empty tree\n    assert diameter_of_binary_tree(None) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000132", "row_id": 132, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the diameter of a binary tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to multiply a number by 3 and return the result."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef multiply_by_three(number):\n    \"\"\"\n    Multiplies the given number by 3 and returns the result.\n    \"\"\"\n    return number * 3\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_multiply_by_three():\n    assert multiply_by_three(2) == 6\n    assert multiply_by_three(0) == 0\n    assert multiply_by_three(-3) == -9\n    assert multiply_by_three(5.5) == 16.5\n```"}], "metadata": {"prompt_id": "00000133", "row_id": 133, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to multiply a number by 3 and return the result."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the second smallest number in a list. If the list has less than two unique numbers, return `None`. For example, for the list `[3, 5, 2, 2, 8, 1, 1, 4]`, the function should return `3`. However, for the list `[1, 1]` or `[5]`, the function should return `None`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef second_smallest(nums):\n    \"\"\"\n    Returns the second smallest unique number in the list `nums`.\n    Returns None if there are less than two unique numbers.\n    \"\"\"\n    unique_nums = set(nums)\n    if len(unique_nums) < 2:\n        return None\n    return sorted(unique_nums)[1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import second_smallest\n\ndef test_second_smallest_with_duplicates():\n    assert second_smallest([3, 5, 2, 2, 8, 1, 1, 4]) == 3\n\ndef test_second_smallest_with_single_duplicate():\n    assert second_smallest([3, 3, 3, 3]) == None\n\ndef test_second_smallest_with_unique_elements():\n    assert second_smallest([4, 1, 2, 6, 8, 5]) == 2\n\ndef test_second_smallest_with_all_elements_same():\n    assert second_smallest([1, 1, 1]) == None\n\ndef test_second_smallest_with_empty_list():\n    assert second_smallest([]) == None\n\ndef test_second_smallest_with_single_element():\n    assert second_smallest([5]) == None\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000134", "row_id": 134, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the second smallest number in a list. If the list has less than two unique numbers, return `None`. For example, for the list `[3, 5, 2, 2, 8, 1, 1, 4]`, the function should return `3`. However, for the list `[1, 1]` or `[5]`, the function should return `None`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to create a queue using a list with two methods: enqueue and dequeue. The enqueue method adds an element to the end of the queue, and the dequeue method removes the element from the front of the queue."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass Queue:\n    \"\"\"\n    Queue implementation using a list with enqueue and dequeue methods.\n    \"\"\"\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, item):\n        \"\"\"\n        Adds an element to the end of the queue.\n        \"\"\"\n        self.queue.append(item)\n\n    def dequeue(self):\n        \"\"\"\n        Removes the element from the front of the queue. Returns None if the queue is empty.\n        \"\"\"\n        if self.is_empty():\n            return None\n        return self.queue.pop(0)\n\n    def is_empty(self):\n        \"\"\"\n        Checks if the queue is empty.\n        \"\"\"\n        return len(self.queue) == 0\n```\n<|Solution End|>\n\n<|Test Begin|>  \n```python\nimport pytest\n\ndef test_queue_empty():\n    queue = Queue()\n    assert queue.is_empty()\n    assert queue.dequeue() is None\n\ndef test_queue_enqueue():\n    queue = Queue()\n    queue.enqueue(1)\n    queue.enqueue(2)\n    assert not queue.is_empty()\n    assert queue.queue == [1, 2]\n\ndef test_queue_enqueue_multiple():\n    queue = Queue()\n    queue.enqueue(1)\n    queue.enqueue(2)\n    queue.enqueue(3)\n    assert queue.queue == [1, 2, 3]\n\ndef test_queue_dequeue():\n    queue = Queue()\n    queue.enqueue(1)\n    queue.enqueue(2)\n    queue.enqueue(3)\n    assert queue.dequeue() == 1\n    assert queue.queue == [2, 3]\n\ndef test_queue_dequeue_empty():\n    queue = Queue()\n    assert queue.dequeue() is None\n\ndef test_queue_dequeue_multi_times():\n    queue = Queue()\n    queue.enqueue(1)\n    queue.enqueue(2)\n    queue.enqueue(3)\n    assert queue.dequeue() == 1\n    assert queue.dequeue() == 2\n    assert queue.dequeue() == 3\n    assert queue.is_empty()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000136", "row_id": 136, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to create a queue using a list with two methods: enqueue and dequeue. The enqueue method adds an element to the end of the queue, and the dequeue method removes the element from the front of the queue."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the length of the longest continuous subarray with equal number of 0s and 1s."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef findMaxLength(nums):\n    \"\"\"\n    Returns the length of the longest continuous subarray with equal number of 0s and 1s.\n    \"\"\"\n    max_length = 0\n    count = 0\n    count_dict = {0: -1}  # Base case: subarray starting from index 0\n\n    for i, num in enumerate(nums):\n        if num == 1:\n            count += 1\n        else:\n            count -= 1\n\n        if count in count_dict:\n            max_length = max(max_length, i - count_dict[count])\n        else:\n            count_dict[count] = i\n\n    return max_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import findMaxLength\n\ndef test_findMaxLength_with_single_element_subarray():\n    assert findMaxLength([0, 1]) == 2\n\ndef test_findMaxLength_with_mixed_sequence():\n    assert findMaxLength([0, 1, 0, 1, 0, 1, 0]) == 7\n\ndef test_findMaxLength_with_all_zeros():\n    assert findMaxLength([0, 0, 0, 0]) == 0\n\ndef test_findMaxLength_with_all_ones():\n    assert findMaxLength([1, 1, 1, 1]) == 0\n\ndef test_findMaxLength_with_alternating_sequence():\n    assert findMaxLength([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]) == 10\n\ndef test_findMaxLength_with_reversed_alternating_sequence():\n    assert findMaxLength([0, 1, 0, 1, 0, 1, 0, 1, 0, 1]) == 10\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000138", "row_id": 138, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the length of the longest continuous subarray with equal number of 0s and 1s."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum sum of a subarray within a given array. This is known as the maximum subarray problem. You should use Kadane's algorithm to implement this."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_subarray_sum(arr):\n    \"\"\"\n    Returns the maximum sum of a contiguous subarray within the one-dimensional array of numbers.\n    Uses Kadane's algorithm to solve the maximum subarray problem.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    max_current = max_global = arr[0]\n    for num in arr[1:]:\n        max_current = max(num, max_current + num)\n        if max_current > max_global:\n            max_global = max_current\n            \n    return max_global\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_subarray_sum\n\ndef test_max_subarray_sum_single_element():\n    assert max_subarray_sum([1]) == 1\n\ndef test_max_subarray_sum_positive_numbers():\n    assert max_subarray_sum([1, 2, 3, 4]) == 10\n\ndef test_max_subarray_sum_mixed_negative_and_positive_numbers():\n    assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6\n\ndef test_max_subarray_sum_all_negative_numbers():\n    assert max_subarray_sum([-1, -2, -3, -4]) == -1\n\ndef test_max_subarray_sum_empty_array():\n    assert max_subarray_sum([]) == 0\n\ndef test_max_subarray_sum_single_negative_number():\n    assert max_subarray_sum([-5]) == -5\n\ndef test_max_subarray_sum_alternating_signs():\n    assert max_subarray_sum([1, -1, 1, -1, 3]) == 3\n\ndef test_max_subarray_sum_with_zero():\n    assert max_subarray_sum([0, 1, -1, 2, -3, 4, 0, -4, 5]) == 6\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000139", "row_id": 139, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum sum of a subarray within a given array. This is known as the maximum subarray problem. You should use Kadane's algorithm to implement this."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a list of integers contains the number 5. If it does, return the index of the first occurrence of 5, otherwise, return -1."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_index_of_five(numbers):\n    \"\"\"\n    Returns the index of the first occurrence of the number 5 in the list.\n    If 5 is not found, returns -1.\n    \"\"\"\n    try:\n        return numbers.index(5)\n    except ValueError:\n        return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_find_index_of_five():\n    assert find_index_of_five([1, 2, 3, 4, 5, 6]) == 4\n    assert find_index_of_five([1, 5, 2, 3, 4, 6]) == 1\n    assert find_index_of_five([1, 2, 3, 4, 6]) == -1\n    assert find_index_of_five([5, 1, 2, 3, 4, 6]) == 0\n    assert find_index_of_five([]) == -1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000140", "row_id": 140, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a list of integers contains the number 5. If it does, return the index of the first occurrence of 5, otherwise, return -1."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum product of a triplet in an array. The array can contain both positive and negative numbers. The function should return the maximum product of any three numbers in the array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_product_of_triplet(arr):\n    \"\"\"\n    Returns the maximum product that can be obtained by multiplying any three elements from the array.\n    \"\"\"\n    arr.sort()\n    n = len(arr)\n    # The maximum product can be either (the product of the three largest numbers) \n    # or (the product of the two smallest numbers (which could be negative) and the largest number).\n    return max(arr[0] * arr[1] * arr[n-1], arr[n-3] * arr[n-2] * arr[n-1])\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_max_product_of_triplet_positive_numbers():\n    assert max_product_of_triplet([1, 2, 3]) == 6\n\ndef test_max_product_of_triplet_negative_numbers():\n    assert max_product_of_triplet([-10, -10, 5, 2]) == 500\n\ndef test_max_product_of_triplet_mixed_numbers():\n    assert max_product_of_triplet([-1, -2, -3, -4]) == -6\n\ndef test_max_product_of_triplet_with_zeross():\n    assert max_product_of_triplet([-1, -1, 0, 2, 3]) == 6\n\ndef test_max_product_of_triplet_edge_cases():\n    assert max_product_of_triplet([1, 2]) == 2\n    assert max_product_of_triplet([1]) == 1\n    assert max_product_of_triplet([-1]) == -1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000144", "row_id": 144, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum product of a triplet in an array. The array can contain both positive and negative numbers. The function should return the maximum product of any three numbers in the array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort a list of integers using the Bubble sort algorithm."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef bubble_sort(arr):\n    \"\"\"\n    Sorts a list of integers using the Bubble sort algorithm.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        # Create a flag that will allow the function to terminate early if there's nothing left to sort\n        already_sorted = True\n        for j in range(n - i - 1):\n            if arr[j] > arr[j + 1]:\n                # Swap if the element found is greater than the next element\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                already_sorted = False\n        # If there were no swaps during the last iteration, the array is already sorted, and we can terminate\n        if already_sorted:\n            break\n    return arr\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import bubble_sort\n\ndef test_bubble_sort_empty_list():\n    assert bubble_sort([]) == []\n\ndef test_bubble_sort_single_element():\n    assert bubble_sort([5]) == [5]\n\ndef test_bubble_sort_sorted_list():\n    assert bubble_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_bubble_sort_reverse_sorted_list():\n    assert bubble_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n\ndef test_bubble_sort_unsorted_list():\n    assert bubble_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]\n\ndef test_bubble_sort_with_negative_numbers():\n    assert bubble_sort([-2, -5, -45, 0, 2, -1, 3]) == [-45, -5, -2, -1, 0, 2, 3]\n\ndef test_bubble_sort_duplicate_numbers():\n    assert bubble_sort([2, 3, 1, 3, 2]) == [1, 2, 2, 3, 3]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000145", "row_id": 145, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort a list of integers using the Bubble sort algorithm."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum depth of a binary tree. The function should return an integer representing the maximum depth."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_depth(root: TreeNode) -> int:\n    \"\"\"\n    Returns the maximum depth of a binary tree.\n    \"\"\"\n    if not root:\n        return 0\n    left_depth = max_depth(root.left)\n    right_depth = max_depth(root.right)\n    return max(left_depth, right_depth) + 1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import TreeNode, max_depth\n\ndef test_max_depth_single_node():\n    node = TreeNode(1)\n    assert max_depth(node) == 1\n\ndef test_max_depth_two_nodes():\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    assert max_depth(root) == 2\n\ndef test_max_depth_full_tree():\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    assert max_depth(root) == 3\n\ndef test_max_depth_empty_tree():\n    assert max_depth(None) == 0\n\ndef test_max_depth_balanced_tree():\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    assert max_depth(root) == 3\n```"}], "metadata": {"prompt_id": "00000148", "row_id": 148, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum depth of a binary tree. The function should return an integer representing the maximum depth."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the minimum number of operations required to make all elements in a list equal. The operations allowed are incrementing any element by 1 or decrementing any element by 1."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_operations_to_equal_elements(nums):\n    \"\"\"\n    Returns the minimum number of operations required to make all elements in the list equal.\n    Each operation consists of incrementing or decrementing an element by 1.\n    \"\"\"\n    return sum(abs(nums[i] - min(nums)) for i in range(len(nums)))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import min_operations_to_equal_elements\n\ndef test_min_operations_to_equal_elements():\n    assert min_operations_to_equal_elements([1, 2, 3]) == 2\n    assert min_operations_to_equal_elements([1, 1, 1]) == 0\n    assert min_operations_to_equal_elements([1, 10, 100]) == 189\n    assert min_operations_to_equal_elements([5, 5, 5, 5]) == 0\n    assert min_operations_to_equal_elements([0, 2, 4]) == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000149", "row_id": 149, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the minimum number of operations required to make all elements in a list equal. The operations allowed are incrementing any element by 1 or decrementing any element by 1."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine if a given number is a power of two. A number is a power of two if it can be represented as 2^k where k is a non-negative integer. Assume the input is always a valid integer, both positive and negative, but negative numbers should be immediately determined as not powers of two."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_power_of_two(n):\n    \"\"\"\n    Returns True if n is a power of two, otherwise False.\n    \"\"\"\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_is_power_of_two():\n    assert not is_power_of_two(-4)\n    assert not is_power_of_two(0)\n    assert is_power_of_two(1)\n    assert is_power_of_two(2)\n    assert is_power_of_two(4)\n    assert not is_power_of_two(3)\n    assert is_power_of_two(8)\n    assert not is_power_of_two(15)\n    assert is_power_of_two(16)\n    assert is_power_of_two(32)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000150", "row_id": 150, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine if a given number is a power of two. A number is a power of two if it can be represented as 2^k where k is a non-negative integer. Assume the input is always a valid integer, both positive and negative, but negative numbers should be immediately determined as not powers of two."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a decimal number to binary without using Python's built-in bin() function. Walk me through the process and the code."}, {"role": "assistant", "content": "<|Solution Begin|>\n\nTo convert a decimal number to binary without using Python's built-in `bin()` function, we can use the following approach:\n\n1. Define a function `decimal_to_binary` that takes a decimal number as input.\n2. Initialize an empty string to store the binary representation.\n3. Use a while loop to divide the decimal number by 2 and get the remainder. Append the remainder to the string.\n4. Continue the process until the decimal number becomes 0.\n5. Reverse the string of remainders to get the correct binary representation.\n\n```python\ndef decimal_to_binary(decimal_number):\n    \"\"\"\n    Converts a decimal number to binary without using Python's built-in bin() function.\n    \"\"\"\n    if decimal_number == 0:\n        return \"0\"\n    \n    binary = \"\"\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary += str(remainder)\n        decimal_number = decimal_number // 2\n    \n    return binary[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import decimal_to_binary\n\ndef test_decimal_to_binary():\n    assert decimal_to_binary(10) == \"1010\"\n    assert decimal_to_binary(0) == \"0\"\n    assert decimal_to_binary(19) == \"10011\"\n    assert decimal_to_binary(255) == \"11111111\"\n    assert decimal_to_binary(4095) == \"111111111111\"\n    assert decimal_to_binary(2) == \"10\"\n    assert decimal_to_binary(1) == \"1\"\n    assert decimal_to_binary(2147483647) == \"1111111111111111111111111111111\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000151", "row_id": 151, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a decimal number to binary without using Python's built-in bin() function. Walk me through the process and the code."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine whether a number is even or odd without using if else statements. You can use bitwise operators only."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_even_bitwise(n):\n    \"\"\"\n    Returns True if the number is even, False otherwise.\n    This function uses bitwise operators only.\n    \"\"\"\n    return (n & 1) == 0\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_even_bitwise\n\ndef test_is_even_bitwise():\n    assert is_even_bitwise(4) == True\n    assert is_even_bitwise(5) == False\n    assert is_even_bitwise(0) == True\n    assert is_even_bitwise(-2) == True\n    assert is_even_bitwise(-3) == False\n\ndef test_edge_cases():\n    assert is_even_bitwise(999999999998) == True\n    assert is_even_bitwise(-999999999999) == False\n```"}], "metadata": {"prompt_id": "00000152", "row_id": 152, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine whether a number is even or odd without using if else statements. You can use bitwise operators only."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine the number of vowels in a string. The vowels are 'a', 'e', 'i', 'o', and 'u' (both lowercase and uppercase)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_vowels(input_string):\n    \"\"\"\n    Returns the number of vowels in the input string. The function considers 'a', 'e', 'i', 'o', 'u',\n    both in lowercase and uppercase.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in input_string if char in vowels)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_vowels\n\ndef test_count_vowels_empty_string():\n    assert count_vowels(\"\") == 0\n\ndef test_count_vowels_all_vowels():\n    assert count_vowels(\"aeiouAEIOU\") == 10\n\ndef test_count_vowels_no_vowels():\n    assert count_vowels(\"bcxyz\") == 0\n\ndef test_count_vowels_with_spaces():\n    assert count_vowels(\"hello world\") == 3\n\ndef test_count_vowels_with_diacritics():\n    assert count_vowels(\"\u00e0\u00e9\u00ee\u00f4\u00fb\") == 5\n\ndef test_count_vowels_with_mixed_cases():\n    assert count_vowels(\"HEllo WORld\") == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000153", "row_id": 153, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine the number of vowels in a string. The vowels are 'a', 'e', 'i', 'o', and 'u' (both lowercase and uppercase)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a given string into a list of words. Splitting can be done based on multiple characters. For instance, splitting can be done using the characters ',', '.', and ' ' (space). How would you approach this problem?"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport re\n\ndef split_string_into_words(input_string):\n    \"\"\"\n    Splits the input string based on ',', '.', and ' ' (space) and returns a list of words.\n    \"\"\"\n    return re.split(r'[ ,.]+', input_string)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import split_string_into_words\n\ndef test_split_string_into_words():\n    test_string = \"Hello, world. This is a test.\"\n    expected_output = [\"Hello\", \"world\", \"This\", \"is\", \"a\", \"test\"]\n    assert split_string_into_words(test_string) == expected_output\n\ndef test_split_string_with_multiple_delimiters():\n    test_string = \"One, two, three. Four five six\"\n    expected_output = [\"One\", \"two\", \"three\", \"Four\", \"five\", \"six\"]\n    assert split_string_into_words(test_string) == expected_output\n\ndef test_split_empty_string():\n    test_string = \"\"\n    expected_output = []\n    assert split_string_into_words(test_string) == expected_output\n\ndef test_split_string_with_no_delimiters():\n    test_string = \"OnetwothreeFourfivesix\"\n    expected_output = [\"OnetwothreeFourfivesix\"]\n    assert split_string_into_words(test_string) == expected_output\n\ndef test_split_string_with_only_delimiters():\n    test_string = \",,.   ...  \"\n    expected_output = []\n    assert split_string_into_words(test_string) == expected_output\n\ndef test_split_string_with_tab_and_newline():\n    test_string = \"Line1\\tLine2\\nLine3\"\n    expected_output = [\"Line1\", \"Line2\", \"Line3\"]\n    assert split_string_into_words(test_string) == expected_output\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000154", "row_id": 154, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a given string into a list of words. Splitting can be done based on multiple characters. For instance, splitting can be done using the characters ',', '.', and ' ' (space). How would you approach this problem?"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to solve the following problem: Given a list of lists, return the sum of all numbers in the sublists that have an even number of elements."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_even_sublists(lst):\n    \"\"\"\n    Given a list of lists, return the sum of all numbers in the sublists that have an even number of elements.\n    \"\"\"\n    total_sum = 0\n    for sublist in lst:\n        if len(sublist) % 2 == 0:\n            total_sum += sum(sublist)\n    return total_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_sum_even_sublists():\n    assert sum_even_sublists([[1, 2, 3], [4, 5, 6, 7], [8]]) == 18\n    assert sum_even_sublists([[1, 2], []]) == 3\n    assert sum_even_sublists([[1], [2, 3, 4], [5, 6, 7, 8], [9]]) == 30\n    assert sum_even_sublists([[10, 20, 30], [40], [50, 60]]) == 100\n    assert sum_even_sublists([]) == 0\n    assert sum_even_sublists([[1, 2], [3, 4], [5, 6], [7]]) == 18\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000157", "row_id": 157, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to solve the following problem: Given a list of lists, return the sum of all numbers in the sublists that have an even number of elements."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to to count the number of times a character appears in a string"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef char_count(text, character):\n    \"\"\"\n    Returns the number of times a character appears in a string.\n    \"\"\"\n    return text.count(character)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import char_count\n\ndef test_char_count_single_character():\n    assert char_count(\"hello\", \"l\") == 2\n\ndef test_char_count_multiple_characters():\n    assert char_count(\"banana\", \"a\") == 3\n\ndef test_char_count_empty_string():\n    assert char_count(\"\", \"a\") == 0\n\ndef test_char_count_with_whitespace():\n    assert char_count(\"hello world\", \" \") == 1\n\ndef test_char_count_case_sensitive():\n    assert char_count(\"Hello\", \"h\") == 0\n    assert char_count(\"Hello\", \"H\") == 1\n\ndef test_char_count_special_characters():\n    assert char_count(\"hello@world\", \"@\") == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000158", "row_id": 158, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to to count the number of times a character appears in a string"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a string without using extra space."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef reverse_string(s):\n    \"\"\"\n    Reverses the given string without using extra space.\n    \n    :param s: The input string to be reversed\n    :return: The reversed string\n    \"\"\"\n    # Convert string to list of characters since strings are immutable in Python\n    str_list = list(s)\n    start, end = 0, len(str_list) - 1\n    while start < end:\n        # Swap characters at start and end positions\n        str_list[start], str_list[end] = str_list[end], str_list[start]\n        start += 1\n        end -= 1\n    # Convert list of characters back to string\n    return ''.join(str_list)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import reverse_string\n\ndef test_reverse_string_empty():\n    assert reverse_string(\"\") == \"\"\n\ndef test_reverse_string_single_char():\n    assert reverse_string(\"a\") == \"a\"\n\ndef test_reverse_string_normal():\n    assert reverse_string(\"hello\") == \"olleh\"\n\ndef test_reverse_string_with_spaces():\n    assert reverse_string(\"hello world\") == \"dlrow olleh\"\n\ndef test_reverse_string_special_chars():\n    assert reverse_string(\"!@#$%^&*()\") == \")(*&^%$#@!\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000159", "row_id": 159, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a string without using extra space."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the second largest number in a list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_second_largest(numbers):\n    \"\"\"\n    Returns the second largest number in the list `numbers`.\n    If the list has less than 2 unique numbers, it returns None.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    # Find the largest and second largest numbers\n    first, second = float('-inf'), float('-inf')\n    for num in numbers:\n        if num > first:\n            first, second = num, first\n        elif first > num > second:\n            second = num\n            \n    # Check if the second largest is still the same as the largest (in case of duplicates)\n    if second == float('-inf'):\n        return None\n    return second\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import find_second_largest\n\ndef test_find_second_largest_with_multiple_elements():\n    assert find_second_largest([10, 20, 30, 40, 50]) == 40\n    assert find_second_largest([55, 22, 33, 11, 99]) == 55\n\ndef test_find_second_largest_with_duplicate_max_values():\n    assert find_second_largest([99, 99, 34, 67, 67]) == 67\n    assert find_second_largest([88, 88, 88, 88]) is None\n\ndef test_find_second_largest_with_one_unique_element():\n    assert find_second_largest([100]) is None\n    assert find_second_largest([100, 100]) is None\n\ndef test_find_second_largest_with_reversed_order():\n    assert find_second_largest([5, 4, 3, 2, 1]) == 4\n    assert find_second_largest([20, 15, 25, 10]) == 20\n\ndef test_find_second_largest_with_negative_numbers():\n    assert find_second_largest([-10, -20, -30, -25]) == -25\n    assert find_second_largest([-1, -1, -2, -3, -4]) == -2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000160", "row_id": 160, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the second largest number in a list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to generate all possible combinations of a given list of numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom itertools import combinations\n\ndef generate_combinations(numbers):\n    \"\"\"\n    Generates all possible combinations of the given list of numbers.\n    \"\"\"\n    all_combinations = []\n    for r in range(1, len(numbers) + 1):\n        all_combinations.extend(combinations(numbers, r))\n    return all_combinations\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import generate_combinations\nimport itertools\n\ndef test_generate_combinations():\n    numbers = [1, 2, 3]\n    expected_combinations = list(itertools.chain.from_iterable(itertools.combinations(numbers, r) for r in range(1, len(numbers) + 1)))\n    assert sorted(generate_combinations(numbers)) == sorted(expected_combinations)\n\ndef test_generate_combinations_empty_list():\n    numbers = []\n    expected_combinations = []\n    assert generate_combinations(numbers) == expected_combinations\n\ndef test_generate_combinations_single_element():\n    numbers = [1]\n    expected_combinations = [(), (1,)]\n    assert sorted(generate_combinations(numbers)) == sorted(expected_combinations)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000161", "row_id": 161, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to generate all possible combinations of a given list of numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to filter out all even numbers from a list, which also handles both positive and negative integers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef filter_even_numbers(numbers):\n    \"\"\"\n    Returns a new list containing only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import filter_even_numbers\n\ndef test_filter_even_numbers_empty():\n    assert filter_even_numbers([]) == []\n\ndef test_filter_even_numbers_all_even():\n    assert filter_even_numbers([2, 4, 6, 8]) == []\n\ndef test_filter_even_numbers_all_odd():\n    assert filter_even_numbers([1, 3, 5, 7]) == [1, 3, 5, 7]\n\ndef test_filter_even_numbers_mixed():\n    assert filter_even_numbers([1, 2, -3, 4, -5, 6]) == [1, -3, -5]\n\ndef test_filter_even_numbers_negative_even_numbers():\n    assert filter_even_numbers([-2, -4, -6, -8]) == []\n    assert filter_even_numbers([-2, -1, -4, -3]) == [-1, -3]\n```"}], "metadata": {"prompt_id": "00000162", "row_id": 162, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to filter out all even numbers from a list, which also handles both positive and negative integers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to extract all the shortest words from a string of text."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport re\nfrom collections import defaultdict\n\ndef extract_shortest_words(text):\n    \"\"\"\n    Returns a dictionary of all the shortest words in the text, mapping them to their lengths.\n    \"\"\"\n    # Split the text into words using regular expression to handle punctuation\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    if not words:\n        return {}\n\n    min_length = min(len(word) for word in words)\n    shortest_words = {word: min_length for word in words if len(word) == min_length}\n    return shortest_words\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import extract_shortest_words\n\ndef test_extract_shortest_words_single_word():\n    assert extract_shortest_words(\"banana\") == {'b': 1, 'a': 1, 'n': 1}\n\ndef test_extract_shortest_words_multiple_words():\n    assert extract_shortest_words(\"The quick brown fox\") == {'t': 1, 'h': 1, 'e': 1, 'q': 1, 'u': 1, 'k': 1, 'b': 1, 'r': 1, 'w': 1, 'o': 1, 'n': 1, 'f': 1, 'x': 1}\n\ndef test_extract_shortest_words_with_punctuation():\n    assert extract_shortest_words(\"A quick, brown; fox!\") == {'a': 1, 'q': 1, 'u': 1, 'k': 1, 'i': 1, 'c': 1, 'b': 1, 'r': 1, 'w': 1, 'o': 1, 'n': 1, 'f': 1, 'x': 1}\n\ndef test_extract_shortest_words_empty_string():\n    assert extract_shortest_words(\"\") == {}\n\ndef test_extract_shortest_words_single_word_tuple():\n    assert extract_shortest_words(\"Heavy\") == {'h': 1, 'e': 1, 'a': 1, 'v': 1, 'y': 1}\n\ndef test_extract_shortest_words_full_sentence():\n    assert extract_shortest_words(\"To be, or not to be, that is the question.\") == {'t': 1, 'o': 1, 'b': 1, 'e': 1, 'n': 1, 't': 1, 'q': 1, 'i': 1, 's': 1, 't': 1, 'h': 1, 't': 1, 'a': 1, 't': 1, 's': 1}\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000163", "row_id": 163, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to extract all the shortest words from a string of text."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count missing data (None) in a nested list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_missing_data(nested_list):\n    \"\"\"\n    Counts the number of missing data (None) in a nested list.\n    \n    :param nested_list: A nested list containing any type of elements.\n    :return: The total count of None values in the nested list.\n    \"\"\"\n    count = 0\n    for element in nested_list:\n        if element is None:\n            count += 1\n        elif isinstance(element, list):\n            count += count_missing_data(element)\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_count_missing_data():\n    assert count_missing_data([1, 2, None, [3, None, [4, None]], None]) == 3\n    assert count_missing_data([None, None, None]) == 3\n    assert count_missing_data([[None], [1, 2, 3]]) == 1\n    assert count_missing_data([1, 2, 3]) == 0\n    assert count_missing_data([None, [None, None], [[None]]]) == 4\n    assert count_missing_data([]) == 0\n    assert count_missing_data([None, None, [None, None]]) == 4\n```"}], "metadata": {"prompt_id": "00000167", "row_id": 167, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count missing data (None) in a nested list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to parse and extract specific data from XML using `xml.etree.ElementTree`"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport xml.etree.ElementTree as ET\n\ndef extract_data_from_xml(xml_string, tag_name):\n    \"\"\"\n    Parses the provided XML string and extracts the text content of the first occurrence of the specified tag.\n\n    :param xml_string: The XML data as a string.\n    :param tag_name: The name of the tag to extract the text from.\n    :return: The text content of the first <tag_name> element or None if not found.\n    \"\"\"\n    root = ET.fromstring(xml_string)\n    tag = root.find(tag_name)\n    if tag is not None:\n        return tag.text\n    return None\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport xml.etree.ElementTree as ET\nfrom solution import extract_data_from_xml\n\ndef test_extract_data_from_xml():\n    xml_string = '<root><data>extract this</data><ignore>other text</ignore></root>'\n    assert extract_data_from_xml(xml_string, 'data') == 'extract this'\n\ndef test_extract_nonexistent_tag():\n    xml_string = '<root><data>extract this</data><ignore>other text</ignore></root>'\n    assert extract_data_from_xml(xml_string, 'nonexistent') is None\n\ndef test_multiple_elements_same_tag():\n    xml_string = '<root><data>text1</data><data>text2</data></root>'\n    assert extract_data_from_xml(xml_string, 'data') == 'text1'  # Only the first one is extracted\n\ndef test_empty_xml():\n    xml_string = '<root></root>'\n    assert extract_data_from_xml(xml_string, 'data') is None\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000168", "row_id": 168, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to parse and extract specific data from XML using `xml.etree.ElementTree`"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to evaluate a postfix expression (Reverse Polish Notation)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef evaluate_postfix(expression):\n    \"\"\"\n    Evaluates a postfix expression (also known as Reverse Polish Notation).\n    \n    Arguments:\n    expression -- A string containing the postfix expression to be evaluated.\n    \n    Returns:\n    The result of the postfix expression evaluation.\n    \"\"\"\n    stack = []\n    tokens = expression.split()\n    \n    for token in tokens:\n        if token.isdigit():  # Check if the token is a digit\n            stack.append(int(token))\n        else:\n            # Pop the last two elements from the stack\n            right_operand = stack.pop()\n            left_operand = stack.pop()\n            # Perform the operation\n            if token == '+':\n                stack.append(left_operand + right_operand)\n            elif token == '-':\n                stack.append(left_operand - right_operand)\n            elif token == '*':\n                stack.append(left_operand * right_operand)\n            elif token == '/':\n                stack.append(left_operand // right_operand)  # Integer division\n    \n    # The result will be the only element left in the stack\n    return stack.pop()\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import evaluate_postfix\n\ndef test_simple_addition():\n    assert evaluate_postfix(\"3 4 +\") == 7\n\ndef test_simple_subtraction():\n    assert evaluate_postfix(\"10 5 -\") == 5\n\ndef test_simple_multiplication():\n    assert evaluate_postfix(\"3 5 *\") == 15\n\ndef test_simple_division():\n    assert evaluate_postfix(\"20 4 /\") == 5\n\ndef test_complex_expression():\n    assert evaluate_postfix(\"5 1 2 + 4 * + 3 -\") == 14\n\ndef test_invalid_expression():\n    try:\n        evaluate_postfix(\"5 1 2 + 4 * + 3 a\")\n    except ValueError:\n        # This is expected, indicating that the function correctly handles invalid inputs\n        pass\n    else:\n        assert False, \"Expected a ValueError for invalid input\"\n\ndef test_divide_by_zero():\n    try:\n        evaluate_postfix(\"20 0 /\")\n    except ValueError:\n        # This is expected\n        pass\n    else:\n        assert False, \"Expected a ValueError when dividing by zero\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000169", "row_id": 169, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to evaluate a postfix expression (Reverse Polish Notation)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the sum of the first `n` natural numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_of_naturals(n):\n    \"\"\"\n    Returns the sum of the first n natural numbers.\n    \"\"\"\n    return n * (n + 1) // 2\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_of_naturals\n\ndef test_sum_of_naturals_positive_numbers():\n    assert sum_of_naturals(5) == 15\n\ndef test_sum_of_naturals_zero():\n    assert sum_of_naturals(0) == 0\n\ndef test_sum_of_naturals_one():\n    assert sum_of_naturals(1) == 1\n\ndef test_sum_of_naturals_large_number():\n    assert sum_of_naturals(100) == 5050\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000170", "row_id": 170, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the sum of the first `n` natural numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the longest continuous substring that can be formed with at most two distinct characters in a given string. For example, for the input string \"aabacbebebe\", the function should return 7, as the longest substring that can be formed with at most two distinct characters is \"cbebebe\"."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_substring_with_two_distinct_chars(s: str) -> int:\n    \"\"\"\n    Finds the longest substring of the given string `s` that contains at most two distinct characters.\n    \"\"\"\n    if not s:\n        return 0\n\n    max_length = 1\n    start = 0\n    char_map = {}\n    max_length_char = s[0]\n\n    for end in range(len(s)):\n        char_map[s[end]] = char_map.get(s[end], 0) + 1\n\n        while len(char_map) > 2:\n            char_map[s[start]] -= 1\n            if char_map[s[start]] == 0:\n                del char_map[s[start]]\n            start += 1\n\n        if end - start + 1 > max_length:\n            max_length = end - start + 1\n            max_length_char = s[start:end+1]\n\n    return max_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import longest_substring_with_two_distinct_chars\n\ndef test_longest_substring_with_two_distinct_chars():\n    assert longest_substring_with_two_distinct_chars(\"aabacbebebe\") == 7\n    assert longest_substring_with_two_distinct_chars(\"ccaabbb\") == 5\n    assert longest_substring_with_two_distinct_chars(\"abcabc\") == 3\n    assert longest_substring_with_two_distinct_chars(\"a\") == 1\n    assert longest_substring_with_two_distinct_chars(\"\") == 0\n    assert longest_substring_with_two_distinct_chars(\"bbbbbb\") == 6\n    assert longest_substring_with_two_distinct_chars(\"abaccc\") == 5\n\n# Testing edge cases\ndef test_longest_substring_with_two_distinct_chars_edge_cases():\n    assert longest_substring_with_two_distinct_chars(\"a\") == 1\n    assert longest_substring_with_two_distinct_chars(\"\") == 0\n    assert longest_substring_with_two_distinct_chars(\"ab\") == 2\n    assert longest_substring_with_two_distinct_chars(\"aab\") == 3\n    assert longest_substring_with_two_distinct_chars(\"aabb\") == 4\n    assert longest_substring_with_two_distinct_chars(\"aabbcc\") == 5\n    assert longest_substring_with_two_distinct_chars(\"aabbcccc\") == 6\n\n# Testing strings with more than two distinct characters\ndef test_longest_substring_with_two_distinct_chars_more_than_two():\n    assert longest_substring_with_two_distinct_chars(\"aabbccdde\") == 6\n    assert longest_substring_with_two_distinct_chars(\"abcdeff\") == 5\n    assert longest_substring_with_two_distinct_chars(\"abccdddddef\") == 6\n    assert longest_substring_with_two_distinct_chars(\"abcde\") == 2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000174", "row_id": 174, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the longest continuous substring that can be formed with at most two distinct characters in a given string. For example, for the input string \"aabacbebebe\", the function should return 7, as the longest substring that can be formed with at most two distinct characters is \"cbebebe\"."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to print the first nth Fibonacci numbers in the format `[F(1), F(2), F(3), ..., F(n)]`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci(n):\n    \"\"\"\n    Returns the first n Fibonacci numbers as a list.\n    \"\"\"\n    if n < 1:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    \n    fib_sequence = [0, 1]\n    for i in range(2, n):\n        next_fib = fib_sequence[-1] + fib_sequence[-2]\n        fib_sequence.append(next_fib)\n    \n    return fib_sequence\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import fibonacci\n\ndef test_fibonacci_positive():\n    assert fibonacci(5) == [0, 1, 1, 2, 3]\n\ndef test_fibonacci_single():\n    assert fibonacci(1) == [0]\n\ndef test_fibonacci_two():\n    assert fibonacci(2) == [0, 1]\n\ndef test_fibonacci_zero():\n    assert fibonacci(0) == []\n\ndef test_fibonacci_negative():\n    assert fibonacci(-5) == []\n``` \n<|Test End|>"}], "metadata": {"prompt_id": "00000175", "row_id": 175, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to print the first nth Fibonacci numbers in the format `[F(1), F(2), F(3), ..., F(n)]`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the minimum number of deletions required to make a string a palindrome."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_deletions_to_palindrome(s):\n    \"\"\"\n    Returns the minimum number of deletions required to make the string a palindrome.\n    \"\"\"\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Fill the dp table\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1\n    \n    return dp[0][n - 1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_deletions_to_palindrome():\n    assert min_deletions_to_palindrome(\"abca\") == 1\n    assert min_deletions_to_palindrome(\"abcba\") == 0\n    assert min_deletions_to_palindrome(\"abcde\") == 4\n    assert min_deletions_to_palindrome(\"aaa\") == 0\n    assert min_deletions_to_palindrome(\"abccba\") == 0\n    assert min_deletions_to_palindrome(\"abcddcba\") == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000176", "row_id": 176, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the minimum number of deletions required to make a string a palindrome."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort an array using the Quick Sort algorithm."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef quick_sort(arr):\n    \"\"\"\n    Sorts an array using the Quick Sort algorithm.\n    \n    Parameters:\n    arr (list): The list of elements to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[0]\n        less_than_pivot = [x for x in arr[1:] if x <= pivot]\n        greater_than_pivot = [x for x in arr[1:] if x > pivot]\n        return quick_sort(less_than_pivot) + [pivot] + quick_sort(greater_than_pivot)\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import quick_sort\n\ndef test_quick_sort_empty_list():\n    assert quick_sort([]) == []\n\ndef test_quick_sort_single_element():\n    assert quick_sort([5]) == [5]\n\ndef test_quick_sort_positive_numbers():\n    arr = [3, 6, 8, 10, 1, 2, 1]\n    assert quick_sort(arr) == [1, 1, 2, 3, 6, 8, 10]\n\ndef test_quick_sort_negative_numbers():\n    arr = [-3, -6, -8, -10, -1, -2, -1]\n    assert quick_sort(arr) == [-10, -8, -6, -3, -2, -1, -1]\n\ndef test_quick_sort_mixed_sign_numbers():\n    arr = [3, -6, 8, -10, 1, -2, 1]\n    assert quick_sort(arr) == [-10, -6, -2, 1, 1, 3, 8]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000177", "row_id": 177, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort an array using the Quick Sort algorithm."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to generate a Fibonacci sequence up to a given number `n`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef generate_fibonacci(n):\n    \"\"\"\n    Generate a Fibonacci sequence up to the number n.\n    \n    Parameters:\n    n (int): The upper limit for the Fibonacci sequence.\n    \n    Returns:\n    list: A list containing the Fibonacci sequence up to n.\n    \"\"\"\n    sequence = []\n    a, b = 0, 1\n    while a <= n:\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import generate_fibonacci\n\ndef test_generate_fibonacci_with_10():\n    assert generate_fibonacci(10) == [0, 1, 1, 2, 3, 5, 8]\n\ndef test_generate_fibonacci_with_1():\n    assert generate_fibonacci(1) == [0, 1, 1]\n\ndef test_generate_fibonacci_with_0():\n    assert generate_fibonacci(0) == [0]\n\ndef test_generate_fibonacci_with_negative_number():\n    assert generate_fibonacci(-1) == [0]\n\ndef test_generate_fibonacci_with_large_number():\n    assert generate_fibonacci(100) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000178", "row_id": 178, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to generate a Fibonacci sequence up to a given number `n`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given string `s` contains a sequence of consecutive repeating characters that are not adjacent to each other."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef has_consecutive_repeating_chars(s):\n    \"\"\"\n    Returns True if the string contains a sequence of at least two consecutive repeating characters \n    that are not adjacent to each other. Otherwise, returns False.\n    \"\"\"\n    if len(s) < 2:\n        return False\n    \n    prev_char = s[0]\n    consecutive_count = 1\n    \n    for char in s[1:]:\n        if char == prev_char:\n            consecutive_count += 1\n        else:\n            if consecutive_count >= 2:\n                return True\n            consecutive_count = 1\n        prev_char = char\n    \n    # Check the last sequence\n    return consecutive_count >= 2\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import has_consecutive_repeating_chars\n\ndef test_consecutive_repeating_chars():\n    assert not has_consecutive_repeating_chars(\"abc\")  # No consecutive repeating characters\n    assert not has_consecutive_repeating_chars(\"aaab\") # 'a' repeats but not separated by non-repeating chars\n    assert has_consecutive_repeating_chars(\"aabb\")    # 'a' and 'b' have consecutive repeats\n    assert has_consecutive_repeating_chars(\"abbc\")    # 'b' has a non-adjacent repeat\n    assert has_consecutive_repeating_chars(\"cabbac\")  # 'b' has a non-adjacent repeat\n    assert not has_consecutive_repeating_chars(\"aaab\") # Single segment of 3 'a's without non-repeating char\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000180", "row_id": 180, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given string `s` contains a sequence of consecutive repeating characters that are not adjacent to each other."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find Fibonacci numbers up to a given limit 'n' and store the results in a list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci_up_to_n(n):\n    \"\"\"\n    Returns a list containing Fibonacci numbers up to the given limit 'n'.\n    \n    Parameters:\n    n (int): The upper limit for generating Fibonacci numbers.\n    \n    Returns:\n    list: A list of Fibonacci numbers up to 'n'.\n    \"\"\"\n    if n < 0:\n        return []\n    fib_sequence = [0, 1]\n    next_fib = fib_sequence[-1] + fib_sequence[-2]\n    while next_fib <= n:\n        fib_sequence.append(next_fib)\n        next_fib = fib_sequence[-1] + fib_sequence[-2]\n    return fib_sequence\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_fibonacci_up_to_n():\n    assert fibonacci_up_to_n(10) == [0, 1, 1, 2, 3, 5, 8]\n    assert fibonacci_up_to_n(1) == [0, 1, 1]\n    assert fibonacci_up_to_n(0) == [0]\n    assert fibonacci_up_to_n(19) == [0, 1, 1, 2, 3, 5, 8, 13, 21]\n    assert fibonacci_up_to_n(34) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    assert fibonacci_up_to_n(-1) == []\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000181", "row_id": 181, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find Fibonacci numbers up to a given limit 'n' and store the results in a list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find all possible subsets of a set. You can return them as a list of lists."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\n\ndef find_subsets(nums: List[int]) -> List[List[int]]:\n    \"\"\"\n    Returns all possible subsets of the given list of numbers.\n    \"\"\"\n    subsets = [[]]\n    for num in nums:\n        subsets += [subset + [num] for subset in subsets]\n    return subsets\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_subsets\n\ndef test_find_subsets_empty():\n    assert find_subsets([]) == [[]]\n\ndef test_find_subsets_one_element():\n    assert find_subsets([1]) == [[], [1]]\n\ndef test_find_subsets_two_elements():\n    assert find_subsets([1, 2]) == [[], [1], [2], [1, 2]]\n\ndef test_find_subsets_three_elements():\n    assert find_subsets([1, 2, 3]) == [\n        [], \n        [1], \n        [2], \n        [1, 2], \n        [3], \n        [1, 3], \n        [2, 3], \n        [1, 2, 3]\n    ]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000182", "row_id": 182, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find all possible subsets of a set. You can return them as a list of lists."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a string. What are the concepts used here?"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef reverse_string(s):\n    \"\"\"\n    Returns the reversed version of the input string s.\n    \"\"\"\n    return s[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_reverse_string():\n    assert reverse_string(\"hello\") == \"olleh\"\n    assert reverse_string(\"Python\") == \"nohtyP\"\n    assert reverse_string(\"\") == \"\"\n    assert reverse_string(\"a\") == \"a\"\n    assert reverse_string(\"12345\") == \"54321\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000183", "row_id": 183, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a string. What are the concepts used here?"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort a list of integers in ascending order using the quicksort algorithm. Each integer is in the range of [0, 100000]."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef quicksort(arr):\n    \"\"\"\n    Sorts an array of integers in ascending order using the quicksort algorithm.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n```\n<|Solution End|>\n\n<|Test Begin|>\r\n```python\nfrom solution import quicksort\n\ndef test_quicksort_empty_list():\n    assert quicksort([]) == []\n\ndef test_quicksort_single_element():\n    assert quicksort([5]) == [5]\n\ndef test_quicksort_sorted_list():\n    assert quicksort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_quicksort_reverse_sorted_list():\n    assert quicksort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n\ndef test_quicksort_random_list():\n    assert quicksort([3, 6, 8, 10, 1, 2, 1]) == [1, 1, 2, 3, 6, 8, 10]\n\ndef test_quicksort_large_random_list():\n    import random\n    arr = [random.randint(0, 100000) for _ in range(1000)]\n    sorted_arr = sorted(arr)\n    assert quicksort(arr) == sorted_arr\n\ndef test_quicksort_with_duplicates():\n    assert quicksort([4, 2, 4, 8, 3, 2]) == [2, 2, 3, 4, 4, 8]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000184", "row_id": 184, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort a list of integers in ascending order using the quicksort algorithm. Each integer is in the range of [0, 100000]."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the smallest number that is a multiple of both given integers. To solve this, create a helper function to calculate the greatest common divisor (GCD) of two numbers and then use this helper function to find the least common multiple (LCM) of two numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using Euclid's algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    \"\"\"\n    Returns the least common multiple (LCM) of two numbers.\n    \"\"\"\n    return abs(a * b) // gcd(a, b)\n```\n<|Solution End|>\n\n<|Test Begin|>\r\n```python\nfrom solution import gcd, lcm\n\ndef test_gcd():\n    assert gcd(12, 18) == 6\n    assert gcd(7, 13) == 1\n    assert gcd(98, 56) == 14\n\ndef test_lcm():\n    assert lcm(12, 18) == 36\n    assert lcm(7, 13) == 91\n    assert lcm(98, 56) == 392\n\ndef test_lcm_with_gcd():\n    # LCM * GCD = |a*b|\n    a, b = 30, 45\n    assert lcm(a, b) * gcd(a, b) == abs(a * b)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000185", "row_id": 185, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the smallest number that is a multiple of both given integers. To solve this, create a helper function to calculate the greatest common divisor (GCD) of two numbers and then use this helper function to find the least common multiple (LCM) of two numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a linked list using a stack data structure."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass ListNode:\n    def __init__(self, value=0, next=None):\n        self.value = value\n        self.next = next\n\ndef reverse_linked_list_with_stack(head):\n    \"\"\"\n    Reverses a linked list by using a stack data structure.\n    \"\"\"\n    if not head:\n        return None\n    \n    stack = []\n    current = head\n    # Push all elements of the linked list onto the stack\n    while current:\n        stack.append(current)\n        current = current.next\n    \n    if not stack:\n        return None\n    \n    # Pop elements from the stack to form the reversed linked list\n    new_head = stack.pop()\n    current = new_head\n    while stack:\n        current.next = stack.pop()\n        current = current.next\n    current.next = None\n    \n    return new_head\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import ListNode, reverse_linked_list_with_stack\n\ndef create_linked_list(elements):\n    if not elements:\n        return None\n    head = ListNode(elements[0])\n    current = head\n    for element in elements[1:]:\n        current.next = ListNode(element)\n        current = current.next\n    return head\n\ndef linked_list_to_list(head):\n    result = []\n    while head:\n        result.append(head.value)\n        head = head.next\n    return result\n\ndef test_reverse_linked_list_with_stack():\n    # Test with a simple linked list\n    head = create_linked_list([1, 2, 3, 4, 5])\n    reversed_head = reverse_linked_list_with_stack(head)\n    assert linked_list_to_list(reversed_head) == [5, 4, 3, 2, 1]\n    \n    # Test with an empty linked list\n    head = create_linked_list([])\n    assert linked_list_to_list(reverse_linked_list_with_stack(head)) == []\n    \n    # Test with a single element linked list\n    head = create_linked_list([1])\n    assert linked_list_to_list(reverse_linked_list_with_stack(head)) == [1]\n    \n    # Test with a reversed linked list\n    head = create_linked_list([5, 4, 3, 2, 1])\n    assert linked_list_to_list(reverse_linked_list_with_stack(head)) == [1, 2, 3, 4, 5]\n\ntest_reverse_linked_list_with_stack()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000186", "row_id": 186, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a linked list using a stack data structure."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the Floyd Warshall shortest path algorithm from a given directed graph. The graph is represented using an adjacency matrix."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport numpy as np\n\ndef floyd_warshall(graph):\n    \"\"\"\n    Finds the shortest paths between all pairs of vertices in a given directed graph using the Floyd Warshall algorithm.\n    The graph is represented as an adjacency matrix where graph[i][j] is the weight of the edge from vertex i to vertex j.\n    If there is no direct edge, graph[i][j] is set to np.inf.\n    \"\"\"\n    # Copy the graph matrix as we will be modifying it\n    dist = np.copy(graph)\n    \n    # Apply Floyd Warshall algorithm\n    for k in range(len(graph)):\n        for i in range(len(graph)):\n            for j in range(len(graph)):\n                if dist[i][k] + dist[k][j] < dist[i][j]:\n                    dist[i][j] = dist[i][k] + dist[k][j]\n    \n    return dist\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport numpy as np\nfrom solution import floyd_warshall\n\ndef test_floyd_warshall_empty_graph():\n    graph = np.array([[np.inf, 2, np.inf], [np.inf, np.inf, 3], [4, np.inf, np.inf]])\n    expected = np.array([[np.inf, 2, 5], [np.inf, np.inf, 3], [4, np.inf, np.inf]])\n    assert np.array_equal(floyd_warshall(graph), expected)\n\ndef test_floyd_warshall_single_node_graph():\n    graph = np.array([[0]])\n    expected = np.array([[0]])\n    assert np.array_equal(floyd_warshall(graph), expected)\n\ndef test_floyd_warshall_no_negative_cycle():\n    graph = np.array([[0, 5, 10], [np.inf, 0, 3], [1, np.inf, 0]])\n    expected = np.array([[0, 5, 8], [4, 0, 3], [1, 6, 0]])\n    assert np.array_equal(floyd_warshall(graph), expected)\n\ndef test_floyd_warshall_with_negative_cycle():\n    graph = np.array([[0, -2, 1], [-1, 0, -1], [1, 1, 0]])\n    expected = np.array([[0, -2, -1], [-1, 0, -1], [1, 1, 0]])\n    assert np.array_equal(floyd_warshall(graph), expected)\n\ndef test_floyd_warshall_general_case():\n    graph = np.array([[0, -2, 1, np.inf], [np.inf, 0, -1, 4], [np.inf, np.inf, 0, -1], [2, np.inf, np.inf, 0]])\n    expected = np.array([[0, -2, -1, 1], [2, 0, -1, 3], [2, 1, 0, -1], [0, 2, 1, 0]])\n    assert np.array_equal(floyd_warshall(graph), expected)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000187", "row_id": 187, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the Floyd Warshall shortest path algorithm from a given directed graph. The graph is represented using an adjacency matrix."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the nth Fibonacci number using recursion."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci(n):\n    \"\"\"\n    Returns the nth Fibonacci number.\n    \n    Args:\n    n (int): The position in the Fibonacci sequence.\n    \n    Returns:\n    int: The nth Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import fibonacci\n\ndef test_fibonacci_zero():\n    assert fibonacci(0) is None\n\ndef test_fibonacci_one():\n    assert fibonacci(1) == 0\n\ndef test_fibonacci_two():\n    assert fibonacci(2) == 1\n\ndef test_fibonacci_three():\n    assert fibonacci(3) == 1\n\ndef test_fibonacci_four():\n    assert fibonacci(4) == 2\n\ndef test_fibonacci_five():\n    assert fibonacci(5) == 3\n\ndef test_fibonacci_six():\n    assert fibonacci(6) == 5\n\ndef test_fibonacci_large_number():\n    assert fibonacci(10) == 34\n\ndef test_fibonacci_invalid_input():\n    try:\n        fibonacci(-1)\n    except ValueError as e:\n        assert str(e) == \"n must be a positive integer\"\n    else:\n        assert False, \"ValueError was expected\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000188", "row_id": 188, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the nth Fibonacci number using recursion."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given number is a Fibonacci number or not."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_fibonacci(n):\n    \"\"\"\n    Returns True if n is a Fibonacci number, False otherwise.\n    \"\"\"\n    # A number is a Fibonacci only if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square\n    import math\n    \n    def is_perfect_square(x):\n        s = int(math.sqrt(x))\n        return s * s == x\n    \n    return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)\n```\n<|Solution End|>\n\n<|Test Begin|>```python\nfrom solution import is_fibonacci\n\ndef test_is_fibonacci_0():\n    assert is_fibonacci(0) == True\n\ndef test_is_fibonacci_1():\n    assert is_fibonacci(1) == True\n\ndef test_is_fibonacci_8():\n    assert is_fibonacci(8) == True\n\ndef test_is_fibonacci_13():\n    assert is_fibonacci(13) == True\n\ndef test_is_fibonacci_34():\n    assert is_fibonacci(34) == True\n\ndef test_is_fibonacci_9():\n    assert is_fibonacci(9) == False\n\ndef test_is_fibonacci_25():\n    assert is_fibonacci(25) == False\n\ndef test_is_fibonacci_55():\n    assert is_fibonacci(55) == True\n\ndef test_is_fibonacci_89():\n    assert is_fibonacci(89) == True\n\ndef test_is_fibonacci_144():\n    assert is_fibonacci(144) == True\n\ndef test_is_fibonacci_145():\n    assert is_fibonacci(145) == False\n\ndef test_is_fibonacci_negative():\n    assert is_fibonacci(-1) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000189", "row_id": 189, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given number is a Fibonacci number or not."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine if a number is a \"perfect square\" number. A \"perfect square\" number is an integer that is the square of an integer. For example, 16 is a perfect square because it is 4 squared."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Checks if a given number n is a perfect square.\n    \n    A perfect square is an integer that is the square of an integer.\n    \"\"\"\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return n == root * root\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport unittest\n\ndef is_perfect_square(n):\n    \"\"\"Checks if a given number n is a perfect square.\"\"\"\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return n == root * root\n\ndef test_is_perfect_square_positive_numbers():\n    assert is_perfect_square(1) == True\n    assert is_perfect_square(4) == True\n    assert is_perfect_square(16) == True\n    assert is_perfect_square(25) == True\n\ndef test_is_perfect_square_zero():\n    assert is_perfect_square(0) == True\n\ndef test_is_perfect_square_negative_numbers():\n    assert is_perfect_square(-1) == False\n    assert is_perfect_square(-16) == False\n\ndef test_is_perfect_square_non_perfect_squares():\n    assert is_perfect_square(2) == False\n    assert is_perfect_square(5) == False\n    assert is_perfect_square(10) == False\n    assert is_perfect_square(15) == False\n\ndef test_is_perfect_square_large_numbers():\n    assert is_perfect_square(1681) == True\n    assert is_perfect_square(676) == True\n    assert is_perfect_square(315186841) == True\n\nif __name__ == \"__main__\":\n    unittest.main()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000190", "row_id": 190, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine if a number is a \"perfect square\" number. A \"perfect square\" number is an integer that is the square of an integer. For example, 16 is a perfect square because it is 4 squared."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a linked list in place."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass ListNode:\n    def __init__(self, value=0, next=None):\n        self.value = value\n        self.next = next\n\ndef reverse_linked_list(head):\n    \"\"\"\n    Reverses a linked list in place.\n    \n    Args:\n    head (ListNode): The head node of the linked list.\n    \n    Returns:\n    ListNode: The new head of the reversed linked list.\n    \"\"\"\n    prev = None\n    current = head\n    while current:\n        next_node = current.next  # Store the next node\n        current.next = prev       # Reverse the link\n        prev = current            # Move prev and current one step forward\n        current = next_node\n    return prev\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import ListNode, reverse_linked_list\n\ndef create_linked_list(values):\n    if not values:\n        return None\n    head = ListNode(values[0])\n    current = head\n    for value in values[1:]:\n        current.next = ListNode(value)\n        current = current.next\n    return head\n\ndef linked_list_to_list(head):\n    values = []\n    current = head\n    while current:\n        values.append(current.value)\n        current = current.next\n    return values\n\ndef test_reverse_linked_list():\n    assert linked_list_to_list(reverse_linked_list(None)) == []\n    assert linked_list_to_list(reverse_linked_list(create_linked_list([1]))) == [1]\n    assert linked_list_to_list(reverse_linked_list(create_linked_list([1, 2, 3, 4, 5]))) == [5, 4, 3, 2, 1]\n    assert linked_list_to_list(reverse_linked_list(create_linked_list([1, 3, 5, 7, 9]))) == [9, 7, 5, 3, 1]\n\nimport pytest\n@pytest.mark.parametrize(\"values, expected\", [\n    ([], []),\n    ([1], [1]),\n    ([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]),\n    ([1, 3, 5, 7, 9], [9, 7, 5, 3, 1])\n])\ndef test_reverse_linked_list_parametrized(values, expected):\n    head = create_linked_list(values)\n    reversed_head = reverse_linked_list(head)\n    assert linked_list_to_list(reversed_head) == expected\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000191", "row_id": 191, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a linked list in place."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the first repeating character in a string. If no character is repeating, return -1. For example, in the string \"programming\", the first repeating character is 'r'."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef first_repeating_char(s: str) -> int:\n    \"\"\"\n    Finds the first repeating character in the string `s` and returns its index.\n    If no character is repeating, returns -1.\n    \"\"\"\n    seen = set()\n    for i, char in enumerate(s):\n        if char in seen:\n            return i\n        seen.add(char)\n    return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_first_repeating_char():\n    assert first_repeating_char(\"programming\") == 2\n    assert first_repeating_char(\"abcdef\") == -1\n    assert first_repeating_char(\"aabbcc\") == 1\n    assert first_repeating_char(\"ababab\") == 1\n    assert first_repeating_char(\"aa\") == 1\n    assert first_repeating_char(\"\") == -1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000192", "row_id": 192, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the first repeating character in a string. If no character is repeating, return -1. For example, in the string \"programming\", the first repeating character is 'r'."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a given string to a list of integers, where each integer is the ASCII value of each character in the string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef string_to_ascii_list(input_string):\n    \"\"\"\n    Converts a given string to a list of integers, where each integer is the ASCII value of each character in the string.\n    \"\"\"\n    return [ord(char) for char in input_string]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_string_to_ascii_list():\n    assert string_to_ascii_list(\"AB\") == [65, 66]\n    assert string_to_ascii_list(\"Hello\") == [72, 101, 108, 108, 111]\n    assert string_to_ascii_list(\"\") == []\n    assert string_to_ascii_list(\"123\") == [49, 50, 51]\n\ndef test_empty_string():\n    assert string_to_ascii_list(\"\") == []\n\ndef test_string_with_spaces():\n    assert string_to_ascii_list(\"Hello World!\") == [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000194", "row_id": 194, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a given string to a list of integers, where each integer is the ASCII value of each character in the string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a binary tree to its mirror. The function should take a single parameter, which is the root of the binary tree."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef mirror_tree(root):\n    \"\"\"\n    Returns the mirror image of the given binary tree.\n    \"\"\"\n    if root is not None:\n        root.left, root.right = mirror_tree(root.right), mirror_tree(root.left)\n    return root\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import mirror_tree, TreeNode\n\ndef test_mirror_tree_simple():\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    mirrored_root = mirror_tree(root)\n    assert mirrored_root.left.val == 3\n    assert mirrored_root.right.val == 2\n\ndef test_mirror_tree_complex():\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    mirrored_root = mirror_tree(root)\n    assert mirrored_root.left.val == 3\n    assert mirrored_root.right.val == 2\n    assert mirrored_root.right.left.val == 5\n    assert mirrored_root.right.right.val == 4\n\ndef test_mirror_tree_single_node():\n    root = TreeNode(1)\n    mirrored_root = mirror_tree(root)\n    assert mirrored_root == root\n\ndef test_mirror_tree_empty():\n    mirrored_root = mirror_tree(None)\n    assert mirrored_root is None\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000195", "row_id": 195, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a binary tree to its mirror. The function should take a single parameter, which is the root of the binary tree."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the index of the substring within a given string using Rabin-Karp algorithm. The function should return the starting index of the first occurrence of the substring in the string. If the substring is not found, return -1."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef rabin_karp_search(text, pattern):\n    \"\"\"\n    Searches for a pattern in a given text using the Rabin-Karp algorithm.\n    Returns the first index of the pattern in the text, or -1 if not found.\n    \"\"\"\n    if len(pattern) == 0 or len(pattern) > len(text):\n        return -1\n\n    prime_num = 101\n    alphabet_len = 256\n    hash_pattern = 0\n    hash_text = 0\n    h = 1\n\n    # The value of h would be \"pow(alphabet_len, M-1)%prime_num\"\n    for i in range(len(pattern) - 1):\n        h = (h * alphabet_len) % prime_num\n\n    # Calculate the hash value of the pattern and first window of text\n    for i in range(len(pattern)):\n        hash_pattern = (alphabet_len * hash_pattern + ord(pattern[i])) % prime_num\n        hash_text = (alphabet_len * hash_text + ord(text[i])) % prime_num\n\n    # Slide the pattern over text one by one\n    for i in range(len(text) - len(pattern) + 1):\n        # Check the hash values of current window of text and pattern\n        # If the hash values match then only check for characters one by one\n        if hash_pattern == hash_text:\n            # Check for characters one by one\n            for j in range(len(pattern)):\n                if text[i + j] != pattern[j]:\n                    break\n            else:\n                # if pattern[0...M-1] = text[i, i+1, ...i+M-1]\n                return i\n\n        # Calculate hash value for next window of text: Remove leading digit,\n        # add trailing digit\n        if i < len(text) - len(pattern):\n            hash_text = (alphabet_len * (hash_text - ord(text[i]) * h) + ord(text[i + len(pattern)])) % prime_num\n\n            # We might get negative values of hash_text, converting it to\n            # positive\n            if hash_text < 0:\n                hash_text = hash_text + prime_num\n    return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_rabin_karp_search():\n    assert rabin_karp_search(\"hello world\", \"world\") == 6\n    assert rabin_karp_search(\"a quick brown fox jumps over the lazy dog\", \"quick\") == 2\n    assert rabin_karp_search(\"repeat repeat repeat\", \"repeat\") == 0\n    assert rabin_karp_search(\"pythonythonpython\", \"python\") == 6\n    assert rabin_karp_search(\"does not contain the pattern\", \"pattern\") == -1\n    assert rabin_karp_search(\"a random string with a\", \"a\") == 0\n    assert rabin_karp_search(\"the quick brown fox\", \"the quick brown fox jumps over the lazy dog\") == -1\n    assert rabin_karp_search(\"a\" * 10000, \"a\" * 100) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000196", "row_id": 196, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the index of the substring within a given string using Rabin-Karp algorithm. The function should return the starting index of the first occurrence of the substring in the string. If the substring is not found, return -1."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the nth Fibonacci number. The function should recursively call itself to find the result."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci(n):\n    \"\"\"\n    Returns the nth Fibonacci number.\n    \n    The Fibonacci sequence is a series of numbers where the next number is found by adding up the two numbers before it.\n    Starting with 0 and 1, the sequence goes 0, 1, 1, 2, 3, 5, 8, 13, and so forth.\n    \n    Args:\n    n (int): The position in the Fibonacci sequence.\n    \n    Returns:\n    int: The nth Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n```\n<|Solution End|>\n\n<|Test Begin|> \n```python\nfrom solution import fibonacci\n\ndef test_fibonacci_zero():\n    assert fibonacci(0) == 0\n\ndef test_fibonacci_one():\n    assert fibonacci(1) == 1\n\ndef test_fibonacci_two():\n    assert fibonacci(2) == 1\n\ndef test_fibonacci_five():\n    assert fibonacci(5) == 5\n\ndef test_fibonacci_twelve():\n    assert fibonacci(12) == 144\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000197", "row_id": 197, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the nth Fibonacci number. The function should recursively call itself to find the result."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the longest substring without repeating characters in a string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef length_of_longest_substring(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring without repeating characters.\n    \"\"\"\n    char_index_map = {}\n    left = 0\n    max_length = 0\n\n    for right in range(len(s)):\n        if s[right] in char_index_map:\n            left = max(left, char_index_map[s[right]] + 1)\n        char_index_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n\n    return max_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import length_of_longest_substring\n\ndef test_length_of_longest_substring_empty_string():\n    assert length_of_longest_substring(\"\") == 0\n\ndef test_length_of_longest_substring_single_character():\n    assert length_of_longest_substring(\"a\") == 1\n\ndef test_length_of_longest_substring_without_repeating_characters():\n    assert length_of_longest_substring(\"abcabcbb\") == 3\n    assert length_of_longest_substring(\"bbbbb\") == 1\n    assert length_of_longest_substring(\"pwwkew\") == 3\n\ndef test_length_of_longest_substring_with_repeating_characters():\n    assert length_of_longest_substring(\"dvdf\") == 3\n    assert length_of_longest_substring(\"abba\") == 2\n    assert length_of_longest_substring(\"tmmzuxt\") == 5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000199", "row_id": 199, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the longest substring without repeating characters in a string."}}
