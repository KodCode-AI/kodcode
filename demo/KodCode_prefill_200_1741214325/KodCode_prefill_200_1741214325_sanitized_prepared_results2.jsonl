{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to remove duplicate characters from a string, maintaining the original order of characters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef remove_duplicates(input_string: str) -> str:\n    \"\"\"\n    Returns a new string with duplicate characters removed while preserving the original order.\n    \"\"\"\n    seen = set()\n    result = []\n    for char in input_string:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n    return ''.join(result)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import remove_duplicates\n\ndef test_remove_duplicates_with_duplicates():\n    assert remove_duplicates(\"programming\") == \"progamin\"\n\ndef test_remove_duplicates_no_duplicates():\n    assert remove_duplicates(\"abcdef\") == \"abcdef\"\n\ndef test_remove_duplicates_with_spaces():\n    assert remove_duplicates(\"a b b c c d\") == \"a b c d\"\n\ndef test_remove_duplicates_empty_string():\n    assert remove_duplicates(\"\") == \"\"\n\ndef test_remove_duplicates_with_special_characters():\n    assert remove_duplicates(\"!!@@##$$%%^^&&**\") == \"!@#$%^&*\"\n\ndef test_remove_duplicates_multiple_occurrences():\n    assert remove_duplicates(\"taco cat\") == \"tac o \"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000000", "row_id": 0, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to remove duplicate characters from a string, maintaining the original order of characters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort an array using the selection sort algorithm."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef selection_sort(arr):\n    \"\"\"\n    Sorts an array using the selection sort algorithm.\n    :param arr: List of integers to be sorted\n    :return: Sorted list of integers\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        # Find the minimum element in remaining unsorted array\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        \n        # Swap the found minimum element with the first element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import selection_sort\n\ndef test_selection_sort_with_positive_numbers():\n    assert selection_sort([64, 25, 12, 22, 11]) == [11, 12, 22, 25, 64]\n\ndef test_selection_sort_with_negative_numbers():\n    assert selection_sort([-64, -25, -12, -22, -11]) == [-64, -25, -22, -12, -11]\n\ndef test_selection_sort_with_mixed_numbers():\n    assert selection_sort([-1, 5, -7, 8, 0, 12, 10]) == [-7, -1, 0, 5, 8, 10, 12]\n\ndef test_selection_sort_with_single_element():\n    assert selection_sort([5]) == [5]\n\ndef test_selection_sort_with_empty_list():\n    assert selection_sort([]) == []\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000001", "row_id": 1, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort an array using the selection sort algorithm."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum depth of a binary search tree (BST)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_depth_bst(root: TreeNode) -> int:\n    \"\"\"\n    Returns the maximum depth of a binary search tree.\n    \"\"\"\n    if root is None:\n        return 0\n    else:\n        left_depth = max_depth_bst(root.left)\n        right_depth = max_depth_bst(root.right)\n        return max(left_depth, right_depth) + 1\n```\n<|Solution End|>\n\n<|Test Begin|>``\n```python\nfrom solution import TreeNode, max_depth_bst\n\ndef test_max_depth_bst_empty_tree():\n    assert max_depth_bst(None) == 0\n\ndef test_max_depth_bst_single_node():\n    root = TreeNode(5)\n    assert max_depth_bst(root) == 1\n\ndef test_max_depth_bst_balanced_tree():\n    root = TreeNode(5)\n    root.left = TreeNode(3)\n    root.right = TreeNode(8)\n    root.left.left = TreeNode(2)\n    root.left.right = TreeNode(4)\n    root.right.left = TreeNode(7)\n    root.right.right = TreeNode(9)\n    assert max_depth_bst(root) == 3\n\ndef test_max_depth_bst_skewed_right():\n    root = TreeNode(1)\n    root.right = TreeNode(2)\n    root.right.right = TreeNode(3)\n    assert max_depth_bst(root) == 3\n\ndef test_max_depth_bst_skewed_left():\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.left.left = TreeNode(3)\n    assert max_depth_bst(root) == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000002", "row_id": 2, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum depth of a binary search tree (BST)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to merge two sorted lists into one sorted list using the merge function from the heapq module. Since heapq's merge function can be used to merge multiple iterables directly, your function should accept two lists, sort each individually if they are not already sorted, and then merge them using heapq.merge(). Ensure the output is a list, not a heapq.merge object."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nimport heapq\n\ndef merge_sorted_lists(lst1, lst2):\n    \"\"\"\n    Given two sorted lists, it merges them into a single sorted list\n    using the heapq.merge function.\n    \"\"\"\n    # Ensure both lists are sorted\n    sorted_lst1 = sorted(lst1)\n    sorted_lst2 = sorted(lst2)\n    \n    # Use heapq.merge to merge the two sorted lists\n    result = list(heapq.merge(sorted_lst1, sorted_lst2))\n    \n    return result\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\nfrom heapq import merge as test_merge\nfrom solution import merge_sorted_lists\n\ndef test_merge_sorted_lists_positive():\n    assert merge_sorted_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]\n\ndef test_merge_empty_lists():\n    assert merge_sorted_lists([], []) == []\n\ndef test_merge_with_duplicates():\n    assert merge_sorted_lists([1, 3, 3], [2, 3, 4]) == [1, 2, 3, 3, 3, 4]\n\ndef test_merge_mixed_signs():\n    assert merge_sorted_lists([-2, 0, 2], [-3, 1, 3]) == [-3, -2, 0, 1, 2, 3]\n\ndef test_merge_with_same_elements():\n    assert merge_sorted_lists([1, 2, 3], [1, 2, 3]) == [1, 1, 2, 2, 3, 3]\n\ndef test_merge_with_different_lengths():\n    assert merge_sorted_lists([1, 3, 5, 7], [2, 4, 6]) == [1, 2, 3, 4, 5, 6, 7]\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000003", "row_id": 3, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to merge two sorted lists into one sorted list using the merge function from the heapq module. Since heapq's merge function can be used to merge multiple iterables directly, your function should accept two lists, sort each individually if they are not already sorted, and then merge them using heapq.merge(). Ensure the output is a list, not a heapq.merge object."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the sum of all numbers in a list using recursion."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_recursive(numbers):\n    \"\"\"\n    Calculate the sum of all numbers in a list using recursion.\n    \n    Args:\n        numbers (list): A list of integers or floats.\n    \n    Returns:\n        int or float: The sum of all numbers in the list.\n    \"\"\"\n    if not numbers:\n        return 0\n    else:\n        return numbers[0] + sum_recursive(numbers[1:])\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_sum_recursive_empty_list():\n    assert sum_recursive([]) == 0\n\ndef test_sum_recursive_positive_numbers():\n    assert sum_recursive([1, 2, 3, 4, 5]) == 15\n\ndef test_sum_recursive_with_zeros():\n    assert sum_recursive([0, 0, 0, 0]) == 0\n\ndef test_sum_recursive_negative_numbers():\n    assert sum_recursive([-1, -2, -3, -4, -5]) == -15\n\ndef test_sum_recursive_mixed_numbers():\n    assert sum_recursive([-1, 1, -2, 2, -3, 3]) == 0\n\ndef test_sum_recursive_single_element():\n    assert sum_recursive([42]) == 42\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000004", "row_id": 4, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the sum of all numbers in a list using recursion."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a string to an integer. Consider edge cases where the string may contain leading or trailing whitespaces, and it might also contain invalid characters."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef str_to_int(s: str) -> int:\n    \"\"\"\n    Converts a string to an integer, handling leading/trailing whitespaces and invalid characters.\n    \"\"\"\n    s = s.strip()  # Remove leading and trailing whitespaces\n    if not s:  # Empty string after stripping\n        return 0\n    \n    sign = 1\n    i = 0\n    if s[0] == '-':  # Negative number\n        sign = -1\n        i = 1\n    elif s[0] == '+':\n        i = 1\n    \n    num = 0\n    for c in s[i:]:\n        if not '0' <= c <= '9':\n            break\n        num = num * 10 + (ord(c) - ord('0'))\n    \n    return max(-2**31, min(num * sign, 2**31 - 1))\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef test_str_to_int_valid():\n    assert str_to_int(\"42\") == 42\n    assert str_to_int(\"   -42\") == -42\n    assert str_to_int(\"4193 with words\") == 4193\n\ndef test_str_to_int_leading_whitespace():\n    assert str_to_int(\"     42\") == 42\n    assert str_to_int(\"     -42\") == -42\n\ndef test_str_to_int_trailing_whitespace():\n    assert str_to_int(\"42   \") == 42\n    assert str_to_int(\"-42   \") == -42\n\ndef test_str_to_int_invalid_characters():\n    assert str_to_int(\"4193.23+193\") == 4193\n    assert str_to_int(\"words and 987\") == 0\n    assert str_to_int(\"-91283472332\") == -2147483648  # Lower bound of int32\n\ndef test_str_to_int_empty_string():\n    assert str_to_int(\"\") == 0\n\ndef test_str_to_int_negative_with_space():\n    assert str_to_int(\"  -42abc\") == -42\n\ndef test_str_to_int_positive_with_space():\n    assert str_to_int(\"  +42abc\") == 42\n\ndef test_str_to_int_overflow():\n    assert str_to_int(\"2147483648\") == 2147483647  # Upper bound of int32\n    assert str_to_int(\"-2147483649\") == -2147483648  # Lower bound of int32\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000005", "row_id": 5, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a string to an integer. Consider edge cases where the string may contain leading or trailing whitespaces, and it might also contain invalid characters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to search for a specific word in a text file. The function should take two parameters: the file path and the word to search for. The function should return a list of line numbers where the word is found. If the word is not found, return an empty list. The function should ignore case sensitivity."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef search_word_in_file(file_path, word):\n    \"\"\"\n    Searches for a specific word in a text file and returns a list of line numbers\n    where the word is found. Ignores case sensitivity.\n    \n    Parameters:\n    file_path (str): Path to the text file.\n    word (str): The word to search for.\n    \n    Returns:\n    list: A list of line numbers where the word is found.\n    \"\"\"\n    word = word.lower()\n    with open(file_path, 'r', encoding='utf-8') as file:\n        lines = file.readlines()\n        line_numbers = []\n        for i, line in enumerate(lines, 1):\n            if word in line.lower():\n                line_numbers.append(i)\n        return line_numbers\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport os\nfrom tempfile import NamedTemporaryFile\nfrom solution import search_word_in_file\n\ndef test_search_word_in_file():\n    # Create a temporary file with some content\n    content = \"\"\"This is a test file.\nThis file contains multiple lines with the word 'test'.\nThe word 'test' appears here again.\nAn unrelated line without the word.\nThe test is finished.\"\"\"\n    with NamedTemporaryFile(delete=False, mode='w', encoding='utf-8') as temp_file:\n        temp_file.write(content)\n        file_path = temp_file.name\n\n    # Test the function\n    assert search_word_in_file(file_path, 'test') == [2, 3, 6]\n    assert search_word_in_file(file_path, 'unrelated') == [5]\n    assert search_word_in_file(file_path, 'finish') == [7]\n    assert search_word_in_file(file_path, 'not_here') == []\n\n    # Clean up the temporary file\n    os.remove(file_path)\n\ndef test_case_insensitive_search():\n    # Create a temporary file with lowercase and mixed case content\n    content = \"this IS a TeSt FiLe.\"\n    with NamedTemporaryFile(delete=False, mode='w', encoding='utf-8') as temp_file:\n        temp_file.write(content)\n        file_path = temp_file.name\n\n    # Test the function\n    assert search_word_in_file(file_path, 'this') == [1]\n    assert search_word_in_file(file_path, 'is') == [1]\n    assert search_word_in_file(file_path, 'teSt') == [1]\n    assert search_word_in_file(file_path, 'file') == [1]\n\n    # Clean up the temporary file\n    os.remove(file_path)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000006", "row_id": 6, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to search for a specific word in a text file. The function should take two parameters: the file path and the word to search for. The function should return a list of line numbers where the word is found. If the word is not found, return an empty list. The function should ignore case sensitivity."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given set of cevablar can win a greedy game played with blueblocks, greenblocks, and redblocks)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef can_win_greedy_game(blueblocks, greenblocks, redblocks):\n    \"\"\"\n    Returns True if the given set of blocks can win the greedy game, \n    otherwise returns False. A player can win the game if they can \n    make a strictly increasing sequence of blocks, where each block's \n    value is greater than the previous block's value.\n    \"\"\"\n    total_blocks = blueblocks + greenblocks + redblocks\n    if total_blocks < 3:\n        return False\n    if blueblocks > 0 and greenblocks > 0 and redblocks > 0:\n        return True\n    if blueblocks > 0 and redblocks > 0:\n        return True\n    if greenblocks > 0 and redblocks > 0:\n        return True\n    return False\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import can_win_greedy_game\n\ndef test_can_win_greedy_game_all_blocks():\n    assert can_win_greedy_game(1, 1, 1) == True\n\ndef test_can_win_greedy_game_two_blocks():\n    assert can_win_greedy_game(1, 0, 1) == True\n    assert can_win_greedy_game(0, 1, 1) == True\n    assert can_win_greedy_game(1, 1, 0) == True\n\ndef test_cannot_win_greedy_game_less_than_three_blocks():\n    assert can_win_greedy_game(0, 0, 0) == False\n    assert can_win_greedy_game(1, 0, 0) == False\n    assert can_win_greedy_game(0, 1, 0) == False\n    assert can_win_greedy_game(0, 0, 1) == False\n\ndef test_cannot_win_greedy_game_no_common_blocks():\n    assert can_win_greedy_game(0, 0, 0) == False\n    assert can_win_greedy_game(0, 0, 1) == False\n    assert can_win_greedy_game(0, 1, 0) == False\n    assert can_win_greedy_game(1, 0, 0) == False\n\ndef test_can_win_greedy_game_single_block():\n    assert can_win_greedy_game(1, 0, 0) == True\n    assert can_win_greedy_game(0, 1, 0) == True\n    assert can_win_greedy_game(0, 0, 1) == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000007", "row_id": 7, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given set of cevablar can win a greedy game played with blueblocks, greenblocks, and redblocks)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum of two numbers without using if-else statements or comparison operators."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_without_conditions(a, b):\n    \"\"\"\n    Returns the maximum of two numbers without using if-else statements or comparison operators.\n    \"\"\"\n    return a + ((a - b) >> 31) & b + ((b - a) >> 31)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_without_conditions\n\ndef test_max_without_conditions():\n    assert max_without_conditions(10, 20) == 20\n    assert max_without_conditions(20, 10) == 20\n    assert max_without_conditions(-5, 5) == 5\n    assert max_without_conditions(-5, -10) == -5\n    assert max_without_conditions(0, 0) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000008", "row_id": 8, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum of two numbers without using if-else statements or comparison operators."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum product of a subarray within a given array of integers. The function should work for both positive and negative numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_product_subarray(nums):\n    \"\"\"\n    Returns the maximum product of a contiguous subarray within the input array.\n    \"\"\"\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for num in nums[1:]:\n        candidates = (max_product * num, min_product * num, num)\n        max_product = max(candidates)\n        min_product = min(candidates)\n        result = max(result, max_product)\n\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_product_subarray\n\ndef test_max_product_subarray_positive_numbers():\n    assert max_product_subarray([2, 3, -2, 4]) == 6\n\ndef test_max_product_subarray_with_zero():\n    assert max_product_subarray([2, 0, -2, 4]) == 8\n\ndef test_max_product_subarray_negative_numbers():\n    assert max_product_subarray([-2, 0, -1]) == 0\n\ndef test_max_product_subarray_mixed_sign_numbers():\n    assert max_product_subarray([-2, -3, 7]) == 42\n\ndef test_max_product_subarray_single_element():\n    assert max_product_subarray([2]) == 2\n\ndef test_max_product_subarray_all_negative():\n    assert max_product_subarray([-1, -2, -3, -4]) == 24\n\ndef test_max_product_subarray_empty_array():\n    assert max_product_subarray([]) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000011", "row_id": 11, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum product of a subarray within a given array of integers. The function should work for both positive and negative numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert the first and last characters of a string to uppercase and return the modified string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef modify_string(s):\n    \"\"\"\n    Converts the first and last characters of the string to uppercase.\n    \n    Parameters:\n    s (str): The input string.\n    \n    Returns:\n    str: The modified string with the first and last characters in uppercase.\n    \"\"\"\n    if len(s) <= 1:\n        return s.upper()\n    else:\n        return s[0].upper() + s[1:-1] + s[-1].upper()\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import modify_string\n\ndef test_modify_string_empty_string():\n    assert modify_string(\"\") == \"\"\n\ndef test_modify_string_single_character():\n    assert modify_string(\"a\") == \"A\"\n\ndef test_modify_string_all_uppercase():\n    assert modify_string(\"abcd\") == \"ABcd\"\n\ndef test_modify_string_all_lowercase():\n    assert modify_string(\"abcde\") == \"Abccde\"\n\ndef test_modify_string_mixed_case():\n    assert modify_string(\"aBcDe\") == \"ABcDe\"\n\ndef test_modify_string_with_spaces():\n    assert modify_string(\"hello world\") == \"Hehello world\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000012", "row_id": 12, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert the first and last characters of a string to uppercase and return the modified string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to remove duplicates from an unsorted array and return a new sorted array with unique elements."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef remove_duplicates_sorted(arr):\n    \"\"\"\n    Removes duplicates from an unsorted array and returns a new sorted array with unique elements.\n    \"\"\"\n    unique_set = set(arr)\n    sorted_unique_array = sorted(list(unique_set))\n    return sorted_unique_array\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_remove_duplicates_sorted():\n    assert remove_duplicates_sorted([4, 3, 1, 2, 3, 4, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates_sorted([10, 8, 10, 8]) == [8, 10]\n    assert remove_duplicates_sorted([7, 7, 7]) == [7]\n    assert remove_duplicates_sorted([]) == []\n    assert remove_duplicates_sorted([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert remove_duplicates_sorted([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n```"}], "metadata": {"prompt_id": "00000013", "row_id": 13, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to remove duplicates from an unsorted array and return a new sorted array with unique elements."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to take a list of integers as input and return a new list where each element is the product of preceding elements. For example, given a list [1, 2, 3, 4], the output should be [1, 1, 2, 6] where the second element (2) is the product of the first element (1), and the third element (3) is the product of the first two elements (1*2), and so on."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef product_of_list_elements(lst):\n    \"\"\"\n    Returns a new list where each element is the product of the preceding elements in the input list.\n    \"\"\"\n    if not lst:\n        return []\n\n    # Initialize the result list and a running product variable\n    result = [1] * len(lst)\n    running_product = 1\n\n    # Calculate the product of elements from the start\n    for i in range(1, len(lst)):\n        running_product *= lst[i - 1]\n        result[i] = running_product\n\n    # The result should not include the last element since there are no preceding elements for it\n    return result[:-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_product_of_list_elements():\n    assert product_of_list_elements([1, 2, 3, 4]) == [1, 1, 2, 6]\n    assert product_of_list_elements([4, 3, 2, 1]) == [1, 4, 12, 24]\n    assert product_of_list_elements([0, 2, 3]) == [1, 0, 0]\n    assert product_of_list_elements([]) == []\n    assert product_of_list_elements([5]) == []\n    assert product_of_list_elements([1, 0, 2, 3]) == [1, 0, 0, 0]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000014", "row_id": 14, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to take a list of integers as input and return a new list where each element is the product of preceding elements. For example, given a list [1, 2, 3, 4], the output should be [1, 1, 2, 6] where the second element (2) is the product of the first element (1), and the third element (3) is the product of the first two elements (1*2), and so on."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count the number of unique characters, digits, and special characters in a given string. Count them separately and return as a tuple (unique_chars, digits, special_chars)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_chars(string):\n    \"\"\"\n    Counts the number of unique characters, digits, and special characters\n    in a given string and returns the counts as a tuple (unique_chars, digits, special_chars).\n    \"\"\"\n    unique_chars = set(string)\n    digits = sum(c.isdigit() for c in string)\n    special_chars = sum(not c.isalnum() for c in string)\n    return (len(unique_chars), digits, special_chars)\n```\n<|Solution End|>\n\n<|Test Begin|>`\n```python\ndef test_count_chars():\n    assert count_chars(\"HelloWorld123!\") == (10, 3, 2)\n    assert count_chars(\"\") == (0, 0, 0)\n    assert count_chars(\"1234567890\") == (0, 10, 0)\n    assert count_chars(\"!@#$%^&*()\") == (10, 0, 10)\n    assert count_chars(\"aAaA1234567890!@#$%^&*()\") == (7, 10, 10)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000016", "row_id": 16, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count the number of unique characters, digits, and special characters in a given string. Count them separately and return as a tuple (unique_chars, digits, special_chars)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a Celsius temperature to Fahrenheit."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef celsius_to_fahrenheit(celsius):\n    \"\"\"\n    Converts a temperature from Celsius to Fahrenheit.\n    \n    Parameters:\n    celsius (float): Temperature in Celsius.\n    \n    Returns:\n    float: Temperature in Fahrenheit.\n    \"\"\"\n    return (celsius * 9/5) + 32\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import celsius_to_fahrenheit\n\ndef test_celsius_to_fahrenheit_freezing_point():\n    assert celsius_to_fahrenheit(0) == 32.0\n\ndef test_celsius_to_fahrenheit_boiling_point():\n    assert celsius_to_fahrenheit(100) == 212.0\n\ndef test_celsius_to_fahrenheit_room_temperature():\n    assert celsius_to_fahrenheit(25) == 77.0\n\ndef test_celsius_to_fahrenheit_negative_temperature():\n    assert celsius_to_fahrenheit(-40) == -40.0\n\ndef test_celsius_to_fahrenheit_freezing_point_reverse():\n    assert round(celsius_to_fahrenheit(0) - 32, 1) == 0  # Using round to allow for floating point precision issues\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000017", "row_id": 17, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a Celsius temperature to Fahrenheit."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the minimal path sum from top to bottom in a binary tree. The minimal path is defined as the path that minimizes the sum of node values along the path from root to leaf."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef min_path_sum(root: TreeNode) -> int:\n    \"\"\"\n    Returns the minimal path sum from top to bottom in a binary tree.\n    \"\"\"\n    if not root:\n        return 0\n    \n    result = [float('inf')]\n    \n    def dfs(node, current_sum):\n        if not node:\n            return\n        \n        current_sum += node.val\n        \n        if not node.left and not node.right:\n            result[0] = min(result[0], current_sum)\n            return\n        \n        dfs(node.left, current_sum)\n        dfs(node.right, current_sum)\n    \n    dfs(root, 0)\n    return result[0]\n```\n<|Solution End|>\n\n<|Test Begin|>\r\n```python\nfrom solution import min_path_sum\r\nfrom typing import Optional\r\n\r\ndef create_tree(arr):\r\n    if not arr:\r\n        return None\r\n    nodes = [None if val is None else TreeNode(val) for val in arr]\r\n    kids = nodes[::-1]\r\n    root = kids.pop()\r\n    for node in nodes:\r\n        if node:\r\n            if kids:\r\n                node.left = kids.pop()\r\n            if kids:\r\n                node.right = kids.pop()\r\n    return root\r\n\r\ndef test_min_path_sum():\r\n    assert min_path_sum(create_tree([2, 3, 5, 4, 7])) == 12\r\n    assert min_path_sum(create_tree([1, 2, 3])) == 1\r\n    assert min_path_sum(create_tree([-1, 2, 3, None, 5, -4, 10])) == -1\r\n    assert min_path_sum(create_tree([10, 20, 30, None, None, 40])) == 60\r\n```\n<|)"}], "metadata": {"prompt_id": "00000018", "row_id": 18, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the minimal path sum from top to bottom in a binary tree. The minimal path is defined as the path that minimizes the sum of node values along the path from root to leaf."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate and return the area of a triangle given its base and height."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef triangle_area(base, height):\n    \"\"\"\n    Returns the area of a triangle given its base and height.\n    \"\"\"\n    return 0.5 * base * height\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import triangle_area\n\ndef test_triangle_area_positive_values():\n    assert triangle_area(5, 3) == 7.5\n\ndef test_triangle_area_with_zero():\n    assert triangle_area(0, 5) == 0\n    assert triangle_area(5, 0) == 0\n\ndef test_triangle_area_negative_values():\n    assert triangle_area(-5, 3) == -7.5\n    assert triangle_area(5, -3) == -7.5\n    assert triangle_area(-5, -3) == 7.5\n\ndef test_triangle_area_mixed_sign_values():\n    assert triangle_area(-5, 3) == -7.5\n    assert triangle_area(5, -3) == -7.5\n    assert triangle_area(-5, -3) == 7.5\n```"}], "metadata": {"prompt_id": "00000020", "row_id": 20, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate and return the area of a triangle given its base and height."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the sum of all even numbers in a list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_of_evens(numbers):\n    \"\"\"\n    Returns the sum of all even numbers in the given list.\n    \"\"\"\n    return sum(num for num in numbers if num % 2 == 0)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_of_evens\n\ndef test_sum_of_evens_empty_list():\n    assert sum_of_evens([]) == 0\n\ndef test_sum_of_evens_all_evens():\n    assert sum_of_evens([2, 4, 6, 8]) == 20\n\ndef test_sum_of_evens_mixed Numbers():\n    assert sum_of_evens([1, 2, 3, 4, 5, 6]) == 12\n\ndef test_sum_of_evens_with_odds():\n    assert sum_of_evens([1, 3, 5, 7]) == 0\n\ndef test_sum_of_evens_negative_and_positive():\n    assert sum_of_evens([-2, 2, -4, 4]) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000021", "row_id": 21, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the sum of all even numbers in a list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the number of occurrences of a substring within a given string. The function should be case-insensitive."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_substring_occurrences(main_string, substring):\n    \"\"\"\n    Returns the number of times the substring appears in the main string,\n    ignoring case.\n    \"\"\"\n    return sum(main_string[i:i+len(substring)].casefold() == substring.casefold() for i in range(len(main_string)))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_count_substring_occurrences():\n    assert count_substring_occurrences(\"Hello, hello, HELLO!\", \"hello\") == 3\n\ndef test_count_substring_occurrences_empty_string():\n    assert count_substring_occurrences(\"\", \"test\") == 0\n\ndef test_count_substring_occurrences_no_occurrence():\n    assert count_substring_occurrences(\"abcABCABC\", \"xyz\") == 0\n\ndef test_count_substring_occurrences_case_sensitivity():\n    assert count_substring_occurrences(\"CaseSensitive CaseSensitive\", \"cASEsENSITIVE\") == 2\n\ndef test_count_substring_occurrences_single_character():\n    assert count_substring_occurrences(\"aAaAaA\", \"a\") == 3\n    assert count_substring_occurrences(\"aAaAaA\", \"A\") == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000022", "row_id": 22, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the number of occurrences of a substring within a given string. The function should be case-insensitive."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the number of paths from the top-left corner to the bottom-right corner of an M x N grid, where you can only move either down or right at any point in time. The function should handle cases where the grid size can be as large as 10x10 for efficiency. Use memoization to optimize the algorithm."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_paths(m, n, memo={}):\n    \"\"\"\n    Returns the number of unique paths from the top-left corner to the bottom-right corner\n    of an M x N grid. Movement is restricted to only down or right.\n    \"\"\"\n    key = (m, n)\n    if key in memo:\n        return memo[key]\n    if m == 1 or n == 1:\n        return 1  # Base case: if either dimension is 1, there's only one way to reach the end\n    memo[key] = count_paths(m - 1, n, memo) + count_paths(m, n - 1, memo)\n    return memo[key]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_paths\n\ndef test_count_paths_small_grid():\n    assert count_paths(2, 2) == 2\n\ndef test_count_paths_medium_grid():\n    assert count_paths(3, 3) == 6\n\ndef test_count_paths_large_grid():\n    assert count_paths(5, 5) == 70\n\ndef test_count_paths_one_row_or_column():\n    assert count_paths(1, 10) == 1\n    assert count_paths(10, 1) == 1\n\ndef test_count_paths_memoization():\n    # This tests the dynamic programming memoization effect by calling the function\n    # multiple times with the same inputs to check if it returns the cached result directly\n    count_paths(3, 3)\n    assert count_paths(3, 3) == 6  # Verifies the result comes from memoization\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000024", "row_id": 24, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the number of paths from the top-left corner to the bottom-right corner of an M x N grid, where you can only move either down or right at any point in time. The function should handle cases where the grid size can be as large as 10x10 for efficiency. Use memoization to optimize the algorithm."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum sum of a subarray of size k within an input array of integers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_sum_subarray(arr, k):\n    \"\"\"\n    Returns the maximum sum of any subarray of size k from the input array.\n    :param arr: List[int] -- input array of integers\n    :param k: int -- size of the subarray\n    :return: int -- maximum sum of a subarray of size k\n    \"\"\"\n    if not arr or k <= 0 or k > len(arr):\n        return None\n    max_sum = window_sum = sum(arr[:k])\n    for i in range(len(arr) - k):\n        window_sum = window_sum - arr[i] + arr[i + k]\n        max_sum = max(max_sum, window_sum)\n    return max_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_sum_subarray\n\ndef test_max_sum_subarray_with_positive_numbers():\n    assert max_sum_subarray([1, 4, 2, 10, 23, 3, 1, 0, 20], 4) == 39\n\ndef test_max_sum_subarray_with_negative_numbers():\n    assert max_sum_subarray([-1, -4, -2, -10, -23, -3, -1, -20], 4) == -8\n\ndef test_max_sum_subarray_with_zero():\n    assert max_sum_subarray([0, 0, 0, 0], 2) == 0\n\ndef test_max_sum_subarray_with_k_larger_than_array():\n    assert max_sum_subarray([1, 2, 3], 4) is None\n\ndef test_max_sum_subarray_with_small_array():\n    assert max_sum_subarray([1], 1) == 1\n\ndef test_max_sum_subarray_with_k_equal_to_array_size():\n    assert max_sum_subarray([1, 2, 3, 4, 5], 5) == 15\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000025", "row_id": 25, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum sum of a subarray of size k within an input array of integers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the factorial of a number using recursion. The function should take an integer as an argument and return the factorial of that number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef factorial(n):\n    \"\"\"\n    Returns the factorial of n using recursion.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import factorial\n\ndef test_factorial_zero():\n    assert factorial(0) == 1\n\ndef test_factorial_one():\n    assert factorial(1) == 1\n\ndef test_factorial_positive_numbers():\n    assert factorial(5) == 120\n    assert factorial(4) == 24\n    assert factorial(3) == 6\n\ndef test_factorial_negative_numbers():\n    assert factorial(-1) == 1  # This should not happen. Factorial is not defined for negative numbers. But included for completeness.\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000026", "row_id": 26, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the factorial of a number using recursion. The function should take an integer as an argument and return the factorial of that number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the union of elements in two lists."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_union(list1, list2):\n    \"\"\"\n    Returns a list of unique elements that are present in either list1 or list2.\n    \"\"\"\n    return list(set(list1) | set(list2))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_union\n\ndef test_find_union_empty_lists():\n    assert find_union([], []) == []\n\ndef test_find_union_identical_lists():\n    assert find_union([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n\ndef test_find_union_with_overlap():\n    assert find_union([1, 2, 3], [3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_find_union_no_overlap():\n    assert find_union([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\ndef test_find_union_mixed_numbers():\n    assert find_union([1, 2, 3], [-1, -2, -3]) == [1, 2, 3, -1, -2, -3]\n```"}], "metadata": {"prompt_id": "00000027", "row_id": 27, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the union of elements in two lists."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given string is a valid double (a number with a decimal point)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport re\n\ndef is_valid_double(s):\n    \"\"\"\n    Returns True if the string is a valid double, False otherwise.\n    A valid double is defined as a number with a decimal point.\n    \"\"\"\n    # Regular expression to match a valid double\n    double_pattern = re.compile(r'^-?\\d+(?:\\.\\d+)?$')\n    return bool(double_pattern.match(s))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_is_valid_double_positive():\n    assert is_valid_double(\"123.456\") == True\n    assert is_valid_double(\"-123.456\") == True\n\ndef test_is_valid_double_decimal_only():\n    assert is_valid_double(\".456\") == True\n\ndef test_is_valid_double_integer():\n    assert is_valid_double(\"123\") == False\n    assert is_valid_double(\"-123\") == False\n\ndef test_is_valid_double_negative():\n    assert is_valid_double(\"-.456\") == True\n\ndef test_is_valid_double_empty():\n    assert is_valid_double(\"\") == False\n\ndef test_is_valid_double_special_chars():\n    assert is_valid_double(\"123.456.789\") == False\n    assert is_valid_double(\"123..456\") == False\n    assert is_valid_double(\"abc\") == False\n    assert is_valid_double(\"123..\") == False\n    assert is_valid_double(\".123\") == True\n    assert is_valid_double(\"123.\") == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000028", "row_id": 28, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given string is a valid double (a number with a decimal point)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to implement a simple bubble sort algorithm."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef bubble_sort(arr):\n    \"\"\"\n    Sorts a list of numbers using the bubble sort algorithm.\n    \n    Parameters:\n    arr (list): The list of numbers to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        # Create a flag that will allow the function to terminate early if there's nothing left to sort\n        swapped = False\n        for j in range(0, n-i-1):\n            # Swap if the element found is greater than the next element\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                swapped = True\n        # If no elements were swapped by inner loop, then break\n        if not swapped:\n            break\n    return arr\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_bubble_sort_empty_list():\n    assert bubble_sort([]) == []\n\ndef test_bubble_sort_positive_numbers():\n    assert bubble_sort([64, 34, 25, 12, 22, 11, 90]) == [11, 12, 22, 25, 34, 64, 90]\n\ndef test_bubble_sort_negative_numbers():\n    assert bubble_sort([-64, -34, -25, -12, -22, -11, -90]) == [-90, -64, -34, -25, -22, -12, -11]\n\ndef test_bubble_sort_mixed_numbers():\n    assert bubble_sort([-64, 34, -25, 12, -22, 11, 90]) == [-64, -25, -22, -11, 11, 12, 34, 90]\n\ndef test_bubble_sort_already_sorted():\n    assert bubble_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_bubble_sort_single_element():\n    assert bubble_sort([42]) == [42]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000029", "row_id": 29, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to implement a simple bubble sort algorithm."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine if all elements in an array are unique. Pseudocode is not necessary. Please include comments in your code to explain its functionality."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef are_elements_unique(arr):\n    \"\"\"\n    Returns True if all elements in the array are unique, otherwise returns False.\n    \n    Parameters:\n    arr (list): The input list of elements\n    \n    Returns:\n    bool: True if all elements are unique, False otherwise\n    \"\"\"\n    return len(arr) == len(set(arr))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_are_elements_unique_with_unique_elements():\n    assert are_elements_unique([1, 2, 3, 4, 5]) == True\n\ndef test_are_elements_unique_with_duplicates():\n    assert are_elements_unique([1, 2, 3, 3, 5]) == False\n\ndef test_are_elements_unique_with_negative_numbers():\n    assert are_elements_unique([-1, -2, -3, -4, -5]) == True\n\ndef test_are_elements_unique_with_mixed_sign_numbers():\n    assert are_elements_unique([0, 1, -1, 2, -2]) == True\n\ndef test_are_elements_unique_with_all_same_elements():\n    assert are_elements_unique([1, 1, 1, 1, 1]) == False\n\ndef test_are_elements_unique_with_empty_list():\n    assert are_elements_unique([]) == True\n\ndef test_are_elements_unique_with_single_element():\n    assert are_elements_unique([42]) == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000030", "row_id": 30, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine if all elements in an array are unique. Pseudocode is not necessary. Please include comments in your code to explain its functionality."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the closest element in an almost sorted array. An almost sorted array is defined as an array where each element is no more than two positions away from its sorted position in the array. For example, an array `[3, 1, 2, 4]` is an almost sorted array since each element is within one position of its sorted position."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef closest_element_in_almost_sorted_array(arr):\n    \"\"\"\n    Find the closest element to the given element within the almost sorted array.\n    \n    :param arr: the almost sorted array\n    :return: the closest element to the one queried\n    \"\"\"\n    n = len(arr)\n    initial_index = arr.index(0) if 0 in arr else None\n    \n    if initial_index is not None:\n        closest = [arr[initial_index]]\n        for i in range(n):\n            if 0 <= (initial_index + i) < n and arr[initial_index + i] not in closest:\n                closest.append(arr[initial_index + i])\n            if 0 <= (initial_index - i) < n and arr[initial_index - i] not in closest:\n                closest.append(arr[initial_index - i])\n        return arr[closest.index(min(closest, key=lambda x: abs(x - 0)))]\n    else:\n        return None  # In case there is no zero in the array, this function returns None\n```\n\nThe function `closest_element_in_almost_sorted_array` takes an almost sorted array as input and returns the closest element to zero within the defined limits. If the array does not contain `0`, it returns `None`.\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef test_closest_element_in_almost_sorted_array():\n    assert closest_element_in_almost_sorted_array([3, 1, 2, 4]) == 3\n    assert closest_element_in_almost_sorted_array([1, 2, 3, 0]) == 0\n    assert closest_element_in_almost_sorted_array([3, 0, 2, 4]) == 2\n    assert closest_element_in_almost_sorted_array([1, 3, 5, 0]) == 1\n    assert closest_element_in_almost_sorted_array([0, 3, 5, 7, 9]) == 0\n    assert closest_element_in_almost_sorted_array([2, 4, 6, 3]) is None\n\ndef test_edge_cases():\n    assert closest_element_in_almost_sorted_array([]) is None\n    assert closest_element_in_almost_sorted_array([0]) == 0\n    assert closest_element_in_almost_sorted_array([4, 2, 1, 0, 3]) == 2\n    assert closest_element_in_almost_sorted_array([1, 0, 3, 2, 4]) == 1\n```\n\nIn the above test functions, we validate the function `closest_element_in_almost_sorted_array` with several almost sorted arrays to ensure it behaves as expected, including edge cases like empty arrays or arrays without `0`.\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000031", "row_id": 31, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the closest element in an almost sorted array. An almost sorted array is defined as an array where each element is no more than two positions away from its sorted position in the array. For example, an array `[3, 1, 2, 4]` is an almost sorted array since each element is within one position of its sorted position."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if the binary representation of a number is a palindrome."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_binary_palindrome(number: int) -> bool:\n    \"\"\"\n    Checks if the binary representation of the given number is a palindrome.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be non-negative\")\n    \n    binary_str = bin(number)[2:]  # Convert to binary and remove the '0b' prefix\n    return binary_str == binary_str[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_is_binary_palindrome():\n    assert is_binary_palindrome(1) == True  # Binary: 1\n    assert is_binary_palindrome(2) == False # Binary: 10\n    assert is_binary_palindrome(3) == False # Binary: 11\n    assert is_binary_palindrome(4) == True  # Binary: 100\n    assert is_binary_palindrome(5) == False # Binary: 101\n    assert is_binary_palindrome(6) == True  # Binary: 110\n    assert is_binary_palindrome(7) == True  # Binary: 111\n    assert is_binary_palindrome(13) == False # Binary: 1101\n    assert is_binary_palindrome(15) == False # Binary: 1111\n    assert is_binary_palindrome(19) == True  # Binary: 10011\n    assert is_binary_palindrome(23) == True  # Binary: 10111\n    assert is_binary_palindrome(29) == False # Binary: 11101\n    assert is_binary_palindrome(31) == True  # Binary: 11111\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000032", "row_id": 32, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if the binary representation of a number is a palindrome."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to print all prime numbers up to a given number. Also, include a simple test function with some test cases to ensure the correctness of the solution."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef print_primes(n):\n    \"\"\"\n    Prints all prime numbers up to a given number n.\n    \"\"\"\n    if n < 2:\n        return  # No primes less than 2\n    \n    # Print 2 separately since it's the only even prime number\n    if n >= 2:\n        print(2)\n    \n    # Create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for _ in range(n+1)]\n    p = 2\n    while p * p <= n:\n        # If prime[p] is not changed, then it is a prime\n        if prime[p]:\n            # Updating all multiples of p to not prime\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    \n    # Print all prime numbers\n    for p in range(3, n+1, 2):\n        if prime[p]:\n            print(p)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import print_primes\n\ndef test_print_primes_small_number():\n    print_primes(10)  # Should print: 2, 3, 5, 7\n\ndef test_print_primes_large_number():\n    captured_output = capture_printed_output(print_primes, 50)\n    expected_output = \"2\\n3\\n5\\n7\\n11\\n13\\n17\\n19\\n23\\n29\\n31\\n37\\n41\\n43\\n47\\n\"\n    assert captured_output == expected_output\n\ndef test_print_primes_no_primes():\n    captured_output = capture_printed_output(print_primes, 2)\n    assert captured_output == \"\"\n\ndef test_print_primes_empty_input():\n    captured_output = capture_printed_output(print_primes, 1)\n    assert captured_output == \"\"\n\n# Helper function to capture printed output\ndef capture_printed_output(func, *args, **kwargs):\n    from io import StringIO\n    import sys\n    original_stdout = sys.stdout\n    captured_output = StringIO()\n    sys.stdout = captured_output\n    \n    func(*args, **kwargs)\n    \n    sys.stdout = original_stdout\n    return captured_output.getvalue().strip()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000034", "row_id": 34, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to print all prime numbers up to a given number. Also, include a simple test function with some test cases to ensure the correctness of the solution."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to print all the prime numbers in a given range. What are the factors to consider while implementing this function?"}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef print_primes(start: int, end: int):\n    \"\"\"\n    Prints all prime numbers in the given range from start to end (inclusive).\n    \"\"\"\n    if start > end or start < 2:\n        raise ValueError(\"Invalid range: start should not be greater than end and start should be at least 2.\")\n    \n    for num in range(start, end + 1):\n        if is_prime(num):\n            print(num)\n            \ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import print_primes, is_prime\n\ndef test_is_prime():\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(4) == False\n    assert is_prime(5) == True\n    assert is_prime(29) == True\n    assert is_prime(49) == False\n\ndef test_print_primes():\n    start, end = 10, 20\n    expected_primes = [11, 13, 17, 19]\n    with capture_stdout() as stdout:\n        print_primes(start, end)\n    printed_primes = stdout.getvalue().strip().split('\\n')\n    assert all(map(lambda x: is_prime(int(x)), printed_primes))\n    assert set(printed_primes) == set(map(str, expected_primes))\n\ndef test_invalid_range():\n    try:\n        print_primes(10, 5)\n        assert False, \"Expected ValueError not raised for invalid range.\"\n    except ValueError:\n        assert True\n\ndef test_edge_cases():\n    start, end = 2, 2\n    with capture_stdout() as stdout:\n        print_primes(start, end)\n    printed_output = stdout.getvalue().strip()\n    assert printed_output == str(start)\n    \ndef test_with_no_primes():\n    start, end = 8, 8\n    with capture_stdout() as stdout:\n        print_primes(start, end)\n    printed_output = stdout.getvalue().strip()\n    assert printed_output == ''  # No output because there are no primes in the given range.\n```\n\n<|Test End|>\n\n### Explanation\n\n- **is_prime Function**: This function checks if a number is prime. It returns `True` if the number is prime and `False` otherwise. The implementation checks divisibility only up to the square root of the number for optimization.\n  \n- **print_primes Function**: This function prints all prime numbers in the specified range. It raises a `ValueError` if the start is greater than the end or less than 2.\n\n- **Test Cases**:\n  - `test_is_prime`: Tests the `is_prime` function with various inputs.\n  - `test_print_primes`: Tests the `print_primes` function by capturing the printed output and comparing it with the expected prime numbers.\n  - `test_invalid_range`: Tests that an exception is raised correctly for invalid ranges.\n  - `test_edge_cases`: Tests edge cases like a single number range and when no primes are in the given range.\n  - `test_with_no_primes`: Tests an edge case where there are no primes in the given range."}], "metadata": {"prompt_id": "00000036", "row_id": 36, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to print all the prime numbers in a given range. What are the factors to consider while implementing this function?"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count the frequency of each character in a given string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef char_frequency(input_string):\n    \"\"\"\n    Returns a dictionary containing the frequency of each character in the input_string.\n    \"\"\"\n    freq = {}\n    for char in input_string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import char_frequency\n\ndef test_char_frequency_empty_string():\n    assert char_frequency(\"\") == {}\n\ndef test_char_frequency_single_character():\n    assert char_frequency(\"a\") == {'a': 1}\n\ndef test_char_frequency_multiple_characters():\n    assert char_frequency(\"hello\") == {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n\ndef test_char_frequency_case_insensitive():\n    assert char_frequency(\"Apple\") == {'A': 1, 'p': 2, 'l': 1, 'e': 1}\n\ndef test_char_frequency_special_characters_and_spaces():\n    assert char_frequency(\"Hello, World!\") == {'H': 1, 'e': 1, 'l': 3, 'o': 2, ',': 1, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}\n```"}], "metadata": {"prompt_id": "00000038", "row_id": 38, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count the frequency of each character in a given string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the most frequent element in a list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef most_frequent Element(lst):\n    \"\"\"\n    Returns the most frequent element in a list. If there are multiple elements with the same highest frequency, returns the first one encountered.\n    \"\"\"\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    most_frequent_element = None\n    highest_frequency = 0\n    for item, freq in frequency.items():\n        if freq > highest_frequency:\n            most_frequent_element = item\n            highest_frequency = freq\n    return most_frequent_element\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import most_frequent_element\n\ndef test_most_frequent_element_with_duplicates():\n    assert most_frequent_element([2, 3, 2, 4, 2, 6, 1, 6]) == 2\n\ndef test_most_frequent_element_all_unique():\n    assert most_frequent_element([2, 3, 4, 5]) == 2\n\ndef test_most_frequent_element_empty_list():\n    assert most_frequent_element([]) == None\n\ndef test_most_frequent_element_with_repeated_elements():\n    assert most_frequent_element([12, 11, 13, 12, 13, 12, 10]) == 12\n\ndef test_most_frequent_element_with_negative_values():\n    assert most_frequent_element([-2, -3, -2, -1, 0, -2, 5]) == -2\n```"}], "metadata": {"prompt_id": "00000041", "row_id": 41, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the most frequent element in a list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the length of the longest increasing subsequence (LIS) in an array of integers. The function should take a list of integers as input and return the length of the LIS."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef length_of_lis(nums):\n    \"\"\"\n    Returns the length of the longest increasing subsequence in the given list of integers.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    dp = [1] * len(nums)\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import length_of_lis\n\ndef test_length_of_lis_with_empty_list():\n    assert length_of_lis([]) == 0\n\ndef test_length_of_lis_with_single_element():\n    assert length_of_lis([1]) == 1\n\ndef test_length_of_lis_with_constant_values():\n    assert length_of_lis([1, 1, 1, 1]) == 1\n\ndef test_length_of_lis_with_multiple_elements():\n    assert length_of_lis([10, 9, 2, 5, 3, 7, 101, 18]) == 4\n\ndef test_length_of_lis_with_reversed_increasing_sequence():\n    assert length_of_lis([5, 4, 3, 2, 1]) == 1\n\ndef test_length_of_lis_with_random_sequence():\n    assert length_of_lis([4, 2, 4, 3, 3, 1, 2, 1]) == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000043", "row_id": 43, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the length of the longest increasing subsequence (LIS) in an array of integers. The function should take a list of integers as input and return the length of the LIS."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the binomial coefficient for given number 'n' and 'k'. The binomial coefficient, often denoted as C(n, k), represents the number of ways to choose k items from a set of n distinct items. This function will be defined by the return statement: `return binomial_coefficient(n, k)`. The binomial coefficient can be calculated using the formula: C(n, k) = C(n-1, k-1) + C(n-1, k), with the base cases being C(n, 0) = C(n, n) = 1."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef binomial_coefficient(n, k):\n    \"\"\"\n    Calculate the binomial coefficient (n choose k).\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_binomial_coefficient():\n    assert binomial_coefficient(5, 2) == 10\n    assert binomial_coefficient(10, 0) == 1\n    assert binomial_coefficient(10, 10) == 1\n    assert binomial_coefficient(6, 3) == 20\n    assert binomial_coefficient(7, 1) == 7\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000044", "row_id": 44, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the binomial coefficient for given number 'n' and 'k'. The binomial coefficient, often denoted as C(n, k), represents the number of ways to choose k items from a set of n distinct items. This function will be defined by the return statement: `return binomial_coefficient(n, k)`. The binomial coefficient can be calculated using the formula: C(n, k) = C(n-1, k-1) + C(n-1, k), with the base cases being C(n, 0) = C(n, n) = 1."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to duplicate a linked list, including both the values of the nodes and the node's next pointers. Here, a duplicated linked list means creating a copy of the original linked list with new memory allocated for each node."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef duplicate_linked_list(node):\n    \"\"\"\n    Duplicates the given linked list.\n    :param node: ListNode\n    :return: ListNode\n    \"\"\"\n    if not node:\n        return None\n    \n    # Create a node with the same value\n    new_head = ListNode(node.val)\n    current_node = node\n    new_current_node = new_head\n\n    # Traverse the original linked list and create nodes for each value\n    while current_node.next:\n        new_next_node = ListNode(current_node.next.val)\n        new_current_node.next = new_next_node\n        current_node = current_node.next\n        new_current_node = new_current_node.next\n\n    return new_head\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef create_linked_list(values):\n    \"\"\"Helper function to create a linked list from a list of values.\"\"\"\n    if not values:\n        return None\n    head = ListNode(values[0])\n    current = head\n    for value in values[1:]:\n        current.next = ListNode(value)\n        current = current.next\n    return head\n\ndef linked_list_to_list(node):\n    \"\"\"Helper function to convert a linked list back to a list of values.\"\"\"\n    result = []\n    while node:\n        result.append(node.val)\n        node = node.next\n    return result\n\ndef test_duplicate_linked_list():\n    # Test with empty list\n    assert linked_list_to_list(duplicate_linked_list(None)) == []\n    \n    # Test with a simple linked list: 1 -> 2 -> 3\n    original_list = create_linked_list([1, 2, 3])\n    duplicated_list = duplicate_linked_list(original_list)\n    assert linked_list_to_list(duplicated_list) == [1, 2, 3]\n    \n    # Test with a more complex linked list\n    original_list = create_linked_list([1, 2, 3, 4, 5])\n    duplicated_list = duplicate_linked_list(original_list)\n    assert linked_list_to_list(duplicated_list) == [1, 2, 3, 4, 5]\n\n# Run the tests\ntest_duplicate_linked_list()\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000045", "row_id": 45, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to duplicate a linked list, including both the values of the nodes and the node's next pointers. Here, a duplicated linked list means creating a copy of the original linked list with new memory allocated for each node."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a number is a palindrome number. A palindrome number is a number that remains the same when its digits are reversed, such as 121 or 1331."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_palindrome_number(number: int) -> bool:\n    \"\"\"\n    Checks if the given number is a palindrome number.\n    \n    Args:\n    number (int): The number to check\n    \n    Returns:\n    bool: True if the number is a palindrome, False otherwise.\n    \"\"\"\n    if number < 0:\n        return False\n    original_number = number\n    reversed_number = 0\n    while number > 0:\n        digit = number % 10\n        reversed_number = reversed_number * 10 + digit\n        number = number // 10\n    return original_number == reversed_number\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_palindrome_number\n\ndef test_is_palindrome_number_positive():\n    assert is_palindrome_number(121) == True\n    assert is_palindrome_number(1331) == True\n    assert is_palindrome_number(12321) == True\n\ndef test_is_palindrome_number_zero():\n    assert is_palindrome_number(0) == True\n\ndef test_is_palindrome_number_single_digit():\n    assert is_palindrome_number(1) == True\n    assert is_palindrome_number(9) == True\n\ndef test_is_palindrome_number_negative():\n    assert is_palindrome_number(-121) == False\n\ndef test_is_palindrome_number_not_palindrome():\n    assert is_palindrome_number(123) == False\n    assert is_palindrome_number(56789) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000046", "row_id": 46, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a number is a palindrome number. A palindrome number is a number that remains the same when its digits are reversed, such as 121 or 1331."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given string is palindrome or not."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the given string is a palindrome, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_is_palindrome_empty_string():\n    assert is_palindrome(\"\") == True\n\ndef test_is_palindrome_single_character():\n    assert is_palindrome(\"a\") == True\n\ndef test_is_palindrome_palindrome_odd_length():\n    assert is_palindrome(\"abccba\") == True\n\ndef test_is_palindrome_palindrome_even_length():\n    assert is_palindrome(\"racecar\") == True\n\ndef test_is_palindrome_not_palindrome_odd_length():\n    assert is_palindrome(\"hello\") == False\n\ndef test_is_palindrome_not_palindrome_even_length():\n    assert is_palindrome(\"hellothere\") == False\n\ndef test_is_palindrome_with_spaces():\n    assert is_palindrome(\"a man a plan a canal panama\") == True\n\ndef test_is_palindrome_with_special_characters():\n    assert is_palindrome(\"A man, a plan, a canal, Panama!\") == True\n\ndef test_is_palindrome_case_sensitive():\n    assert is_palindrome(\"Alice Bob, Bob Alice\") == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000047", "row_id": 47, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given string is palindrome or not."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the sum of two numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef calculate_sum(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import calculate_sum\n\ndef test_calculate_sum_positive_numbers():\n    assert calculate_sum(2, 3) == 5\n\ndef test_calculate_sum_with_zero():\n    assert calculate_sum(0, 5) == 5\n    assert calculate_sum(5, 0) == 5\n\ndef test_calculate_sum_negative_numbers():\n    assert calculate_sum(-1, -1) == -2\n\ndef test_calculate_sum_mixed_sign_numbers():\n    assert calculate_sum(-1, 3) == 2\n```"}], "metadata": {"prompt_id": "00000049", "row_id": 49, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the sum of two numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given string is a valid palindrome. A valid palindrome is a string that reads the same forward and backward, ignoring cases and non-alphanumeric characters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_valid_palindrome(s: str) -> bool:\n    \"\"\"\n    Checks if the given string is a valid palindrome, ignoring cases and non-alphanumeric characters.\n    \"\"\"\n    # Normalize the string by removing non-alphanumeric characters and converting to lower case\n    normalized_str = ''.join(char.lower() for char in s if char.isalnum())\n    \n    # Check if the normalized string is equal to its reverse\n    return normalized_str == normalized_str[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import is_valid_palindrome\n\ndef test_is_valid_palindrome():\n    assert is_valid_palindrome(\"A man, a plan, a canal: Panama\") == True\n    assert is_valid_palindrome(\"race a car\") == False\n    assert is_valid_palindrome(\"No lemon, no melon\") == True\n    assert is_valid_palindrome(\"\") == True\n    assert is_valid_palindrome(\" \") == True\n    assert is_valid_palindrome(\"a.\") == True\n    assert is_valid_palindrome(\"0P\") == False\n    assert is_valid_palindrome(\"Was it a car or a cat I saw?\") == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000053", "row_id": 53, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given string is a valid palindrome. A valid palindrome is a string that reads the same forward and backward, ignoring cases and non-alphanumeric characters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum product of a contiguous subarray within a one-dimensional array of numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_product_subarray(nums):\n    \"\"\"\n    Returns the maximum product of a contiguous subarray within the one-dimensional array of numbers.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    # Initialize local minimum, local maximum, and the answer with the first element.\n    local_min, local_max, ans = nums[0], nums[0], nums[0]\n    \n    for num in nums[1:]:\n        # If the current number is negative, swap the local min and max.\n        if num < 0:\n            local_min, local_max = local_max, local_min\n        \n        # Update the local max and min.\n        local_max = max(num, local_max * num)\n        local_min = min(num, local_min * num)\n        \n        # Update the answer.\n        ans = max(ans, local_max)\n    \n    return ans\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import max_product_subarray\n\ndef test_max_product_subarray_positive():\n    assert max_product_subarray([2, 3, -2, 4]) == 6\n    assert max_product_subarray([0, 2]) == 2\n\ndef test_max_product_subarray_negative():\n    assert max_product_subarray([-2, 0, -1]) == 0\n    assert max_product_subarray([-2, -3, -1]) == 6\n\ndef test_max_product_subarray_single_element():\n    assert max_product_subarray([2]) == 2\n\ndef test_max_product_subarray_all_negative():\n    assert max_product_subarray([-1, -2, -3]) == 6\n    assert max_product_subarray([-1]) == -1\n\ndef test_max_product_subarray_empty():\n    assert max_product_subarray([]) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000054", "row_id": 54, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum product of a contiguous subarray within a one-dimensional array of numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to identify if two string s1 and s2 are isomorphic. Two strings are isomorphic if the characters in s1 can be replaced to get s2. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_isomorphic(s1: str, s2: str) -> bool:\n    \"\"\"\n    Checks if two strings are isomorphic.\n    \"\"\"\n    if len(s1) != len(s2):\n        return False\n    \n    s1_to_s2 = {}\n    s2_to_s1 = {}\n    \n    for char1, char2 in zip(s1, s2):\n        if (char1 in s1_to_s2 and s1_to_s2[char1] != char2) or \\\n           (char2 in s2_to_s1 and s2_to_s1[char2] != char1):\n            return False\n        s1_to_s2[char1] = char2\n        s2_to_s1[char2] = char1\n    \n    return True\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_is_isomorphic():\n    assert is_isomorphic(\"egg\", \"add\") == True\n    assert is_isomorphic(\"foo\", \"bar\") == False\n    assert is_isomorphic(\"paper\", \"title\") == True\n    assert is_isomorphic(\"badc\", \"baba\") == False\n    assert is_isomorphic(\"ab\", \"aa\") == False\n    assert is_isomorphic(\"\", \"\") == True\n    assert is_isomorphic(\"a\", \"a\") == True\n    assert is_isomorphic(\"aac\", \"yxy\") == True\n    assert is_isomorphic(\"aabb\", \"xyyx\") == True\n    assert is_isomorphic(\"aabb\", \"xyxy\") == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000055", "row_id": 55, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to identify if two string s1 and s2 are isomorphic. Two strings are isomorphic if the characters in s1 can be replaced to get s2. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to add two numbers and return the result."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef add_numbers(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add_numbers\n\ndef test_add_positive_numbers():\n    assert add_numbers(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add_numbers(0, 5) == 5\n    assert add_numbers(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add_numbers(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add_numbers(-1, 3) == 2\n```"}], "metadata": {"prompt_id": "00000056", "row_id": 56, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to add two numbers and return the result."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count the number of uppercase letters in a given string. The function should also handle edge cases such as an empty string or a string with no uppercase letters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_uppercase(s: str) -> int:\n    \"\"\"\n    Returns the number of uppercase letters in the string s.\n    \"\"\"\n    return sum(1 for c in s if c.isupper())\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_uppercase\n\ndef test_count_uppercase_empty_string():\n    assert count_uppercase(\"\") == 0\n\ndef test_count_uppercase_no_uppercase():\n    assert count_uppercase(\"hello world\") == 0\n\ndef test_count_uppercase_all_uppercase():\n    assert count_uppercase(\"HELLO WORLD\") == 10\n\ndef test_count_uppercase_mixed_case():\n    assert count_uppercase(\"HeLlO WoRlD\") == 6\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000057", "row_id": 57, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count the number of uppercase letters in a given string. The function should also handle edge cases such as an empty string or a string with no uppercase letters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a given string. Here's a rough outline on how you might approach the problem:"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef reverse_string(s: str) -> str:\n    \"\"\"\n    Returns the reverse of the given string.\n    \"\"\"\n    return s[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import reverse_string\n\ndef test_reverse_string_empty():\n    assert reverse_string(\"\") == \"\"\n\ndef test_reverse_string_single_character():\n    assert reverse_string(\"a\") == \"a\"\n\ndef test_reverse_string_multiple_characters():\n    assert reverse_string(\"hello\") == \"olleh\"\n\ndef test_reverse_string_with_spaces():\n    assert reverse_string(\"hello world\") == \"dlrow olleh\"\n\ndef test_reverse_string_punctuation():\n    assert reverse_string(\"hello, world!\") == \"!dlrow ,olleh\"\n```"}], "metadata": {"prompt_id": "00000058", "row_id": 58, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a given string. Here's a rough outline on how you might approach the problem:"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to filter out all the strings from a given list that contain a specific substring."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef filter_strings(list_of_strings, substring):\n    \"\"\"\n    Returns a new list containing only the strings from the input list that include the specified substring.\n    \"\"\"\n    return [s for s in list_of_strings if substring in s]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import filter_strings\n\ndef test_filter_strings_empty_list():\n    assert filter_strings([], \"test\") == []\n\ndef test_filter_strings_no_matches():\n    assert filter_strings([\"apple\", \"banana\", \"cherry\"], \"date\") == []\n\ndef test_filter_strings_with_matches_at_beginning():\n    assert filter_strings([\"apple\", \"date\", \"cherry\"], \"a\") == [\"apple\", \"date\"]\n\ndef test_filter_strings_with_matches_at_end():\n    assert filter_strings([\"apple\", \"date\", \"cherry\"], \"ry\") == [\"cherry\"]\n\ndef test_filter_strings_with_matches_in_middle():\n    assert filter_strings([\"apple\", \"banana\", \"cherry\"], \"na\") == [\"banana\"]\n\ndef test_filter_strings_with_substring_case_insensitive():\n    assert filter_strings([\"Apple\", \"Banana\", \"cherry\"], \"a\") == [\"Apple\", \"Banana\"]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000060", "row_id": 60, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to filter out all the strings from a given list that contain a specific substring."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the first occurrence of an element in an array that is not repeated (i.e., appears exactly once). If there is no such element, return -1."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_non_repeated(arr):\n    \"\"\"\n    Returns the index of the first non-repeated element in the array.\n    If no such element exists, returns -1.\n    \"\"\"\n    from collections import Counter\n    counts = Counter(arr)\n    for idx, value in enumerate(arr):\n        if counts[value] == 1:\n            return idx\n    return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_find_non_repeated():\n    assert find_non_repeated([2, 3, 4, 3, 5]) == 0\n    assert find_non_repeated([1, 2, 2, 3, 4, 4, 5]) == 0\n    assert find_non_repeated([6, 7, 8, 8, 9, 9]) == 0\n    assert find_non_repeated([1, 1, 2, 2, 3, 3, 4, 5, 5]) == 7\n    assert find_non_repeated([1, 1, 2, 2]) == -1\n    assert find_non_repeated([7]) == 0\n    assert find_non_repeated([]) == -1\n\n# Edge cases\ndef test_find_non_repeated_edge_cases():\n    assert find_non_repeated([1, 1, 1, 2]) == 3\n    assert find_non_repeated([1, 2, 1, 3, 3, 4, 4]) == 1\n    assert find_non_repeated([1, 2, 2, 3]) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000061", "row_id": 61, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the first occurrence of an element in an array that is not repeated (i.e., appears exactly once). If there is no such element, return -1."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the second maximum number in a list of integers. If the list does not contain at least two different numbers, return None."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef second_maximum(numbers):\n    \"\"\"\n    Returns the second maximum number in a list of integers.\n    If the list does not contain at least two different numbers, returns None.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    max_num = second_max_num = float('-inf')\n    \n    for num in numbers:\n        if num > max_num:\n            second_max_num = max_num\n            max_num = num\n        elif max_num > num > second_max_num:\n            second_max_num = num\n            \n    if second_max_num == float('-inf'):\n        return None\n    return second_max_num\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import second_maximum\n\ndef test_second_maximum_with_two_unique_numbers():\n    assert second_maximum([1, 2]) == 1\n\ndef test_second_maximum_with_sorted_repeating_numbers():\n    assert second_maximum([5, 5, 4, 4, 3, 3]) == 4\n\ndef test_second_maximum_with_descending_repeating_numbers():\n    assert second_maximum([10, 9, 10, 9]) == 9\n\ndef test_second_maximum_with_no_enough_unique_numbers():\n    assert second_maximum([2, 2]) == None\n\ndef test_second_maximum_with_random_numbers():\n    assert second_maximum([7, 8, 9, 10, 11, 9]) == 10\n\ndef test_second_maximum_with_only_one_number():\n    assert second_maximum([100]) == None\n\ndef test_second_maximum_with_empty_list():\n    assert second_maximum([]) == None\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000062", "row_id": 62, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the second maximum number in a list of integers. If the list does not contain at least two different numbers, return None."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a string into a list of words."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef string_to_list_of_words(input_string):\n    \"\"\"\n    Converts a string into a list of words based on whitespace.\n    \n    Parameters:\n    input_string (str): The string to be converted.\n    \n    Returns:\n    list: A list of words from the input string.\n    \"\"\"\n    return input_string.split()\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import string_to_list_of_words\n\ndef test_string_to_list_of_words_simple():\n    assert string_to_list_of_words(\"hello world\") == ['hello', 'world']\n\ndef test_string_to_list_of_words_with_punctuation():\n    assert string_to_list_of_words(\"hello, world!\") == ['hello', 'world!']\n\ndef test_string_to_list_of_words_empty_string():\n    assert string_to_list_of_words(\"\") == []\n\ndef test_string_to_list_of_words_multiple_spaces():\n    assert string_to_list_of_words(\"hello  world\") == ['hello', 'world']\n\ndef test_string_to_list_of_words_newline():\n    assert string_to_list_of_words(\"hello\\nworld\") == ['hello', 'world']\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000063", "row_id": 63, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a string into a list of words."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to detect and remove duplicate elements from a list. Write a test case to validate your function."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef remove_duplicates(input_list):\n    \"\"\"\n    Returns a new list with duplicates removed while preserving the original order.\n    \"\"\"\n    seen = set()\n    unique_list = []\n    for item in input_list:\n        if item not in seen:\n            unique_list.append(item)\n            seen.add(item)\n    return unique_list\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import remove_duplicates\n\ndef test_remove_duplicates_empty_list():\n    assert remove_duplicates([]) == []\n\ndef test_remove_duplicates_single_element():\n    assert remove_duplicates([1]) == [1]\n\ndef test_remove_duplicates_with_duplicates():\n    assert remove_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_remove_duplicates_with_duplicates_and_empty():\n    assert remove_duplicates([1, 2, 2, 3, 4, 4, 5, 'a', 'a']) == [1, 2, 3, 4, 5, 'a']\n\ndef test_remove_duplicates_with_duplicates_and_strings():\n    assert remove_duplicates([\"apple\", \"banana\", \"apple\", \"orange\"]) == [\"apple\", \"banana\", \"orange\"]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000064", "row_id": 64, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to detect and remove duplicate elements from a list. Write a test case to validate your function."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the nth Fibonacci number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci(n):\n    \"\"\"\n    Returns the nth Fibonacci number.\n    \n    The Fibonacci sequence is a series of numbers where each number is the sum\n    of the two preceding ones, usually starting with 0 and 1. That is,\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n    \n    Parameters:\n    n (int): The position in the Fibonacci sequence.\n    \n    Returns:\n    int: The nth Fibonacci number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import fibonacci\n\ndef test_fibonacci_zero():\n    assert fibonacci(0) == 0\n\ndef test_fibonacci_one():\n    assert fibonacci(1) == 1\n\ndef test_fibonacci_two():\n    assert fibonacci(2) == 1\n\ndef test_fibonacci_five():\n    assert fibonacci(5) == 5\n\ndef test_fibonacci_twenty():\n    assert fibonacci(20) == 6765\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000065", "row_id": 65, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the nth Fibonacci number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum sum of a subarray within an array of integers. This is the famous Kadane's algorithm problem."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_subarray_sum(arr):\n    \"\"\"\n    Returns the maximum sum of a contiguous subarray within the one-dimensional array of numbers.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    # Initialize max_sum and current_sum with the first element\n    max_sum = current_sum = arr[0]\n    \n    # Iterate through the array starting from the second element\n    for num in arr[1:]:\n        # If current_sum is negative, discard it and start a new subarray\n        current_sum = max(num, current_sum + num)\n        # Update max_sum if current_sum is greater\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_subarray_sum\n\ndef test_max_subarray_sum_positive():\n    assert max_subarray_sum([1, 2, 3, 4, -10, 10]) == 10\n\ndef test_max_subarray_sum_single_element():\n    assert max_subarray_sum([5]) == 5\n\ndef test_max_subarray_sum_all_negative():\n    assert max_subarray_sum([-2, -3, -1]) == -1\n\ndef test_max_subarray_sum_mixed_elements():\n    assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6\n\ndef test_max_subarray_sum_empty_array():\n    assert max_subarray_sum([]) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000066", "row_id": 66, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum sum of a subarray within an array of integers. This is the famous Kadane's algorithm problem."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the sum of all even numbers in a list. You should use list comprehension along with the `sum()` function to achieve this."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_of_evens(lst):\n    \"\"\"\n    Returns the sum of all even numbers in the given list.\n    \"\"\"\n    return sum([x for x in lst if x % 2 == 0])\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_of_evens\n\ndef test_sum_of_evens_empty_list():\n    assert sum_of_evens([]) == 0\n\ndef test_sum_of_evens_single_odd_element():\n    assert sum_of_evens([3]) == 0\n\ndef test_sum_of_evens_single_even_element():\n    assert sum_of_evens([2]) == 2\n\ndef test_sum_of_evens_multiple_elements():\n    assert sum_of_evens([1, 2, 3, 4, 5, 6]) == 12\n\ndef test_sum_of_evens_with_odds():\n    assert sum_of_evens([1, 3, 5, 7]) == 0\n\ndef test_sum_of_evens_with_negatives_and_zerors():\n    assert sum_of_evens([-4, -3, -2, -1, 0]) == -4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000067", "row_id": 67, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the sum of all even numbers in a list. You should use list comprehension along with the `sum()` function to achieve this."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to implement the quick sort algorithm, and explain the code line by line."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef quick_sort(arr):\n    \"\"\"\n    Sorts the array using the quick sort algorithm.\n    :param arr: List of integers to be sorted\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quick_sort(left) + middle + quick_sort(right)\n```\n\nThis function `quick_sort` implements the quick sort algorithm by following these steps:\n1. **Base Case**: If the list has 1 or 0 elements, it is already sorted, so we return it as is.\n2. **Choose a Pivot**: The pivot is chosen from the middle element of the list. This is a simple choice but can be improved for better performance in certain cases.\n3. **Partition**: The list is divided into three parts:\n   - `left`: All elements smaller than the pivot.\n   - `middle`: All elements equal to the pivot.\n   - `right`: All elements larger than the pivot.\n4. **Recursive Sort**: The `left` and `right` sublists are recursively sorted.\n5. **Concatenate**: The sorted `left` sublist, `middle` list, and sorted `right` sublist are concatenated to form the final sorted list.\n\nThe function `quick_sort` does not modify the original list but returns a new sorted list.\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef test_quick_sort_empty_list():\n    assert quick_sort([]) == []\n\ndef test_quick_sort_single_element():\n    assert quick_sort([5]) == [5]\n\ndef test_quick_sort_sorted_list():\n    assert quick_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_quick_sort_reverse_sorted_list():\n    assert quick_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n\ndef test_quick_sort_random_list():\n    assert quick_sort([3, 6, 8, 10, 1, 2, 1]) == [1, 1, 2, 3, 6, 8, 10]\n\ndef test_quick_sort_with_duplicates():\n    assert quick_sort([3, 3, 3, 3, 5]) == [3, 3, 3, 3, 5]\n```\n\n### Explanation of Test Functions:\n1. **test_quick_sort_empty_list**: Tests that the function correctly returns an empty list when given an empty input.\n2. **test_quick_sort_single_element**: Tests that the function correctly returns a single-element list as is.\n3. **test_quick_sort_sorted_list**: Tests that the function correctly sorts a list that is already sorted.\n4. **test_quick_sort_reverse_sorted_list**: Tests that the function correctly sorts a list that is reverse-sorted.\n5. **test_quick_sort_random_list**: Tests that the function correctly sorts a random list.\n6. **test_quick_sort_with_duplicates**: Tests that the function correctly handles lists with duplicate values, ensuring the duplicates are in the same order as they were in the input."}], "metadata": {"prompt_id": "00000068", "row_id": 68, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to implement the quick sort algorithm, and explain the code line by line."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count the trailing zeros in a given number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_trailing_zeros(number: int) -> int:\n    \"\"\"\n    Counts the number of trailing 0 bits in the binary representation of a given integer.\n    \"\"\"\n    count = 0\n    while number and number % 2 == 0:\n        number >>= 1\n        count += 1\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_count_trailing_zeros():\n    assert count_trailing_zeros(100) == 2\n    assert count_trailing_zeros(7) == 0\n    assert count_trailing_zeros(1024) == 10\n    assert count_trailing_zeros(2048) == 11\n    assert count_trailing_zeros(5) == 0\n\ndef test_count_trailing_zeros_large_number():\n    assert count_trailingzeros(16777216) == 24\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000069", "row_id": 69, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count the trailing zeros in a given number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the sum of all the multiples of 3 or 5 below 1000."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_of_multiples():\n    \"\"\"\n    Returns the sum of all the multiples of 3 or 5 below 1000.\n    \"\"\"\n    return sum(i for i in range(1000) if i % 3 == 0 or i % 5 == 0)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_of_multiples\n\ndef test_sum_of_multiples():\n    assert sum_of_multiples() == 233168\n```"}], "metadata": {"prompt_id": "00000071", "row_id": 71, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the sum of all the multiples of 3 or 5 below 1000."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to perform a binary search on a sorted list of integers. The function should return the index of the target value if it is found, or -1 if it is not found. The list may not be empty."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef binary_search(arr, target):\n    \"\"\"\n    Perform a binary search on a sorted list of integers.\n    Returns the index of the target value if found, otherwise -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import binary_search\n\ndef test_binary_search_positive():\n    assert binary_search([1, 2, 3, 4, 5], 3) == 2\n    assert binary_search([10, 20, 30, 40, 50], 40) == 3\n\ndef test_binary_search_not_found():\n    assert binary_search([1, 2, 3, 4, 5], 6) == -1\n    assert binary_search([10, 20, 30, 40, 50], 7) == -1\n\ndef test_binary_search_single_element():\n    assert binary_search([5], 5) == 0\n    assert binary_search([5], 4) == -1\n\ndef test_binary_search_empty_list():\n    assert binary_search([], 1) == -1\n    assert binary_search([], 2) == -1\n\ndef test_binary_search_edge_cases():\n    assert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == 0\n    assert binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 9\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000073", "row_id": 73, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to perform a binary search on a sorted list of integers. The function should return the index of the target value if it is found, or -1 if it is not found. The list may not be empty."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given number is perfect square or not. The function should take an integer as input and return True if the number is a perfect square, False otherwise."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_perfect_square(num: int) -> bool:\n    \"\"\"\n    Checks if the given number is a perfect square.\n    \n    Args:\n    num (int): The number to check\n    \n    Returns:\n    bool: True if num is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n    root = int(num ** 0.5)\n    return root * root == num\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import is_perfect_square\n\ndef test_is_perfect_square_positive_perfect_square():\n    assert is_perfect_square(1) == True\n    assert is_perfect_square(4) == True\n    assert is_perfect_square(9) == True\n    assert is_perfect_square(16) == True\n    assert is_perfect_square(25) == True\n\ndef test_is_perfect_square_negative_number():\n    assert is_perfect_square(-4) == False\n\ndef test_is_perfect_square_non_perfect_square():\n    assert is_perfect_square(2) == False\n    assert is_perfect_square(3) == False\n    assert is_perfect_square(5) == False\n    assert is_perfect_square(6) == False\n    assert is_perfect_square(7) == False\n\ndef test_is_perfect_square_zero():\n    assert is_perfect_square(0) == True\n\ndef test_is_perfect_square_large_number():\n    assert is_perfect_square(15625) == True\n    assert is_perfect_square(15626) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000074", "row_id": 74, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given number is perfect square or not. The function should take an integer as input and return True if the number is a perfect square, False otherwise."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a number is perfect or not."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_perfect_number(num: int) -> bool:\n    \"\"\"\n    Checks if the given number is a perfect number.\n    A perfect number is a positive integer that is equal to the sum of its proper divisors,\n    excluding the number itself.\n    \"\"\"\n    if num < 1:\n        return False\n    divisors_sum = 1  # 1 is a divisor for all positive integers\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            divisors_sum += i\n            if i != num // i:  # add the quotient only if it's different from i\n                divisors_sum += num // i\n    return divisors_sum == num\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef test_is_perfect_number():\n    assert is_perfect_number(6) == True  # 1+2+3 = 6\n    assert is_perfect_number(28) == True  # 1+2+4+7+14 = 28\n    assert is_perfect_number(496) == True  # 1+2+4+8+16+31+62+124+248 = 496\n    assert is_perfect_number(8128) == True  # 1+2+4+8+16+32+64+127+254+508+1016+2032+4064 = 8128\n    assert is_perfect_number(12) == False  # 1+2+3+4+6 = 16\n    assert is_perfect_number(10) == False  # 1+2+5 = 8\n    assert is_perfect_number(0) == False  # 0 is not a perfect number\n    assert is_perfect_number(-28) == False  # Negative numbers are not considered perfect\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000075", "row_id": 75, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a number is perfect or not."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the factorial of a number using a for loop."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef factorial(n):\n    \"\"\"\n    Returns the factorial of n using a for loop.\n    \"\"\"\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import factorial\n\ndef test_factorial_of_zero():\n    assert factorial(0) == 1\n\ndef test_factorial_of_one():\n    assert factorial(1) == 1\n\ndef test_factorial_of_positive_number():\n    assert factorial(5) == 120\n\ndef test_factorial_of_large_number():\n    assert factorial(10) == 3628800\n\ndef test_factorial_of_negative_number():\n    with pytest.raises(ValueError, match=\"Factorial is not defined for negative numbers.\"):\n        factorial(-1)\n```"}], "metadata": {"prompt_id": "00000076", "row_id": 76, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the factorial of a number using a for loop."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort a 2D list by its sublists in increasing order based on the sum of the elements of each sublist."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sort_2d_list(our_list):\n    \"\"\"\n    Returns a new 2D list sorted by the increasing sum of elements in each sublist.\n    \"\"\"\n    return sorted(our_list, key=sum)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sort_2d_list\n\ndef test_sort_2d_list_with_negative_and_positive_integers():\n    input_list = [[3, 5, -2], [2, 5], [3, 1, -4]]\n    expected_output = [[2, 5], [3, 1, -4], [3, 5, -2]]\n    assert sort_2d_list(input_list) == expected_output\n\ndef test_sort_2d_list_with_all_positive_integers():\n    input_list = [[2, 3, 5], [5, 7], [1, 2]]\n    expected_output = [[1, 2], [2, 3, 5], [5, 7]]\n    assert sort_2d_list(input_list) == expected_output\n\ndef test_sort_2d_list_with_all_zeros():\n    input_list = [[], [0, 0, 0], [0]]\n    expected_output = [[], [0], [0, 0, 0]]\n    assert sort_2d_list(input_list) == expected_output\n\ndef test_sort_2d_list_with_single_element_lists():\n    input_list = [[3], [7], [1, 2]]\n    expected_output = [[3], [1, 2], [7]]\n    assert sort_2d_list(input_list) == expected_output\n\ndef test_sort_2d_list_with_empty_lists():\n    input_list = [[], [], []]\n    expected_output = [[], [], []]\n    assert sort_2d_list(input_list) == expected_output\n\ndef test_sort_2d_list_with_mixed_sublists():\n    input_list = [[2, -1], [3, -3, 2], [], [-3, -2]]\n    expected_output = [[], [-3, -2], [2, -1], [3, -3, 2]]\n    assert sort_2d_list(input_list) == expected_output\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000077", "row_id": 77, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort a 2D list by its sublists in increasing order based on the sum of the elements of each sublist."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a string using slicing."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef reverse_string(s: str) -> str:\n    \"\"\"\n    Returns the reverse of the input string using slicing.\n    \"\"\"\n    return s[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import reverse_string\n\ndef test_reverse_string_empty():\n    assert reverse_string(\"\") == \"\"\n\ndef test_reverse_string_single_character():\n    assert reverse_string(\"a\") == \"a\"\n\ndef test_reverse_string_even_length():\n    assert reverse_string(\"abc ded\") == \"de dcba\"\n\ndef test_reverse_string_odd_length():\n    assert reverse_string(\"hello\") == \"olleh\"\n\ndef test_reverse_string_punctuation():\n    assert reverse_string(\"hello, world!\") == \"!dlrow ,olleh\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000079", "row_id": 79, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a string using slicing."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the number of unique elements in a given list. thoughts to solve: First, recognize that unique elements are those that appear only once in the list. One could iterate through the list and for each element, count how many times it appears. If it appears exactly once, it's a unique element. Another approach could be to use a data structure that inherently prevents duplicates, such as a set. A set only stores unique elements, so if a list is converted to a set, the length of the set will be the number of unique elements."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_unique_elements(lst):\n    \"\"\"\n    Returns the number of unique elements in a given list.\n    \n    Parameters:\n    lst (list): The input list containing elements.\n    \n    Returns:\n    int: The number of unique elements.\n    \"\"\"\n    unique_elements = set(lst)\n    return len(unique_elements)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_unique_elements\n\ndef test_count_unique_elements_empty_list():\n    assert count_unique_elements([]) == 0\n\ndef test_count_unique_elements_single_element():\n    assert count_unique_elements([1]) == 1\n\ndef test_count_unique_elements_duplicate_elements():\n    assert count_unique_elements([1, 2, 3, 4, 5]) == 5\n\ndef test_count_unique_elements_with_duplicates():\n    assert count_unique_elements([1, 2, 2, 3, 4, 4, 5]) == 5\n\ndef test_count_unique_elements_same_elements():\n    assert count_unique_elements([1, 1, 1, 1, 1]) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000081", "row_id": 81, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the number of unique elements in a given list. thoughts to solve: First, recognize that unique elements are those that appear only once in the list. One could iterate through the list and for each element, count how many times it appears. If it appears exactly once, it's a unique element. Another approach could be to use a data structure that inherently prevents duplicates, such as a set. A set only stores unique elements, so if a list is converted to a set, the length of the set will be the number of unique elements."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find disjunctive normal form (DNF) of a 2-variable boolean formula using the sympy library. Provide a simple explanation of the function and its inputs/output."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nfrom sympy import symbols, And, Or, Not, to_dnf\n\n# Define the symbols\nx, y = symbols('x y')\n\ndef to_disjunctive_normal_form(formula):\n    \"\"\"\n    Returns the disjunctive normal form (DNF) of a 2-variable boolean formula.\n    \n    Parameters:\n    formula (str): A string representing a 2-variable boolean formula using 'x', 'y', and logical operators 'and', 'or', 'not'.\n\n    Returns:\n    str: The disjunctive normal form of the given formula.\n    \"\"\"\n    # Use sympy's to_dnf function to convert the formula to DNF\n    dnf_formula = to_dnf(formula)\n    return str(dnf_formula)\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef test_to_disjunctive_normal_form():\n    # Test cases for the to_disjunctive_normal_form function\n    assert to_disjunctive_normal_form(\"x and y\") == \"(x & y)\"\n    assert to_disjunctive_normal_form(\"not x and y\") == \"((~x) & y)\"\n    assert to_disjunctive_normal_form(\"x or y\") == \"(x | y)\"\n    assert to_disjunctive_normal_form(\"not x or y\") == \"(((~x) | y))\"\n    assert to_disjunctive_normal_form(\"not x and not y\") == \"((~x) & (~y))\"\n    assert to_disjunctive_normal_form(\"not (x and y)\") == \"((~(x & y)))\"\n    assert to_disjunctive_normal_form(\"true and x\") == \"(True & x)\"\n    assert to_disjunctive_normal_form(\"false or y\") == \"(((False) | y))\"\n\n    # Edge cases\n    assert to_disjunctive_normal_form(\"x\") == \"x\"\n    assert to_disjunctive_normal_form(\"not x\") == \"~x\"\n    assert to_disjunctive_normal_form(\"true\") == \"True\"\n    assert to_disjunctive_normal_form(\"false\") == \"False\"\n\ndef test_to_disjunctive_normal_form_invalid_syntax():\n    # Invalid formula should throw a ValueError\n    with pytest.raises(ValueError):\n        to_disjunctive_normal_form(\"x and\")\n\ndef test_to_disjunctive_normal_form_malformed():\n    # Malformed formula should not evaluate correctly\n    assert to_disjunctive_normal_form(\"x and y or\") == \"(x & y & ~y)\"\n    assert to_disjunctive_normal_form(\"x and y or not z\") == \"(x & y & (~z))\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000082", "row_id": 82, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find disjunctive normal form (DNF) of a 2-variable boolean formula using the sympy library. Provide a simple explanation of the function and its inputs/output."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the area of a circle given its radius."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport math\n\ndef area_of_circle(radius):\n    \"\"\"\n    Returns the area of a circle given its radius.\n    \"\"\"\n    return math.pi * (radius ** 2)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import area_of_circle\n\ndef test_area_of_circle_positive_radius():\n    assert abs(area_of_circle(1) - math.pi) < 1e-9\n    assert abs(area_of_circle(2) - (4 * math.pi)) < 1e-9\n\ndef test_area_of_circle_zero_radius():\n    assert area_of_circle(0) == 0.0\n\ndef test_area_of_circle_negative_radius():\n    assert abs(area_of_circle(-1) - math.pi) < 1e-9\n\ndef test_area_of_circle_large_radius():\n    assert abs(area_of_circle(10) - (100 * math.pi)) < 1e-9\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000083", "row_id": 83, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the area of a circle given its radius."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the number of times a specified value appears in a list. Here's a sample list: [1, 2, 3, 4, 5, 2, 2, 3]"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_value_occurrences(lst, value):\n    \"\"\"\n    Returns the number of times `value` appears in `lst`.\n    \"\"\"\n    return lst.count(value)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_value_occurrences\n\ndef test_count_value_occurrences():\n    assert count_value_occurrences([1, 2, 3, 4, 5, 2, 2, 3], 2) == 3\n    assert count_value_occurrences([1, 2, 3, 4, 5, 2, 2, 3], 1) == 1\n    assert count_value_occurrences([1, 2, 3, 4, 5, 2, 2, 3], 6) == 0\n    assert count_value_occurrences([], 1) == 0\n    assert count_value_occurrences([7, 7, 7, 7], 7) == 4\n```"}], "metadata": {"prompt_id": "00000084", "row_id": 84, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the number of times a specified value appears in a list. Here's a sample list: [1, 2, 3, 4, 5, 2, 2, 3]"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the minimum element in an array. You should also handle the case when the array is empty."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_minimum(arr):\n    \"\"\"\n    Returns the minimum element in the array arr.\n    If the array is empty, returns None.\n    \"\"\"\n    if not arr:\n        return None\n    return min(arr)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_minimum\n\ndef test_find_minimum_non_empty_array():\n    assert find_minimum([3, 1, 4, 1, 5, 9]) == 1\n\ndef test_find_minimum_single_element_array():\n    assert find_minimum([10]) == 10\n\ndef test_find_minimum_empty_array():\n    assert find_minimum([]) == None\n\ndef test_find_minimum_negative_numbers():\n    assert find_minimum([-5, -1, -6]) == -6\n\ndef test_find_minimum_with_duplicate_minimum():\n    assert find_minimum([2, 2, 3, 1, 2]) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000086", "row_id": 86, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the minimum element in an array. You should also handle the case when the array is empty."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse the order of characters in a string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef reverse_string(s: str) -> str:\n    \"\"\"\n    Returns a new string with the characters of the input string in reverse order.\n    \"\"\"\n    return s[::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import reverse_string\n\ndef test_reverse_string_empty():\n    assert reverse_string(\"\") == \"\"\n\ndef test_reverse_string_single_char():\n    assert reverse_string(\"a\") == \"a\"\n\ndef test_reverse_string_multiple_chars():\n    assert reverse_string(\"hello\") == \"olleh\"\n\ndef test_reverse_string_with_spaces():\n    assert reverse_string(\"hello world\") == \"dlrow olleh\"\n\ndef test_reverse_string_with_special_chars():\n    assert reverse_string(\"hello!@#\") == \"#@!olleh\"\n```"}], "metadata": {"prompt_id": "00000087", "row_id": 87, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse the order of characters in a string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to filter out the words that contain a specific substring and return a list of words that do not contain that substring from a given list of words."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef filter_words\u4e0d\u542b(\"{}\", \"{}\"):\n    \"\"\"\n    Returns a list of words from the input list that do not contain the specified substring.\n    \"\"\"\n    return [word for word in input_list if substring not in word]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import filter_words\u4e0d\u542b\n\ndef test_filter_words\u4e0d\u542b():\n    assert filter_words\u4e0d\u542b([\"hello\", \"world\", \" \u00f6nemli\", \" merhaba\"], \"\u4e0d\") == [\"hello\", \"world\", \"\u975e\u5e38\u91cd\u8981\", \"merhaba\"]\n    assert filter_words\u4e0d\u542b([\"apple\", \"banana\", \"grape\"], \"a\") == [\"grape\"]\n    assert filter_words\u4e0d\u542b([\"sun\", \"moon\", \"star\"], \"sun\") == [\"moon\", \"star\"]\n    assert filter_words\u4e0d\u542b([], \"x\") == []\n    assert filter_words\u4e0d\u542b([\"include\", \"exclude\", \"accept\"], \"e\") == [\"include\", \"accept\"]\n```\n<|Test End|>\n\n**Note:** In the solution and tests, I used \"\u4e0d\u542b\" (not contain) as the substring to be filtered out. However, this was done in a way to ensure the function works correctly with different inputs, including different languages and characters. The function and tests should now be ready to handle various types of input."}], "metadata": {"prompt_id": "00000088", "row_id": 88, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to filter out the words that contain a specific substring and return a list of words that do not contain that substring from a given list of words."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the factorial of a given number. The function should take an integer as input and return the factorial of that integer. Additionally, the function should handle edge cases such as negative numbers and zero."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef factorial(n):\n    \"\"\"\n    Returns the factorial of n. If n is a negative integer, the function returns None.\n    For n=0, the function returns 1 as the factorial of 0 is 1.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import factorial\n\ndef test_factorial_positive_numbers():\n    assert factorial(5) == 120\n    assert factorial(3) == 6\n    assert factorial(1) == 1\n\ndef test_factorial_zero():\n    assert factorial(0) == 1\n\ndef test_factorial_negative_numbers():\n    assert factorial(-1) is None\n    assert factorial(-5) is None\n\ndef test_factorial_large_number():\n    assert factorial(10) == 3628800\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000089", "row_id": 89, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the factorial of a given number. The function should take an integer as input and return the factorial of that integer. Additionally, the function should handle edge cases such as negative numbers and zero."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find all prime numbers within a given range (inclusive). The function should return a list of all prime numbers within the range."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef find_primes_in_range(start, end):\n    \"\"\"\n    Returns a list of all prime numbers between start and end inclusive.\n    \"\"\"\n    primes = []\n    for num in range(start, end + 1):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef test_find_primes_in_range():\n    assert find_primes_in_range(5, 11) == [5, 7, 11]\n    assert find_primes_in_range(14, 19) == [17, 19]\n    assert find_primes_in_range(22, 29) == [23, 29]\n    assert find_primes_in_range(1, 3) == [2, 3]\n    assert find_primes_in_range(100, 104) == []\n    assert find_primes_in_range(75, 80) == [79]\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000091", "row_id": 91, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find all prime numbers within a given range (inclusive). The function should return a list of all prime numbers within the range."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort a list of tuples by the second item in each tuple. The function should take a list of tuples as input and return the sorted list in ascending order based on the second item of each tuple. If the second item is the same for multiple tuples, the tuples should be sorted by their first item in ascending order."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sort_tuples(lst):\n    \"\"\"\n    Sorts a list of tuples by the second item, then by the first item if the second items are equal.\n    \"\"\"\n    return sorted(lst, key=lambda x: (x[1], x[0]))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_sort_tuples():\n    assert sort_tuples([(1, 3), (4, 1), (5, 2), (3, 2)]) == [(4, 1), (3, 2), (5, 2), (1, 3)]\n    assert sort_tuples([(2, 2), (3, 1), (1, 2), (4, 1)]) == [(3, 1), (4, 1), (1, 2), (2, 2)]\n    assert sort_tuples([(1, 5), (2, 4), (3, 4)]) == [(2, 4), (3, 4), (1, 5)]\n    assert sort_tuples([(1, 1), (2, 2), (3, 1)]) == [(1, 1), (3, 1), (2, 2)]\n    assert sort_tuples([(10, 10), (5, 5), (7, 8)]) == [(5, 5), (7, 8), (10, 10)]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000092", "row_id": 92, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort a list of tuples by the second item in each tuple. The function should take a list of tuples as input and return the sorted list in ascending order based on the second item of each tuple. If the second item is the same for multiple tuples, the tuples should be sorted by their first item in ascending order."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the smallest number in an array of integers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_smallest_number(arr):\n    \"\"\"\n    Returns the smallest number in an array of integers.\n    \n    Parameters:\n    arr (list of int): The array of integers.\n    \n    Returns:\n    int: The smallest number in the array.\n    \"\"\"\n    if not arr:  # Check if the array is empty\n        return None\n    smallest = arr[0]\n    for num in arr:\n        if num < smallest:\n            smallest = num\n    return smallest\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef test_find_smallest_number_with_positive_numbers():\n    arr = [4, 2, 9, 7, 5, 6]\n    assert find_smallest_number(arr) == 2\n\ndef test_find_smallest_number_with_negative_numbers():\n    arr = [-5, -2, -6, -1, -3]\n    assert find_smallest_number(arr) == -6\n\ndef test_find_smallest_number_with_mixed_sign_numbers():\n    arr = [2, -3, 5, -1, 0, -4]\n    assert find_smallest_number(arr) == -4\n\ndef test_find_smallest_number_with_single_element():\n    arr = [7]\n    assert find_smallest_number(arr) == 7\n\ndef test_find_smallest_number_with_empty_array():\n    arr = []\n    assert find_smallest_number(arr) is None\n\ndef test_find_smallest_number_with_duplicate_numbers():\n    arr = [3, 3, 3, 3, 3]\n    assert find_smallest_number(arr) == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000093", "row_id": 93, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the smallest number in an array of integers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find all the root-to-leaf paths where the sum of all these path sums equals a target sum."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef path_sum(root, targetSum):\n    \"\"\"\n    Returns all root-to-leaf paths where the sum of the path equals the target sum.\n    \"\"\"\n    def dfs(node, path, pathList):\n        if not node:\n            return\n        path.append(node.val)\n        if not node.left and not node.right and sum(path) == targetSum:\n            pathList.append(path.copy())\n        dfs(node.left, path, pathList)\n        dfs(node.right, path, pathList)\n        path.pop()\n\n    result = []\n    dfs(root, [], result)\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import TreeNode, path_sum\n\ndef test_path_sum():\n    # Construct the tree:     5\n    #                         / \\\n    #                        4   8\n    #                       /   / \\\n    #                      11  13  4\n    #                     /  \\     \\\n    #                    7    2      1\n    root = TreeNode(5, \n                    TreeNode(4, \n                             TreeNode(11, \n                                      TreeNode(7), \n                                      TreeNode(2)), \n                             None), \n                    TreeNode(8, \n                             TreeNode(13), \n                             TreeNode(4, \n                                      None, \n                                      TreeNode(1))))\n    targetSum = 22\n\n    expected = [[5, 4, 11, 2], [5, 8, 4, 1]]\n    assert path_sum(root, targetSum) == expected\n\ntest_path_sum()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000095", "row_id": 95, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find all the root-to-leaf paths where the sum of all these path sums equals a target sum."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to evaluate an arithmetic expression given as a string. The expression includes integers, the operators '+', '-', '*', and '(', ')', and has at least one operator."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef evaluate_expression(expression: str) -> int:\n    \"\"\"\n    Evaluates an arithmetic expression given as a string.\n    The expression can include integers, the operators '+', '-', '*', \n    and '(', ')'.\n    \"\"\"\n    def compute(nums, ops):\n        while len(ops) > 0:\n            cur_op = ops.pop()\n            if cur_op == '+':\n                nums[-2] += nums[-1]\n                nums.pop()\n            elif cur_op == '-':\n                nums[-2] -= nums[-1]\n                nums.pop()\n            elif cur_op == '*':\n                nums[-2] *= nums[-1]\n                nums.pop()\n    \n    def evaluate(parens):\n        nums, ops = [], []\n        idx = 0\n        while idx < len(parens):\n            if parens[idx].isdigit():\n                num = 0\n                while idx < len(parens) and parens[idx].isdigit():\n                    num = num * 10 + int(parens[idx])\n                    idx += 1\n                nums.append(num)\n                idx -= 1\n            elif parens[idx] == '(':\n                temp = evaluate(parens[idx+1:])\n                nums.append(temp[0])\n                idx += temp[1]\n            elif parens[idx] == '+' or parens[idx] == '-' or parens[idx] == '*':\n                while len(ops) > 0 and ops[-1] != '(' and precedence[ops[-1]] >= precedence[paresns[idx]]:\n                    compute(nums, ops)\n                ops.append(parens[idx])\n            idx += 1\n        while len(ops) > 0:\n            compute(nums, ops)\n        return nums[0]\n\n    precedence = {'+': 1, '-': 1, '*': 2}\n    return evaluate(expression)\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef test_evaluate_expression():\n    assert evaluate_expression(\"1+2\") == 3\n    assert evaluate_expression(\"1+2*3\") == 7\n    assert evaluate_expression(\"3+2*(1+2)*4\") == 31\n\ndef test_integer_only():\n    assert evaluate_expression(\"123\") == 123\n\ndef test_complex_expression():\n    assert evaluate_expression(\"2-1+1\") == 2\n    assert evaluate_expression(\"6*2-(4*3)\") == -6\n\ndef test_precedence():\n    assert evaluate_expression(\"2*3-4*5\") == -14\n\ndef test_parentheses():\n    assert evaluate_expression(\"5-(8-3)\") == 0\n    assert evaluate_expression(\"(2+2)*3\") == 12\n\ndef test_singleton():\n    assert evaluate_expression(\"1\") == 1\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000096", "row_id": 96, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to evaluate an arithmetic expression given as a string. The expression includes integers, the operators '+', '-', '*', and '(', ')', and has at least one operator."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to remove the duplicates from a list while preserving the original order of elements."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef remove_duplicates_preserve_order(lst):\n    \"\"\"\n    Removes duplicates from a list while preserving the original order of elements.\n    \n    :param lst: List from which duplicates are to be removed.\n    :return: A new list with duplicates removed.\n    \"\"\"\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_remove_duplicates_preserve_order():\n    assert remove_duplicates_preserve_order([1, 2, 3, 1, 2, 5]) == [1, 2, 3, 5]\n    assert remove_duplicates_preserve_order(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']\n    assert remove_duplicates_preserve_order([1, 1, 1, 1, 1]) == [1]\n    assert remove_duplicates_preserve_order([]) == []\n    assert remove_duplicates_preserve_order([5, 4, 3, 2, 1, 4, 3]) == [5, 4, 3, 2, 1]\n\ndef test_remove_duplicates_with_duplicates_inside_tuple():\n    # This tests for a potential pitfall with immutable types, where a mutable object might be stored in the list.\n    test_list = [1, (2, 3), 'a', (2, 3), 'b', 1]\n    expected_result = [1, (2, 3), 'a', 'b']\n    assert remove_duplicates_preserve_order(test_list) == expected_result\n\ndef test_remove_duplicates_with_tuple_elements_in_list():\n    # Test with a list that contains tuples\n    test_list = [(1,), (2,), (1,), (3,), (2,)]\n    expected_result = [(1,), (2,), (3,)]\n    assert remove_duplicates_preserve_order(test_list) == expected_result\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000097", "row_id": 97, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to remove the duplicates from a list while preserving the original order of elements."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the Fibonacci sequence up to a certain number of terms."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci(n):\n    \"\"\"\n    Returns the nth Fibonacci number and a list of the first n Fibonacci numbers.\n    \"\"\"\n    if n <= 0:\n        return 0, []\n    elif n == 1:\n        return 1, [0]\n    elif n == 2:\n        return 1, [0, 1]\n    \n    fib_sequence = [0, 1]\n    for i in range(2, n):\n        next_value = fib_sequence[-1] + fib_sequence[-2]\n        fib_sequence.append(next_value)\n    \n    return fib_sequence[-1], fib_sequence\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import fibonacci\n\ndef test_fibonacci_zero_terms():\n    assert fibonacci(0) == (0, [])\n\ndef test_fibonacci_one_term():\n    assert fibonacci(1) == (1, [0])\n\ndef test_fibonacci_two_terms():\n    assert fibonacci(2) == (1, [0, 1])\n\ndef test_fibonacci_five_terms():\n    assert fibonacci(5) == (5, [0, 1, 1, 2, 3])\n\ndef test_fibonacci.twenty_terms():\n    assert fibonacci(20) == (6765, [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181])\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000098", "row_id": 98, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the Fibonacci sequence up to a certain number of terms."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to detect a cycle in a directed graph using DFS"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict\n\ndef dfs visit(graph, node, visited, rec_stack):\n    \"\"\"\n    Helper function to detect cycle using DFS.\n    :param graph: Directed graph represented as adjacency list.\n    :param node: Current node being processed.\n    :param visited: Set of visited nodes.\n    :param rec_stack: Stack to keep track of nodes in the current recursion.\n    :return: True if cycle is detected, False otherwise.\n    \"\"\"\n    if node in rec_stack:\n        # Node is in recursion stack, cycle is detected.\n        return True\n    if node in visited:\n        # Node is already visited, no need to explore further.\n        return False\n\n    # Mark current node as visited and add to recursion stack.\n    visited.add(node)\n    rec_stack.add(node)\n\n    # Recur for all the vertices adjacent to this node.\n    for neighbor in graph[node]:\n        if dfs visit(graph, neighbor, visited, rec_stack):\n            return True\n\n    # Remove the node from recursion stack.\n    rec_stack.remove(node)\n    return False\n\ndef detect_cycle(graph):\n    \"\"\"\n    Returns True if a cycle is detected in the directed graph, False otherwise.\n    :param graph: Directed graph represented as adjacency list.\n    :return: True if cycle is detected, False otherwise.\n    \"\"\"\n    visited = set()\n    rec_stack = set()\n    for node in graph:\n        if dfs visit(graph, node, visited, rec_stack):\n            return True\n    return False\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import detect_cycle, dfs_visit\n\ndef test_dfs_visit_no_cycle():\n    graph = {\n        0: [1],\n        1: [2],\n        2: []\n    }\n    assert not dfs_visit(graph, 0, set(), set())\n\ndef test_dfs_visit_cycle():\n    graph = {\n        0: [1],\n        1: [2],\n        2: [0]\n    }\n    assert dfs_visit(graph, 0, set(), set())\n\ndef test_detect_cycle_no_cycle():\n    graph = {\n        0: [1],\n        1: [2],\n        2: []\n    }\n    assert not detect_cycle(graph)\n\ndef test_detect_cycle_cycle():\n    graph = {\n        0: [1],\n        1: [2],\n        2: [0]\n    }\n    assert detect_cycle(graph)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000099", "row_id": 99, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to detect a cycle in a directed graph using DFS"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to iterate over a list and print each number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef print_numbers(numbers):\n    \"\"\"\n    Iterates over a list of numbers and prints each one.\n    \"\"\"\n    for number in numbers:\n        print(number)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_print_numbers():\n    with test_script capturing print output as output:\n        print_numbers([1, 2, 3])\n    assert output == '1\\n2\\n3\\n'\n\ndef test_empty_list():\n    with test_script capturing print output as output:\n        print_numbers([])\n    assert output == ''\n\ndef test_mixed_sign_numbers():\n    with test_script capturing print output as output:\n        print_numbers([-1, 0, 1])\n    assert output == '-1\\n0\\n1\\n'\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000101", "row_id": 101, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to iterate over a list and print each number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given string is a valid identifier in Python."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport keyword\n\ndef is_valid_identifier(s):\n    \"\"\"\n    Returns True if the string is a valid Python identifier, otherwise False.\n    \n    :param s: the string to check\n    :return: bool\n    \"\"\"\n    # Check if the string is a Python keyword\n    if keyword.iskeyword(s):\n        return False\n    \n    # Check if the string starts with a letter or underscore\n    if not (s[0].isalpha() or s[0] == '_'):\n        return False\n    \n    # Check if the rest of the characters are alphanumeric or underscore\n    for char in s[1:]:\n        if not (char.isalnum() or char == '_'):\n            return False\n    \n    return True\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport keyword\nfrom solution import is_valid_identifier\n\ndef test_is_valid_identifier():\n    assert is_valid_identifier('valid_identifier') == True\n    assert is_valid_identifier('with_number4') == True\n    assert is_valid_identifier('_underscore_start') == True\n    assert is_valid_identifier('4invalid') == False\n    assert is_valid_identifier('for') == False  # Python keyword\n    assert is_valid_identifier('import') == False  # Python keyword\n    assert is_valid_identifier('if') == False  # Python keyword\n    assert is_valid_identifier('') == False\n    assert is_valid_identifier('invalid-character!') == False\n    assert is_valid_identifier('valid123') == True\n    assert is_valid_identifier('valid_123') == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000104", "row_id": 104, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given string is a valid identifier in Python."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the shortest distance from a point to a line in a 2D plane."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef shortest_distance_from_point_to_line(A, B, C, x, y):\n    \"\"\"\n    Calculate the shortest distance from a point (x, y) to a line represented \n    by the equation Ax + By + C = 0.\n    \n    Parameters:\n    A (float): Coefficient A of the line equation.\n    B (float): Coefficient B of the line equation.\n    C (float): Coefficient C of the line equation.\n    x (float): x-coordinate of the point.\n    y (float): y-coordinate of the point.\n    \n    Returns:\n    float: The shortest distance from the point to the line.\n    \"\"\"\n    numerator = abs(A * x + B * y + C)\n    denominator = (A * A + B * B) ** 0.5\n    return numerator / denominator\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef test_shortest_distance_from_point_to_line():\n    # Line equation: 3x + 4y - 12 = 0\n    assert shortest_distance_from_point_to_line(3, 4, -12, 1, 2) == 2.0\n    # Line equation: x - y + 5 = 0\n    assert shortest_distance_from_point_to_line(1, -1, 5, 0, 0) == 5.0\n    # Line equation: 2x + 0y - 3 = 0\n    assert shortest_distance_from_point_to_line(2, 0, -3, 0, 1) == 1.5\n    # Line equation: -1x + 1y - 4 = 0\n    assert shortest_distance_from_point_to_line(-1, 1, -4, 0, 0) == 4.0\n\n# Edge Cases\ndef test_point_on_line():\n    # Line equation: x + y - 2 = 0\n    # Point (1, 1) lies on the line\n    assert shortest_distance_from_point_to_line(1, 1, -2, 1, 1) == 0.0\n\ndef test_parallel_line():\n    # Line equation: 4x - 2y + 10 = 0\n    assert shortest_distance_from_point_to_line(4, -2, 10, 0, 0) == 5.0\n\ndef test_coincident_line():\n    # Line equation: 2x + 4y - 8 = 0\n    # Distance remains unchanged even for points satisfying the equation\n    assert shortest_distance_from_point_to_line(2, 4, -8, 1, 1.5) == 0.5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000105", "row_id": 105, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the shortest distance from a point to a line in a 2D plane."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to perform insertion sort on a list of integers. Please make sure to provide detailed comments explaining each part of your code."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef insertion_sort(arr):\n    \"\"\"\n    Sorts a list of integers using the insertion sort algorithm.\n    \n    This algorithm iterates through the list, and for each element, it finds the correct\n    position within the sorted portion of the list and inserts it there. The algorithm\n    keeps growing the sorted portion of the list until the entire list is sorted.\n    \n    Args:\n        arr (list of int): The list of integers to sort.\n    \n    Returns:\n        list of int: The sorted list of integers.\n    \"\"\"\n    # Traverse through 1 to len(arr)\n    for i in range(1, len(arr)):\n        \n        # Store the current element\n        current_value = arr[i]\n        \n        # Initialize the position where the current element needs to be inserted\n        position = i\n        \n        # Move elements of arr[0..i-1], that are greater than current_value,\n        # to one position ahead of their current position\n        while position > 0 and arr[position - 1] > current_value:\n            arr[position] = arr[position - 1]\n            position -= 1\n        \n        # Insert the current element into its correct position\n        arr[position] = current_value\n    \n    return arr\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import insertion_sort\n\ndef test_insertion_sort_positive_numbers():\n    arr = [9, 5, 1, 4, 3]\n    sorted_arr = insertion_sort(arr)\n    assert sorted_arr == [1, 3, 4, 5, 9]\n\ndef test_insertion_sort_negative_numbers():\n    arr = [-5, -9, -3, -4]\n    sorted_arr = insertion_sort(arr)\n    assert sorted_arr == [-9, -5, -4, -3]\n\ndef test_insertion_sort_mixed_numbers():\n    arr = [0, -1, 5, -2, 3]\n    sorted_arr = insertion_sort(arr)\n    assert sorted_arr == [-2, -1, 0, 3, 5]\n\ndef test_insertion_sort_empty_list():\n    arr = []\n    sorted_arr = insertion_sort(arr)\n    assert sorted_arr == []\n\ndef test_insertion_sort_already_sorted():\n    arr = [1, 2, 3, 4, 5]\n    sorted_arr = insertion_sort(arr)\n    assert sorted_arr == [1, 2, 3, 4, 5]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000106", "row_id": 106, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to perform insertion sort on a list of integers. Please make sure to provide detailed comments explaining each part of your code."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find all the pairs of numbers in a list that sum to a given target."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_pairs(numbers, target):\n    \"\"\"\n    Returns a list of tuples, each containing a pair of numbers from 'numbers' that sum to 'target'.\n    \"\"\"\n    pairs = []\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            pairs.append((complement, num))\n        seen.add(num)\n    return pairs\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_pairs\n\ndef test_find_pairs_with_positive_numbers():\n    assert find_pairs([1, 2, 3, 4, 5], 7) == [(2, 5), (3, 4)]\n\ndef test_find_pairs_with_negative_and_positive_numbers():\n    assert find_pairs([-1, 1, -2, 2, 3], 0) == [(-1, 1), (-2, 2)]\n\ndef test_find_pairs_with_no_pairs():\n    assert find_pairs([1, 3, 5, 7], 12) == []\n\ndef test_find_pairs_single_element():\n    assert find_pairs([5], 5) == []\n\ndef test_find_pairs_duplicate_pairs():\n    assert find_pairs([1, 2, 2, 4, 5], 7) == [(2, 5), (2, 5)]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000107", "row_id": 107, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find all the pairs of numbers in a list that sum to a given target."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count the occurrences of a substring in a given string. You should use only the built-in functions of python and no external libraries should be used."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_substring_occurrences(main_string, substring):\n    \"\"\"\n    Returns the number of times the substring occurs in the main string.\n    \"\"\"\n    count = start = 0\n    while True:\n        start = main_string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_count_substring_occurrences():\n    assert count_substring_occurrences(\"hellohellohello\", \"hello\") == 3\n    assert count_substring_occurrences(\"aaa\", \"a\") == 3\n    assert count_substring_occurrences(\"test\", \"nope\") == 0\n    assert count_substring_occurrences(\"\", \"a\") == 0\n    assert count_substring_occurrences(\"ababababa\", \"aba\") == 2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000108", "row_id": 108, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count the occurrences of a substring in a given string. You should use only the built-in functions of python and no external libraries should be used."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the common elements between two lists, and return a new list containing these common elements."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_common_elements(list1, list2):\n    \"\"\"\n    Returns a new list containing elements common to both input lists.\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    common_elements = set1.intersection(set2)\n    return list(common_elements)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_common_elements\n\ndef test_find_common_elements():\n    assert find_common_elements([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\ndef test_find_common_elements_with_no_common():\n    assert find_common_elements([1, 2, 3], [4, 5, 6]) == []\n\ndef test_find_common_elements_with_duplicates():\n    assert find_common_elements([1, 2, 2, 3], [2, 2, 3, 4]) == [2, 3]\n\ndef test_find_common_elements_with_empty_lists():\n    assert find_common_elements([], [1, 2, 3]) == []\n    assert find_common_elements([1, 2, 3], []) == []\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000109", "row_id": 109, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the common elements between two lists, and return a new list containing these common elements."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the median of a list of numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_median(numbers):\n    \"\"\"\n    Returns the median of a list of numbers.\n    \"\"\"\n    n = len(numbers)\n    if n == 0:\n        raise ValueError(\"List is empty\")\n    sorted_numbers = sorted(numbers)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2\n    else:\n        return sorted_numbers[mid]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_find_median_odd_length():\n    assert find_median([3, 1, 2]) == 2\n\ndef test_find_median_even_length():\n    assert find_median([3, 1, 2, 4]) == 2.5\n\ndef test_find_median_single_element():\n    assert find_median([5]) == 5\n\ndef test_find_median_empty_list():\n    with pytest.raises(ValueError):\n        find_median([])\n\ndef test_find_median_negative_numbers():\n    assert find_median([-5, -2, -3, -1]) == -3\n\ndef test_find_median_duplicate_numbers():\n    assert find_median([1, 2, 2, 3]) == 2\n```"}], "metadata": {"prompt_id": "00000110", "row_id": 110, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the median of a list of numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to generate the Fibonacci sequence up to a given number n. The function should return a list of the Fibonacci numbers less than or equal to n."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci_sequence(n):\n    \"\"\"\n    Returns a list of Fibonacci numbers less than or equal to n.\n    \"\"\"\n    if n < 0:\n        return []\n    if n == 0:\n        return [0]\n    fib_seq = [0, 1]\n    while True:\n        next_fib = fib_seq[-1] + fib_seq[-2]\n        if next_fib > n:\n            break\n        fib_seq.append(next_fib)\n    return fib_seq\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import fibonacci_sequence\n\ndef test_fibonacci_sequence_zero():\n    assert fibonacci_sequence(0) == [0]\n\ndef test_fibonacci_sequence_small_number():\n    assert fibonacci_sequence(1) == [0, 1]\n\ndef test_fibonacci_sequence_limit_at_13():\n    assert fibonacci_sequence(13) == [0, 1, 1, 2, 3, 5, 8, 13]\n\ndef test_fibonacci_sequence_larger_number():\n    assert fibonacci_sequence(50) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n\ndef test_fibonacci_sequence_negative_input():\n    assert fibonacci_sequence(-5) == []\n\ndef test_fibonacci_sequence_single_element_list():\n    assert fibonacci_sequence(1) == [0, 1]\n\ndef test_fibonacci_sequence_large_number():\n    assert fibonacci_sequence(100) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n```"}], "metadata": {"prompt_id": "00000112", "row_id": 112, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to generate the Fibonacci sequence up to a given number n. The function should return a list of the Fibonacci numbers less than or equal to n."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the largest rectangle in a histogram."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef largest_rectangle_in_histogram(heights):\n    \"\"\"\n    Finds the largest rectangle area in a histogram with the given heights.\n    \n    :param heights: List of integers representing heights of the histogram bars.\n    :return: The area of the largest rectangle in the histogram.\n    \"\"\"\n    stack = []\n    max_area = 0\n    index = 0\n    while index < len(heights):\n        if not stack or heights[stack[-1]] <= heights[index]:\n            stack.append(index)\n            index += 1\n        else:\n            top_of_stack = stack.pop()\n            area = heights[top_of_stack] * (index - stack[-1] - 1 if stack else index)\n            max_area = max(max_area, area)\n    \n    while stack:\n        top_of_stack = stack.pop()\n        area = heights[top_of_stack] * (len(heights) - stack[-1] - 1 if stack else len(heights))\n        max_area = max(max_area, area)\n    \n    return max_area\n```\n\nThis function works by iterating through the histogram while maintaining a stack of indices for the bars. When it encounters a bar that is shorter than the bar at the index on top of the stack, it calculates the area of the rectangle that can be formed with the bar at the top of the stack as the smallest (or shortest) bar, and updates the maximum area if necessary. It then pops the index from the stack and continues this process until the stack is empty or the next bar is taller than the bar at the index on top of the stack.\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef test_largest_rectangle_in_histogram():\n    assert largest_rectangle_in_histogram([2, 1, 5, 6, 2, 3]) == 10\n    assert largest_rectangle_in_histogram([2, 4]) == 4\n    assert largest_rectangle_in_histogram([1, 2, 3, 4, 5]) == 9\n    assert largest_rectangle_in_histogram([5, 4, 3, 2, 1]) == 9\n    assert largest_rectangle_in_histogram([5, 6, 5, 4, 3, 2]) == 12\n    assert largest_rectangle_in_histogram([0, 9]) == 9\n    assert largest_rectangle_in_histogram([10]) == 10\n```\n\nThese tests cover a variety of scenarios, including an increasing trend, a decreasing trend, a mix of trends, and edge cases like single-element lists and zero-height lists. They are designed to validate that the function works correctly for different input conditions."}], "metadata": {"prompt_id": "00000113", "row_id": 113, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the largest rectangle in a histogram."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine if a given number is a prime number. If it is, return True; otherwise, return False."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, otherwise returns False.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import is_prime\n\ndef test_is_prime_with_primes():\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(5) == True\n    assert is_prime(7) == True\n\ndef test_is_prime_with_non_primes():\n    assert is_prime(4) == False\n    assert is_prime(6) == False\n    assert is_prime(8) == False\n    assert is_prime(9) == False\n    assert is_prime(10) == False\n\ndef test_is_prime_edge_cases():\n    assert is_prime(1) == False\n    assert is_prime(2) == True\n    assert is_prime(-3) == False\n\ndef test_is_prime_large_numbers():\n    assert is_prime(9973) == True\n    assert is_prime(9975) == False\n    assert is_prime(9991) == True\n    assert is_prime(9999) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000114", "row_id": 114, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine if a given number is a prime number. If it is, return True; otherwise, return False."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum number in a list of numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_max(numbers):\n    \"\"\"\n    Returns the maximum number from a list of numbers.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        raise ValueError(\"The list is empty.\")\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_max\n\ndef test_find_max_positive_numbers():\n    assert find_max([1, 2, 3, 4, 5]) == 5\n\ndef test_find_max_with_negative_numbers():\n    assert find_max([-5, -2, -6, -1]) == -1\n\ndef test_find_max_single_element():\n    assert find_max([42]) == 42\n\ndef test_find_max_empty_list():\n    with pytest.raises(ValueError):\n        find_max([])\n\ndef test_find_max_mixed_signals():\n    assert find_max([-10, 0, 10, 20, -5]) == 20\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000115", "row_id": 115, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum number in a list of numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the minimum element in a list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_minimum(lst):\n    \"\"\"\n    Returns the minimum element from the provided list.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"List is empty\")\n    min_element = lst[0]\n    for element in lst:\n        if element < min_element:\n            min_element = element\n    return min_element\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_minimum\n\ndef test_find_minimum_empty_list():\n    assert find_minimum([]) == ValueError\n\ndef test_find_minimum_with_positive_numbers():\n    assert find_minimum([3, 1, 4, 1, 5, 9]) == 1\n\ndef test_find_minimum_with_negative_numbers():\n    assert find_minimum([-7, -3, -1, -5, -9]) == -9\n\ndef test_find_minimum_with_mixed_sign_numbers():\n    assert find_minimum([-2, 3, -1, 4, 1]) == -2\n\ndef test_find_minimum_single_element_list():\n    assert find_minimum([42]) == 42\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000118", "row_id": 118, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the minimum element in a list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to replace all occurrences of a given substring in a string, but only for occurrences that are surrounded by spaces."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef replace_surrounded_substring(text, old_substring, new_substring):\n    \"\"\"\n    Replace all occurrences of old_substring in text with new_substring,\n    but only when the old_substring is surrounded by spaces.\n    \"\"\"\n    pattern = r'\\b' + re.escape(old_substring) + r'\\b'\n    return re.sub(pattern, new_substring, text)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport re\n\ndef test_replace_surrounded_substring():\n    assert replace_surrounded_substring(\"hello world, world is great\", \"world\", \"earth\") == \"hello earth, earth is great\"\n    assert replace_surrounded_substring(\"hello  world, world is great\", \"world\", \"planet\") == \"hello  planet, planet is great\"\n    assert replace_surrounded_substring(\"hello_world, world is great\", \"world\", \"planet\") == \"hello_world, world is great\"\n    assert replace_surrounded_substring(\"hello  world world, world is great\", \"world\", \"planet\") == \"hello  planet planet, planet is great\"\n    assert replace_surrounded_substring(\"hello world\", \"world\", \"planet\") == \"hello planet\"\n    assert replace_surrounded_substring(\"hello world\", \"planet\", \"world\") == \"hello world\"\n    assert replace_surrounded_substring(\"hello  world  world  world\", \"world\", \"\") == \"hello  2\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000119", "row_id": 119, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to replace all occurrences of a given substring in a string, but only for occurrences that are surrounded by spaces."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to merge two dictionaries. If the same key exists in both dictionaries, their values should be summed. If not, the value from the second dictionary should simply be added to the result."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef merge_and_sum_dictionaries(dict1, dict2):\n    \"\"\"\n    Merges two dictionaries. If the same key exists in both, sums their values. \n    If not, from the second dictionary, the value should be added to the result.\n    \"\"\"\n    result = {**dict1}  # Start with the first dictionary's keys and values\n    for key, value in dict2.items():\n        result[key] = result.get(key, 0) + value  # Sum or add the new value\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import merge_and_sum_dictionaries\n\ndef test_merge_and_sum_dictionaries_empty_dicts():\n    assert merge_and_sum_dictionaries({}, {}) == {}\n\ndef test_merge_and_sum_dictionaries_no_overlap():\n    assert merge_and_sum_dictionaries({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\ndef test_merge_and_sum_dictionaries_overlap_same_value():\n    assert merge_and_sum_dictionaries({'a': 1, 'b': 2}, {'a': 1, 'b': 2}) == {'a': 2, 'b': 4}\n\ndef test_merge_and_sum_dictionaries_overlap_different_values():\n    assert merge_and_sum_dictionaries({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) == {'a': 4, 'b': 6}\n\ndef test_merge_and_sum_dictionaries_within_a_single_dict():\n    assert merge_and_sum_dictionaries({'a': 1, 'b': 2, 'c': 3}, {'b': 5, 'c': 7, 'd': 9}) == {'a': 1, 'b': 7, 'c': 10, 'd': 9}\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000120", "row_id": 120, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to merge two dictionaries. If the same key exists in both dictionaries, their values should be summed. If not, the value from the second dictionary should simply be added to the result."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the first unique character in a string. If no unique character is found, return an underscore (_) character."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef first_uniq_char(s: str) -> str:\n    \"\"\"\n    Finds the first non-repeating character in a string and returns it.\n    If there is no such character, returns an underscore ('_').\n    \"\"\"\n    char_count = {}\n    \n    # Counting character occurrences\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Finding the first unique character\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return '_'\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import first_uniq_char\n\ndef test_first_uniq_char_with_unique():\n    assert first_uniq_char(\"leetcode\") == 'l'\n\ndef test_first_uniq_char_with_no_uniques():\n    assert first_uniq_char(\"aabbcc\") == '_'\n\ndef test_first_uniq_char_with_multiple_uniques_returns_first():\n    assert first_uniq_char(\"loveleetcode\") == 'l'\n\ndef test_first_uniq_char_empty_string():\n    assert first_uniq_char(\"\") == '_'\n\ndef test_first_uniq_char_single_character():\n    assert first_uniq_char(\"a\") == 'a'\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000121", "row_id": 121, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the first unique character in a string. If no unique character is found, return an underscore (_) character."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum number in an array using recursion."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_max_recursive(arr, n):\n    \"\"\"\n    Returns the maximum number in an array using recursion.\n    \n    :param arr: List of integers\n    :param n: Number of elements in the array to consider\n    :return: Maximum integer in the array\n    \"\"\"\n    # Base case: if the array has only one element\n    if n == 1:\n        return arr[0]\n    \n    # Recursive case: find the maximum in the rest of the array\n    max_in_rest = find_max_recursive(arr, n-1)\n    \n    # Return the greater of the last element and the max of the rest\n    return max(arr[n-1], max_in_rest)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_find_max_recursive():\n    assert find_max_recursive([1, 2, 3, 4, 5], 5) == 5\n    assert find_max_recursive([-10, -2, -3, -1], 4) == -1\n    assert find_max_recursive([100], 1) == 100\n    assert find_max_recursive([5, 3, 8, 20, -1, 0], 6) == 20\n\ndef test_single_element():\n    assert find_max_recursive([42], 1) == 42\n\ndef test_empty_array():\n    try:\n        find_max_recursive([], 0)\n    except ValueError as e:\n        assert str(e) == \"Array must contain at least one element.\"\n    else:\n        assert False, \"Expected ValueError for empty array\"\n\ndef test_all Negative():\n    assert find_max_recursive([-5, -10, -3, -4], 4) == -3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000122", "row_id": 122, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum number in an array using recursion."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check for prime numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, otherwise False.\n    \n    A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_prime\n\ndef test_is_prime_small_numbers():\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(1) == False\n    assert is_prime(0) == False\n    assert is_prime(-1) == False\n\ndef test_is_prime_large_prime():\n    assert is_prime(97) == True\n\ndef test_is_prime_large_non_prime():\n    assert is_prime(99) == False\n\ndef test_is_prime_edge_cases():\n    assert is_prime(25) == False\n    assert is_prime(27) == False\n    assert is_prime(29) == True\n\ndef test_is_prime_with_squares():\n    assert is_prime(4) == False\n    assert is_prime(9) == False\n    assert is_prime(25) == False\n```"}], "metadata": {"prompt_id": "00000123", "row_id": 123, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check for prime numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the single number in a list where every other number appears exactly twice. The function should have a linear time complexity and use constant space."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef single_number(nums):\n    \"\"\"\n    Find the element that appears exactly once in a list where every other element appears twice.\n    The function should have O(n) time complexity and O(1) space complexity.\n    \"\"\"\n    unique = 0\n    for num in nums:\n        unique ^= num\n    return unique\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef test_single_number():\n    assert single_number([2, 2, 1]) == 1\n    assert single_number([4, 1, 2, 1, 2]) == 4\n    assert single_number([1]) == 1\n    assert single_number([1, 0, 1]) == 0\n    assert single_number([0, 1, 0]) == 1\n    assert single_number([5, 7, 2, 7, 1, 1, 5, 6]) == 6\n```"}], "metadata": {"prompt_id": "00000124", "row_id": 124, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the single number in a list where every other number appears exactly twice. The function should have a linear time complexity and use constant space."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum sum of a subarray within a given array. The subarray must contain at least one number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_subarray_sum(arr):\n    \"\"\"\n    Returns the maximum sum of a contiguous subarray within the one-dimensional array of numbers.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Array is empty\")\n    \n    current_sum = max_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```\n<|Solution End|>\n\n<|Test Begin|>`\n```python\ndef test_max_subarray_sum():\n    assert max_subarray_sum([1, -2, 3, 10, -4, 7, 2, -5]) == 18\n    assert max_subarray_sum([-2, -3, -1]) == -1\n    assert max_subarray_sum([5, 4, -1, 7, 8]) == 23\n    assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6\n    assert max_subarray_sum([1]) == 1\n\ndef test_edge_cases():\n    assert max_subarray_sum([]) == 0, \"Should throw ValueError for empty array\"\n    assert max_subarray_sum(None) == 0, \"Should throw ValueError for None\"\n\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000125", "row_id": 125, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum sum of a subarray within a given array. The subarray must contain at least one number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a list of numbers is sorted in ascending order."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_sorted_ascending(numbers):\n    \"\"\"\n    Returns True if the list of numbers is sorted in ascending order, else False.\n    \"\"\"\n    return all(numbers[i] <= numbers[i + 1] for i in range(len(numbers) - 1))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_sorted_ascending\n\ndef test_is_sorted_ascending_positive():\n    assert is_sorted_ascending([1, 2, 3, 4, 5]) == True\n\ndef test_is_sorted_ascending_with_equal_elements():\n    assert is_sorted_ascending([1, 1, 2, 3, 4]) == True\n\ndef test_is_sorted_ascending_negative():\n    assert is_sorted_ascending([5, 3, 2, 1]) == False\n\ndef test_is_sorted_ascending_single_element():\n    assert is_sorted_ascending([5]) == True\n\ndef test_is_sorted_ascending_empty_list():\n    assert is_sorted_ascending([]) == True\n\ndef test_is_sorted_ascending_mixed():\n    assert is_sorted_ascending([1, 2, 3, 2, 5]) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000126", "row_id": 126, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a list of numbers is sorted in ascending order."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to evaluate the value of the input infix expression. The function should take a single string argument representing the infix expression and return the corresponding value. The expression may contain integers, the operators `+`, `-`, `*`, and `/`, and parentheses `()`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef evaluate_infix_expression(expression: str) -> float:\n    \"\"\"\n    Evaluates an infix expression and returns the result.\n    \"\"\"\n    import math\n    import operator\n    \n    def apply_operator(operands, operators):\n        right = operands.pop()\n        left = operands.pop()\n        op = operators.pop()\n        oper = {\"+\": operator.add, \"-\": operator.sub, \"*\": operator.mul, \"/\": operator.truediv}\n        return operands.append(oper[op](left, right))\n\n    def greater_precedence(op1, op2):\n        precedences = {'+': 1, '-': 1, '*': 2, '/': 2}\n        return precedences[op1] > precedences[op2]\n\n    operators = []\n    operands = []\n    i = 0\n    while i < len(expression):\n        if expression[i] == ' ':\n            i += 1\n            continue\n        elif expression[i] in '0123456789.':\n            num = 0\n            while i < len(expression) and (expression[i] in '0123456789.' or expression[i] == ' '):\n                if expression[i] != ' ':\n                    num = (num * 10) + int(expression[i])\n                    i += 1\n                else:\n                    i += 1\n            operands.append(num)\n        elif expression[i] in '+-*/':\n            while (operators and operators[-1] != '(' and\n                   greater_precedence(operators[-1], expression[i])):\n                apply_operator(operands, operators)\n            operators.append(expression[i])\n            i += 1\n        elif expression[i] == '(':\n            operators.append(expression[i])\n            i += 1\n        elif expression[i] == ')':\n            while operators[-1] != '(':\n                apply_operator(operands, operators)\n            operators.pop()  # Remove the '(' from the stack\n            i += 1\n\n    while operators:\n        apply_operator(operands, operators)\n\n    return operands[-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import evaluate_infix_expression\n\ndef test_evaluate_infix_expression():\n    assert evaluate_infix_expression(\"1 + 2 * 3\") == 7\n    assert evaluate_infix_expression(\"(1 + 5) * 2 - 3 / 4\") == 10.75\n    assert evaluate_infix_expression(\"2 + (3 - 1) * 4 / 2\") == 8.0\n    assert evaluate_infix_expression(\"9 - (7 + 3)\") == -3\n    assert evaluate_infix_expression(\"2 * 3 + 5 / 4\") == 7.75\n    assert evaluate_infix_expression(\"100 / 25 * 5\") == 20.0\n    assert evaluate_infix_expression(\"8 + 3 - 6 / 2\") == 8.0\n    assert evaluate_infix_expression(\"-2 + 1\") == -1.0\n\ndef test_decimal_operations():\n    assert evaluate_infix_expression(\"1.5 * 2.4\") == 3.6\n    assert evaluate_infix_expression(\"3.0 / 1.2\") == 2.5\n    assert evaluate_infix_expression(\"2.5 + 3.5\") == 6.0\n    assert evaluate_infix_expression(\"4.5 - 3.2\") == 1.3\n    assert evaluate_infix_expression(\"4.5 * 2.2\") == 9.9\n    assert evaluate_infix_expression(\"2.5 + 3.2 * 2\") == 9.9\n\ndef test_parenthesis():\n    assert evaluate_infix_expression(\"(1 + 2) * (3 + 4)\") == 21\n    assert evaluate_infix_expression(\"(((2) + (3) * (1)))\") == 5\n\ndef test_negative_numbers():\n    assert evaluate_infix_expression(\"-2 + 5 * 2\") == 8\n    assert evaluate_infix_expression(\"(-2 - 1) * 3\") == -9\n\ndef test\u908a\u754c\uff1a\n    # Test with minimal input\n    assert evaluate_infix_expression(\"2\") == 2\n    assert evaluate_infix_expression(\"-2\") == -2\n    # Test without any operators\n    assert evaluate_infix_expression(\"10\") == 10\n    # Test with an empty string\n    assert evaluate_infix_expression(\"\") == 0\n    # Test with an invalid string (contains non-operator and non-parentheses characters)\n    assert evaluate_infix_expression(\"2a\") == 2\n    assert evaluate_infix_expression(\"1 + (2 - 3 + -4)\") == -4\n    assert evaluate_infix_expression(\"1 + 2 - 3 * 4 / 5\") == 0.4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000127", "row_id": 127, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to evaluate the value of the input infix expression. The function should take a single string argument representing the infix expression and return the corresponding value. The expression may contain integers, the operators `+`, `-`, `*`, and `/`, and parentheses `()`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the gcd(greatest common divisor) of two numbers using Euclid's algorithm. Euclid's algorithm is based on the principle that the GCD of two numbers also divides their difference. It uses the simple formula: GCD(A, B) = GCD(B, A mod B) until the remainder is 0."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of two numbers using Euclid's algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import gcd\n\ndef test_gcd_positive_numbers():\n    assert gcd(12, 16) == 4\n\ndef test_gcd_when_one_number_is_multiple_of_other():\n    assert gcd(50, 20) == 10\n\ndef test_gcd_of_primes():\n    assert gcd(17, 23) == 1\n\ndef test_gcd_with_zero():\n    assert gcd(12, 0) == 12\n    assert gcd(0, 12) == 12\n    assert gcd(0, 0) == 0\n\ndef test_gcd_with_negative_numbers():\n    assert gcd(-48, 18) == 6\n    assert gcd(48, -18) == 6\n    assert gcd(-48, -18) == 6\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000129", "row_id": 129, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the gcd(greatest common divisor) of two numbers using Euclid's algorithm. Euclid's algorithm is based on the principle that the GCD of two numbers also divides their difference. It uses the simple formula: GCD(A, B) = GCD(B, A mod B) until the remainder is 0."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a string without using the built-in reverse function or slicing. Also, ensure that your function works for both strings and integer sequences treated as strings."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef reverse_string(input_str):\n    \"\"\"\n    Reverses the input string without using built-in reverse functions or slicing.\n    \n    Parameters:\n    input_str (str or int): The input string or integer sequence to reverse.\n    \n    Returns:\n    str: The reversed string.\n    \"\"\"\n    reversed_str = \"\"\n    for char in input_str:\n        reversed_str = char + reversed_str\n    return reversed_str\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import reverse_string\n\ndef test_reverse_string():\n    assert reverse_string(\"hello\") == \"olleh\"\n    assert reverse_string(\"Python\") == \"nohtyP\"\n    assert reverse_string(\"12345\") == \"54321\"\n\ndef test_reverse_integer_sequence():\n    assert reverse_string(12345) == \"54321\"\n    \ndef test_reverse_empty_string():\n    assert reverse_string(\"\") == \"\"\n    \ndef test_reverse_single_character():\n    assert reverse_string(\"a\") == \"a\"\n\ndef test_reverse_special_characters():\n    assert reverse_string(\"!@#$\") == \"$#@$!\"\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000131", "row_id": 131, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a string without using the built-in reverse function or slicing. Also, ensure that your function works for both strings and integer sequences treated as strings."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the diameter of a binary tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef diameter_of_binary_tree(root: TreeNode) -> int:\n    \"\"\"\n    Returns the diameter of a binary tree.\n    \"\"\"\n    def height(node):\n        if not node:\n            return 0\n        left_height = height(node.left)\n        right_height = height(node.right)\n        nonlocal diameter\n        # The diameter could be stored in the height of nodes.\n        diameter = max(diameter, left_height + right_height)\n        return 1 + max(left_height, right_height)\n\n    diameter = 0\n    height(root)\n    return diameter\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import diameter_of_binary_tree, TreeNode\n\ndef create_tree(*values):\n    \"\"\"Helper function to create a binary tree from values.\"\"\"\n    if not values:\n        return None\n    nodes = [None if val is None else TreeNode(val) for val in values]\n    kids = nodes[::-1]\n    root = kids.pop()\n    for node in nodes:\n        if node:\n            if kids: node.left  = kids.pop()\n            if kids: node.right = kids.pop()\n    return root\n\ndef test_diameter_of_binary_tree():\n    # Construct a tree\n    tree = create_tree(1, 2, 3, 4, 5)\n    assert diameter_of_binary_tree(tree) == 3\n\n    # Construct another tree\n    tree = create_tree(1, 2, 3, None, 4, 5)\n    assert diameter_of_binary_tree(tree) == 4\n\n    # Perfect binary tree\n    tree = create_tree(1, 2, 3, 4, 5, 6)\n    assert diameter_of_binary_tree(tree) == 5\n\n    # A tree with a single node\n    assert diameter_of_binary_tree(TreeNode(1)) == 0\n\n    # A tree with no nodes\n    assert diameter_of_binary_tree(None) == 0\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000132", "row_id": 132, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the diameter of a binary tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to multiply a number by 3 and return the result."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef multiply_by_three(number):\n    \"\"\"\n    Multiplies the given number by 3 and returns the result.\n    \"\"\"\n    return number * 3\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import multiply_by_three\n\ndef test_multiply_by_three_positive_numbers():\n    assert multiply_by_three(4) == 12\n\ndef test_multiply_by_three_zero():\n    assert multiply_by_three(0) == 0\n\ndef test_multiply_by_three_negative_numbers():\n    assert multiply_by_three(-3) == -9\n\ndef test_multiply_by_three DECIMAL():\n    assert multiply_by_three(2.5) == 7.5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000133", "row_id": 133, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to multiply a number by 3 and return the result."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the second smallest number in a list. If the list has less than two unique numbers, return `None`. For example, for the list `[3, 5, 2, 2, 8, 1, 1, 4]`, the function should return `3`. However, for the list `[1, 1]` or `[5]`, the function should return `None`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef second_smallest(numbers):\n    \"\"\"\n    Finds the second smallest number in a list.\n    Returns None if there are less than two unique numbers.\n    \"\"\"\n    unique_numbers = set(numbers)\n    if len(unique_numbers) < 2:\n        return None\n    else:\n        return sorted(unique_numbers)[1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_second_smallest():\n    assert second_smallest([3, 5, 2, 2, 8, 1, 1, 4]) == 3\n    assert second_smallest([1, 1]) == None\n    assert second_smallest([5]) == None\n    assert second_smallest([2, 2, 2, 2, 2]) == None\n    assert second_smallest([10, 9, 8, 10, 8, 10, 8]) == 9\n    assert second_smallest([7, 7, 6, 6, 5, 4, 4, 3, 2, 1]) == 6\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000134", "row_id": 134, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the second smallest number in a list. If the list has less than two unique numbers, return `None`. For example, for the list `[3, 5, 2, 2, 8, 1, 1, 4]`, the function should return `3`. However, for the list `[1, 1]` or `[5]`, the function should return `None`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to create a queue using a list with two methods: enqueue and dequeue. The enqueue method adds an element to the end of the queue, and the dequeue method removes the element from the front of the queue."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef enqueue(queue, item):\n    \"\"\"\n    Adds an item to the end of the queue.\n    \"\"\"\n    queue.append(item)\n\ndef dequeue(queue):\n    \"\"\"\n    Removes and returns the item from the front of the queue.\n    If the queue is empty, returns None.\n    \"\"\"\n    if len(queue) > 0:\n        return queue.pop(0)\n    else:\n        return None\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import enqueue, dequeue\n\ndef test_enqueue_dequeue():\n    queue = []\n    enqueue(queue, 1)\n    enqueue(queue, 2)\n    assert dequeue(queue) == 1\n    assert dequeue(queue) == 2\n    assert dequeue(queue) is None\n\ndef test_enqueue():\n    queue = []\n    enqueue(queue, 1)\n    assert queue == [1]\n    enqueue(queue, 2)\n    assert queue == [1, 2]\n\ndef test_dequeue_empty_queue():\n    queue = []\n    assert dequeue(queue) is None\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000136", "row_id": 136, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to create a queue using a list with two methods: enqueue and dequeue. The enqueue method adds an element to the end of the queue, and the dequeue method removes the element from the front of the queue."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the length of the longest continuous subarray with equal number of 0s and 1s."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef findMaxLength(nums):\n    \"\"\"\n    Find the length of the longest continuous subarray with an equal number of 0 and 1.\n    :param nums: List[int] -- List of 0s and 1s\n    :return: int -- Length of the longest continuous subarray\n    \"\"\"\n    count_map = {}\n    count = 0\n    max_length = 0\n    count_map[0] = -1\n\n    for i, num in enumerate(nums):\n        if num == 1:\n            count += 1\n        else:\n            count -= 1\n\n        if count in count_map:\n            max_length = max(max_length, i - count_map[count])\n        else:\n            count_map[count] = i\n\n    return max_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import findMaxLength\n\ndef test_findMaxLength():\n    assert findMaxLength([0, 1]) == 2\n    assert findMaxLength([0, 1, 0]) == 2\n    assert findMaxLength([0, 1, 0, 1]) == 4\n    assert findMaxLength([0, 0, 1, 0, 1, 1, 0, 1]) == 7\n    assert findMaxLength([1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1]) == 10\n\ndef test_empty_input():\n    assert findMaxLength([]) == 0\n\ndef test_single_element():\n    assert findMaxLength([0]) == 0\n    assert findMaxLength([1]) == 0\n\ndef test_all_zeros():\n    assert findMaxLength([0, 0, 0, 0]) == 0\n\ndef test_all_ones():\n    assert findMaxLength([1, 1, 1, 1]) == 0\n\ndef test_mismatched_lengths():\n    assert findMaxLength([0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1]) == 8\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000138", "row_id": 138, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the length of the longest continuous subarray with equal number of 0s and 1s."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum sum of a subarray within a given array. This is known as the maximum subarray problem. You should use Kadane's algorithm to implement this."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef max_subarray_kadane(arr):\n    \"\"\"\n    Find the maximum sum of a subarray within the given array using Kadane's algorithm.\n    \"\"\"\n    max_current = max_global = arr[0]\n    for num in arr[1:]:\n        max_current = max(num, max_current + num)\n        if max_current > max_global:\n            max_global = max_current\n    return max_global\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import max_subarray_kadane\n\ndef test_max_subarray_kadane():\n    assert max_subarray_kadane([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6, \"Test Case 1 Failed\"\n    assert max_subarray_kadane([1]) == 1, \"Test Case 2 Failed\"\n    assert max_subarray_kadane([-1, -2, -3, -4]) == -1, \"Test Case 3 Failed\"\n    assert max_subarray_kadane([5, 4, -1, 7, 8]) == 23, \"Test Case 4 Failed\"\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000139", "row_id": 139, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum sum of a subarray within a given array. This is known as the maximum subarray problem. You should use Kadane's algorithm to implement this."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a list of integers contains the number 5. If it does, return the index of the first occurrence of 5, otherwise, return -1."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_index_of_five(numbers):\n    \"\"\"\n    Returns the index of the first occurrence of 5 in the list 'numbers'.\n    If 5 is not found, returns -1.\n    \"\"\"\n    try:\n        return numbers.index(5)\n    except ValueError:\n        return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_find_index_of_five():\n    assert find_index_of_five([1, 2, 3, 5, 6]) == 3\n    assert find_index_of_five([5, 2, 3, 4]) == 0\n    assert find_index_of_five([2, 3, 4, 6]) == -1\n    assert find_index_of_five([1, 2, 5, 5, 7]) == 2\n    assert find_index_of_five([1, 5, 2, 5, 7]) == 1\n    assert find_index_of_five([]) == -1\n    assert find_index_of_five([5]) == 0\n```"}], "metadata": {"prompt_id": "00000140", "row_id": 140, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a list of integers contains the number 5. If it does, return the index of the first occurrence of 5, otherwise, return -1."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum product of a triplet in an array. The array can contain both positive and negative numbers. The function should return the maximum product of any three numbers in the array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_product_of_triplet(arr):\n    \"\"\"\n    Returns the maximum product of a triplet in the array.\n    \"\"\"\n    arr.sort()\n    n = len(arr)\n    # The maximum product can be either:\n    # 1. Product of the three largest numbers\n    # 2. Product of the two smallest (which could be negative) and the largest number\n    return max(arr[0] * arr[1] * arr[n-1], arr[n-3] * arr[n-2] * arr[n-1])\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_max_product_of_triplet():\n    assert max_product_of_triplet([1, 2, 3]) == 6\n    assert max_product_of_triplet([-1, -2, -3]) == -6\n    assert max_product_of_triplet([-100, -200, 5, 1, 2]) == 20000\n    assert max_product_of_triplet([-2, -3, 4, -5, -6, 1]) == 60\n    assert max_product_of_triplet([1, -4, 3, -6, 7, 0]) == 168\n    assert max_product_of_triplet([0, 2, 3, -5, 1, 4]) == 60\n    assert max_product_of_triplet([10, -20, 2, -3, 4, -5, 5]) == 1000\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000144", "row_id": 144, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum product of a triplet in an array. The array can contain both positive and negative numbers. The function should return the maximum product of any three numbers in the array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort a list of integers using the Bubble sort algorithm."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef bubble_sort(arr):\n    \"\"\"\n    Sorts a list of integers using the Bubble Sort algorithm.\n    \n    Parameters:\n    arr (list of int): The list of integers to be sorted.\n    \n    Returns:\n    list of int: The sorted list of integers.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        # Create a flag that will allow the function to terminate early if there's nothing left to sort\n        already_sorted = True\n        for j in range(n - i - 1):\n            if arr[j] > arr[j + 1]:\n                # Swap the elements\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                # Since we had to swap two elements, we set the flag to True so the algorithm doesn't finish prematurely\n                already_sorted = False\n        # If there were no swaps during the last iteration, the array is already sorted, and we can terminate\n        if already_sorted:\n            break\n    return arr\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import bubble_sort\n\ndef test_bubble_sort_empty_list():\n    assert bubble_sort([]) == []\n\ndef test_bubble_sort_single_element():\n    assert bubble_sort([5]) == [5]\n\ndef test_bubble_sort_positive_numbers():\n    assert bubble_sort([34, 12, 24, 9, 5]) == [5, 9, 12, 24, 34]\n\ndef test_bubble_sort_negative_numbers():\n    assert bubble_sort([34, -34, 12, -12, 24, -24, 9, -9, 5, -5]) == [-34, -24, -12, -9, -5, 5, 9, 12, 24, 34]\n\ndef test_bubble_sort_mixed_sign_numbers():\n    assert bubble_sort([34, -34, 0, -5, 9, 5, -9, 12, 24, -24, 17, -17]) == [-34, -24, -17, -9, -5, 0, 5, 9, 12, 17, 24, 34]\n\ndef test_bubble_sort already_sorted():\n    assert bubble_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000145", "row_id": 145, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort a list of integers using the Bubble sort algorithm."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the maximum depth of a binary tree. The function should return an integer representing the maximum depth."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_depth(root: TreeNode) -> int:\n    \"\"\"\n    Returns the maximum depth of a binary tree.\n    \"\"\"\n    if not root:\n        return 0\n    left_depth = max_depth(root.left) if root.left else 0\n    right_depth = max_depth(root.right) if root.right else 0\n    return max(left_depth, right_depth) + 1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import max_depth, TreeNode\n\ndef create_tree(*values):\n    nodes = [None if val is None else TreeNode(val) for val in values]\n    kids = nodes[::-1]\n    root = kids.pop()\n    for node in nodes:\n        if node:\n            if kids:\n                node.left = kids.pop()\n            if kids:\n                node.right = kids.pop()\n    return root\n\ndef test_max_depth_empty_tree():\n    assert max_depth(None) == 0\n\ndef test_max_depth_single_node():\n    node = TreeNode(1)\n    assert max_depth(node) == 1\n\ndef test_max_depth_balanced_tree():\n    root = create_tree(3, 9, 20, None, None, 15, 7)\n    assert max_depth(root) == 3\n\ndef test_max_depth_right_heavy_tree():\n    root = create_tree(1, None, 2, None, 3, None, 4)\n    assert max_depth(root) == 4\n\ndef test_max_depth_left_heavy_tree():\n    root = create_tree(1, 2, None, 3, 4, None, None)\n    assert max_depth(root) == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000148", "row_id": 148, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the maximum depth of a binary tree. The function should return an integer representing the maximum depth."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the minimum number of operations required to make all elements in a list equal. The operations allowed are incrementing any element by 1 or decrementing any element by 1."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_operations_to_equal_elements(arr):\n    \"\"\"\n    Returns the minimum number of operations required to make all elements in the list equal.\n    An operation is defined as incrementing or decrementing any element by 1.\n    \"\"\"\n    return sum(abs(arr[0] - x) for x in arr)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import min_operations_to_equal_elements\n\ndef test_min_operations_to_equal_elements():\n    assert min_operations_to_equal_elements([1, 2, 3]) == 2\n    assert min_operations_to_equal_elements([1, 1, 1]) == 0\n    assert min_operations_to_equal_elements([1, 10, 20]) == 32\n    assert min_operations_to_equal_elements([5, 5, 5, 5]) == 0\n    assert min_operations_to_equal_elements([1, 100, 1000]) == 2098\n    assert min_operations_to_equal_elements([-2, -1, 0, 1]) == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000149", "row_id": 149, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the minimum number of operations required to make all elements in a list equal. The operations allowed are incrementing any element by 1 or decrementing any element by 1."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine if a given number is a power of two. A number is a power of two if it can be represented as 2^k where k is a non-negative integer. Assume the input is always a valid integer, both positive and negative, but negative numbers should be immediately determined as not powers of two."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_power_of_two(n: int) -> bool:\n    \"\"\"\n    Checks if the given number n is a power of two.\n    \"\"\"\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_is_power_of_two_positive():\n    assert is_power_of_two(1) is True\n    assert is_power_of_two(2) is True\n    assert is_power_of_two(4) is True\n    assert is_power_of_two(16) is True\n\ndef test_is_power_of_two_not_positive():\n    assert is_power_of_two(0) is False\n    assert is_power_of_two(-2) is False\n    assert is_power_of_two(-4) is False\n\ndef test_is_power_of_two_large_values():\n    assert is_power_of_two(1048576) is True  # 2^20\n    assert is_power_of_two(2097152) is False  # 2^21 - 1 is not a power of two\n\ndef test_is_power_of_two_edge_cases():\n    assert is_power_of_two(3) is False\n    assert is_power_of_two(8) is True\n    assert is_power_of_two(1023) is False  # 2^10 - 1 is not a power of two\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000150", "row_id": 150, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine if a given number is a power of two. A number is a power of two if it can be represented as 2^k where k is a non-negative integer. Assume the input is always a valid integer, both positive and negative, but negative numbers should be immediately determined as not powers of two."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a decimal number to binary without using Python's built-in bin() function. Walk me through the process and the code."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef decimal_to_binary(n: int) -> str:\n    \"\"\"\n    Converts a decimal number to its binary representation without using Python's built-in bin() function.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n = n // 2\n    binary.reverse()\n    return ''.join(binary)\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef test_decimal_to_binary():\n    assert decimal_to_binary(0) == '0'\n    assert decimal_to_binary(1) == '1'\n    assert decimal_to_binary(2) == '10'\n    assert decimal_to_binary(3) == '11'\n    assert decimal_to_binary(4) == '100'\n    assert decimal_to_binary(5) == '101'\n    assert decimal_to_binary(14) == '1110'\n    assert decimal_to_binary(255) == '11111111'\n    assert decimal_to_binary(256) == '100000000'\n    assert decimal_to_binary(1023) == '1111111111'\n\ndef test_single_digit():\n    assert decimal_to_binary(1) == '1'\n    assert decimal_to_binary(9) == '1001'\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000151", "row_id": 151, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a decimal number to binary without using Python's built-in bin() function. Walk me through the process and the code."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine whether a number is even or odd without using if else statements. You can use bitwise operators only."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_even(number):\n    \"\"\"\n    Returns True if the number is even, False otherwise, using bitwise operations only.\n    \"\"\"\n    return (number & 1) == 0\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_is_even():\n    assert is_even(2) == True\n    assert is_even(3) == False\n    assert is_even(0) == True\n    assert is_even(-4) == True\n    assert is_even(-3) == False\n\ndef test_is_odd():\n    assert is_even(1) == False\n    assert is_even(-1) == False\n    assert is_even(-5) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000152", "row_id": 152, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine whether a number is even or odd without using if else statements. You can use bitwise operators only."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine the number of vowels in a string. The vowels are 'a', 'e', 'i', 'o', and 'u' (both lowercase and uppercase)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_vowels(s: str) -> int:\n    \"\"\"\n    Returns the number of vowels in the string s.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_vowels\n\ndef test_count_vowels_empty_string():\n    assert count_vowels(\"\") == 0\n\ndef test_count_vowels_all_vowels():\n    assert count_vowels(\"aeiouAEIOU\") == 10\n\ndef test_count_vowels_no_vowels():\n    assert count_vowels(\"bcdfg\") == 0\n\ndef test_count_vowels_mixed_string():\n    assert count_vowels(\"Hello World!\") == 3\n\ndef test_count_vowels_with_spaces():\n    assert count_vowels(\"Quick Brown Fox Jumps Over The Lazy Dog\") == 11\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000153", "row_id": 153, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine the number of vowels in a string. The vowels are 'a', 'e', 'i', 'o', and 'u' (both lowercase and uppercase)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a given string into a list of words. Splitting can be done based on multiple characters. For instance, splitting can be done using the characters ',', '.', and ' ' (space). How would you approach this problem?"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef split_string_into_words(s: str):\n    \"\"\"\n    Splits a given string into words based on the delimiters: ',', '.', and ' '.\n    \"\"\"\n    delimiters = [',', '.', ' ']\n    words = []\n    current_word = ''\n    for char in s:\n        if char in delimiters:\n            if current_word:  # If there is a non-empty word to add\n                words.append(current_word)\n                current_word = ''\n        else:\n            current_word += char\n    if current_word:  # Add the last word if any\n        words.append(current_word)\n    return words\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_split_string_into_words():\n    assert split_string_into_words(\"Hello, world. This is a test.\") == [\"Hello\", \"world\", \"This\", \"is\", \"a\", \"test\"]\n    assert split_string_into_words(\"Split,these,words,using,multiple,delimiters.\") == [\"Split\", \"these\", \"words\", \"using\", \"multiple\", \"delimiters\"]\n    assert split_string_into_words(\"NoDelimitersHere\") == [\"NoDelimitersHere\"]\n    assert split_string_into_words(\"Trailing,separator,\") == [\"Trailing\", \"separator\"]\n    assert split_string_into_words(\"Leading,separator,,Leading,combinations,of,delimiters., \") == [\"Leading\", \"separator\", \"Leading\", \"combinations\", \"of\", \"delimiters\"]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000154", "row_id": 154, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a given string into a list of words. Splitting can be done based on multiple characters. For instance, splitting can be done using the characters ',', '.', and ' ' (space). How would you approach this problem?"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to solve the following problem: Given a list of lists, return the sum of all numbers in the sublists that have an even number of elements."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_even_sublists(lst):\n    \"\"\"\n    Given a list of lists, return the sum of all numbers in the sublists that have an even number of elements.\n    \"\"\"\n    total_sum = 0\n    for sublist in lst:\n        if len(sublist) % 2 == 0:\n            total_sum += sum(sublist)\n    return total_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_even_sublists\n\ndef test_sum_even_sublists_empty_list():\n    assert sum_even_sublists([]) == 0\n\ndef test_sum_even_sublists_single_element():\n    assert sum_even_sublists([[1]]) == 0\n\ndef test_sum_even_sublists_all_even_sublists():\n    assert sum_even_sublists([[1, 2], [3, 4], [5, 6]]) == 21\n\ndef test_sum_even_sublists_odd_and_even_sublists():\n    assert sum_even_sublists([[1, 2, 3], [4, 5], [6, 7, 8], [9]]) == 20\n\ndef test_sum_even_sublists_nested_even_sublists():\n    assert sum_even_sublists([[[1, 2], [3, 4, 5]], [[6, 7], [8]]]) == 24\n\ndef test_sum_even_sublists_without_even_sublists():\n    assert sum_even_sublists([[1, 2, 3], [4, 5], [6, 7, 8]]) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000157", "row_id": 157, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to solve the following problem: Given a list of lists, return the sum of all numbers in the sublists that have an even number of elements."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to to count the number of times a character appears in a string"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_char_in_string(char, string):\n    \"\"\"\n    Counts the number of times a character appears in a string.\n    \n    Parameters:\n    char (str): The character to count.\n    string (str): The string in which to count the character.\n    \n    Returns:\n    int: The number of times the character appears in the string.\n    \"\"\"\n    return string.count(char)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_char_in_string\n\ndef test_count_char_in_string_with_matching_chars():\n    assert count_char_in_string('a', 'banana') == 3\n    assert count_char_in_string('n', 'superman') == 2\n    assert count_char_in_string('z', 'zzzzz') == 5\n\ndef test_count_char_in_string_with_no_matching_chars():\n    assert count_char_in_string('x', 'hello') == 0\n    assert count_char_in_string('!', 'abc') == 0\n\ndef test_count_char_in_string_with_empty_string():\n    assert count_char_in_string('d', '') == 0\n\ndef test_count_char_in_string_case_insensitive():\n    assert count_char_in_string('a', 'AaAaA') == 3\n    assert count_char_in_string('A', 'AaAaA') == 3\n\ndef test_count_char_in_string_space():\n    assert count_char_in_string(' ', 'Hello world') == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000158", "row_id": 158, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to to count the number of times a character appears in a string"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a string without using extra space."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef reverse_string(s):\n    \"\"\"\n    Reverses the given string s without using extra space.\n    \"\"\"\n    s = list(s)  # Convert string to list to allow in-place modification\n    left, right = 0, len(s) - 1\n    while left < right:\n        s[left], s[right] = s[right], s[left]  # Swap characters\n        left, right = left + 1, right - 1\n    return ''.join(s)  # Convert list back to string\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import reverse_string\n\ndef test_reverse_string_positive():\n    assert reverse_string(\"hello\") == \"olleh\"\n\ndef test_reverse_string_empty():\n    assert reverse_string(\"\") == \"\"\n\ndef test_reverse_string_single_char():\n    assert reverse_string(\"a\") == \"a\"\n\ndef test_reverse_string_whitespace():\n    assert reverse_string(\"   \") == \"   \"\n\ndef test_reverse_string_with_punctuation():\n    assert reverse_string(\"hello, world!\") == \"!dlrow ,olleh\"\n\ndef test_reverse_string_special_chars():\n    assert reverse_string(\"!@#\") == \"#@!\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000159", "row_id": 159, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a string without using extra space."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the second largest number in a list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef second_largest(numbers):\n    \"\"\"\n    Returns the second largest number in the list.\n    If the list contains less than 2 unique numbers, returns None.\n    \"\"\"\n    if not numbers or len(numbers) < 2:\n        return None\n    \n    max_num = second_max = float('-inf')\n    \n    for num in numbers:\n        if num > max_num:\n            second_max = max_num\n            max_num = num\n        elif num > second_max and num != max_num:\n            second_max = num\n            \n    return second_max if second_max != float('-inf') else None\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import second_largest\n\ndef test_second_largest_with_unique_numbers():\n    assert second_largest([10, 20, 30, 40, 50]) == 40\n    assert second_largest([1, 5, 2, 4, 3]) == 4\n\ndef test_second_largest_with_duplicates():\n    assert second_largest([5, 5, 5, 4]) == 4\n    assert second_largest([1, 1, 1, 1, 2]) == 1\n\ndef test_second_largest_with_negative_numbers():\n    assert second_largest([5, 2, -1, -3, 4]) == 4\n    assert second_largest([-5, -4, -3, -2, -1]) == -2\n\ndef test_second_largest_with_edge_cases():\n    assert second_largest([]) is None\n    assert second_largest([7]) is None\n    assert second_largest([10, 10]) is None\n    assert second_largest([1, 1, 1, 1, 1]) is None\n```"}], "metadata": {"prompt_id": "00000160", "row_id": 160, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the second largest number in a list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to generate all possible combinations of a given list of numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nfrom itertools import combinations\n\ndef generate_combinations(numbers):\n    \"\"\"\n    Generates all possible combinations of a given list of numbers.\n    \n    :param numbers: List of integers\n    :return: A list of lists, where each sublist is a combination of the input numbers\n    \"\"\"\n    all_combinations = []\n    for r in range(len(numbers) + 1):\n        all_combinations.extend(combinations(numbers, r))\n    return all_combinations\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import generate_combinations\n\ndef test_generate_combinations_with_empty_list():\n    assert generate_combinations([]) == [()],\n\ndef test_generate_combinations_with_single_element():\n    assert generate_combinations([1]) == [(), (1,)]\n\ndef test_generate_combinations_with_multiple_elements():\n    expected_output = [(), (1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]\n    assert generate_combinations([1, 2, 3]) == expected_output\n\ndef test_generate_combinations_with_repeated_elements():\n    expected_output = [\n        (), (1,), (2,), (3,), \n        (1, 1), (1, 2), (1, 3), \n        (2, 2), (2, 3), \n        (3, 3),\n        (1, 1, 1), (1, 1, 2), (1, 1, 3), \n        (1, 2, 2), (1, 2, 3), \n        (1, 3, 3), \n        (2, 2, 2), (2, 2, 3), \n        (2, 3, 3), \n        (3, 3, 3),\n        (1, 1, 1, 1), (1, 1, 1, 2), (1, 1, 1, 3), \n        (1, 1, 2, 2), (1, 1, 2, 3), \n        (1, 1, 3, 3), \n        (1, 2, 2, 2), (1, 2, 2, 3), \n        (1, 2, 3, 3), \n        (1, 3, 3, 3), \n        (2, 2, 2, 2), (2, 2, 2, 3), \n        (2, 2, 3, 3), \n        (2, 3, 3, 3), \n        (3, 3, 3, 3), \n        (1, 1, 1, 1, 1)\n    ]\n    assert generate_combinations([1, 1, 2, 2, 3]) == expected_output\n\ndef test_generate_combinations_with_negative_values():\n    expected_output = [(), (-1,), (-2,), (3,), (-1, -2), (-1, 3), (-2, 3), (-1, -2, 3)]\n    assert generate_combinations([-1, -2, 3]) == expected_output\n``` \n\n<|Test End|>"}], "metadata": {"prompt_id": "00000161", "row_id": 161, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to generate all possible combinations of a given list of numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to filter out all even numbers from a list, which also handles both positive and negative integers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef filter_even_numbers(numbers):\n    \"\"\"\n    Returns a list containing only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import filter_even_numbers\n\ndef test_filter_even_numbers_positive():\n    assert filter_even_numbers([1, 2, 3, 4, 5]) == [1, 3, 5]\n\ndef test_filter_even_numbers_with_zeros():\n    assert filter_even_numbers([2, 4, 6, 0]) == []\n    assert filter_even_numbers([0, 2, 4, 6]) == []\n\ndef test_filter_even_numbers_negative():\n    assert filter_even_numbers([-2, -4, -6, -8]) == []\n    assert filter_even_numbers([-1, -3, -5, -7]) == [-1, -3, -5, -7]\n\ndef test_filter_even_numbers_mixed():\n    assert filter_even_numbers([-2, -1, 0, 1, 4]) == [-1, 1]\n```"}], "metadata": {"prompt_id": "00000162", "row_id": 162, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to filter out all even numbers from a list, which also handles both positive and negative integers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to extract all the shortest words from a string of text."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef shortest_words(text):\n    \"\"\"\n    Returns a list of the shortest words in a given text.\n    If there are multiple words of the same shortest length, all are included.\n    \"\"\"\n    words = text.split()\n    if not words:\n        return []\n    \n    min_length = min(len(word) for word in words)\n    shortest_words_list = [word for word in words if len(word) == min_length]\n    return shortest_words_list\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import shortest_words\n\ndef test_shortest_words_empty_string():\n    assert shortest_words(\"\") == []\n\ndef test_shortest_words_single_word():\n    assert shortest_words(\"hello\") == [\"hello\"]\n\ndef test_shortest_words_with_multiple_words():\n    assert shortest_words(\"hello world a ab\") == [\"a\", \"ab\"]\n    assert shortest_words(\"one two three four seven\") == [\"one\", \"two\", \"three\", \"four\"]\n\ndef test_shortest_words_multiple_shortest_words_same_length():\n    assert shortest_words(\"aaa bb cc\") == [\"aaa\", \"bb\", \"cc\"]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000163", "row_id": 163, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to extract all the shortest words from a string of text."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to count missing data (None) in a nested list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_missing_data(nested_list):\n    \"\"\"\n    Counts the number of missing data (None) in a nested list.\n    \n    :param nested_list: A list which can contain other lists, and possibly None values.\n    :return: The count of None values in the nested list.\n    \"\"\"\n    count = 0\n    for element in nested_list:\n        if element is None:\n            count += 1\n        elif isinstance(element, list):\n            count += count_missing_data(element)\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_count_missing_data():\n    assert count_missing_data([1, 2, None, [3, None, [4, None]]]) == 3\n    assert count_missing_data([None, [None, None], [1, 2, 3]]) == 3\n    assert count_missing_data([1, 2, 3]) == 0\n    assert count_missing_data([None, [None], None, [None, [None]]]) == 5\n    assert count_missing_data([]) == 0\n    assert count_missing_data([[], [None, None], [[None]], None]) == 4\n```"}], "metadata": {"prompt_id": "00000167", "row_id": 167, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to count missing data (None) in a nested list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to parse and extract specific data from XML using `xml.etree.ElementTree`"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport xml.etree.ElementTree as ET\n\ndef extract_data_from_xml(xml_string, tag_name):\n    \"\"\"\n    Parses the provided XML string and extracts the text associated with the specified tag.\n    \n    Args:\n        xml_string (str): The XML data as a string.\n        tag_name (str): The tag name whose value is to be extracted.\n    \n    Returns:\n        list: A list of text values for the specified tag. Returns an empty list if the tag is not found.\n    \"\"\"\n    root = ET.fromstring(xml_string)\n    return [node.text for node in root.iter(tag_name)]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport xml.etree.ElementTree as ET\nfrom solution import extract_data_from_xml\n\ndef test_extract_data_from_xml():\n    xml_data = '''<data>\n                    <country name=\"Liechtenstein\">\n                        < Ranking >2</ Ranking >\n                        <year>2008</ year>\n                        <gdppc>141100</ gdppc>\n                    </country>\n                    <country name=\"Singapore\">\n                        < Ranking >4</ Ranking >\n                        <year>2011</ year>\n                        <gdppc>59900</ gdppc>\n                    </country>\n                </data>'''\n    expected_output = ['2', '4']\n    assert extract_data_from_xml(xml_data, ' Ranking ') == expected_output\n\ndef test_extract_nonexistent_tag():\n    xml_data = '''<data>\n                    <country name=\"Liechtenstein\">\n                        < Ranking >2</ Ranking >\n                        <year>2008</ year>\n                        <gdppc>141100</ gdppc>\n                    </country>\n                    <country name=\"Singapore\">\n                        < Ranking >4</ Ranking >\n                        <year>2011</ year>\n                        <gdppc>59900</ gdppc>\n                    </country>\n                </data>'''\n    expected_output = []\n    assert extract_data_from_xml(xml_data, 'nonexistent_tag') == expected_output\n\ndef test_extract_data_with_whitespace():\n    xml_data = '''<data>\n                    <country name=\"Liechtenstein\">\n                        < Ranking >  2  </ Ranking >\n                    </country>\n                </data>'''\n    expected_output = ['  2  ']\n    assert extract_data_from_xml(xml_data, ' Ranking ') == expected_output\n\ndef test_empty_xml():\n    xml_data = '<empty></empty>'\n    expected_output = []\n    assert extract_data_from_xml(xml_data, 'nonexistent_tag') == expected_output\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000168", "row_id": 168, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to parse and extract specific data from XML using `xml.etree.ElementTree`"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to evaluate a postfix expression (Reverse Polish Notation)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef evaluate_postfix(expression: str) -> int:\n    \"\"\"\n    Evaluates a postfix (Reverse Polish Notation) expression.\n    \n    Args:\n    expression (str): A string representing a postfix expression.\n    \n    Returns:\n    int: The result of the evaluation.\n    \"\"\"\n    stack = []\n    for term in expression.split():\n        if term.isdigit():  # if the term is a number, push it onto the stack\n            stack.append(int(term))\n        else:  # if the term is an operation\n            b = stack.pop()\n            a = stack.pop()\n            if term == '+':\n                stack.append(a + b)\n            elif term == '-':\n                stack.append(a - b)\n            elif term == '*':\n                stack.append(a * b)\n            elif term == '/':\n                stack.append(int(a / b))  # use int to truncate towards zero\n            else:\n                raise ValueError(f\"Unsupported operation: {term}\")\n    if len(stack) != 1:\n        raise ValueError(\"Invalid expression\")\n    return stack[0]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import evaluate_postfix\n\ndef test_evaluate_postfix_positive():\n    assert evaluate_postfix(\"3 4 +\") == 7\n    assert evaluate_postfix(\"5 1 2 + 4 * + 3 -\") == 14\n\ndef test_evaluate_postfix_with_negative():\n    assert evaluate_postfix(\"10 2 / 3 - 5 +\") == 2\n    assert evaluate_postfix(\"-1 2 *\") == -2\n\ndef test_evaluate_postfix_zero():\n    assert evaluate_postfix(\"4 -4 -\") == 0\n    assert evaluate_postfix(\"0 0 +\") == 0\n    assert evaluate_postfix(\"0 -0 +\") == 0\n\ndef test_evaluate_postfix_single_number():\n    assert evaluate_postfix(\"7\") == 7\n\ndef test_evaluate_postfix_division_behavior():\n    assert evaluate_postfix(\"10 5 /\") == 2\n    assert evaluate_postfix(\"10 5 / 2 -\") == 0\n\ndef test_evaluate_postfix_invalid_expression():\n    with pytest.raises(ValueError):\n        evaluate_postfix(\"4 2 + x\")\n    with pytest.raises(ValueError):\n        evaluate_postfix(\"10 / 0\")\n    with pytest.raises(ValueError):\n        evaluate_postfix(\"10 2 3 +\")\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000169", "row_id": 169, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to evaluate a postfix expression (Reverse Polish Notation)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the sum of the first `n` natural numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef sum_of_n_natural_numbers(n):\n    \"\"\"\n    Returns the sum of the first n natural numbers.\n    \"\"\"\n    return n * (n + 1) // 2\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_sum_of_n_natural_numbers():\n    assert sum_of_n_natural_numbers(1) == 1\n    assert sum_of_n_natural_numbers(2) == 3\n    assert sum_of_n_natural_numbers(3) == 6\n    assert sum_of_n_natural_numbers(10) == 55\n    assert sum_of_n_natural_numbers(100) == 5050\n    assert sum_of_n_natural_numbers(0) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000170", "row_id": 170, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the sum of the first `n` natural numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the longest continuous substring that can be formed with at most two distinct characters in a given string. For example, for the input string \"aabacbebebe\", the function should return 7, as the longest substring that can be formed with at most two distinct characters is \"cbebebe\"."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef length_of_longest_substring(s: str) -> int:\n    \"\"\"\n    Finds the length of the longest substring that contains at most two distinct characters.\n    \"\"\"\n    if not s:\n        return 0\n    \n    left, max_len = 0, 0\n    char_map = {}\n    \n    for right in range(len(s)):\n        char = s[right]\n        char_map[char] = char_map.get(char, 0) + 1\n        \n        while len(char_map) > 2:\n            left_char = s[left]\n            char_map[left_char] -= 1\n            if char_map[left_char] == 0:\n                del char_map[left_char]\n            left += 1\n        \n        max_len = max(max_len, right - left + 1)\n    \n    return max_len\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_length_of_longest_substring():\n    assert length_of_longest_substring(\"eceba\") == 3\n    assert length_of_longest_substring(\"ccaabbb\") == 5\n    assert length_of_longest_substring(\"aabacbebebe\") == 7\n    assert length_of_longest_substring(\"bbaa\") == 4\n    assert length_of_longest_substring(\"abcde\") == 3\n    assert length_of_longest_substring(\"a\") == 1\n    assert length_of_longest_substring(\"\") == 0\n\nif __name__ == \"__main__\":\n    import pytest\n    pytest.main([__file__])\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000174", "row_id": 174, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the longest continuous substring that can be formed with at most two distinct characters in a given string. For example, for the input string \"aabacbebebe\", the function should return 7, as the longest substring that can be formed with at most two distinct characters is \"cbebebe\"."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to print the first nth Fibonacci numbers in the format `[F(1), F(2), F(3), ..., F(n)]`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci(n):\n    \"\"\"\n    Returns the first n Fibonacci numbers as a list.\n    \"\"\"\n    fib_sequence = []\n    a, b = 0, 1\n    for _ in range(n):\n        fib_sequence.append(b)\n        a, b = b, a + b\n    return fib_sequence\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_fibonacci():\n    assert fibonacci(1) == [1]\n    assert fibonacci(5) == [1, 1, 2, 3, 5]\n    assert fibonacci(0) == []\n    assert fibonacci(10) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n```"}], "metadata": {"prompt_id": "00000175", "row_id": 175, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to print the first nth Fibonacci numbers in the format `[F(1), F(2), F(3), ..., F(n)]`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the minimum number of deletions required to make a string a palindrome."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_deletions_to_palindrome(s):\n    \"\"\"\n    Returns the minimum number of deletions required to make the string a palindrome.\n    \"\"\"\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Fill the dp table\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1\n    \n    return dp[0][n - 1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import min_deletions_to_palindrome\n\ndef test_min_deletions_to_palindrome():\n    assert min_deletions_to_palindrome(\"abdbca\") == 1\n    assert min_deletions_to_palindrome(\"cddpd\") == 2\n    assert min_deletions_to_palindrome(\"pqr\") == 2\n    assert min_deletions_to_palindrome(\"aaa\") == 0\n    assert min_deletions_to_palindrome(\"abc\") == 2\n    assert min_deletions_to_palindrome(\"abca\") == 1\n    assert min_deletions_to_palindrome(\"abcda\") == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000176", "row_id": 176, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the minimum number of deletions required to make a string a palindrome."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort an array using the Quick Sort algorithm."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef quick_sort(arr):\n    \"\"\"\n    Sorts the given array using the Quick Sort algorithm.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quick_sort(left) + middle + quick_sort(right)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import quick_sort\n\ndef test_quick_sort_positive_numbers():\n    arr = [2, 3, 1, 4, 5]\n    assert quick_sort(arr) == [1, 2, 3, 4, 5]\n\ndef test_quick_sort_negative_numbers():\n    arr = [-1, -5, -3, -4, -2]\n    assert quick_sort(arr) == [-5, -4, -3, -2, -1]\n\ndef test_quick_sort_mixed_numbers():\n    arr = [2, -1, 5, -5, 4, 3]\n    assert quick_sort(arr) == [-5, -1, 2, 3, 4, 5]\n\ndef test_quick_sort_single_element():\n    arr = [5]\n    assert quick_sort(arr) == [5]\n\ndef test_quick_sort_empty_array():\n    arr = []\n    assert quick_sort(arr) == []\n\ndef test_quick_sort_already_sorted():\n    arr = [1, 2, 3, 4, 5]\n    assert quick_sort(arr) == [1, 2, 3, 4, 5]\n\ndef test_quick_sort_duplicates():\n    arr = [1, 1, 1, 1, 1]\n    assert quick_sort(arr) == [1, 1, 1, 1, 1]\n```"}], "metadata": {"prompt_id": "00000177", "row_id": 177, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort an array using the Quick Sort algorithm."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to generate a Fibonacci sequence up to a given number `n`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef generate_fibonacci(n):\n    \"\"\"\n    Generates a Fibonacci sequence up to a given number n.\n    \n    Args:\n    n (int): The upper limit for the Fibonacci sequence.\n    \n    Returns:\n    list: A list containing the Fibonacci sequence up to n.\n    \"\"\"\n    sequence = []\n    a, b = 0, 1\n    while a <= n:\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_generate_fibonacci_positive():\n    assert generate_fibonacci(10) == [0, 1, 1, 2, 3, 5, 8]\n\ndef test_generate_fibonacci_with_zero():\n    assert generate_fibonacci(0) == [0]\n\ndef test_generate_fibonacci_with_negative():\n    assert generate_fibonacci(-1) == [0]\n\ndef test_generate_fibonacci_large_number():\n    assert generate_fibonacci(100) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n\ndef test_generate_fibonacci_single_element():\n    assert generate_fibonacci(1) == [0, 1]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000178", "row_id": 178, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to generate a Fibonacci sequence up to a given number `n`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given string `s` contains a sequence of consecutive repeating characters that are not adjacent to each other."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef has_non_adjacent_repeats(s):\n    \"\"\"\n    Returns True if the string s contains a sequence of consecutive repeating characters that are not adjacent to each other.\n    \"\"\"\n    i = 0\n    while i < len(s) - 2:\n        if s[i] == s[i + 2] and s[i] != s[i + 1]:\n            return True\n        i += 1\n    return False\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import has_non_adjacent_repeats\n\ndef test_has_non_adjacent_repeats():\n    assert not has_non_adjacent_repeats(\"abc\")\n    assert not has_non_adjacent_repeats(\"abcc\")\n    assert has_non_adjacent_repeats(\"aabb\")\n    assert has_non_adjacent_repeats(\"abcddcba\")\n    assert has_non_adjacent_repeats(\"abcdddabc\")\n    assert not has_non_adjacent_repeats(\"abcddabc\")\n    assert has_non_adjacent_repeats(\"aaab\")\n    assert not has_non_adjacent_repeats(\"aaabaa\")\n    assert not has_non_adjacent_repeats(\"aaba\")\n```"}], "metadata": {"prompt_id": "00000180", "row_id": 180, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given string `s` contains a sequence of consecutive repeating characters that are not adjacent to each other."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find Fibonacci numbers up to a given limit 'n' and store the results in a list."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci_up_to_n(n):\n    \"\"\"\n    Returns a list of Fibonacci numbers up to n.\n    \n    Parameters:\n    n (int): The upper limit for generating Fibonacci numbers.\n    \n    Returns:\n    list: A list of Fibonacci numbers.\n    \"\"\"\n    if n < 1:\n        return []\n    fibonacci_list = [0, 1]\n    while True:\n        next_fib = fibonacci_list[-1] + fibonacci_list[-2]\n        if next_fib > n:\n            break\n        fibonacci_list.append(next_fib)\n    return fibonacci_list\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_fibonacci_up_to_n():\n    assert fibonacci_up_to_n(10) == [0, 1, 1, 2, 3, 5, 8]\n    assert fibonacci_up_to_n(1) == [0, 1]\n    assert fibonacci_up_to_n(0) == []\n    assert fibonacci_up_to_n(20) == [0, 1, 1, 2, 3, 5, 8, 13, 21]\n    assert fibonacci_up_to_n(5) == [0, 1, 1, 2, 3, 5]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000181", "row_id": 181, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find Fibonacci numbers up to a given limit 'n' and store the results in a list."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find all possible subsets of a set. You can return them as a list of lists."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_subsets(s: set):\n    \"\"\"\n    Returns all possible subsets of a given set s as a list of lists.\n    \"\"\"\n    subsets = [[]]\n    for elem in s:\n        # For each element in the set, create new subsets by adding the element to existing subsets.\n        new_subsets = [subset + [elem] for subset in subsets]\n        subsets.extend(new_subsets)\n    return subsets\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_subsets\n\ndef test_find_subsets_empty_set():\n    assert find_subsets(set()) == [[]]\n\ndef test_find_subsets_one_element():\n    assert find_subsets({1}) == [[], [1]]\n\ndef test_find_subsets_two_elements():\n    assert find_subsets({1, 2}) == [[], [1], [2], [1, 2]]\n\ndef test_find_subsets_three_elements():\n    assert find_subsets({1, 2, 3}) == [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]\n\ndef test_find_subsets_four_elements():\n    s = {1, 2, 3, 4}\n    subsets = find_subsets(s)\n    assert len(subsets) == 16  # 2^n where n is the number of elements in the set\n    assert set(map(tuple, subsets)) == set(map(tuple, [\n        [], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3],\n        [4], [1, 4], [2, 4], [1, 2, 4], [3, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]\n    ]))\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000182", "row_id": 182, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find all possible subsets of a set. You can return them as a list of lists."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a string. What are the concepts used here?"}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef reverse_string(s: str) -> str:\n    \"\"\"\n    Returns the reverse of the input string.\n    \"\"\"\n    return s[::-1]\n```\n\nThe concepts used here include:\n1. String slicing in Python: The `s[::-1]` slice notation is used to reverse the string. It works by starting at the end of the string and moving backwards with a step of -1.\n2. Type hinting: The function parameters and return type are annotated to improve code readability and catch certain types of errors at compile time.\n3. Docstrings: To provide documentation and descriptions of the function.\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import reverse_string\n\ndef test_reverse_string():\n    assert reverse_string(\"hello\") == \"olleh\"\n\ndef test_reverse_empty_string():\n    assert reverse_string(\"\") == \"\"\n\ndef test_reverse_single_character():\n    assert reverse_string(\"a\") == \"a\"\n\ndef test_reverse_with_spaces():\n    assert reverse_string(\" a b c \") == \" c b a \"\n\ndef test_reverse_with_punctuation():\n    assert reverse_string(\"hello, world!\") == \"!dlrow ,olleh\"\n\ndef test_reverse_with_special_characters():\n    assert reverse_string(\"@#$/%^\") == \"%^/$#@\"\n```\n\nThese tests cover various scenarios including normal strings, empty strings, single character strings, strings with spaces and punctuation, and strings with special characters."}], "metadata": {"prompt_id": "00000183", "row_id": 183, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a string. What are the concepts used here?"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to sort a list of integers in ascending order using the quicksort algorithm. Each integer is in the range of [0, 100000]."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef quicksort(arr):\n    \"\"\"\n    Sorts a list of integers in ascending order using the quicksort algorithm.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quicksort(left) + middle + quicksort(right)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_quicksort():\n    arr = [3, 6, 8, 10, 1, 2, 1]\n    sorted_arr = [1, 1, 2, 3, 6, 8, 10]\n    assert quicksort(arr) == sorted_arr\n\ndef test_quicksort_empty():\n    arr = []\n    assert quicksort(arr) == []\n\ndef test_quicksort_single_element():\n    arr = [5]\n    assert quicksort(arr) == [5]\n\ndef test_quicksort_large_values():\n    arr = [100000, 99999, 99998, 0, 100000, 0, 1]\n    sorted_arr = [0, 0, 1, 99998, 99999, 100000, 100000]\n    assert quicksort(arr) == sorted_arr\n\ndef test_quicksort_duplicates():\n    arr = [4, 4, 4, 4, 4]\n    assert quicksort(arr) == [4, 4, 4, 4, 4]\n```"}], "metadata": {"prompt_id": "00000184", "row_id": 184, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to sort a list of integers in ascending order using the quicksort algorithm. Each integer is in the range of [0, 100000]."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the smallest number that is a multiple of both given integers. To solve this, create a helper function to calculate the greatest common divisor (GCD) of two numbers and then use this helper function to find the least common multiple (LCM) of two numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of a and b using the Euclidean algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    \"\"\"\n    Returns the least common multiple of a and b.\n    \"\"\"\n    return a * b // gcd(a, b)\n\ndef smallest_multiple(a, b):\n    \"\"\"\n    Returns the smallest number that is a multiple of both a and b.\n    \"\"\"\n    return lcm(a, b)\n```\n<|Solution End|>\n\n<|Test Begin|>``\n```python\nfrom solution import gcd, lcm, smallest_multiple\n\ndef test_gcd():\n    assert gcd(8, 12) == 4\n    assert gcd(17, 13) == 1\n\ndef test_lcm():\n    assert lcm(8, 12) == 24\n    assert lcm(17, 13) == 221\n\ndef test_smallest_multiple():\n    assert smallest_multiple(10, 15) == 30\n    assert smallest_multiple(7, 5) == 35\n    assert smallest_multiple(21, 6) == 42\n    assert smallest_multiple(15, 17) == 255\n\ndef test_smallest_multiple_with_gcd():\n    assert smallest_multiple(10, 15) == lcm(10, 15)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000185", "row_id": 185, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the smallest number that is a multiple of both given integers. To solve this, create a helper function to calculate the greatest common divisor (GCD) of two numbers and then use this helper function to find the least common multiple (LCM) of two numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a linked list using a stack data structure."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass ListNode:\n    def __init__(self, value=0, next=None):\n        self.value = value\n        self.next = next\n\ndef reverse_linked_list_with_stack(head):\n    \"\"\"\n    Reverses the given linked list using a stack data structure.\n    \"\"\"\n    if head is None:\n        return None\n    \n    stack = []\n    current = head\n    while current:\n        stack.append(current)\n        current = current.next\n    \n    if not stack:\n        return None\n    \n    new_head = stack.pop()\n    current = new_head\n    while stack:\n        current.next = stack.pop()\n        current = current.next\n    current.next = None\n    \n    return new_head\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import ListNode, reverse_linked_list_with_stack\nfrom typing import Optional\n\ndef create_linked_list(values):\n    if not values:\n        return None\n    head = ListNode(values[0])\n    current = head\n    for value in values[1:]:\n        current.next = ListNode(value)\n        current = current.next\n    return head\n\ndef to_list(head: Optional[ListNode]) -> list:\n    result = []\n    current = head\n    while current:\n        result.append(current.value)\n        current = current.next\n    return result\n\ndef test_reverse_linked_list_with_stack():\n    # Single element list\n    head = ListNode(1)\n    assert to_list(reverse_linked_list_with_stack(head)) == [1]\n    \n    # Empty list\n    head = None\n    assert reverse_linked_list_with_stack(head) is None\n    \n    # Multiple elements\n    head = create_linked_list([1, 2, 3, 4, 5])\n    assert to_list(reverse_linked_list_with_stack(head)) == [5, 4, 3, 2, 1]\n    \n    # Reversing a linked list with nodes having the same value\n    head = create_linked_list([1, 1, 1])\n    assert to_list(reverse_linked_list_with_stack(head)) == [1, 1, 1]\n    \n    # Reversing a linked list formed in a zigzag pattern\n    head = create_linked_list([1, 3, 2, 4, 5])\n    assert to_list(reverse_linked_list_with_stack(head)) == [5, 4, 2, 3, 1]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000186", "row_id": 186, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a linked list using a stack data structure."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the Floyd Warshall shortest path algorithm from a given directed graph. The graph is represented using an adjacency matrix."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef floyd_warshall(graph):\n    \"\"\"\n    Function to implement Floyd-Warshall algorithm to find the shortest paths between all pairs of vertices.\n    The graph should be represented as an adjacency matrix, where graph[i][j] represents the weight of the edge\n    from vertex i to vertex j. If there is no edge, graph[i][j] should be infinity.\n    \"\"\"\n    V = len(graph)  # Number of vertices\n    # Adding the vertices separately\n    for k in range(V):\n        for i in range(V):\n            for j in range(V):\n                graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j])\n    return graph\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport numpy as np\n\ndef test_floyd_warshall():\n    # Create a sample adjacency matrix with an infinity indicating no direct edge\n    graph = np.array([\n        [0, 3, inf, inf],\n        [inf, 0, 1, 7],\n        [inf, inf, 0, inf],\n        [inf, inf, 2, 0]\n    ])\n    # Expected output after applying Floyd-Warshall algorithm\n    expected_output = np.array([\n        [0, 3, 4, 11],\n        [inf, 0, 1, 8],\n        [inf, inf, 0, 3],\n        [inf, inf, 2, 0]\n    ])\n    # Convert inf to np.inf for comparison\n    graph[np.isinf(graph)] = np.inf\n    expected_output[np.isinf(expected_output)] = np.inf\n    # Run the Floyd-Warshall algorithm\n    output = floyd_warshall(graph)\n    # Check if the output matches the expected output\n    assert np.array_equal(output, expected_output)\n\ndef test_floyd_warshall_empty():\n    # An empty graph\n    graph = np.array([[]])\n    output = floyd_warshall(graph)\n    assert output == graph\n\ndef test_floyd_warshall_single_node():\n    # A single node graph\n    graph = np.array([[0]])\n    output = floyd_warshall(graph)\n    assert output == graph\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000187", "row_id": 187, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the Floyd Warshall shortest path algorithm from a given directed graph. The graph is represented using an adjacency matrix."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the nth Fibonacci number using recursion."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci(n):\n    \"\"\"\n    Returns the nth Fibonacci number using recursion.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import fibonacci\n\ndef test_fibonacci_zero():\n    assert fibonacci(0) == 0\n\ndef test_fibonacci_one():\n    assert fibonacci(1) == 1\n\ndef test_fibonacci_two():\n    assert fibonacci(2) == 1\n\ndef test_fibonacci_five():\n    assert fibonacci(5) == 5\n\ndef test_fibonacci_nine():\n    assert fibonacci(9) == 34\n\ndef test_fibonacci_negative():\n    assert fibonacci(-5) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000188", "row_id": 188, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the nth Fibonacci number using recursion."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to check if a given number is a Fibonacci number or not."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_fibonacci(num: int) -> bool:\n    \"\"\"\n    Checks if the given number is a Fibonacci number.\n    \n    A number is Fibonacci if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square.\n    \"\"\"\n    def is_perfect_square(x: int) -> bool:\n        s = int(x**0.5)\n        return s*s == x\n    \n    return is_perfect_square(5*num**2 + 4) or is_perfect_square(5*num**2 - 4)\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import is_fibonacci\n\ndef test_is_fibonacci_small_numbers():\n    assert is_fibonacci(0) == True\n    assert is_fibonacci(1) == True\n    assert is_fibonacci(8) == True\n    assert is_fibonacci(13) == True\n\ndef test_is_fibonacci_large_numbers():\n    assert is_fibonacci(144) == True\n    assert is_fibonacci(233) == True\n    assert is_fibonacci(89) == True\n    assert is_fibonacci(377) == True\n\ndef test_is_fibonacci_non_fibonacci_numbers():\n    assert is_fibonacci(2) == False\n    assert is_fibonacci(4) == False\n    assert is_fibonacci(7) == False\n    assert is_fibonacci(10) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000189", "row_id": 189, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to check if a given number is a Fibonacci number or not."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to determine if a number is a \"perfect square\" number. A \"perfect square\" number is an integer that is the square of an integer. For example, 16 is a perfect square because it is 4 squared."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_perfect_square(num: int) -> bool:\n    \"\"\"\n    Checks if the given number is a perfect square.\n    \n    Args:\n    num (int): The number to check.\n    \n    Returns:\n    bool: True if num is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n    root = int(num ** 0.5)\n    return root * root == num\n```\n<|Solution End|>\n\n<|Test Begin|>\r\n```python\nfrom solution import is_perfect_square\n\ndef test_perfect_squares():\n    assert is_perfect_square(1) is True  # 1 = 1^2\n    assert is_perfect_square(4) is True  # 4 = 2^2\n    assert is_perfect_square(9) is True  # 9 = 3^2\n    assert is_perfect_square(16) is True # 16 = 4^2\n    assert is_perfect_square(25) is True # 25 = 5^2\n\ndef test_non_perfect_squares():\n    assert is_perfect_square(2) is False  # No integer square root\n    assert is_perfect_square(3) is False  # No integer square root\n    assert is_perfect_square(5) is False  # No integer square root\n    assert is_perfect_square(7) is False  # No integer square root\n    assert is_perfect_square(8) is False  # No integer square root\n\ndef test_zero_and_negative_numbers():\n    assert is_perfect_square(0) is True  # 0 = 0^2\n    assert is_perfect_square(-4) is False # Negative numbers cannot be perfect squares\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000190", "row_id": 190, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to determine if a number is a \"perfect square\" number. A \"perfect square\" number is an integer that is the square of an integer. For example, 16 is a perfect square because it is 4 squared."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to reverse a linked list in place."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass ListNode:\n    def __init__(self, value=0, next=None):\n        self.value = value\n        self.next = next\n\ndef reverse_linked_list(head):\n    \"\"\"\n    Reverses a linked list in place.\n    \n    :param head: ListNode, the head of the linked list to be reversed.\n    :return: ListNode, the new head of the reversed linked list.\n    \"\"\"\n    prev = None\n    current = head\n    while current:\n        next_node = current.next  # Store the next node\n        current.next = prev       # Reverse the current node's pointer\n        prev = current            # Move pointers one position forward\n        current = next_node\n    return prev\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import ListNode, reverse_linked_list\n\ndef create_linked_list(values):\n    if not values:\n        return None\n    head = ListNode(values[0])\n    current = head\n    for value in values[1:]:\n        current.next = ListNode(value)\n        current = current.next\n    return head\n\ndef linked_list_to_list(head):\n    result = []\n    current = head\n    while current:\n        result.append(current.value)\n        current = current.next\n    return result\n\ndef test_reverse_linked_list():\n    assert linked_list_to_list(reverse_linked_list(None)) == []\n    assert linked_list_to_list(reverse_linked_list(create_linked_list([1]))) == [1]\n    assert linked_list_to_list(reverse_linked_list(create_linked_list([1, 2, 3, 4, 5]))) == [5, 4, 3, 2, 1]\n    assert linked_list_to_list(reverse_linked_list(create_linked_list([1, 2]))) == [2, 1]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000191", "row_id": 191, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to reverse a linked list in place."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the first repeating character in a string. If no character is repeating, return -1. For example, in the string \"programming\", the first repeating character is 'r'."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef first_repeating_char(s: str) -> int:\n    \"\"\"\n    Finds the first repeating character in the string `s`.\n    If no character is repeating, returns -1.\n    \"\"\"\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import first_repeating_char\n\ndef test_first_repeating_char():\n    assert first_repeating_char(\"programming\") == 'r'\n    assert first_repeating_char(\"python\") == -1\n    assert first_repeating_char(\"abacabad\") == 'a'\n    assert first_repeating_char(\"xyz\") == -1\n    assert first_repeating_char(\"aAAbcCddEe\") == 'a'\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000192", "row_id": 192, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the first repeating character in a string. If no character is repeating, return -1. For example, in the string \"programming\", the first repeating character is 'r'."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a given string to a list of integers, where each integer is the ASCII value of each character in the string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef string_to_ascii_list(input_string):\n    \"\"\"\n    Converts the given string into a list of ASCII values of each character.\n    \n    :param input_string: String to be converted\n    :return: List of ASCII values\n    \"\"\"\n    return [ord(char) for char in input_string]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport string_to_ascii_list\n\ndef test_string_to_ascii_list_empty_string():\n    assert string_to_ascii_list.string_to_ascii_list(\"\") == []\n\ndef test_string_to_ascii_list_single_character():\n    assert string_to_ascii_list.string_to_ascii_list(\"a\") == [97]\n\ndef test_string_to_ascii_list_multiple_characters():\n    assert string_to_ascii_list.string_to_ascii_list(\"hello\") == [104, 101, 108, 108, 111]\n\ndef test_string_to_ascii_list_with_spaces():\n    assert string_to_ascii_list.string_to_ascii_list(\"hello world\") == [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000194", "row_id": 194, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a given string to a list of integers, where each integer is the ASCII value of each character in the string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to convert a binary tree to its mirror. The function should take a single parameter, which is the root of the binary tree."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass TreeNode:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.key = key\n\n    def insert(self, key):\n        if self.key:\n            if key < self.key:\n                if self.left is None:\n                    self.left = TreeNode(key)\n                else:\n                    self.left.insert(key)\n            elif key > self.key:\n                if self.right is None:\n                    self.right = TreeNode(key)\n                else:\n                    self.right.insert(key)\n        else:\n            self.key = key\n\n\ndef mirror_tree(root):\n    \"\"\"\n    Returns the mirror image of a binary tree by swapping the left and right children of every node.\n    \"\"\"\n    if root is not None:\n        # Swap the left and right children\n        root.left, root.right = root.right, root.left\n        # Recursively call the function for the left subtree\n        mirror_tree(root.left)\n        # Recursively call the function for the right subtree\n        mirror_tree(root.right)\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\nfrom solution import TreeNode, mirror_tree\n\n# Helper function to create a binary tree from pre-order traversal\ndef create_tree(preorder):\n    root = None\n    for value in preorder:\n        if root is None:\n            root = TreeNode(value)\n        else:\n            root.insert(value)\n    return root\n\n# Helper function to get the in-order traversal of a tree\ndef inorder_traversal(root):\n    if root is None:\n        return []\n    return inorder_traversal(root.left) + [root.key] + inorder_traversal(root.right)\n\ndef test_mirror_tree_simple():\n    preorder = [1, 2, 4, 5, 3, 6, 7]\n    root = create_tree(preorder)\n    mirrored_root = mirror_tree(root)\n    expected_inorder = [4, 2, 5, 1, 6, 3, 7]\n    assert inorder_traversal(mirrored_root) == expected_inorder\n\ndef test_mirror_tree_empty_tree():\n    root = None\n    mirrored_root = mirror_tree(root)\n    assert mirrored_root is None\n\ndef test_mirror_tree_single_node():\n    root = TreeNode(1)\n    mirrored_root = mirror_tree(root)\n    assert mirrored_root.key == 1 and mirrored_root.left is None and mirrored_root.right is None\n\ndef test_mirror_tree_complex():\n    preorder = [10, 20, 15, 30, 35, 40]\n    root = create_tree(preorder)\n    mirrored_root = mirror_tree(root)\n    expected_inorder = [15, 30, 35, 20, 40, 10]\n    assert inorder_traversal(mirrored_root) == expected_inorder\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000195", "row_id": 195, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to convert a binary tree to its mirror. The function should take a single parameter, which is the root of the binary tree."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the index of the substring within a given string using Rabin-Karp algorithm. The function should return the starting index of the first occurrence of the substring in the string. If the substring is not found, return -1."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef rabin_karp_search(text, pattern, q=101):\n    \"\"\"\n    Returns the starting index of the first occurrence of the\n    pattern in the text using the Rabin-Karp algorithm.\n    If the pattern is not found, returns -1.\n    \"\"\"\n    if len(pattern) == 0 or len(text) < len(pattern):\n        return -1\n\n    d = 256  # Number of characters in the input alphabet\n    phash = 0  # hash value for pattern\n    thash = 0  # hash value for text\n    h = 1\n\n    # The value of h would be \"pow(d, M-1)%q\"\n    for i in range(len(pattern) - 1):\n        h = (h * d) % q\n\n    # Calculate the hash value of pattern and first window of text\n    for i in range(len(pattern)):\n        phash = (d * phash + ord(pattern[i])) % q\n        thash = (d * thash + ord(text[i])) % q\n\n    # Slide the pattern over text one by one\n    for i in range(len(text) - len(pattern) + 1):\n        # Check the hash values of current window of text and pattern\n        # If the hash values match then only check for characters one by one\n        if phash == thash:\n            # Check for characters one by one\n            for j in range(len(pattern)):\n                if text[i + j] != pattern[j]:\n                    break\n            else:\n                return i  # pattern found at index i\n\n        # Calculate hash value for next window of text: Remove leading digit,\n        # add trailing digit\n        if i < len(text) - len(pattern):\n            thash = (d * (thash - ord(text[i]) * h) + ord(text[i + len(pattern)])) % q\n\n            # We might get negative values of thash, converting it to positive\n            if thash < 0:\n                thash = thash + q\n\n    return -1  # pattern not found\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef test_rabin_karp_search():\n    assert rabin_karp_search(\"ABCABCD\", \"ABCD\") == 3\n    assert rabin_karp_search(\"hello world\", \"world\") == 6\n    assert rabin_karp_search(\"a\", \"b\") == -1\n    assert rabin_karp_search(\"aaa\", \"aa\") == 0\n    assert rabin_karp_search(\"\", \"a\") == -1\n    assert rabin_karp_search(\"abc\", \"\") == 0\n    assert rabin_karp_search(\"abc\", \"a\") == 0\n    assert rabin_karp_search(\"abc\", \"abc\") == 0\n    # Test with large alphabet (lowercase and uppercase)\n    assert rabin_karp_search(\"The quick brown fox\", \"QUICK\") == 4\n\ndef test_rabin_karp_search_case_insensitive():\n    # Ensure search is case insensitive\n    assert rabin_karp_search(\"The quick Brown fox\", \"brown\") == 14\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000196", "row_id": 196, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the index of the substring within a given string using Rabin-Karp algorithm. The function should return the starting index of the first occurrence of the substring in the string. If the substring is not found, return -1."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to calculate the nth Fibonacci number. The function should recursively call itself to find the result."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef fibonacci(n):\n    \"\"\"\n    Returns the nth Fibonacci number using recursion.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import fibonacci\n\ndef test_fibonacci_zero():\n    assert fibonacci(0) == 0\n\ndef test_fibonacci_one():\n    assert fibonacci(1) == 1\n\ndef test_fibonacci_two():\n    assert fibonacci(2) == 1\n\ndef test_fibonacci_five():\n    assert fibonacci(5) == 5\n\ndef test_fibonacci_nine():\n    assert fibonacci(9) == 34\n\ndef test_fibonacci_negative():\n    assert fibonacci(-5) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000197", "row_id": 197, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to calculate the nth Fibonacci number. The function should recursively call itself to find the result."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Write a python function to find the longest substring without repeating characters in a string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef length_of_longest_substring(s: str) -> int:\n    \"\"\"\n    Finds the length of the longest substring without repeating characters.\n    \"\"\"\n    char_index_map = {}\n    left = 0\n    max_length = 0\n    \n    for right in range(len(s)):\n        if s[right] in char_index_map:\n            left = max(left, char_index_map[s[right]] + 1)\n        char_index_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    \n    return max_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import length_of_longest_substring\n\ndef test_length_of_longest_substring_empty_string():\n    assert length_of_longest_substring(\"\") == 0\n\ndef test_length_of_longest_substring_single_character():\n    assert length_of_longest_substring(\"a\") == 1\n\ndef test_length_of_longest_substring_all_unique_characters():\n    assert length_of_longest_substring(\"abcdefg\") == 7\n\ndef test_length_of_longest_substring_with_repeating_characters():\n    assert length_of_longest_substring(\"abcabcbb\") == 3\n    assert length_of_longest_substring(\"bbbbb\") == 1\n    assert length_of_longest_substring(\"pwwkew\") == 3\n    assert length_of_longest_substring(\"abba\") == 2\n    assert length_of_longest_substring(\"tmmzuxt\") == 5\n\ndef test_length_of_longest_substring_with_similar_characters():\n    assert length_of_longest_substring(\"dvdf\") == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000199", "row_id": 199, "seed_ids": [0], "mode": "prefill", "instruction": "Write a python function to find the longest substring without repeating characters in a string."}}
