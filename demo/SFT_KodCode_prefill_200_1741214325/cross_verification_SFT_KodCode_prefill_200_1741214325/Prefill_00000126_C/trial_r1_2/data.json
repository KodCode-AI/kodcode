{
  "style": "instruct",
  "subset": "Prefill",
  "question_id": "Prefill_00000126_C",
  "question": "def is_sorted_ascending(numbers: List[int]) -> bool:\n    \"\"\" Returns True if the list of numbers is sorted in ascending order, else False.\n    >>> is_sorted_ascending([1, 2, 3, 4, 5])\n    True\n    >>> is_sorted_ascending([1, 1, 2, 3, 4])\n    True\n    >>> is_sorted_ascending([5, 3, 2, 1])\n    False\n    >>> is_sorted_ascending([5])\n    True\n    >>> is_sorted_ascending([])\n    True\n    >>> is_sorted_ascending([1, 2, 3, 2, 5])\n    False\n    \"\"\"",
  "solution": "def is_sorted_ascending(numbers):\n    \"\"\"\n    Returns True if the list of numbers is sorted in ascending order, else False.\n    \"\"\"\n    return all(numbers[i] <= numbers[i + 1] for i in range(len(numbers) - 1))",
  "test_code": "from solution import is_sorted_ascending\n\ndef test_is_sorted_ascending_positive():\n    assert is_sorted_ascending([1, 2, 3, 4, 5]) == True\n\ndef test_is_sorted_ascending_with_equal_elements():\n    assert is_sorted_ascending([1, 1, 2, 3, 4]) == True\n\ndef test_is_sorted_ascending_negative():\n    assert is_sorted_ascending([5, 3, 2, 1]) == False\n\ndef test_is_sorted_ascending_single_element():\n    assert is_sorted_ascending([5]) == True\n\ndef test_is_sorted_ascending_empty_list():\n    assert is_sorted_ascending([]) == True\n\ndef test_is_sorted_ascending_mixed():\n    assert is_sorted_ascending([1, 2, 3, 2, 5]) == False",
  "test_info": [
    {
      "function_name": "is_sorted_ascending",
      "parameter_list": "(numbers)",
      "function_declaration": "def is_sorted_ascending(numbers):",
      "docstring": "Returns True if the list of numbers is sorted in ascending order, else False."
    }
  ],
  "gpt_pass_sequence": [
    1,
    1,
    1
  ],
  "gpt_pass_trial_num": 3,
  "gpt_difficulty": "easy",
  "gpt_pass_percentage": 1.0,
  "r1_response": "<think>\nOkay, I need to write a function called is_sorted_ascending that takes a list of integers and returns True if the list is sorted in ascending order, else False. Hmm, right. So what does ascending order mean exactly? It means each element is less than or equal to the next one. So for every consecutive pair, the current is <= next.\n\nLet's think about the examples. For [1,2,3,4,5], it's True. For [1,1,2,3,4], also True because the duplicates are allowed. [5,3,2,1] is definitely False because each next number is smaller. If the list is empty or has one element, like [5], then it's considered True because there's nothing to compare. And [1,2,3,2,5] is False because 3 is greater than 2.\n\nSo the approach is to check each pair of consecutive elements. For each i, check if numbers[i] <= numbers[i+1]. If all do, return True. Otherwise, return False.\n\nBut how do I implement this in Python? Well, I can loop through the list, for each index except the last one. So for i in range(len(numbers) - 1). Then for each i, compare numbers[i] and numbers[i+1].\n\nWait, but what if the list is empty or has only one element? Then the loop doesn't run, and we can just return True immediately. So the steps are:\n\n1. Handle edge cases: if the list is empty or length 1, return True.\n\n2. Otherwise, loop from i=0 to len(numbers) - 2:\n\n   a. For each i, check if numbers[i] > numbers[i+1]. If yes, return False.\n\n3. If the loop completes without finding any such case, return True.\n\nAlternatively, another way is to loop through all consecutive pairs. So for each pair (a, b) in zip(numbers, numbers[1:]), check if a <= b. If any pair doesn't satisfy this, return False. Otherwise, True.\n\nOh, right, that's a more Pythonic way. So shorter code.\n\nSo the code would be something like:\n\nfor a, b in zip(numbers, numbers[1:]):\n    if a > b:\n        return False\nreturn True\n\nBut wait, what about the cases where numbers is empty? Let me think: if numbers is empty, numbers[1:] is also empty, so zip returns nothing. So the for loop doesn't run, and return True. Similarly, if numbers has one element, zip(numbers, numbers[1:]) becomes something that yields one element from numbers (since numbers[1:] is empty) and zip stops, so loop doesn't run, and returns True.\n\nYes, that's correct.\n\nSo putting it into code:\n\ndef is_sorted_ascending(numbers: List[int]) -> bool:\n    for a, b in zip(numbers, numbers[1:]):\n        if a > b:\n            return False\n    return True\n\nThat's the function. Let's test it against the examples.\n\nExample 1: [1,2,3,4,5] \u2192 all a<=b steps, yes.\n\nExample 2: [1,1,2,3,4] \u2192 same reasoning.\n\nExample 3: [5,3,2,1] \u2192 5>3 \u2192 returns False.\n\nExample 4: [5] \u2192 no iterations, True.\n\nExample 5: [] \u2192 no iterations, True.\n\nExample 6: [1,2,3,2,5] \u2192 at i=2, a=3, b=2. So 3>2? Yes. Returns False.\n\nYes, all the test cases are covered.\n\nAnother test case: [2,2,2] \u2192 returns True, which is correct.\n\nWhat if list is [2,1]? Then zip gives (2,1), a > b: yes, returns False.\n\nYes, seems solid.\n</think>\n\nTo solve this problem, we need to determine if a list of integers is sorted in ascending order. This means each element must be less than or equal to the next element in the list.\n\n### Approach\nThe approach to solve this problem involves the following steps:\n1. **Check Consecutive Elements**: For a list to be sorted in ascending order, each element (starting from the first) must be less than or equal to the next element. \n2. **Loop Through Pairs**: We can use Python's `zip` function to create pairs of consecutive elements from the list. By iterating through these pairs, we can compare each element with the next one.\n3. **Early Exit**: If any element is found to be greater than the next one, the function can immediately return `False` as the list is not sorted. If all consecutive pairs are in ascending order, the function returns `True`.\n\nThis approach efficiently checks each pair of consecutive elements with a time complexity of O(n), where n is the length of the list, making it optimal for this problem.\n\n### Solution Code\n```python\nfrom typing import List\n\ndef is_sorted_ascending(numbers: List[int]) -> bool:\n    for a, b in zip(numbers, numbers[1:]):\n        if a > b:\n            return False\n    return True\n```\n\n### Explanation\n- **Edge Cases Handling**: If the list is empty or contains a single element, it is trivially sorted, and the function will return `True` without entering the loop.\n- **Loop Through Pairs**: Using `zip(numbers, numbers[1:])` generates consecutive pairs of elements. For each pair `(a, b)`, if `a` is greater than `b`, the list is not sorted, and the function returns `False`.\n- **Efficiency**: The loop runs in O(n) time, where n is the number of elements in the list, ensuring that the solution is efficient even for larger lists.\n\nThis method ensures that the function correctly identifies whether the list is sorted in ascending order by checking each consecutive pair, providing an optimal and clear solution to the problem.",
  "r1_solution": "from typing import List\n\ndef is_sorted_ascending(numbers: List[int]) -> bool:\n    for a, b in zip(numbers, numbers[1:]):\n        if a > b:\n            return False\n    return True",
  "metadata": {
    "prompt_id": "00000126",
    "row_id": 126,
    "seed_ids": [
      0
    ],
    "mode": "prefill",
    "original_instruction": "Write a python function to check if a list of numbers is sorted in ascending order."
  },
  "file_source": "KodCode_prefill_200_1741214325_prepared_results2.jsonl"
}