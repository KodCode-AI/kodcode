{
  "style": "instruct",
  "subset": "Prefill",
  "question_id": "Prefill_00000126_C",
  "question": "def is_sorted_ascending(numbers: List[int]) -> bool:\n    \"\"\" Returns True if the list of numbers is sorted in ascending order, else False.\n    >>> is_sorted_ascending([1, 2, 3, 4, 5])\n    True\n    >>> is_sorted_ascending([1, 1, 2, 3, 4])\n    True\n    >>> is_sorted_ascending([5, 3, 2, 1])\n    False\n    >>> is_sorted_ascending([5])\n    True\n    >>> is_sorted_ascending([])\n    True\n    >>> is_sorted_ascending([1, 2, 3, 2, 5])\n    False\n    \"\"\"",
  "solution": "def is_sorted_ascending(numbers):\n    \"\"\"\n    Returns True if the list of numbers is sorted in ascending order, else False.\n    \"\"\"\n    return all(numbers[i] <= numbers[i + 1] for i in range(len(numbers) - 1))",
  "test_code": "from solution import is_sorted_ascending\n\ndef test_is_sorted_ascending_positive():\n    assert is_sorted_ascending([1, 2, 3, 4, 5]) == True\n\ndef test_is_sorted_ascending_with_equal_elements():\n    assert is_sorted_ascending([1, 1, 2, 3, 4]) == True\n\ndef test_is_sorted_ascending_negative():\n    assert is_sorted_ascending([5, 3, 2, 1]) == False\n\ndef test_is_sorted_ascending_single_element():\n    assert is_sorted_ascending([5]) == True\n\ndef test_is_sorted_ascending_empty_list():\n    assert is_sorted_ascending([]) == True\n\ndef test_is_sorted_ascending_mixed():\n    assert is_sorted_ascending([1, 2, 3, 2, 5]) == False",
  "test_info": [
    {
      "function_name": "is_sorted_ascending",
      "parameter_list": "(numbers)",
      "function_declaration": "def is_sorted_ascending(numbers):",
      "docstring": "Returns True if the list of numbers is sorted in ascending order, else False."
    }
  ],
  "gpt_pass_sequence": [
    1,
    1,
    1
  ],
  "gpt_pass_trial_num": 3,
  "gpt_difficulty": "easy",
  "gpt_pass_percentage": 1.0,
  "r1_response": "<think>\nOkay, I have to write a function called is_sorted_ascending that takes a list of integers and returns True if it's sorted in ascending order, otherwise False. Hmm, how do I approach this?\n\nSo, what does ascending order mean? It means each element is less than or equal to the next one. For example, [1,2,3] is sorted. What about duplicates? Oh right, like [1,1,2] is also considered sorted. That makes sense.\n\nFirst, I should think about the edge cases. What if the list is empty or has only one element? According to the examples, both cases return True. That's because there's nothing to compare, so it's trivially sorted.\n\nSo, if the list is empty or has one element, return True.\n\nNow, for longer lists. I need to check each consecutive pair. For each index i, check if numbers[i] <= numbers[i+1]. If all of them satisfy this, return True. If any don't, return False.\n\nHow can I implement this in Python?\n\nHmm, I could loop through the list from 0 to len(numbers) - 2. Wait, because I need to check i and i+1, so for a list of length n, I check up to n-1 elements. Or actually, index goes up to len(numbers) - 2.\n\nWait, for example, if numbers is length 5, indexes 0-4. So i goes 0 to 3, and checks i and i+1.\n\nSo maybe something like:\n\nfor i in range(len(numbers) - 1):\n    if numbers[i] > numbers[i+1]:\n        return False\nreturn True\n\nOh right, this makes sense. Because if any pair is in descending order, it returns False. Otherwise, after checking all, returns True.\n\nLet me think about test cases:\n\nSample 1: [1,2,3,4,5] should return True. Each step is okay.\n\nSample 2: [1,1,2,3,4]. The pair 1 and 1 is okay, as 1 <= 1.\n\nSample 3: [5,3,2,1]. The first pair 5 >3, so return False.\n\nWhat about a single element? len(numbers) is 1, len(numbers) -1 is 0, so the loop doesn't run. So returns True as intended.\n\nEmpty list: same, loop not entered. Returns True.\n\nTest case in sample [1,2,3,2,5]: check pairs (1,2)=ok, (2,3)=ok, (3,2)=not ok. So returns False.\n\nYes, the logic seems solid.\n\nSo writing the function:\n\nHandle the edge cases first, or let them be handled by the loop. Wait, no, because len(numbers) could be 0, so len(numbers) - 1 would be -1, and range(-1) is an empty range. So for empty list, the loop doesn't run, and returns True, which is correct.\n\nSo actually, the code can be written without any edge case checking. The general case works for all, including when the list is empty or has one element.\n\nSo the function is straightforward:\n\ndef is_sorted_ascending(numbers: List[int]) -> bool:\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i+1]:\n            return False\n    return True\n\nThat's simple and seems to cover all cases.\n\nLet me test it against the examples.\n\nExample 1: [1,2,3,4,5]. All i, numbers[i] <= numbers[i+1]. So returns True.\n\nExample 2: [1,1,2,3,4]. Same way, returns True.\n\nExample 3: [5,3,2,1]. The first iteration i=0, 5>3, returns False.\n\nExample 4: [5], loop runs 0-0 (no, len is 1, len-1 =0 --> loop for 0 elements). So return True.\n\nExample 5: empty list, same as above.\n\nExample 6: [1,2,3,2,5]. i=0:1 vs 2 ok. i=1: 2 vs3 ok. i=2:3 vs2 not ok. So returns False.\n\nYes, all cases covered.\n\nTherefore, this implementation should suffice.\n</think>\n\nTo solve this problem, we need to determine if a given list of integers is sorted in ascending order. Ascending order means each element is less than or equal to the next element in the list. \n\n### Approach\nThe approach to solve this problem involves the following steps:\n\n1. **Check All Consecutive Pairs**: Loop through each consecutive pair of elements in the list and compare them. For each pair, check if the current element is less than or equal to the next element.\n2. **Return Result**: If any pair fails this condition (i.e., the current element is greater than the next element), return `False`. If all pairs satisfy the condition, return `True`.\n\nThis approach ensures that we efficiently check the entire list in a single pass, making the solution both optimal and easy to understand.\n\n### Solution Code\n```python\nfrom typing import List\n\ndef is_sorted_ascending(numbers: List[int]) -> bool:\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i+1]:\n            return False\n    return True\n```\n\n### Explanation\n- **Edge Cases Handling**: The solution correctly handles edge cases such as an empty list or a list with a single element by simply returning `True` since there are no elements to compare, making the list trivially sorted.\n- **Efficiency**: The algorithm runs in O(n) time complexity, where n is the number of elements in the list. This is because it only requires a single pass through the list to check each consecutive pair.\n- **Simplicity**: The solution is straightforward and uses minimal code, making it easy to read and maintain.\n\nThis approach ensures that we accurately determine whether the list is sorted in ascending order with optimal efficiency.",
  "r1_solution": "from typing import List\n\ndef is_sorted_ascending(numbers: List[int]) -> bool:\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i+1]:\n            return False\n    return True",
  "metadata": {
    "prompt_id": "00000126",
    "row_id": 126,
    "seed_ids": [
      0
    ],
    "mode": "prefill",
    "original_instruction": "Write a python function to check if a list of numbers is sorted in ascending order."
  },
  "file_source": "KodCode_prefill_200_1741214325_prepared_results1.jsonl"
}