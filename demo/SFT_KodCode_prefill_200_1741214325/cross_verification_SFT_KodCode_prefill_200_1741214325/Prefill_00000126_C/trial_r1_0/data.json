{
  "style": "instruct",
  "subset": "Prefill",
  "question_id": "Prefill_00000126_C",
  "question": "def is_sorted_ascending(numbers: List[int]) -> bool:\n    \"\"\" Returns True if the list of numbers is sorted in ascending order, else False.\n    >>> is_sorted_ascending([1, 2, 3, 4, 5])\n    True\n    >>> is_sorted_ascending([1, 1, 2, 3, 4])\n    True\n    >>> is_sorted_ascending([5, 3, 2, 1])\n    False\n    >>> is_sorted_ascending([5])\n    True\n    >>> is_sorted_ascending([])\n    True\n    >>> is_sorted_ascending([1, 2, 3, 2, 5])\n    False\n    \"\"\"",
  "solution": "def is_sorted_ascending(numbers):\n    \"\"\"\n    Returns True if the list of numbers is sorted in ascending order, else False.\n    \"\"\"\n    return all(numbers[i] <= numbers[i + 1] for i in range(len(numbers) - 1))",
  "test_code": "from solution import is_sorted_ascending\n\ndef test_is_sorted_ascending_positive():\n    assert is_sorted_ascending([1, 2, 3, 4, 5]) == True\n\ndef test_is_sorted_ascending_with_equal_elements():\n    assert is_sorted_ascending([1, 1, 2, 3, 4]) == True\n\ndef test_is_sorted_ascending_negative():\n    assert is_sorted_ascending([5, 3, 2, 1]) == False\n\ndef test_is_sorted_ascending_single_element():\n    assert is_sorted_ascending([5]) == True\n\ndef test_is_sorted_ascending_empty_list():\n    assert is_sorted_ascending([]) == True\n\ndef test_is_sorted_ascending_mixed():\n    assert is_sorted_ascending([1, 2, 3, 2, 5]) == False",
  "test_info": [
    {
      "function_name": "is_sorted_ascending",
      "parameter_list": "(numbers)",
      "function_declaration": "def is_sorted_ascending(numbers):",
      "docstring": "Returns True if the list of numbers is sorted in ascending order, else False."
    }
  ],
  "gpt_pass_sequence": [
    1,
    1,
    1
  ],
  "gpt_pass_trial_num": 3,
  "gpt_difficulty": "easy",
  "gpt_pass_percentage": 1.0,
  "r1_response": "<think>\nOkay, I need to write a function called is_sorted_ascending that checks if a list of integers is sorted in ascending order. Hmm, what do I know about ascending order? Oh right, each element should be less than or equal to the next one. So for every consecutive pair in the list, the first should be <= the second.\n\nLet me think about the steps here. The function takes a list called numbers as input. I need to return True if the list is sorted in ascending order, and False otherwise.\n\nFirst, what's some basic cases I should handle? Well, if the list is empty, that should return True because there's nothing to sort. Oh wait, I remember that the examples include is_sorted_ascending([]) returning True, so I need to make sure to handle that.\n\nWhat about a single-element list like [5]? That's also considered sorted because there's nothing to compare, so return True again.\n\nNow for lists with multiple elements. I think I need to loop through each pair of adjacent elements and check if each is <= the next one. If I find any pair where the current element is greater than the next, I return False immediately. If all pairs are in order, then return True.\n\nSo the plan is:\n\n1. Handle the edge cases where the list has 0 or 1 elements by returning True.\n2. Iterate through the list from the first element to the second last one.\n3. For each index i, compare numbers[i] with numbers[i+1].\n4. If at any point numbers[i] > numbers[i+1], return False.\n5. If the loop completes without any issues, return True.\n\nWait, how about lists where some elements are equal? Like the example [1, 1, 2, 3, 4] returns True. So my condition is correct because I'm checking for less than or equal.\n\nLet me think about the loop structure in Python. Maybe I'll go through each index using a for loop, with range(len(numbers) - 1). Because for a list of length n, there are n-1 consecutive pairs.\n\nSo in code, it's something like:\n\nfor i in range(len(numbers) - 1):\n    if numbers[i] > numbers[i + 1]:\n        return False\nreturn True\n\nBut wait, let's think about the case where the list is empty or has only one element. The loop won't run even once in those cases, so the function would return True.\n\nPutting it all together, maybe the function can be written as a one-liner with a loop, but in code structure, perhaps:\n\nif the length is less than or equal to 1, return True.\n\nElse, loop through and compare adjacent elements.\n\nWait, but since for an empty list, len(numbers) is 0, len(numbers)-1 is -1, but range(-1) is empty, so the loop doesn't run and returns True anyway.\n\nSo perhaps the initial check isn't necessary because the code can handle those cases implicitly. Let me see.\n\nTesting with the example [5]: the loop would run range(0, 0) (since 1-1=0, but range(0) is empty). So no iterations, and return True.\n\nTesting with empty list: same as above, return True.\n\nAnother example, [1,2,3,4,5], checking each pair 1<=2, 2<=3, etc.\u2014all correct.\n\nWhat about [5,3,2,1]: 5 >3 \u2192 return False.\n\nAnother example, [1,2,3,2,5]: 3>2 so return False.\n\nSo the code seems to handle all these cases correctly.\n\nSo now to write the function.\n\nI can write it as:\n\ndef is_sorted_ascending(numbers: List[int]) -> bool:\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i + 1]:\n            return False\n    return True\n\nYes, that should work. Because if all pairs are <=, then the for loop completes without returning False, and the function returns True.\n\nI think this should cover all test cases.\n</think>\n\nTo determine if a list of integers is sorted in ascending order, we need to check each pair of consecutive elements. If each element is less than or equal to the next, the list is sorted in ascending order. If any element is greater than the next, the list is not sorted.\n\n**Approach:**\n1. Iterate through the list from the first element to the second last one.\n2. For each consecutive pair, check if the current element is greater than the next.\n3. If any such pair is found, return `False` immediately as the list is not sorted.\n4. If all pairs are in order, return `True`.\n\nThe code handles edge cases where the list is empty or has only one element by returning `True` since such lists are considered sorted.\n\n**Solution Code:**\n\n```python\nfrom typing import List\n\ndef is_sorted_ascending(numbers: List[int]) -> bool:\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i + 1]:\n            return False\n    return True\n```\n\n**Explanation:**\n- The function uses a for loop to iterate through each index in the list except the last one.\n- It compares each element with the next one. If any element is found to be greater than the next, the function returns `False`.\n- If the loop completes without finding any such pair, the function returns `True`, indicating the list is sorted in ascending order.",
  "r1_solution": "from typing import List\n\ndef is_sorted_ascending(numbers: List[int]) -> bool:\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i + 1]:\n            return False\n    return True",
  "metadata": {
    "prompt_id": "00000126",
    "row_id": 126,
    "seed_ids": [
      0
    ],
    "mode": "prefill",
    "original_instruction": "Write a python function to check if a list of numbers is sorted in ascending order."
  },
  "file_source": "KodCode_prefill_200_1741214325_prepared_results0.jsonl"
}