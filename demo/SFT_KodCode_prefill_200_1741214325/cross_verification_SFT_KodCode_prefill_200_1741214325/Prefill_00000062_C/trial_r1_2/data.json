{
  "style": "instruct",
  "subset": "Prefill",
  "question_id": "Prefill_00000062_C",
  "question": "def second_maximum(numbers: List[int]) -> int:\n    \"\"\" Returns the second maximum number in a list of integers.\n    If the list does not contain at least two different numbers, returns None.\n    \"\"\"",
  "solution": "def second_maximum(numbers):\n    \"\"\"\n    Returns the second maximum number in a list of integers.\n    If the list does not contain at least two different numbers, returns None.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    max_num = second_max_num = float('-inf')\n    \n    for num in numbers:\n        if num > max_num:\n            second_max_num = max_num\n            max_num = num\n        elif max_num > num > second_max_num:\n            second_max_num = num\n            \n    if second_max_num == float('-inf'):\n        return None\n    return second_max_num",
  "test_code": "from solution import second_maximum\n\ndef test_second_maximum_with_two_unique_numbers():\n    assert second_maximum([1, 2]) == 1\n\ndef test_second_maximum_with_sorted_repeating_numbers():\n    assert second_maximum([5, 5, 4, 4, 3, 3]) == 4\n\ndef test_second_maximum_with_descending_repeating_numbers():\n    assert second_maximum([10, 9, 10, 9]) == 9\n\ndef test_second_maximum_with_no_enough_unique_numbers():\n    assert second_maximum([2, 2]) == None\n\ndef test_second_maximum_with_random_numbers():\n    assert second_maximum([7, 8, 9, 10, 11, 9]) == 10\n\ndef test_second_maximum_with_only_one_number():\n    assert second_maximum([100]) == None\n\ndef test_second_maximum_with_empty_list():\n    assert second_maximum([]) == None",
  "test_info": [
    {
      "function_name": "second_maximum",
      "parameter_list": "(numbers)",
      "function_declaration": "def second_maximum(numbers):",
      "docstring": "Returns the second maximum number in a list of integers.\nIf the list does not contain at least two different numbers, returns None."
    }
  ],
  "gpt_pass_sequence": [
    1,
    0,
    1
  ],
  "gpt_pass_trial_num": 2,
  "gpt_difficulty": "easy",
  "gpt_pass_percentage": 0.667,
  "r1_response": "<think>\nOkay, I need to write a Python function called second_maximum that takes a list of integers and returns the second maximum. If there aren't at least two different numbers, it should return None. Hmm, let's think.\n\nWait, wait. So, the second maximum, not just the second element. Oh right, like sorted, the second highest. So, first, I need to find the two largest numbers, and make sure they're different, else return None.\n\nHow do I approach this? Okay, maybe I can find the maximum, then find the maximum that's less than that. But wait, sometimes there might be duplicates, so I have to make sure to exclude those cases.\n\nWait, for example, if the list is [5,5,5], then there's no second maximum different from the first, right? So the function should return None in that case.\n\nSo first, I need to check that there are at least two distinct numbers. So perhaps I can create a set from the list and then check the length. If the length of the set is less than 2, then return None.\n\nBut wait, the list might have two same numbers but in a larger list. Like [3, 3, 4, 4]. Oh, wait no, the set in this example would be {3,4} with length 2, which is acceptable. So it's the number of distinct elements that matters.\n\nWait the original question says, \"at least two different numbers.\" So I think the correct condition is whether the set has at least size 2.\n\nSo step by step:\n\n1. Check if the unique numbers in the list are less than 2. If yes, return None.\n2. Else, find the second largest number.\n\nHow to find the second largest? One way is to sort the list in ascending order and pick the second last element, but only after removing duplicates? Or maybe no, because even with duplicates, after removing, sorted, the second last would be the correct one.\n\nSo another approach is:\n\n- Convert the list to a set to eliminate duplicates.\n- If length is less than 2, return None.\n- Else, convert back to a sorted list and take the second element from the end.\n\nWait wait, but for example, in the list [1,3,3], the set is {1,3}, so the second maximum is 1, but wait wait wait no. Wait, sorted list is [1,3], so the maximum is 3, second maximum is 1. But in the original list, the second maximum is 1. So the approach is okay.\n\nBut wait, what about the list [3,2,4,4]. Unique elements are 2,3,4. So sorted in ascending order [2,3,4], but the maximum is 4, second max is 3. So that's correct.\n\nBut if the original list isn't converted to a set, and we try to find in the original list, perhaps the second maximum is the next one.\n\nSo method for finding the second maximum:\n\n1. Identify the distinct elements, sort them, pick the second highest.\nBut another way is to track the top two elements.\n\nHmm. So, perhaps the best approach is:\n\n- Extract the unique elements by converting to a set.\n- If the length is less than 2, return None.\n- Then sort the unique elements in ascending order, and take the second last element, which is the second maximum.\n\nWait no, when sorted in ascending, the last is largest, so the second last is second maximum. So that would work.\n\nSo for example, let's take the list [1,2,3,4], set is {1,2,3,4}, sorted as [1,2,3,4], so second last is 3, which is second maximum from the unique elements.\n\nWait, but what about a list like [4,4,3,3,2,2]. The set will be {4,3,2}, sorted as [2,3,4]. The second maximum is 3.\n\nBut in the original list, the second maximum is 3, which is correct.\n\nSo that method works.\n\nAlternatively, I could find the maximum, remove all instances, then find the new maximum. But that could have issues with duplicates.\n\nLet me see. For example, the original list is [5,5,5,3,3]. Max is 5. If I remove all instances of 5, the remaining is [3,3], so maximum of that is 3, which is correct. So that approach could also work.\n\nWhich method is better?\n\nOption 1:\n\nunique_numbers = list(set(numbers))\n\nBut wait, what if the list is empty? Well, if numbers is empty, the function originally has no handling, but since the first condition is that unique elements have to be at least two, but empty list will have set size zero, so return None.\n\nOption 1 steps:\n\n1. Convert numbers to a set.\n2. If the length of the set is less than 2, return None.\n3. Sort the set in ascending order, and pick the second last element.\n\nWait, but the set is unordered. Hmm, how to sort the elements. For example, numbers like [5,3,1,2]. The sorted list will be [1,2,3,5], so that's correct.\n\nBut what about negative numbers? Let's say the set is {-3, -1, 2}, sorted is [-3, -1, 2], so second max is -1.\n\nThat's correct.\n\nOption 2: find the max, remove all max elements, and then find the max again.\n\nBut this would fail for the list [5,5,3,3] because if you remove all 5s, you get [3,3] which only has one unique element.\n\nWait no, wait, if the list is [5,5,3,3], the unique elements are already {3,5}, so length is 2. So first step passes. Then in step 2, the max is 5, remove all 5s to get [3,3], and then the max of that is 3, which is correct.\n\nYes, in that case, option 2 also works.\n\nSo now, the implementation.\n\nLet's pick one approach to implement.\n\nWhich one is easier?\n\nHmm, perhaps the first approach: convert to a set, but then, because for the second maximum after handling duplicates, could just sort the set and take the second last.\n\nBut wait, the set's elements are not necessarily in any order, so we need to sort them.\n\nWait, in Python, when you sort a set, it becomes a list in ascending order.\n\nSo first, numbers is a list of integers.\n\nLet me write some test cases.\n\nTest case 1: [5,5,5] --> returns None.\n\nTest case 2: [1,2] returns 1.\n\nTest case 3: [3,1,3,2] --> returns 2.\n\nWait, unique elements are 1,2,3. So sorted is [1,2,3], second max is 2, which is correct.\n\nTest case 4: [5,3,9,9,3] --> unique_sort is [3,5,9], second last is 5.\n\nWhich is correct.\n\nAnother test case: [5,1,5,2,2,3]. Unique sorted: [1,2,3,5]. Second last: 3.\n\nWait no, wait after sorting unique elements [1,2,3,5], the second last is 3? No, the list after sorting is [1,2,3,5], last element is 5, so the second last is 3. So the second maximum is 3. Correct.\n\nYes, that's correct.\n\nSo the first approach seems to handle that.\n\nBut how about the list [1,1,2,2,3,3,4,4]. The unique sorted is [1,2,3,4], so second last is 3.\n\nYes.\n\nSo, back to code.\n\nFunction:\n\ndef second_maximum(numbers: List[int]) -> int:\n\nFirst, extract unique numbers.\n\nunique_normal = sorted(list(set(numbers)))\n\nWait, but wait. No, in code that would be sorted( set(numbers) ), but in Python 3, set doesn't have a sorted order, and in the function when you do sorted( ... ), it will sort the elements.\n\nWait, let me think about the code.\n\nSo code steps:\n\n1. Handle empty list? Well, if the list is empty, step 1 would return None.\n\n2. Convert numbers into unique = set(numbers)\n\n3. If len(unique) < 2, return None.\n\n4. Else, make a sorted list of unique, sorted_unique = sorted(unique), or sorted_unique = sorted(unique_numbers)\n\nWait, unique is a set, so sorted(unique) will be in ascending order.\n\nThen, the second maximum is the second last element of sorted_unique.\n\nSo return sorted_unique[-2]\n\nWait no, wait: If there are more than 2 unique elements, it depends. For example, with [1,2,3], second last is 2, which is second maximum.\n\nWait wait, if the unique elements are sorted, in order say [a, b, c, d], then the second last is c, which is correct as the second max.\n\nYes.\n\nBut wait, for case where unique is [3,1], sorted becomes [1,3], so second last is 1? No, the maximum is 3, second max is 1. Then that's correct.\n\nWait no, wait in [3,1], the second maximum is 1, yes.\n\nSo I think that code would return the correct number.\n\nSo putting it all together:\n\ndef second_maximum(numbers: List[int]) -> int:\n    unique = set(numbers)\n    if len(unique) < 2:\n        return None\n    sorted_unique = sorted(unique)\n    return sorted_unique[-2]\n\nWait, wait, for example, with unique elements [3, 5, 1], when sorted becomes [1,3,5], then the second last is 3, which is correct.\n\nSo the code seems to work.\n\nWait but let me see another example: unique sorted is [5, 10, 15, 20], so the second last element is 15. Correct.\n\nYes, that's correct.\n\nBut wait, what about unique [10,5], when sorted becomes [5,10], second last is 5, which is correct.\n\nBut wait, in this method, we are considering all unique elements, but when the unique elements are the same except for the first, like in [3,3,3,3], the set is {3}, so len is 1, return None, correct.\n\nWhat about [3,5,3,5]. The set is {3,5}, sorted is [3,5], returns 3, which is correct.\n\nSo the code seems solid.\n\nBut wait: let's think about numbers with more elements.\n\nSample Input: [5,5,2,3,6,6], the unique is {2,3,5,6}, sorted is [2,3,5,6], the second last is 5, which is correct. Second maximum is 5.\n\nYes, correct.\n\nAnother test case: [8], returns None, since len(unique) is 1.\n\nAnother test case: [9, 8,8], unique is {8,9}, sorted as [8,9], so returns 8. Correct, because the maximum is 9, second is 8.\n\nWhat about [10, 3, 3, -5, 10, 10]. Unique is {10, 3, -5}, sorted is [-5,3,10], so the second last is 3, which is correct, the second maximum.\n\nYes.\n\nSo all these test cases seem to work.\n\nOk, I think this function should handle all cases.\n\nWait but wait, wait another example: [1,2,3,4,5,6,7,8,9,9]. Unique is {1,2,3,4,5,6,7,8,9}, sorted, so second last is 8, correct.\n\nYes.\n\nSo this method seems solid.\n\nThus, the code will be as follows.\n\nWait, but the function expects to return an int, but when the list has len(unique) less than 2, it returns None. So need to return None.\n\nBut in code, all okay.\n\nWait, but in Python, a function returning multiple types, but Pyright or others may have issues but in this case, the function as per the problem statement, can return None.\n\nSo now I think the code is correct.\n</think>\n\nTo solve this problem, we need to find the second maximum number in a given list of integers. If the list contains fewer than two distinct integers, the function should return `None`.\n\n### Approach\nThe approach to solve this problem involves the following steps:\n1. **Extract Unique Elements**: Convert the list into a set to remove any duplicate elements. This helps in ensuring that we only consider distinct values.\n2. **Check for Minimum Unique Elements**: If the set of unique elements has fewer than two elements, return `None` since we cannot determine a second maximum.\n3. **Sort the Unique Elements**: Convert the set back into a sorted list in ascending order.\n4. **Determine the Second Maximum**: The second largest element in the sorted list will be the second maximum value. This is found by accessing the second last element of the sorted list.\n\n### Solution Code\n```python\nfrom typing import List\n\ndef second_maximum(numbers: List[int]) -> int:\n    unique = set(numbers)\n    if len(unique) < 2:\n        return None\n    sorted_unique = sorted(unique)\n    return sorted_unique[-2]\n```\n\n### Explanation\n1. **Extract Unique Elements**: Using a set removes duplicates from the list, ensuring each number is considered only once.\n2. **Check for Minimum Unique Elements**: The function immediately returns `None` if there are fewer than two unique numbers, as the second maximum cannot be determined.\n3. **Sort the Unique Elements**: Sorting the unique elements allows us to easily find the second maximum by index.\n4. **Determine the Second Maximum**: By accessing the second last element of the sorted list (which is at index `-2`), we efficiently obtain the second maximum value.\n\nThis approach ensures that the solution is both efficient and easy to understand, handling all edge cases appropriately.",
  "r1_solution": "from typing import List\n\ndef second_maximum(numbers: List[int]) -> int:\n    unique = set(numbers)\n    if len(unique) < 2:\n        return None\n    sorted_unique = sorted(unique)\n    return sorted_unique[-2]",
  "metadata": {
    "prompt_id": "00000062",
    "row_id": 62,
    "seed_ids": [
      0
    ],
    "mode": "prefill",
    "original_instruction": "Write a python function to find the second maximum number in a list of integers. If the list does not contain at least two different numbers, return None."
  },
  "file_source": "KodCode_prefill_200_1741214325_prepared_results2.jsonl"
}