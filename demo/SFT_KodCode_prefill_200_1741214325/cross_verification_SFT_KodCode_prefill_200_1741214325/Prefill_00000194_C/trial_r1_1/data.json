{
  "style": "instruct",
  "subset": "Prefill",
  "question_id": "Prefill_00000194_C",
  "question": "def string_to_ascii_list(input_string: str) -> List[int]:\n    \"\"\" Converts a given string to a list of integers, where each integer is the ASCII value of each character in the string.\n    >>> string_to_ascii_list(\"AB\") \n    [65, 66]\n    >>> string_to_ascii_list(\"Hello\") \n    [72, 101, 108, 108, 111]\n    >>> string_to_ascii_list(\"\") \n    []\n    >>> string_to_ascii_list(\"123\") \n    [49, 50, 51]\n    \"\"\"",
  "solution": "def string_to_ascii_list(input_string):\n    \"\"\"\n    Converts a given string to a list of integers, where each integer is the ASCII value of each character in the string.\n    \"\"\"\n    return [ord(char) for char in input_string]",
  "test_code": "def test_string_to_ascii_list():\n    assert string_to_ascii_list(\"AB\") == [65, 66]\n    assert string_to_ascii_list(\"Hello\") == [72, 101, 108, 108, 111]\n    assert string_to_ascii_list(\"\") == []\n    assert string_to_ascii_list(\"123\") == [49, 50, 51]\n\ndef test_empty_string():\n    assert string_to_ascii_list(\"\") == []\n\ndef test_string_with_spaces():\n    assert string_to_ascii_list(\"Hello World!\") == [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]",
  "test_info": [
    {
      "function_name": "string_to_ascii_list",
      "parameter_list": "(input_string)",
      "function_declaration": "def string_to_ascii_list(input_string):",
      "docstring": "Converts a given string to a list of integers, where each integer is the ASCII value of each character in the string."
    }
  ],
  "gpt_pass_sequence": [
    1,
    0
  ],
  "gpt_pass_trial_num": 1,
  "gpt_difficulty": "medium",
  "gpt_pass_percentage": 0.5,
  "r1_response": "<think>\nOkay, I need to write a Python function called string_to_ascii_list that takes an input string and returns a list of integers. Each integer should be the ASCII value of each character in the string. Hmm, let's think about how to approach this.\n\nWait, so for example, if the input is \"AB\", the output should be [65, 66], right? Because A is 65 and B is 66 in ASCII. And for an empty string, it should return an empty list. So the function needs to handle that.\n\nI remember that in Python, each character can be converted to its ASCII value using the ord() function. So for each character in the input string, I need to apply ord() and collect those values into a list.\n\nSo the plan is: iterate over each character in the input string, convert each to its ASCII using ord(), and build a list from that.\n\nHow do I do that? Well, maybe using a list comprehension would be the most efficient way. Like, [ord(char) for char in input_string]. That should create the list I need.\n\nWait, let me think about edge cases. If the string is empty, this will naturally produce an empty list, which is correct. What about strings with numbers or special characters? For example, \"123\" should become [49,50,51]. That should work with the same code because ord just returns the ASCII code regardless.\n\nSo putting it together, the function can be written in a very concise way using a list comprehension.\n\nWait, but the function is supposed to be annotated with types. The input is a string, and the output is a list of integers. So the function definition should look like:\n\ndef string_to_ascii_list(input_string: str) -> List[int]:\n\nYes, right. And I need to import List from typing, right? Or maybe the problem expects that the function is already in an environment with the correct imports.\n\nWait, looking at the examples, in the code sample, the user provided the function plus the examples. So I need to make sure to include necessary imports? Or in the problem statement, is the function provided as a signature without the body, and I need to fill in the body.\n\nAssuming that the function is to be written, and the tests will handle the imports. So I don't need to worry about importing List because maybe in the context, things are already imported. Or perhaps it's just part of the annotation, which is not required but allowed.\n\nSo, with that in mind, the function's implementation would be a one-liner using list comprehension.\n\nLet me look at an example:\n\nFor \"Hello\", it's [72, 101, 108, 108, 111]. Which is exactly what the list comprehension would produce if I do [ord(c) for c in \"Hello\"].\n\nSo the code is straightforward.\n\nSo, putting it all together, the function is:\n\ndef string_to_ascii_list(input_string: str) -> List[int]:\n    return [ord(char) for char in input_string]\n\nYes, that should do it.\n\nI should also test it in my mind. For empty string, returns empty list. For \"AB\", returns 65 and 66, correct.\n\nWhat if the string has non-ASCII characters? Well, the examples don't include those, but the function should still process them correctly, as ord returns their Unicode code point, which is acceptable here.\n\nSo this solution should handle all cases.\n</think>\n\nTo solve this problem, we need to convert a given string into a list of integers where each integer represents the ASCII value of the corresponding character in the string. This can be efficiently achieved using a straightforward approach that leverages Python's built-in functions.\n\n### Approach\nThe approach involves iterating over each character in the input string and converting each character to its corresponding ASCII value using the built-in `ord()` function. We can achieve this efficiently using a list comprehension, which is a concise way to create lists in Python. The list comprehension will iterate over each character in the input string, apply the `ord()` function to each character, and collect the results into a list which is then returned.\n\nThis approach handles all edge cases, including empty strings and strings with special characters or numbers, by naturally producing an empty list for empty strings and correctly converting characters to their ASCII values for other cases.\n\n### Solution Code\n```python\nfrom typing import List\n\ndef string_to_ascii_list(input_string: str) -> List[int]:\n    return [ord(char) for char in input_string]\n```\n\n### Explanation\n- **Problem Analysis**: The task requires converting each character in a string to its corresponding ASCII value. This is a straightforward conversion that can be done using the `ord()` function in Python, which returns the Unicode code point of a character (which is equivalent to ASCII for standard characters).\n- **Intuition**: Since each character in a string can be individually processed, iterating over each character and converting it to its ASCII value is the most direct solution. This can be efficiently done using a list comprehension.\n- **Algorithm Selection**: A list comprehension is chosen for its conciseness and efficiency in creating lists from iterable objects. It iterates over each element (character) in the input string, applies the `ord()` function, and constructs the list of ASCII values.\n- **Complexity Analysis**: The time complexity of this solution is O(n), where n is the length of the input string. This is because each character is processed exactly once. The space complexity is also O(n) as a list of integers of the same length as the input string is created.\n\nThis approach ensures that the solution is both efficient and easy to understand, handling all specified cases correctly.",
  "r1_solution": "from typing import List\n\ndef string_to_ascii_list(input_string: str) -> List[int]:\n    return [ord(char) for char in input_string]",
  "metadata": {
    "prompt_id": "00000194",
    "row_id": 194,
    "seed_ids": [
      0
    ],
    "mode": "prefill",
    "original_instruction": "Write a python function to convert a given string to a list of integers, where each integer is the ASCII value of each character in the string."
  },
  "file_source": "KodCode_prefill_200_1741214325_prepared_results1.jsonl"
}