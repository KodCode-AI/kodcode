{
  "style": "instruct",
  "subset": "Prefill",
  "question_id": "Prefill_00000144_C",
  "question": "def max_triplet_product(arr: List[int]) -> int:\n    \"\"\" Finds and returns the maximum product that can be obtained from any three elements in the array.\n    >>> max_triplet_product([1, 2, 3])\n    6\n    >>> max_triplet_product([1, 10, -5, 1, -100])\n    5000\n    >>> max_triplet_product([-1, -2, -3, -4])\n    -6\n    >>> max_triplet_product([0, 0, 0])\n    0\n    >>> max_triplet_product([1, 2])\n    Traceback (most recent call last):\n        ...\n    ValueError: The input array must contain at least three elements.\n    >>> max_triplet_product([0, -2, -8, -7, 0])\n    0\n    >>> max_triplet_product([-5, -4, 2, 2])\n    40\n    \"\"\"",
  "solution": "def max_triplet_product(arr):\n    \"\"\"\n    Finds and returns the maximum product that can be obtained from any three elements in the array.\n    \"\"\"\n    if len(arr) < 3:\n        raise ValueError(\"The input array must contain at least three elements.\")\n\n    # Sort the array to make it easier to find the maximum product\n    arr.sort()\n\n    # The maximum product can be either:\n    # 1. The product of the three largest numbers\n    # 2. The product of the two smallest (potentially negative) numbers and the largest number\n    n = len(arr)\n    return max(arr[0] * arr[1] * arr[n-1], arr[n-3] * arr[n-2] * arr[n-1])",
  "test_code": "import pytest\nfrom solution import max_triplet_product\n\ndef test_max_triplet_product_with_positive_numbers():\n    assert max_triplet_product([1, 2, 3]) == 6\n\ndef test_max_triplet_product_with_mixed_numbers():\n    assert max_triplet_product([1, 10, -5, 1, -100]) == 5000  # -5 * -100 * 10\n\ndef test_max_triplet_product_with_negative_numbers():\n    assert max_triplet_product([-1, -2, -3, -4]) == -6\n\ndef test_max_triplet_product_with_zero():\n    assert max_triplet_product([0, 0, 0]) == 0\n\ndef test_max_triplet_product_with_small_array():\n    with pytest.raises(ValueError):\n        max_triplet_product([1, 2])\n\ndef test_max_triplet_product_with_larger_numbers():\n    assert max_triplet_product([0, -2, -8, -7, 0]) == 0  # 0 * 0 * -7\n    assert max_triplet_product([-5, -4, 2, 2]) == 40  # -5 * -4 * 2",
  "test_info": [
    {
      "function_name": "max_triplet_product",
      "parameter_list": "(arr)",
      "function_declaration": "def max_triplet_product(arr):",
      "docstring": "Finds and returns the maximum product that can be obtained from any three elements in the array."
    }
  ],
  "gpt_pass_sequence": [
    1,
    0,
    0
  ],
  "gpt_pass_trial_num": 1,
  "gpt_difficulty": "medium",
  "gpt_pass_percentage": 0.333,
  "r1_response": "<think>\nOkay, I need to write a Python function called max_triplet_product that takes an array of integers and returns the maximum product of any three elements from that array. Let me think about how to approach this.\n\nHmm, the first thing that comes to mind is that the maximum product could come from either the three largest numbers in the array or from two very small (negative) numbers and the largest positive number. Because when you multiply two negatives, you get a positive, which could potentially give a larger product when multiplied by a positive.\n\nSo, the steps I should take could be:\n\n1. Check if the array has at least three elements. If not, raise a ValueError as shown in the examples.\n2. Sort the array to easily access the largest and smallest elements.\n3. Consider the possibilities for the maximum product:\n   a. The product of the three largest numbers.\n   b. The product of the two smallest (potentially negative) numbers and the largest number.\n4. Compare these two products and choose the maximum one.\n\nLet me think about the edge cases. For example, if all elements are negative, like in the third example. Then the maximum product would be the three numbers with the least magnitude (the three largest negatives), because multiplying three negatives leaves it negative, and we want the least negative (the largest product).\n\nAnother case is when the array has zeros. For example, if all elements are zero then the product is zero. Also, if some are negative and some are zero, like the example [0, 0, 0], the product is zero.\n\nWait, in the example [0, -2, -8, -7, 0], the maximum product is zero because selecting 0, -7, and -8: (-7)*(-8) is 56, but 56*0 is zero. Alternatively, other triplets could be -8, -7, -2 which is (-8)*(-7)*(-2) = -112 which is less than zero. So in this case, picking 0, -7, -8 is better and gives 0 which is the maximum.\n\nSo in our code, after sorting, we can compute both possibilities and take the maximum.\n\nLet me outline the steps more concretely:\n\nFirst, verify that the length of arr is at least 3. Otherwise, raise a ValueError.\n\nThen, sort the array. Let's say the array is sorted in ascending order.\n\nThen, get the candidates:\n\nCandidate 1: the product of the last three elements (the three largest).\n\nCandidate 2: the product of the first two (smallest, possibly negative) and the last element (largest). Or wait\u2014wait, when there are two negative numbers, multiplying them gives a positive, and then multiplying by the largest positive (which might be bigger than the third largest positive) could yield a larger product than the three largest positives. Or, if the largest three are positive, then it's straightforward.\n\nWait, but is there a case where combining more than two from the beginning and some from the end could give a better product? For example, in [a, b, c, d, e], with a <= b <= c <= d <= e.\n\nThe three largest are c, d, e.\n\nThe two smallest and the largest: a * b * e.\n\nBut could a * b * d be better than a * b * e? Probably not, since e is greater than d, so a*b being positive (since a and b are negative), then e is larger so a*b*e is bigger.\n\nSo, the only two possibilities we need to consider are the product of the three largest numbers, and the product of the two smallest (possibly negative) and the largest.\n\nWait, but wait. What if the two smallest are a and b, and then the third is the next smallest, or perhaps a and b multiplied by the largest?\n\nRight, because for the case when a and b are negative, their product is positive. Then, multiplying by the largest positive (e) may give a higher product than the product of the three largest, which are all positive.\n\nBut what about the product of a and e multiplied by the second largest? Let's think: Suppose a is very negative, e is large. Then a * e would be a large negative. If also the second largest is positive, then the product could be negative. Hmm, that may not be the case we want.\n\nSo perhaps the two possible maximum products are:\n\n- e * d * c\n\n- or a * b * e\n\nBut there's a possibility of another combination when a and/or b are negative. Hmm.\n\nWait in the example [-5, -4, 2, 2], the maximum is (-5)*(-4)*2 =40, but that's not the case because the triplet in the code would select a= -5, b= -4, and e=2, but if the array is sorted then after sorting it's [-5,-4,2,2], so a=-5, b=-4, c=2, d=2, e would be 2 after 2 if we have more elements. Wait in this case, the array has four elements. So when you take the two smallest and the largest, you have (-5)(-4)*2=40, which is correct.\n\nBut what about another example, suppose the array has [-10,-9,1,3,4]. The three largest are 1,3,4: product 12. The two smallest and largest: (-10)*(-9)*4= 360. So 360 is better.\n\nAnother example: [-5, -4, 0]. Then, product is (-5)*(-4)*0 = 0. But alternatively, the three largest are -4, -5, but that can't be because wait the array is sorted as [-5,-4,0], so the three largest are -4,0. But wait, the triplet would be the only three, so product is (-5)*-4*0=0, which is the maximum.\n\nBut let's take [1,10,-5,1,-100]. The sorted array is [-100,-5,1,1,10].\n\nThe three largest would be 1,1,10: product 10. The two smallest and the largest: (-100)*-5 *10= 5000, which is better.\n\nSo in that case, the maximum is 5000.\n\nSo that approach works.\n\nBut wait, are there cases when including the third or fourth largest could help?\n\nFor example, say the array is [ -100, -99, 1, 2, 3, 4]. The product of three largest is 2*3*4=24. The product of two smallest and largest: (-100)*(-99)*4 = 39600. So better.\n\nWhat about [ -100, -99, 50, 60, 70 ].\n\nThree largest product: 50*60*70 = 210000.\n\nTwo smallest and largest: (-100)*(-99)*70 = 693000.\n\nWhich is bigger.\n\nSo 693000 is bigger.\n\nSo again, our initial approach works.\n\nAnother test case: [5, 6, 7], sorted as [5,6,7]. The product is 5*6*7=210. Which is correct.\n\nAnother case: an array with all negatives: [-3, -2, -1], sorted. So the three largest (the least negative) would be -1, -2, -3? Wait wait, wait. No: when sorted in ascending order, it's [-3, -2, -1]. So the product of the three largest (the last three) is (-3)*(-2)*(-1) = -6, which is the correct maximum.\n\nWhat about [-5,-4,-3,-2,-1], so sorted as [-5,-4,-3,-2,-1]. The three largest are -3,-2,-1 (the last three), but wait: no. Wait the array is sorted from smallest to largest, right? So [-5, -4, -3, -2, -1]. So the last three (and thus the three largest) are -3, -2, -1. Their product is -6.\n\nBut wait: but the maximum triplet product is the maximum of all possible triplets. Wait, let's see.\n\nAnother approach: in an array of all negatives, the maximum product is the product of the three largest (least negative) numbers, because their product is the least negative (i.e., maximum product as a negative number), but perhaps, could it be better to have the three smallest, which are more negative but when multiplied give a more negative product, which is worse.\n\nWait no: [ -5, -4, -3, -2, -1 ]. The product of (-5)*(-4)*(-3) = -60, which is worse than (-3)*(-2)*(-1) =-6.\n\nSo the triplet with the three largest in the array (which are the three least negative) is the maximum possible. So for all-negative arrays, we take the product of the last three.\n\nSo back to the approach: after sorting, the maximum product is either the product of the last three, or the product of first two and last one.\n\nWait, but wait, in some cases what about other combinations, like first three?\n\nFor example, if the array has four elements: [ -5, 1, 2, 3]. What's the max triplet product? Let's consider the three possibilities: last three is 1*2*3=6, first two and last one: (-5)*1 *3= -15, which is worse. What about if the array was [ -10, -9, 1, 2, 3], then the max is 3*2*1=6, or (-10)*(-9)*3=270.\n\nIn that case, the two-negative way gives a larger product. So the initial approach of comparing (last three) and (first two * last) covers both cases.\n\nBut what about when the array has more elements, like [a, b, c, d, e], and may have the first four as a and b being very large negatives, c also negative, d and e positive.\n\nWait no, after sorting, a and b are the smallest and then up to e.\n\nWait, but let's say the sorted array is [-100, -99, 1, 2, 3]. The max is (-100)*(-99)*3= 29700.\n\nWhich is much larger than 1*2*3=6.\n\nSo the initial approach should cover that.\n\nBut are there other possibilities? Like in some cases, taking first three and largest.\n\nWait for example, [ -100, -200, 300, 400 ]. Sorted as [-200, -100, 300, 400].\n\nThe possible triplets:\n\n-200,-100,300: (-200)*(-100)*300 = 6,000,000.\n\n-200,-100,400: (-200)*(-100)*400=8,000,000.\n\nOr 300,400, and the third? There are only four elements. So the two triplets to consider are:\n\nLast three: -100,300,400: (-100)*300*400= -12,000,000 which is worse than the other.\n\nOr first two and last: (-200)*-100 *400=8,000,000.\n\nWhich is higher than the product of last three.\n\nWait, what about another triplet like, 300 and 400, but then the third could only be 300 or others.\n\nWait, in the triplet, we can choose 300, 400, and one more. Wait, the only possibilities are:\n\n[-200,-100,300], [-200,-100,400], [-200,300,400], [-100,300,400].\n\nSo the maximum is from [-200,-100,400], which is equivalent to first two and last.\n\nWhich our initial approach would capture.\n\nSo, I think the approach is valid.\n\nSo, in code:\n\nSort the array.\n\nCompute candidate1 = arr[-1] * arr[-2] * arr[-3]\n\nCompute candidate2 = arr[0] * arr[1] * arr[-1]\n\nCompute the maximum between candidate1 and candidate2.\n\nReturn that maximum.\n\nWait, but wait, what about another candidate: arr[0] * arr[-2] * arr[-1]. Because in some cases, that could be larger?\n\nWait, for example, suppose the array is [ -100, 1, 2 ].\n\nThe two candidates are [ (1*2)-100= -2 ] and [ (-100)*1 *2 =-200 ].\n\nWait no: in the example where the array is [-100,1,2], the code would compute candidate1: 1*2*(-100) = -200, and candidate2: (-100)*1*2= -200. Hmm but that's only three elements. So perhaps the code handles it.\n\nWait in the array [-100, 5, 6, 7], the two candidates would be 5*6*7=210 and (-100)*(-5... Wait not applicable here.\n\nWait, perhaps there's another case where the two smallest and the third largest could give a higher product than just the two smallest and the largest.\n\nWait, let's find an example. Suppose the array is [a, b, c, d], where a and b are negative, c is positive, and d is positive. Let's say a=-10, b=-9, c=10, d=20.\n\nThen, the candidate1 is c*d*... wait, in the array [a, b, c, d], sorted in ascending order.\n\nSo arr[-3] is b=-9, arr[-2]=c=10, arr[-1]=d=20. So candidate1 is (b*c*d) = (-9)*10*20= -1800.\n\nCandidate2 is a*b*d = (-10)*(-9)*20=1800.\n\nAnother possible candidate is a*b*c = (-10)*(-9)*10=900.\n\nIn this case, the maximum is 1800.\n\nWhich is covered by candidate2.\n\nSo, no, a*b and c is not giving a higher value than a*b*d.\n\nBut what about if d is the only large positive, and c is a very small positive.\n\nWait, let's imagine the array [-100, -99, 1, 1000]. Then the two candidates:\n\nc1: 1 *1000 ... wait no. The sorted array is [-100,-99,1,1000], so arr[-3] is -99, arr[-2] is 1, arr[-1] is 1000. So candidate1 is (-99)*1*1000= -99000.\n\ncandidate2 is (-100)*(-99)*1000 = 990000.\n\nBut the product of a, b, and the third (like 1) is (-100)*-99 *1=9900, which is less than 990000.\n\nSo no, it's still candidate2.\n\nIs there a possibility that another combination yields a higher result?\n\nAnother test case: [ -101, -100, 1, 2, 3].\n\ncandidate1: 1*2*3=6.\n\ncandidate2: (-101)*-100*3=30300.\n\nBut another possible triplet is 1*2 * (-100) = -200? No, that doesn't help.\n\nSo seems candidate2 is better.\n\nAnother scenario: [ -5, -4, 3, 4 ].\n\ncandidate1: (-4)*3*4= -48.\n\ncandidate2: (-5)*(-4)*4= 80.\n\nIs there a better triplet? (-5, -4,3) gives (-5)*-4 *3=60, which is less than 80.\n\nOther possible triplet: 3,4, or with -5? 3 and4 with someone else.\n\nYes, 3,4 and -5 gives -5*3*4= -60 which is worse.\n\nSo the maximum is candidate2.\n\nBut wait, could there be another candidate: (-5)*3*4= -60? No, that's worse.\n\nSo my initial approach seems sufficient.\n\nWait, but what about when the array has more than four elements.\n\nFor example, [ -100, -99, 50, 60, 70 ].\n\ncandidate1: 50*60*70 = 210,000.\n\ncandidate2: (-100)*-99*70 = 693,000.\n\nIs there a higher product elsewhere?\n\nWhat about, (a, c, d) => (-100)*50*70= -350,000 which is worse than candidate1.\n\nAnother: (a,b,d) => (-100)*-99 *70= same as candidate2, which is better.\n\nSo in this case, candidate2 is higher.\n\nAnother case: Let the array be [-200, 150, 160, 170].\n\ncandidate1: 150*160*170 = 4100000? Well 150*160=24000, 24000*170=4,080,000.\n\ncandidate2: (-200)*150*170. Wait, 200*150 is 30,000. Multiply by 170: 5,100,000.\n\nWait, but wait, (-200)*150 is -30,000. Multiply by 170: -5,100,000. No! So candidate2 would be negative, whereas candidate1 is greater.\n\nWait in that example, the two largest are 160 and 170, and 150.\n\nSo product of the three: 150, 160, 170 is 4100000.\n\nWhich is much bigger than candidate2 (-200)(-... Wait, (-200)*150 is -30,000 *170= -5,100,000.\n\nSo in that case, candidate1 is better.\n\nWait so the two candidates:\n\ncandidate1 = arr[-3] * arr[-2] * arr[-1] = 150*160*170= 4,080,000.\n\ncandidate2= arr[0] * arr[1] * arr[-1] \u2192 arr[0] is -200, arr[1] is 150 \u2192 (-200)*150*170= (-30,000) *170= -5,100,000.\n\nSo in this case, candidate1 is the maximum.\n\nThus the approach works: compare between candidate1 (three largest) and candidate2 (two smallest and largest). Take the maximum.\n\nSo, even in a case where candidate2 could be negative, the maximum is correctly chosen as the positive candidate1.\n\nWait but that's a problem. Wait the example I created is [-200, 150, 160, 170], sorted after is it?\n\nWait, no: the array is [-200, 150, 160, 170]\u2014 if sorted in ascending order, that's [-200, 150, 160, 170].\n\nSo the three largest are [150, 160, 170], whose product is 4100000. The candidate2 is (-200)*(150) * 170= -5100000.\n\nSo the maximum is 4100000.\n\nThus, comparing the two, the correct maximum is selected.\n\nAnother example where both candidates are positive, but one is larger.\n\nSo the approach works.\n\nSo in code:\n\nSort the array.\n\nCompute both possibilities and choose the maximum.\n\nBut what about when the array has exactly three elements? It will choose both products and compare.\n\nWait suppose the array has three elements after being sorted: a, b, c.\n\nThe candidate1 is a*b*c.\n\nCandidate2 is a*b*c as well.\n\nSo the maximum will be the same.\n\nBut for arrays larger than three elements, is there a scenario where there's another triplet that could be better?\n\nSo far, my examples don't show it. So I think the initial approach is correct.\n\nThus, in code:\n\ndef max_triplet_product(arr: List[int]) -> int:\n    if len(arr) <3:\n        raise ValueError(\"The input array must contain at least three elements.\")\n    arr.sort()\n    n = len(arr)\n    # Compute the product of the three largest\n    candidate1 = arr[-1] * arr[-2] * arr[-3]\n    # Compute the product of the two smallest and the largest\n    candidate2 = arr[0] * arr[1] * arr[-1]\n    # The maximum is the larger of the two\n    return max(candidate1, candidate2)\n\nWait, but there's an alternative scenario: sometimes, the maximum could be achieved by the two smallest and the third smallest? Or does that only happen when all elements are positive, but I don't think so.\n\nLet me test this case:\n\nAn array where all numbers are positive.\n\nFor example: [1,2,3,4,5].\n\ncandidate1 is 3*4*5=60.\n\ncandidate2 is 1*2*5=10.\n\nSo maximum is 60, correct.\n\nAnother case: [2,3,4]. candidate1 and candidate2 are both 24.\n\nYes.\n\nSo, is that always sufficient?\n\nWait I think perhaps in some cases there's a third candidate: the product of the two largest and a large third. Wait no, because the two largest are in the three largest.\n\nWait, perhaps in some cases whether the maximum could be in the first three and or another combination. But given the examples, the approach seems correct.\n\nWait another test case.\n\nWhat about [-1000, -100, 1, 2, 3, 4].\n\nThe three largest: 2,3,4 \u2192 product 24.\n\nThe two smallest and largest: (-1000)*-100*4=40,000.\n\nBut what about if the array has a fourth element which is higher?\n\nWait, another scenario when the product of the first three could be higher.\n\nWait, for example, in an array where the first three are all negative and the rest are positive: [-10, -9, -1, 2, 3]. So the product of the first three is (-10)*-9*-1 =-90.\n\nBut candidate1 would be -1,2,3: their product is -6.\n\nCandidate2 would be (-10)(-9)*3=270.\n\nWhich is the maximum.\n\nBut wait, what's the other possible triplet?\n\nLike [-10, 2, 3]: product is (-10)*2*3= -60.\n\nSo the candidate2 is the maximum.\n\nWait, but in this scenario, the product of the two smallest and largest is indeed larger than the three largest.\n\nYes.\n\nBut what if the three largest are all positive, but the two smallest are negative and when multiplied give a larger number than the product of the three largest?\n\nLike in the example in the test cases.\n\nThus, the initial approach covers the cases.\n\nI think this approach is correct.\n\nThus, the code should be as I wrote above.\n\nWait wait, but looking back, in the example mentioned in the problem where arr = [ -5, -4, 2, 2 ], the maximum product is 40.\n\nThis product comes from (-5)*(-4)*2=40 and also (-5)*(-4)*2= same as 40. So the code would compute:\n\ncandidate1 = 2 * 2 * (-4?) Wait wait, wait.\n\nThe array is [ -5, -4, 2, 2 ], which when sorted is [-5, -4, 2, 2]. So:\n\narr[-3] is 2, arr[-2] is 2, arr[-1] is 2.\n\nWait, wait no: for n=4, indexes are 0,1,2,3. So arr[-3] is index 1, which is -4.\n\nWait wait, no: because in Python, arr[-1] is last element (index 3), and arr[-3] is index 1.\n\nWait for [ -5, -4, 2, 2 ] sorted. So the three largest are arr[-3], which is index 1: -4, arr[-2] (index 2):2, and arr[-1] (index3):2. So candidate1 is (-4)*2*2= -16.\n\nCandidate2 is (-5)*(-4)*2= 40.\n\nThus, the maximum is 40.\n\nWhich matches the test case.\n\nThus, code is correct.\n\nAnother test case in examples: [0, 0, 0]. The array is three elements.\n\ncandidate1 is 0*0*0=0. candidate2 is 0*0*0=0. So maximum is 0.\n\nAnother example: [0, -2, -8, -7, 0 ].\n\nWhen sorted: [-8, -7, -2, 0, 0 ].\n\ncandidate1 is (-2)*0 *0 = 0.\n\ncandidate2 is (-8)*(-7)*0=56*0=0.\n\nThus, the maximum is 0.\n\nYes.\n\nAnother example given is [1, 10, -5, 1, -100 ].\n\nSorted: [-100, -5,1,1,10].\n\ncandidate1 is 1*1*10=10.\n\ncandidate2: (-100)*(-5)*10 = 5000.\n\nThus, returns 5000.\n\nCorrect.\n\nSo the code seems correct.\n\nBut wait in the code, the candidate2 is arr[0] * arr[1] * arr[-1], but for arrays where even after sorting, the two smallest are large enough to multiply and get a big positive, similar to the earlier examples.\n\nThus, the code should work.\n\nI think my approach is correct.\n\nNow, code accordingly.\n\nAnd, in the code, in case the array has exactly three elements, it will correctly compute.\n\nSo to handle the value error, first check len(arr) >=3.\n\nYes.\n\nThus, code:\n\nBut wait, what about for n=3? The code will compute:\n\ncandidate1: arr[-3], arr[-2], arr[-1] which is all elements. So product is sum.\n\ncandidate2: arr[0]*arr[1]*arr[-1], same as same, so same value.\n\nThus, the same for n=3, code works.\n\nThus, the code should be written as above.\n</think>\n\nTo solve this problem, we need to find the maximum product that can be obtained from any three elements in a given list of integers. The solution involves considering both the largest positive numbers and the possibility of a large product from two negative numbers and a positive number.\n\n### Approach\n1. **Check Array Length**: Ensure the input array has at least three elements. If not, raise a `ValueError`.\n2. **Sort the Array**: Sorting the array helps easily access the largest and smallest elements.\n3. **Calculate Candidates**: \n   - **Candidate 1**: The product of the three largest elements.\n   - **Candidate 2**: The product of the two smallest elements (which could be negative) and the largest element.\n4. **Return Maximum**: Compare the two candidates and return the maximum value.\n\n### Solution Code\n\n```python\nfrom typing import List\n\ndef max_triplet_product(arr: List[int]) -> int:\n    if len(arr) < 3:\n        raise ValueError(\"The input array must contain at least three elements.\")\n    arr.sort()\n    candidate1 = arr[-1] * arr[-2] * arr[-3]\n    candidate2 = arr[0] * arr[1] * arr[-1]\n    return max(candidate1, candidate2)\n```\n\n### Explanation\n- **Sorting the Array**: By sorting the array, we can easily access the largest elements from the end and the smallest elements from the beginning.\n- **Product of Three Largest Elements**: This is straightforward as the largest elements are likely to yield the highest product when multiplied together.\n- **Product of Two Smallest and Largest Element**: This accounts for scenarios where two negative numbers (which become positive when multiplied) can result in a large product when multiplied with the largest positive number.\n\nBy considering both scenarios, the solution ensures that we capture the maximum possible product from any triplet in the array. This approach efficiently handles both positive and negative numbers, providing an optimal solution.",
  "r1_solution": "from typing import List\n\ndef max_triplet_product(arr: List[int]) -> int:\n    if len(arr) < 3:\n        raise ValueError(\"The input array must contain at least three elements.\")\n    arr.sort()\n    candidate1 = arr[-1] * arr[-2] * arr[-3]\n    candidate2 = arr[0] * arr[1] * arr[-1]\n    return max(candidate1, candidate2)",
  "metadata": {
    "prompt_id": "00000144",
    "row_id": 144,
    "seed_ids": [
      0
    ],
    "mode": "prefill",
    "original_instruction": "Write a python function to find the maximum product of a triplet in an array. The array can contain both positive and negative numbers. The function should return the maximum product of any three numbers in the array."
  },
  "file_source": "KodCode_prefill_200_1741214325_prepared_results2.jsonl"
}