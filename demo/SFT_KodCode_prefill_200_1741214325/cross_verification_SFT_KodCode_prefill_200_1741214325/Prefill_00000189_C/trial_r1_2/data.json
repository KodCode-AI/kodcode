{
  "style": "instruct",
  "subset": "Prefill",
  "question_id": "Prefill_00000189_C",
  "question": "def is_fibonacci_number(n: int) -> bool:\n    \"\"\"Returns True if n is a Fibonacci number, False otherwise.\"\"\"\n    # A number is Fibonacci if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square\n    return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)\n    \ndef is_perfect_square(x: int) -> bool:\n    s = int(x ** 0.5)\n    return s * s == x",
  "solution": "def is_perfect_square(x):\n    s = int(x ** 0.5)\n    return s * s == x\n\ndef is_fibonacci_number(n):\n    \"\"\"\n    Returns True if n is a Fibonacci number, False otherwise.\n    \"\"\"\n    # A number is Fibonacci if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square\n    return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)",
  "test_code": "from solution import is_fibonacci_number, is_perfect_square\n\ndef test_is_perfect_square():\n    assert is_perfect_square(1) == True\n    assert is_perfect_square(4) == True\n    assert is_perfect_square(9) == True\n    assert is_perfect_square(16) == True\n    assert is_perfect_square(25) == True\n    assert is_perfect_square(2) == False\n    assert is_perfect_square(3) == False\n    assert is_perfect_square(17) == False\n\ndef test_is_fibonacci_number():\n    assert is_fibonacci_number(0) == True\n    assert is_fibonacci_number(1) == True\n    assert is_fibonacci_number(5) == True\n    assert is_fibonacci_number(8) == True\n    assert is_fibonacci_number(13) == True\n    assert is_fibonacci_number(21) == True\n    assert is_fibonacci_number(34) == True\n    assert is_fibonacci_number(55) == True\n    assert is_fibonacci_number(6) == False\n    assert is_fibonacci_number(-4) == False\n    assert is_fibonacci_number(20) == False",
  "test_info": [
    {
      "function_name": "is_perfect_square",
      "parameter_list": "(x)",
      "function_declaration": "def is_perfect_square(x):",
      "docstring": null
    },
    {
      "function_name": "is_fibonacci_number",
      "parameter_list": "(n)",
      "function_declaration": "def is_fibonacci_number(n):",
      "docstring": "Returns True if n is a Fibonacci number, False otherwise."
    }
  ],
  "gpt_pass_sequence": [
    1,
    0,
    0
  ],
  "gpt_pass_trial_num": 1,
  "gpt_difficulty": "medium",
  "gpt_pass_percentage": 0.333,
  "r1_response": "<think>\nAlright, I need to write a Python function called is_fibonacci_number that takes an integer n and returns True if it's a Fibonacci number, otherwise False. I remember that there's a mathematical property related to Fibonacci numbers and perfect squares, so maybe I can use that.\n\nLet me think. Oh right, a number n is a Fibonacci number if either 5*n\u00b2 + 4 or 5*n\u00b2 - 4 is a perfect square. So, the plan is to calculate both 5*n\u00b2 + 4 and 5*n\u00b2 -4 and check if either of them is a perfect square.\n\nBut then I need a helper function to check if a number is a perfect square. Let's call it is_perfect_square. How does that work? Well, if I take the square root of x, round it down to the nearest integer, square it, and see if it equals x, then x is a perfect square.\n\nWait, for example, if x is 25, sqrt(25) is 5, int(5) is 5, 5^2 is 25, so yes. If x is 24, sqrt(24) is about 4.898, int gives 4, 4 squared is 16, which isn't 24. So that should work.\n\nPutting this into code, the helper function is straightforward. So in the is_fibonacci_number function, I calculate 5*n^2 +4 and 5*n^2 -4, and then use the helper function on both. If either returns True, the whole function returns True.\n\nLet me think about potential issues. What if n is zero? Well, the first few Fibonacci numbers are 0, 1, 1, 2, 3, 5, etc. So zero is considered a Fibonacci number. Let's plug it in. 5*(0)^2 +4 is 4, which is a perfect square. So is_perfect_square(4) is True, so the function would return True for n=0, which is correct.\n\nAnother example, n=1: 5*1^2+4 is 9, which is a square. So that's good. n=2: 5*4=20, +4=24, -4=16. 24 isn't a square but 16 is. So is_fibonacci_number(2) should return True, which it would. \n\nWhat about n=4? 5*(16) is 80. +4 is 84, \u20134 is76. Neither is a perfect square (I think 81 is 9\u00b2, 64 is 8\u00b2, so 84 and 76 no). So is_fibonacci_number(4) should return False, which it does.\n\nLet me test in code. Wait, what about negative numbers? Suppose someone passes n as -5. Fibonacci sequence is all positive, I think, so negative numbers should return False. Let's see: 5*(-5)^2 is 125, +4 129, -4 121. 121 is 11 squared, so 121 is a perfect square. Oh! But wait, the input is -5, but Fibonacci numbers are non-negative. So do I need to handle negative n?\n\nThe problem statement says n is an integer, but maybe the function should return False for negative numbers since Fibonacci numbers are typically non-negative. Hmm, looking at the helper function: if n is negative, say n=-1. 5*(-1)^2 +4 is 5+4=9, which is square. So is_perfect_square returns True, so the function would return True for n=-1. But that's incorrect because -1 is not a Fibonacci number.\n\nSo I need to add a check at the beginning. If n is negative, return False. Because the Fibonacci sequence doesn't have negative numbers.\n\nWait, but wait, actually, there are negative Fibonacci numbers in the negafibonacci sequence, but I think the problem is referring to the standard positive ones. So, to remain safe, let's make sure that n is non-negative before proceeding.\n\nSo in the is_fibonacci_number function, first check if n <0: return False.\n\nSo the logic is:\n\nif n is negative: return False.\n\nelse, calculate 5*n^2 +4 and 5*n^2 -4, check if either is a perfect square.\n\nPutting it all together.\n\nWait, let's code it out.\n\nThe helper function is_perfect_square can handle any integer x. But what about when x is negative? Because the square of a real number can't be negative. So perhaps in is_perfect_square, we should immediately return False for x <0.\n\nSo is_perfect_square function:\n\nif x is negative: return False.\n\nelse compute s = sqrt(x) as integer, then check if s\u00b2 equals x.\n\nSo the helper function first handles negative x returning False.\n\nWait, but in the case when x is 5*n^2 -4, if n is 1, 5 -4=1. So x is 1, positive.\n\nBut for n=2: 5*(4)=20-4=16, positive.\n\nWait, when would 5*n^2 -4 be negative? For n=0: 0-4=-4. So in that case, 5n\u00b2-4 is negative. So for n=0, which is a Fibonacci number, but when we check 5n\u00b2 -4 = -4, which is negative. So the is_perfect_square function would return False, but 5n\u00b2+4 is 4, which is perfect square, so it's okay.\n\nSo for n=0, the function will correctly return True.\n\nBut what if the helper function is called on a negative number? That's okay, because if the first term (5n\u00b2+4) is a square, then it would return True, regardless of what the other term does. And if it's not, it's okay.\n\nBut to prevent bugs, maybe it's better to handle x<0 in the helper function.\n\nNow, writing the code accordingly.\n\nSo function is_perfect_square first checks if x is less than 0: return False.\n\nThen compute s as the integer sqrt of x.\n\nCheck if s squared equals x.\n\nSo, updating the helper function.\n\nLet me test that helper function: if x is 4: s is 2, 2*2=4. Good.\n\nIf x is -4: returns False, so that doesn't pass.\n\nSo in is_fibonacci_number, for n negative, return False. So for n=-5, the function returns False.\n\nAnother test: n=3. 5*9=45, 45+4=49 (which is square), so returns True.\n\nn=4: 5*16=80, 80+4=84 (not square), 80-4=76 (also not square). So returns False.\n\nSo function seems correct.\n\nAnother test: n=5. 5*25=125, +4=129 (not square), -4=121 (11^2). So returns True. Correct.\n\nSo overall, the function should handle all cases correctly now.\n</think>\n\nTo determine if a given integer is a Fibonacci number, we can leverage a mathematical property: a number \\( n \\) is a Fibonacci number if and only if one of the expressions \\( 5n^2 + 4 \\) or \\( 5n^2 - 4 \\) is a perfect square.\n\n### Approach\n1. **Check for Negative Input**: Fibonacci numbers are non-negative, so any negative input should return False.\n2. **Mathematical Property**: For a non-negative integer \\( n \\), calculate both \\( 5n^2 + 4 \\) and \\( 5n^2 - 4 \\).\n3. **Perfect Square Check**: Use a helper function to check if either of the computed values is a perfect square. A number is a perfect square if its square root is an integer, which can be verified by comparing the square of the integer part of the square root with the original number.\n\n### Solution Code\n\n```python\ndef is_fibonacci_number(n: int) -> bool:\n    \"\"\"Returns True if n is a Fibonacci number, False otherwise.\"\"\"\n    if n < 0:\n        return False\n    def is_perfect_square(x: int) -> bool:\n        if x < 0:\n            return False\n        s = int(x ** 0.5)\n        return s * s == x\n    return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)\n```\n\n### Explanation\n1. **Negative Check**: The function first checks if \\( n \\) is negative. If so, it immediately returns False.\n2. **Helper Function**: The nested function `is_perfect_square` checks if a number is a perfect square. It handles negative numbers by returning False and computes the integer square root to verify if squaring it gives back the original number.\n3. **Fibonacci Check**: The main function computes both \\( 5n^2 + 4 \\) and \\( 5n^2 - 4 \\). It uses the helper function to check if either of these values is a perfect square, returning True if either check passes, and False otherwise.\n\nThis approach efficiently combines mathematical properties and straightforward checks to determine if a number belongs to the Fibonacci sequence.",
  "r1_solution": "def is_fibonacci_number(n: int) -> bool:\n    \"\"\"Returns True if n is a Fibonacci number, False otherwise.\"\"\"\n    if n < 0:\n        return False\n    def is_perfect_square(x: int) -> bool:\n        if x < 0:\n            return False\n        s = int(x ** 0.5)\n        return s * s == x\n    return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)",
  "metadata": {
    "prompt_id": "00000189",
    "row_id": 189,
    "seed_ids": [
      0
    ],
    "mode": "prefill",
    "original_instruction": "Write a python function to check if a given number is a Fibonacci number or not."
  },
  "file_source": "KodCode_prefill_200_1741214325_prepared_results2.jsonl"
}