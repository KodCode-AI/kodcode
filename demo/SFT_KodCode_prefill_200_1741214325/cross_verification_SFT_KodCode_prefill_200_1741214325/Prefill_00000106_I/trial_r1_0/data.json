{
  "style": "instruct",
  "subset": "Prefill",
  "question_id": "Prefill_00000106_I",
  "question": "Write a python function to perform insertion sort on a list of integers. Please make sure to provide detailed comments explaining each part of your code.",
  "solution": "def insertion_sort(arr):\n    \"\"\"\n    Sorts a list of integers using the insertion sort algorithm.\n    \n    This algorithm iterates through the list, and for each element, it finds the correct\n    position within the sorted portion of the list and inserts it there. The algorithm\n    keeps growing the sorted portion of the list until the entire list is sorted.\n    \n    Args:\n        arr (list of int): The list of integers to sort.\n    \n    Returns:\n        list of int: The sorted list of integers.\n    \"\"\"\n    # Traverse through 1 to len(arr)\n    for i in range(1, len(arr)):\n        \n        # Store the current element\n        current_value = arr[i]\n        \n        # Initialize the position where the current element needs to be inserted\n        position = i\n        \n        # Move elements of arr[0..i-1], that are greater than current_value,\n        # to one position ahead of their current position\n        while position > 0 and arr[position - 1] > current_value:\n            arr[position] = arr[position - 1]\n            position -= 1\n        \n        # Insert the current element into its correct position\n        arr[position] = current_value\n    \n    return arr",
  "test_code": "from solution import insertion_sort\n\ndef test_insertion_sort_positive_numbers():\n    arr = [9, 5, 1, 4, 3]\n    sorted_arr = insertion_sort(arr)\n    assert sorted_arr == [1, 3, 4, 5, 9]\n\ndef test_insertion_sort_negative_numbers():\n    arr = [-5, -9, -3, -4]\n    sorted_arr = insertion_sort(arr)\n    assert sorted_arr == [-9, -5, -4, -3]\n\ndef test_insertion_sort_mixed_numbers():\n    arr = [0, -1, 5, -2, 3]\n    sorted_arr = insertion_sort(arr)\n    assert sorted_arr == [-2, -1, 0, 3, 5]\n\ndef test_insertion_sort_empty_list():\n    arr = []\n    sorted_arr = insertion_sort(arr)\n    assert sorted_arr == []\n\ndef test_insertion_sort_already_sorted():\n    arr = [1, 2, 3, 4, 5]\n    sorted_arr = insertion_sort(arr)\n    assert sorted_arr == [1, 2, 3, 4, 5]",
  "test_info": [
    {
      "function_name": "insertion_sort",
      "parameter_list": "(arr)",
      "function_declaration": "def insertion_sort(arr):",
      "docstring": "Sorts a list of integers using the insertion sort algorithm.\n\nThis algorithm iterates through the list, and for each element, it finds the correct\nposition within the sorted portion of the list and inserts it there. The algorithm\nkeeps growing the sorted portion of the list until the entire list is sorted.\n\nArgs:\n    arr (list of int): The list of integers to sort.\n\nReturns:\n    list of int: The sorted list of integers."
    }
  ],
  "gpt_pass_sequence": [
    1,
    1,
    1
  ],
  "gpt_pass_trial_num": 3,
  "gpt_difficulty": "easy",
  "gpt_pass_percentage": 1.0,
  "r1_response": "<think>\nAlright, so I need to write a Python function for insertion sort and make sure it's well-commented. Let me think about how to approach this.\n\nFirst, I remember that insertion sort works by building the sorted array one item at a time. It's like how you sort playing cards in your hands. The idea is to take each element and insert it into its correct position in the sorted part of the list.\n\nSo, I'll start by setting up a function called insertion_sort that takes a list as input. I need to loop through each element in the list, starting from the second one since the first is already sorted. For each element, I'll compare it with the elements before it and shift those elements to the right until I find the correct spot to insert it.\n\nI should probably include a nested loop. The outer loop will iterate over each element from index 1 to the end. The inner loop will handle the comparison and shifting. I'll need a variable to hold the current element to be inserted, maybe called current_value. \n\nWait, I should also keep track of the position where the current element should be inserted. Oh, right, in the inner loop, I'll compare current_value with the elements at position 'j' and shift those elements to the right by incrementing. Once I find the right spot, I'll insert current_value there.\n\nLet me outline this step by step. For each element in the list from i=1 to end, set current_value to the element at i. Then, set j = i-1. While j >=0 and the element at j is greater than current_value, shift the element at j to the right by one, so arr[j+1] = arr[j]. Then decrement j. Once the loop ends, insert current_value at j+1.\n\nI think that's correct. Now, I'll translate this logic into code. I'll make sure to add comments explaining each part so that anyone reading the code can understand it.\n\nAlso, I should test the function with an example. Let's say we have a list like [64, 34, 25, 12, 22, 11, 90]. The function should sort it in ascending order.\n\nWait, but what if the list is empty or has one element? The function should handle those cases without any issues, right? Because the loop starts at i=1, if the list has 0 or 1 elements, the loop won't run, and the function just returns the original list, which is correct.\n\nI should also consider if the function modifies the original list or creates a new one. In this case, since we're using a nested loop and modifying the list in place, the original list will be sorted.\n\nSo, putting it all together, I'll write the function with detailed comments explaining each part, so each line's purpose is clear.\n\nFinal check: Does the function correctly handle duplicates? I think yes because the comparison is 'greater than', so equal elements will be placed after, maintaining stability. \n\nAlright, I think I've covered all the points. Now, I'll write the code with these considerations in mind.\n</think>\n\n```python\ndef insertion_sort(arr):\n    \"\"\"\n    This function sorts a list of integers using the Insertion Sort algorithm.\n    It works by building the sorted list one item at a time by inserting each\n    element into its correct position within the sorted portion of the list.\n    \"\"\"\n    \n    # Loop through the list starting from the second element (index 1)\n    for i in range(1, len(arr)):\n        # Store the current element to be compared and inserted\n        current_value = arr[i]\n        \n        # Initialize the position for comparison\n        j = i - 1\n        \n        # Compare the current element with elements before it and shift them if necessary\n        while j >= 0 and arr[j] > current_value:\n            # Shift the element to the right to make space for the current element\n            arr[j + 1] = arr[j]\n            # Move to the previous element\n            j = j - 1\n        \n        # Insert the current element into its correct position\n        arr[j + 1] = current_value\n    \n    # Return the sorted list\n    return arr\n\n# Example usage:\n# arr = [64, 34, 25, 12, 22, 11, 90]\n# insertion_sort(arr)\n# print(\"Sorted array:\", arr)\n```\n\n**Step-by-Step Explanation:**\n\n1. **Function Definition**:\n   - The function `insertion_sort` takes one parameter `arr`, a list of integers.\n\n2. **Outer Loop**:\n   - Starts from the second element (index 1) of the list.\n   - Iterates through each element in the list.\n\n3. **Storing Current Element**:\n   - For each element, store it in `current_value` to compare with previous elements.\n\n4. **Inner Loop (Comparison and Shifting)**:\n   - Initialize `j` to the index just before the current element (`i - 1`).\n   - While `j` is non-negative and the element at `j` is greater than `current_value`, shift the element at `j` one position to the right.\n   - Decrement `j` to check the next previous element.\n\n5. **Insertion**:\n   - Once the correct position is found, insert `current_value` at index `j + 1`.\n\n6. **Return Sorted List**:\n   - After processing all elements, return the sorted list.\n\nThis implementation ensures that each element is placed in its correct position within the sorted portion of the list, resulting in an efficiently sorted array.",
  "r1_solution": "def insertion_sort(arr):\n    \"\"\"\n    This function sorts a list of integers using the Insertion Sort algorithm.\n    It works by building the sorted list one item at a time by inserting each\n    element into its correct position within the sorted portion of the list.\n    \"\"\"\n    \n    # Loop through the list starting from the second element (index 1)\n    for i in range(1, len(arr)):\n        # Store the current element to be compared and inserted\n        current_value = arr[i]\n        \n        # Initialize the position for comparison\n        j = i - 1\n        \n        # Compare the current element with elements before it and shift them if necessary\n        while j >= 0 and arr[j] > current_value:\n            # Shift the element to the right to make space for the current element\n            arr[j + 1] = arr[j]\n            # Move to the previous element\n            j = j - 1\n        \n        # Insert the current element into its correct position\n        arr[j + 1] = current_value\n    \n    # Return the sorted list\n    return arr\n\n# Example usage:\n# arr = [64, 34, 25, 12, 22, 11, 90]\n# insertion_sort(arr)\n# print(\"Sorted array:\", arr)",
  "metadata": {
    "prompt_id": "00000106",
    "row_id": 106,
    "seed_ids": [
      0
    ],
    "mode": "prefill",
    "original_instruction": ""
  },
  "file_source": "KodCode_prefill_200_1741214325_prepared_results0.jsonl"
}