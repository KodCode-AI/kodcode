{
  "style": "instruct",
  "subset": "Prefill",
  "question_id": "Prefill_00000106_I",
  "question": "Write a python function to perform insertion sort on a list of integers. Please make sure to provide detailed comments explaining each part of your code.",
  "solution": "def insertion_sort(arr):\n    \"\"\"\n    Sorts a list of integers using the insertion sort algorithm.\n    \n    This algorithm iterates through the list, and for each element, it finds the correct\n    position within the sorted portion of the list and inserts it there. The algorithm\n    keeps growing the sorted portion of the list until the entire list is sorted.\n    \n    Args:\n        arr (list of int): The list of integers to sort.\n    \n    Returns:\n        list of int: The sorted list of integers.\n    \"\"\"\n    # Traverse through 1 to len(arr)\n    for i in range(1, len(arr)):\n        \n        # Store the current element\n        current_value = arr[i]\n        \n        # Initialize the position where the current element needs to be inserted\n        position = i\n        \n        # Move elements of arr[0..i-1], that are greater than current_value,\n        # to one position ahead of their current position\n        while position > 0 and arr[position - 1] > current_value:\n            arr[position] = arr[position - 1]\n            position -= 1\n        \n        # Insert the current element into its correct position\n        arr[position] = current_value\n    \n    return arr",
  "test_code": "from solution import insertion_sort\n\ndef test_insertion_sort_positive_numbers():\n    arr = [9, 5, 1, 4, 3]\n    sorted_arr = insertion_sort(arr)\n    assert sorted_arr == [1, 3, 4, 5, 9]\n\ndef test_insertion_sort_negative_numbers():\n    arr = [-5, -9, -3, -4]\n    sorted_arr = insertion_sort(arr)\n    assert sorted_arr == [-9, -5, -4, -3]\n\ndef test_insertion_sort_mixed_numbers():\n    arr = [0, -1, 5, -2, 3]\n    sorted_arr = insertion_sort(arr)\n    assert sorted_arr == [-2, -1, 0, 3, 5]\n\ndef test_insertion_sort_empty_list():\n    arr = []\n    sorted_arr = insertion_sort(arr)\n    assert sorted_arr == []\n\ndef test_insertion_sort_already_sorted():\n    arr = [1, 2, 3, 4, 5]\n    sorted_arr = insertion_sort(arr)\n    assert sorted_arr == [1, 2, 3, 4, 5]",
  "test_info": [
    {
      "function_name": "insertion_sort",
      "parameter_list": "(arr)",
      "function_declaration": "def insertion_sort(arr):",
      "docstring": "Sorts a list of integers using the insertion sort algorithm.\n\nThis algorithm iterates through the list, and for each element, it finds the correct\nposition within the sorted portion of the list and inserts it there. The algorithm\nkeeps growing the sorted portion of the list until the entire list is sorted.\n\nArgs:\n    arr (list of int): The list of integers to sort.\n\nReturns:\n    list of int: The sorted list of integers."
    }
  ],
  "gpt_pass_sequence": [
    1,
    1,
    1
  ],
  "gpt_pass_trial_num": 3,
  "gpt_difficulty": "easy",
  "gpt_pass_percentage": 1.0,
  "r1_response": "<think>\nAlright, I need to write a Python function called insertion_sort that takes a list of integers as input and sorts it in ascending order using the insertion sort algorithm. I should make sure that each part of the code is well-commented so that anyone reading it can understand what's going on.\n\nFirst, I'll start by defining the function with a parameter, arr, which is the list to be sorted.\n\nNext, I remember that insertion sort works by iterating through each element of the list and inserting it into its correct position within the previously sorted portion of the list. So, I'll need a loop that starts from the second element (index 1) and goes through each element in the list.\n\nFor each element, I'll save it as a key because I'll be comparing it with elements in the sorted portion. I'll then initialize a variable, j, which will track the position where the key should be inserted. I'll set j to i - 1 so that I start comparing from the end of the sorted portion.\n\nNow, I need a nested loop that shifts elements greater than the key to the right, making space for the key to be inserted. I'll use a while loop that continues as long as j is greater than or equal to 0 and the current element at j is larger than the key. In each iteration, I'll decrement j to check the previous element.\n\nOnce the while loop ends, I'll place the key at the position j + 1, which is just after the last element that was shifted. This effectively inserts the key into its correct spot.\n\nI'll also include comments before each major step to explain what's happening. This way, anyone reading the code can follow along without getting lost.\n\nAfter writing the loops and comments, I'll test the function with an example list, like [64, 34, 25, 12, 22, 11, 90], to ensure it works correctly. I'll also make sure to print the sorted list to verify the output.\n\nFinally, since the function modifies the input list in place, I don't need to return anything, but if needed, I can return arr. However, the problem didn't specify, so I'll just modify the list as required.\n\nI think that covers everything. Now I can put it all together in the code.\n</think>\n\nHere's a Python function that performs an insertion sort on a list of integers. Each part of the code is commented for clarity:\n\n```python\ndef insertion_sort(arr):\n    \"\"\"\n    Sorts a list of integers in ascending order using the insertion sort algorithm.\n    \n    The insertion sort algorithm works by iterating through each element of the list \n    and inserting it into its correct position within the previously sorted portion \n    of the list.\n    \n    Args:\n        arr (list): A list of integers to be sorted.\n    \"\"\"\n    \n    # Iterate through each element in the list starting from the second element\n    for i in range(1, len(arr)):\n        # Store the current element to be compared with the elements in the sorted portion\n        key = arr[i]\n        \n        # Initialize j to the index before the current element\n        j = i - 1\n        \n        # Shift elements greater than the key to the right to make space for the key\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]  # Shift the element to the right\n            j -= 1  # Move to the previous element\n        \n        # Insert the key into its correct position\n        arr[j + 1] = key\n    \n    # Return the sorted list (in-place sorting, so returning is optional)\n    return arr\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [64, 34, 25, 12, 22, 11, 90]\n    print(\"Original list:\", arr)\n    insertion_sort(arr)\n    print(\"Sorted list:\", arr)\n```\n\n### Explanation:\n\n1. **Function Definition**: The function `insertion_sort` takes a list `arr` as input.\n\n2. **Outer Loop**: The outer loop (`for i in range(1, len(arr))`) iterates through each element of the list starting from the second element (index 1).\n\n3. **Key Initialization**: The current element (`arr[i]`) is stored in the variable `key`, which will be compared with the elements in the sorted portion of the list.\n\n4. **Inner Loop Initialization**: The variable `j` is initialized to `i - 1` to track the position in the sorted portion of the list.\n\n5. **Shifting Elements**: The inner `while` loop shifts elements greater than the `key` to the right, creating space for the `key`. This continues until an element smaller than the `key` is found or the beginning of the list is reached.\n\n6. **Inserting the Key**: Once the correct position is found, the `key` is inserted at `arr[j + 1]`.\n\n7. **Example Usage**: The example demonstrates how to use the `insertion_sort` function with a sample list.\n\nThe function sorts the list in-place, meaning it modifies the original list without creating a new one. The time complexity is O(n^2) in the worst case, making it suitable for small lists or nearly sorted data.",
  "r1_solution": "def insertion_sort(arr):\n    \"\"\"\n    Sorts a list of integers in ascending order using the insertion sort algorithm.\n    \n    The insertion sort algorithm works by iterating through each element of the list \n    and inserting it into its correct position within the previously sorted portion \n    of the list.\n    \n    Args:\n        arr (list): A list of integers to be sorted.\n    \"\"\"\n    \n    # Iterate through each element in the list starting from the second element\n    for i in range(1, len(arr)):\n        # Store the current element to be compared with the elements in the sorted portion\n        key = arr[i]\n        \n        # Initialize j to the index before the current element\n        j = i - 1\n        \n        # Shift elements greater than the key to the right to make space for the key\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]  # Shift the element to the right\n            j -= 1  # Move to the previous element\n        \n        # Insert the key into its correct position\n        arr[j + 1] = key\n    \n    # Return the sorted list (in-place sorting, so returning is optional)\n    return arr\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [64, 34, 25, 12, 22, 11, 90]\n    print(\"Original list:\", arr)\n    insertion_sort(arr)\n    print(\"Sorted list:\", arr)",
  "metadata": {
    "prompt_id": "00000106",
    "row_id": 106,
    "seed_ids": [
      0
    ],
    "mode": "prefill",
    "original_instruction": ""
  },
  "file_source": "KodCode_prefill_200_1741214325_prepared_results2.jsonl"
}