{
  "style": "instruct",
  "subset": "Prefill",
  "question_id": "Prefill_00000061_I",
  "question": "Write a python function to find the first occurrence of an element in an array that is not repeated (i.e., appears exactly once). If there is no such element, return -1.",
  "solution": "def find_first_unique(arr):\n    \"\"\"\n    Returns the first index of the element that is not repeated in the array.\n    If no such element exists, returns -1.\n    \"\"\"\n    element_count = {}\n    \n    # Count the occurrences of each element\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Find the first element with a count of 1\n    for i, element in enumerate(arr):\n        if element_count[element] == 1:\n            return i\n    \n    return -1",
  "test_code": "from solution import find_first_unique\n\ndef test_find_first_unique_with_repeated_elements():\n    assert find_first_unique([2, 3, 4, 3, 2]) == 2\n\ndef test_find_first_unique_with_unique_first_element():\n    assert find_first_unique([1, 2, 3, 4]) == 0\n\ndef test_find_first_unique_with_duplicates_only():\n    assert find_first_unique([1, 1, 2, 2]) == -1\n\ndef test_find_first_unique_with_empty_list():\n    assert find_first_unique([]) == -1\n\ndef test_find_first_unique_with_single_element():\n    assert find_first_unique([5]) == 0\n\ndef test_find_first_unique_with_mixed_occurrences():\n    assert find_first_unique([7, 8, 8, 9, 7]) == 3",
  "test_info": [
    {
      "function_name": "find_first_unique",
      "parameter_list": "(arr)",
      "function_declaration": "def find_first_unique(arr):",
      "docstring": "Returns the first index of the element that is not repeated in the array.\nIf no such element exists, returns -1."
    }
  ],
  "gpt_pass_sequence": [
    1,
    0,
    0
  ],
  "gpt_pass_trial_num": 1,
  "gpt_difficulty": "medium",
  "gpt_pass_percentage": 0.333,
  "r1_response": "<think>\nOkay, I need to write a Python function called find_first_unique that takes an array and returns the first element that appears exactly once. If there's no such element, return -1. Hmm, let's think about how to approach this.\n\nFirst, the problem is about finding the first occurrence of an element that's unique. So I need a way to count how many times each element appears in the array. Once I have those counts, I can go through each element in order and check if its count is one. The first one I find with a count of one is my answer.\n\nSo step one is to count the occurrences. I remember that in Python, the simplest way to do this is by using a dictionary. I can loop through the array and for each element, increment its count in the dictionary.\n\nOnce I have the counts, I loop through the array again. For each element, I check its count. As soon as I find one with a count of one, I return it. If I go through the entire array and don't find any, I return -1.\n\nLet me outline this:\n\n1. Create an empty dictionary, counts.\n2. Loop through each element in the array:\n   a. If the element is in counts, increment by 1.\n   b. Else, set counts[element] to 1.\n3. Now, loop through the array again, checking each element's count:\n   a. If count is 1, return the element.\n4. If no element found, return -1.\n\nWait, but what about the order? Since I'm looping in the original array order, and checking each element's count, the first element with count 1 will be returned, which correctly gives the first occurrence of a unique element.\n\nLet me think about possible test cases.\n\nTest case 1: [1,2,1,2,3]. The counts would be 1:2, 2:2, 3:1. When looping through the array, the first element with count 1 is 3. So the function should return 3.\n\nTest case 2: [2,3,2,3,4,5,4]. The counts: 2:2, 3:2, 4:2, 5:1. The first element with count 1 is 3? Wait no, wait, wait, array is [2,3,2,3,4,5,4]. So the first element is 2 (count 2), second element is 3 (count 2), third is 2 (count 2), fourth is 3 (count 2), fifth is 4 (count 2), sixth is 5 (count 1). So when we loop through the array, 5 is the first with count 1, so we return 5.\n\nWait, no. The array is [2,3,2,3,4,5,4]. So the elements are 2,3,2,3,4,5,4. So the first occurrence with count 1 is 5, which is at index 5. So the function returns 5.\n\nAnother test case: [1,1,1,1]. All elements are 1. So counts would be {1:4}. So the function returns -1.\n\nTest case with multiple unique elements: [5,4,3,2,1]. Each element appears once, so the function should return 5, the first one.\n\nWhat if the array is empty? Well, according to the function, it should return -1, since there's no element. But let's see: in Python, the function will loop through nothing in the first loop, creating an empty counts dictionary. Then in the second loop, it checks nothing, and returns -1. Correct.\n\nWhat about an array with all unique elements except one duplicate? Like [2,1,2,3]. The counts would be 2:2, 1:1, 3:1. So the first unique element is 2? No. Wait, the array is [2,1,2,3]. So the elements in order are 2,1,2,3. For each element:\n\n- 2's count is 2: no\n- 1's count is 1: yes, return 1.\n\nBut wait, when looping through the array, the first element is 2, which has count 2. Then the next element is 1, which has count 1. So function returns 1.\n\nYes, correct.\n\nSo, the plan is solid.\n\nNow, let's write the function.\n\nThe function is called find_first_unique, takes an array. Depending on how the function is expected to receive the array, I think in Python it's passed as a list.\n\nSo first, I'll create the counts.\n\ndef find_first_unique(array):\n    counts = {}\n    for num in array:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    # Now iterate through array to find first with count 1\n    for num in array:\n        if counts[num] == 1:\n            return num\n    return -1\n\nWait, what if the array is [5,4,3,5,4,3,2], then the counts for 5,4,3 are 2,2,2 and 2 has count 1. So the function will return 2, which is correct.\n\nAnother case: [0]. Then counts is {0:1}. So returns 0.\n\nWhat about when the array includes other data types, like strings? For example, ['a', 'b', 'a', 'c']. The function should treat 'a' as appearing twice, 'b' once, 'c' once. So when looping through, the first element with count 1 is 'b', so function returns 'b' which is correct.\n\nWait, let's test that example. Array is ['a', 'b', 'a', 'c']. The counts are {'a':2, 'b':1, 'c':1}. So looping through:\n\n- 'a' has count 2: no.\n- 'b' has count 1: yes. So returns 'b'.\n\nYes, correct.\n\nSo the function works for any hashable elements, which is fine.\n\nI think this implementation covers all cases.\n\nTherefore, the code should be as above.\n</think>\n\nTo solve this problem, we need to find the first occurrence of an element in an array that appears exactly once. If no such element exists, we should return -1.\n\n### Approach\nThe approach to solve this problem involves two main steps:\n1. **Count Occurrences**: First, we count the occurrences of each element in the array using a dictionary. This allows us to efficiently keep track of how many times each element appears.\n2. **Identify First Unique Element**: Next, we iterate through the original array again and check each element's count from the dictionary. The first element with a count of exactly one is our result. If no such element is found, we return -1.\n\nThis approach ensures that we efficiently count occurrences and then find the first unique element in a single pass through the array, making it both time and space efficient.\n\n### Solution Code\n```python\ndef find_first_unique(array):\n    counts = {}\n    for num in array:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    for num in array:\n        if counts[num] == 1:\n            return num\n    return -1\n```\n\n### Explanation\n1. **Counting Occurrences**: We initialize an empty dictionary `counts` to keep track of how many times each element appears in the array. We loop through each element, incrementing its count in the dictionary if it already exists, otherwise setting the count to 1.\n2. **Finding Fist Unique Element**: We loop through the original array again, checking the count of each element from the `counts` dictionary. The first element with a count of exactly one is returned immediately. If the loop completes without finding such an element, we return -1.\n\nThis method ensures that we count elements in O(n) time complexity and then find the first unique element in another O(n) pass, resulting in an overall time complexity of O(n), where n is the length of the array. The space complexity is O(n) due to the dictionary used to store element counts.",
  "r1_solution": "def find_first_unique(array):\n    counts = {}\n    for num in array:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    for num in array:\n        if counts[num] == 1:\n            return num\n    return -1",
  "metadata": {
    "prompt_id": "00000061",
    "row_id": 61,
    "seed_ids": [
      0
    ],
    "mode": "prefill",
    "original_instruction": ""
  },
  "file_source": "KodCode_prefill_200_1741214325_prepared_results0.jsonl"
}