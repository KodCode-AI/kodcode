{
  "style": "instruct",
  "subset": "Prefill",
  "question_id": "Prefill_00000189_I",
  "question": "Write a python function to check if a given number is a Fibonacci number or not.",
  "solution": "def is_perfect_square(x):\n    s = int(x ** 0.5)\n    return s * s == x\n\ndef is_fibonacci_number(n):\n    \"\"\"\n    Returns True if n is a Fibonacci number, False otherwise.\n    \"\"\"\n    # A number is Fibonacci if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square\n    return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)",
  "test_code": "from solution import is_fibonacci_number, is_perfect_square\n\ndef test_is_perfect_square():\n    assert is_perfect_square(1) == True\n    assert is_perfect_square(4) == True\n    assert is_perfect_square(9) == True\n    assert is_perfect_square(16) == True\n    assert is_perfect_square(25) == True\n    assert is_perfect_square(2) == False\n    assert is_perfect_square(3) == False\n    assert is_perfect_square(17) == False\n\ndef test_is_fibonacci_number():\n    assert is_fibonacci_number(0) == True\n    assert is_fibonacci_number(1) == True\n    assert is_fibonacci_number(5) == True\n    assert is_fibonacci_number(8) == True\n    assert is_fibonacci_number(13) == True\n    assert is_fibonacci_number(21) == True\n    assert is_fibonacci_number(34) == True\n    assert is_fibonacci_number(55) == True\n    assert is_fibonacci_number(6) == False\n    assert is_fibonacci_number(-4) == False\n    assert is_fibonacci_number(20) == False",
  "test_info": [
    {
      "function_name": "is_perfect_square",
      "parameter_list": "(x)",
      "function_declaration": "def is_perfect_square(x):",
      "docstring": null
    },
    {
      "function_name": "is_fibonacci_number",
      "parameter_list": "(n)",
      "function_declaration": "def is_fibonacci_number(n):",
      "docstring": "Returns True if n is a Fibonacci number, False otherwise."
    }
  ],
  "gpt_pass_sequence": [
    1,
    0,
    0
  ],
  "gpt_pass_trial_num": 1,
  "gpt_difficulty": "medium",
  "gpt_pass_percentage": 0.333,
  "r1_response": "<think>\nAlright, so I need to write a Python function to check if a given number is a Fibonacci number. Hmm, okay. I remember that Fibonacci numbers are the sequence where each number is the sum of the two preceding ones, starting from 0 and 1. So, it goes 0, 1, 1, 2, 3, 5, 8, 13, and so on.\n\nFirst, I should think about how to determine if a number is part of this sequence. One idea is to generate Fibonacci numbers up to the given number and then check if the number is in that generated list. That sounds straightforward, especially for smaller numbers. But wait, what about very large numbers? That might take a lot of time and computation. Hmm, maybe there's a more efficient mathematical way.\n\nI recall something about a formula involving the square root of 5. Let me try to remember... I think it's related to the equation 5n\u00b2 + 4 or 5n\u00b2 - 4 being a perfect square. So, if the given number is a Fibonacci number, either 5n\u00b2 + 4 or 5n\u00b2 - 4 should be a perfect square. That's interesting because checking if something is a perfect square can be done efficiently without generating the entire sequence.\n\nLet me break that down. If I have a number x, and I plug it into the formula 5x\u00b2 + 4 and 5x\u00b2 - 4, then check if either of these results is a perfect square. If yes, then x is a Fibonacci number. So, the steps I need are:\n\n1. Take the input number.\n2. Compute 5*number\u00b2 + 4 and 5*number\u00b2 - 4.\n3. Check if either of these two results is a perfect square.\n4. If at least one is, return True; else, return False.\n\nWait, let me make sure I have this right. Let me take a known Fibonacci number, like 5. Plugging into the formula: 5*(5\u00b2) + 4 = 5*25 +4 = 125 +4 = 129. Is 129 a perfect square? Well, 11\u00b2 is 121 and 12\u00b2 is 144, so no. Now 5*(5\u00b2) -4 = 125-4=121, which is 11\u00b2, a perfect square. So yes, 5 is a Fibonacci number.\n\nAnother test: take 6. Is 6 a Fibonacci number? 5*6\u00b2 +4 = 5*36 +4 = 180 +4 =184. Is 184 a square? 13\u00b2=169, 14\u00b2=196, so no. Then 5*6\u00b2 -4= 180-4=176. 176 isn't a square either. So, 6 is not a Fibonacci number. That checks out because the Fibonacci sequence around 6 is 5, 8, 13.\n\nSo the formula seems to work. Therefore, I can use this approach.\n\nBut wait, what about 0? Let's see, 5*0\u00b2 \u00b14 is \u00b14, neither of which are perfect squares, but 0 is considered a Fibonacci number. So my function should handle that edge case.\n\nSimilarly, 1: 5*1\u00b2 +4= 9, which is 3\u00b2, so it's a Fibonacci number. Good.\n\nAnother point: what about 2? 5*2\u00b2= 20. Then \u00b14: 24 and 16. 24 is not a perfect square, but 16 is 4\u00b2. So yes, 2 is a Fibonacci number. That's correct because it is in the sequence.\n\nAlright, so to structure the function:\n\n- Handle the case where the number is 0: return True.\n- For positive numbers, compute 5*n\u00b2 +4 and 5*n\u00b2 -4.\n- Check if either is a perfect square.\n\nBut how do I check if a number is a perfect square? One way is to take the square root, round it to the nearest integer, then square it and see if it equals the original number.\n\nSo the steps for checking a perfect square would be:\n\nGiven a number y, compute s = sqrt(y). Round s to the nearest integer (could use math.isqrt for integer square roots). Then, if s\u00b2 == y, it's a perfect square.\n\nSo putting that together, the function would look something like:\n\ndef is_perfect_square(y):\n    s = math.isqrt(y)\n    return s*s == y\n\nBut wait, for negative y, we can't compute sqrt, but in our case, since y is 5n\u00b2 \u00b14, and n is non-negative, y will always be non-negative, so we don't have to worry about negative numbers.\n\nSo, integrating all of this:\n\nThe function is_fibonacci(n) will:\n\n1. If n is 0, return True.\n2. Compute a = 5*n*n +4\n   Compute b = 5*n*n -4\n3. Check if a is a perfect square or b is a perfect square.\n4. If either is true, return True; else, False.\n\nWait, but if the input is negative, should we handle that? The Fibonacci sequence is typically defined with non-negative integers, so if n is negative, the function should return False because negative numbers aren't in the Fibonacci sequence as defined here.\n\nSo I should modify step 1 to handle that. So:\n\n1. If n is negative: return False.\n2. If n is 0: return True.\n3. Else, compute a and b.\n4. Check if a or b is a perfect square.\n\nSo, adding that to the function structure.\n\nOkay, now time to write the code.\n\nImport math for sqrt.\n\nDefine is_fibonacci(n):\n\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    a = 5 * n * n + 4\n    b = 5 * n * n -4\n    s_a = math.isqrt(a)\n    s_b = math.isqrt(b)\n    return s_a*s_a == a or s_b*s_b == b\n\nWait, wait: math.isqrt returns the integer square root, which is the floor of the exact square root. So for perfect squares, s_a*s_a will equal a.\n\nYes, that's exactly what we need.\n\nLet me test the function with some numbers.\n\nTest 1: n=0. Function returns True. Correct.\n\nTest 2: n=1. a=5 +4=9, b=5-4=1. s_a=3, 3\u00b2=9: True.\n\nTest3: n=2. a=20 +4=24, s_a=4 (since isqrt(24)=4), 4\u00b2=16\u226024. Then b=20-4=16, s_b=4, 4\u00b2=16: True.\n\nTest4: n=3. a=45+4=49, which is 7\u00b2: True.\n\nTest5: n=4. a=80+4=84; isqrt(84)=9 (81). 9\u00b2=81\u226084. b=80-4=76. isqrt(76)=8, 8\u00b2=64\u226076. So return False. But wait, 4 is not a Fibonacci number because the sequence goes 0,1,1,2,3,5,8... So 4 is not in it. So the function correctly returns False.\n\nTest6: n=5: a=125 +4=129; isqrt(129)=11, 11\u00b2=121\u2260129. b=125-4=121, 11\u00b2=121: True.\n\nn=6: a=5*36+4=184, sqrt(184)\u224813.56, isqrt=13, 13\u00b2=169\u2260184. b=5*36-4=176, isqrt=13, 13\u00b2=169\u2260176. So function returns False.\n\nn=8: 5*64=320. a=324, isqrt=18, 18\u00b2=324: True.\n\nLooks good.\n\nBut what about n=144? Wait, 144 is a Fibonacci number (it's the 12th or 13th term, depending on how you count). Let's check:\n\na = 5*(144)^2 +4 =5*20736 +4=103680 +4=103684\n\n\u221a103684: Let me see, 322\u00b2=103684, because 320\u00b2=102400, 321\u00b2=103041, 322\u00b2=103684. So yes, it is a perfect square. So function returns True.\n\nGreat.\n\nSo the function seems to handle all the test cases correctly.\n\nTherefore, I can proceed to write this code.\n\nBut wait, one more thing: what about n=1? For a, 5*1 +4=9, which is 3\u00b2, correct. So the function works for that.\n\nAnother edge case: n=2, which we tested. It works.\n\nSo, the function seems solid.\n\nI think I have covered the necessary steps and tested the logic. Now, just code it.\n\n**Final Answer**\nThe Python function to check if a number is a Fibonacci number is:\n\n```python\nimport math\n\ndef is_fibonacci(n):\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    a = 5 * n * n + 4\n    b = 5 * n * n - 4\n    s_a = math.isqrt(a)\n    s_b = math.isqrt(b)\n    return (s_a * s_a == a) or (s_b * s_b == b)\n```\n\nSo, the final answer is \\boxed{is\\_fibonacci(n)} where the function is as above.\n</think>\n\nTo determine if a given number is a Fibonacci number, we can use a mathematical property involving perfect squares. The formula states that a number \\( n \\) is a Fibonacci number if either \\( 5n^2 + 4 \\) or \\( 5n^2 - 4 \\) is a perfect square. \n\nHere is the step-by-step process:\n\n1. **Check for negative numbers**: If the number is negative, it cannot be a Fibonacci number.\n2. **Handle the case where the number is 0**: 0 is a Fibonacci number.\n3. **Calculate \\( 5n^2 + 4 \\) and \\( 5n^2 - 4 \\)**.\n4. **Check if either result is a perfect square**: Use integer square root to determine if the result is a perfect square.\n\nThe Python function implementing this logic is as follows:\n\n```python\nimport math\n\ndef is_fibonacci(n):\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    a = 5 * n * n + 4\n    b = 5 * n * n - 4\n    s_a = math.isqrt(a)\n    s_b = math.isqrt(b)\n    return (s_a * s_a == a) or (s_b * s_b == b)\n```\n\nThis function efficiently checks if the given number is part of the Fibonacci sequence using the mathematical property mentioned. \n\nThe final answer is:\n\\[\n\\boxed{is\\_fibonacci(n)}\n\\]",
  "r1_solution": "import math\n\ndef is_fibonacci(n):\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    a = 5 * n * n + 4\n    b = 5 * n * n - 4\n    s_a = math.isqrt(a)\n    s_b = math.isqrt(b)\n    return (s_a * s_a == a) or (s_b * s_b == b)",
  "metadata": {
    "prompt_id": "00000189",
    "row_id": 189,
    "seed_ids": [
      0
    ],
    "mode": "prefill",
    "original_instruction": ""
  },
  "file_source": "KodCode_prefill_200_1741214325_prepared_results0.jsonl"
}