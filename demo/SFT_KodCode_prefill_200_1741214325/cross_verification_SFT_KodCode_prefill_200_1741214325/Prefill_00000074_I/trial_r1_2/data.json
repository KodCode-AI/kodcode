{
  "style": "instruct",
  "subset": "Prefill",
  "question_id": "Prefill_00000074_I",
  "question": "Write a python function to check if a given number is perfect square or not. The function should take an integer as input and return True if the number is a perfect square, False otherwise.",
  "solution": "def is_perfect_square(num: int) -> bool:\n    \"\"\"\n    Checks if the given number is a perfect square.\n    \n    Args:\n    num (int): The number to check\n    \n    Returns:\n    bool: True if num is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n    root = int(num ** 0.5)\n    return root * root == num",
  "test_code": "import pytest\nfrom solution import is_perfect_square\n\ndef test_is_perfect_square_positive_perfect_square():\n    assert is_perfect_square(1) == True\n    assert is_perfect_square(4) == True\n    assert is_perfect_square(9) == True\n    assert is_perfect_square(16) == True\n    assert is_perfect_square(25) == True\n\ndef test_is_perfect_square_negative_number():\n    assert is_perfect_square(-4) == False\n\ndef test_is_perfect_square_non_perfect_square():\n    assert is_perfect_square(2) == False\n    assert is_perfect_square(3) == False\n    assert is_perfect_square(5) == False\n    assert is_perfect_square(6) == False\n    assert is_perfect_square(7) == False\n\ndef test_is_perfect_square_zero():\n    assert is_perfect_square(0) == True\n\ndef test_is_perfect_square_large_number():\n    assert is_perfect_square(15625) == True\n    assert is_perfect_square(15626) == False",
  "test_info": [
    {
      "function_name": "is_perfect_square",
      "parameter_list": "(num)",
      "function_declaration": "def is_perfect_square(num):",
      "docstring": "Checks if the given number is a perfect square.\n\nArgs:\nnum (int): The number to check\n\nReturns:\nbool: True if num is a perfect square, False otherwise."
    }
  ],
  "gpt_pass_sequence": [
    1,
    1,
    1
  ],
  "gpt_pass_trial_num": 3,
  "gpt_difficulty": "easy",
  "gpt_pass_percentage": 1.0,
  "r1_response": "<think>\nOkay, I need to write a Python function called is_perfect_square. The function should take an integer as input and return True if it's a perfect square, False otherwise. Hmm, how do I determine if a number is a perfect square?\n\nWell, a perfect square is a number that can be expressed as the square of an integer. So, for example, 25 is a perfect square because it's 5 squared. But how do I check this programmatically?\n\nOne approach is to take the square root of the number and see if it's an integer. But wait, calculating square roots can sometimes lead to floating point inaccuracies, especially for large numbers. That might cause problems.\n\nLet me think. I'll start by handling edge cases. If the number is negative, it can't be a perfect square, so I'll return False immediately. What about zero? Zero is a perfect square because 0 squared is 0, so I should return True in that case.\n\nFor positive numbers, I can calculate the square root and then check if that value is an integer. To do this, I can use the math.sqrt function and then convert the result to an integer. Then, I can square that integer to see if it equals the original number.\n\nAlternatively, I could use the ** operator to take the square root by raising to the power of 0.5, but again, I should be cautious with floating points. So perhaps taking the square root, rounding it, and then squaring to check equality is a good method.\n\nWait, maybe I can do it without dealing with floating points at all. Another approach is to find the integer square root using binary search. That might be more efficient, especially for very large numbers, but perhaps for the sake of simplicity, the square root method is easier to implement and sufficient unless the number is extremely large.\n\nOkay, so the steps are:\n\n1. If the input is negative, return False.\n2. If the input is zero, return True.\n3. For positive numbers, compute the square root, round it to the nearest integer, then square that integer. If the result equals the original number, it's a perfect square.\n\nWait, but computing square roots and squaring might not always be accurate due to floating point precision. For example, very large numbers might lose precision when converted to a float.\n\nSo maybe a better approach is to calculate the integer square root without using floating points. How?\n\nIn Python, there's an isqrt function in the math module, which returns the integer square root, the largest integer less than or equal to the square root. So I can use that.\n\nLet me think: Let\u2019s say n is the number. Compute s = math.isqrt(n). Then, check if s * s equals n. Because s is the integer part of the square root, so if s squared is n, then yes, it's a perfect square.\n\nYes, that's a solid method.\n\nSo the steps:\n\n- Handle n < 0: return False\n- Handle n == 0: return True\n- For n > 0: compute s = sqrt(n), then check if s*s == n.\n\nWait, wait. Let me see with math.isqrt. For example, math.isqrt(25) is 5, 5*5=25: True. For 26, isqrt is 5, 5*5=25 !=26, so returns False.\n\nSo the code would be:\n\nimport math\n\ndef is_perfect_square(n):\n    if n <0:\n        return False\n    if n ==0:\n        return True\n    s = math.isqrt(n)\n    return s * s == n\n\nWait, but wait another thing: math.isqrt returns the largest integer less than or equal to the square root. So even if n is not a perfect square, this approach will correctly return False.\n\nAlternatively, without relying on that function, maybe using integer square root through a binary search method could be another approach, but that might complicate things. Since math.isqrt is available in Python 3.8 and above, I suppose that's acceptable.\n\nSo, let me write the function:\n\nImport math, handle n negative, return false. Then, compute sqrt, check if square is n.\n\nAnother example:\n\nn=1, which is 1^2. isqrt(1)=1, 1*1=1: True.\n\nn=2: isqrt is 1, 1 !=2: returns False.\n\nn=100: isqrt 10, 10^2=100: True.\n\nThis seems to handle all cases.\n\nWhat about very large numbers? For example, n= (10^10)^2 = 10^20. math.isqrt should handle this correctly.\n\nYes, this method should be efficient and accurate.\n\nSo, the code will look like that.\n</think>\n\nTo solve this problem, we need to determine if a given integer is a perfect square. A perfect square is a number that can be expressed as the square of an integer. The approach involves using the integer square root function to accurately and efficiently check if the given number meets this criterion.\n\n### Approach\n1. **Edge Case Handling**: \n   - If the input number is negative, return `False` immediately since negative numbers cannot be perfect squares.\n   - If the input number is zero, return `True` since zero is a perfect square (0 = 0\u00b2).\n2. **Integer Square Root Calculation**: For positive numbers, compute the integer square root using `math.isqrt()`, which returns the largest integer less than or equal to the square root of the number. This avoids potential floating-point inaccuracies that might arise with other methods.\n3. **Check for Perfect Square**: Square the integer square root and compare it with the original number. If they are equal, the number is a perfect square; otherwise, it is not.\n\n### Solution Code\n```python\nimport math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    s = math.isqrt(n)\n    return s * s == n\n```\n\n### Explanation\n- **Handling Negative Numbers**: Negative numbers are immediately dismissed as they cannot be perfect squares.\n- **Zero Check**: Zero is a perfect square, so we return `True` if the input is zero.\n- **Integer Square Root Calculation**: Using `math.isqrt(n)`, we get the largest integer `s` such that `s\u00b2 \u2264 n`. Squaring `s` and checking if it equals `n` confirms whether `n` is a perfect square.\n- **Efficiency**: The use of `math.isqrt` ensures that we efficiently determine the integer square root without floating-point operations, making the solution both accurate and efficient even for very large numbers.",
  "r1_solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    s = math.isqrt(n)\n    return s * s == n",
  "metadata": {
    "prompt_id": "00000074",
    "row_id": 74,
    "seed_ids": [
      0
    ],
    "mode": "prefill",
    "original_instruction": ""
  },
  "file_source": "KodCode_prefill_200_1741214325_prepared_results2.jsonl"
}