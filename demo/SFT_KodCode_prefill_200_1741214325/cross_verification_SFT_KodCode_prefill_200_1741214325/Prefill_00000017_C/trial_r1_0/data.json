{
  "style": "instruct",
  "subset": "Prefill",
  "question_id": "Prefill_00000017_C",
  "question": "def celsius_to_fahrenheit(celsius: float) -> float:\n    \"\"\"Converts a temperature from Celsius to Fahrenheit.\n    \n    >>> celsius_to_fahrenheit(0)\n    32.0\n    >>> celsius_to_fahrenheit(100)\n    212.0\n    >>> celsius_to_fahrenheit(25)\n    77.0\n    >>> celsius_to_fahrenheit(-40)\n    -40.0\n    \"\"\"",
  "solution": "def celsius_to_fahrenheit(celsius):\n    \"\"\"\n    Converts a temperature from Celsius to Fahrenheit.\n    \n    Parameters:\n    celsius (float): Temperature in Celsius.\n    \n    Returns:\n    float: Temperature in Fahrenheit.\n    \"\"\"\n    return (celsius * 9/5) + 32",
  "test_code": "from solution import celsius_to_fahrenheit\n\ndef test_celsius_to_fahrenheit_freezing_point():\n    assert celsius_to_fahrenheit(0) == 32.0\n\ndef test_celsius_to_fahrenheit_boiling_point():\n    assert celsius_to_fahrenheit(100) == 212.0\n\ndef test_celsius_to_fahrenheit_room_temperature():\n    assert celsius_to_fahrenheit(25) == 77.0\n\ndef test_celsius_to_fahrenheit_negative_temperature():\n    assert celsius_to_fahrenheit(-40) == -40.0\n\ndef test_celsius_to_fahrenheit_freezing_point_reverse():\n    assert round(celsius_to_fahrenheit(0) - 32, 1) == 0  # Using round to allow for floating point precision issues",
  "test_info": [
    {
      "function_name": "celsius_to_fahrenheit",
      "parameter_list": "(celsius)",
      "function_declaration": "def celsius_to_fahrenheit(celsius):",
      "docstring": "Converts a temperature from Celsius to Fahrenheit.\n\nParameters:\ncelsius (float): Temperature in Celsius.\n\nReturns:\nfloat: Temperature in Fahrenheit."
    }
  ],
  "gpt_pass_sequence": [
    1,
    1,
    1
  ],
  "gpt_pass_trial_num": 3,
  "gpt_difficulty": "easy",
  "gpt_pass_percentage": 1.0,
  "r1_response": "<think>\nOkay, I need to write a Python function called celsius_to_fahrenheit that takes a float as input and returns the converted temperature in Fahrenheit. Hmm, I remember the formula for converting Celsius to Fahrenheit is something like (C times 9/5) plus 32. Let me think about that.\n\nSo the function signature is given: def celsius_to_fahrenheit(celsius: float) -> float. The input is a float, so I don't have to worry about other data types right now. But wait, the examples show that when it's 0 degrees Celsius, it returns 32.0, which makes sense because 0*(9/5) is 0, plus 32 is 32.\n\nLet me also recall the exact formula. Oh right, it's F = (C \u00d7 9/5) + 32. So I just need to apply that in the function.\n\nWait, but the input is a float. Do I need to handle any specific cases, like when the input is negative or very large? Well, since the multiplication and addition should handle any float without issues, I think I don't need to add any special checks.\n\nLet's think about the steps. The function should take the celsius parameter, multiply it by 9, then divide by 5, then add 32. Alternatively, in Python, I can write that as (celsius * 9/5) + 32.\n\nTesting this logic with the examples provided:\n\nFirst example: celsius = 0. (0 * 9/5) = 0, plus 32 is 32.0. Correct.\n\nSecond example: celsius = 100. 100 * 9 is 900, divided by 5 is 180, plus 32 is 212.0. Right.\n\nThird example: 25 degrees. 25 *9=225, divided by5=45, plus32 is 77.0. Correct.\n\nFourth example: -40. -40*9 is -360, divided by5 is -72, plus32 is -40. So that returns -40.0 as expected.\n\nSo writing the function is straightforward. I'll just compute this value and return it.\n\nI should also consider if the function should return an integer when possible, but according to the examples, even when the result is -40, which is an integer, it returns -40.0, a float. So I can let the return type be a float regardless.\n\nPotential edge cases: What about really large numbers? Well, Python can handle large floats, so the calculation should still work, though precision might be a concern for extremely large or small values.\n\nWhat about if the input is, say, a string? No, the function is annotated with celsius: float, so it expects a float. So if someone passes a string, it should probably cause an error, but that's beyond the scope of this function.\n\nSo, putting it all together, the function will be:\n\nreturn celsius * 9/5 + 32?\n\nYes. So the code is simple. I think that's all.\n</think>\n\nTo solve this problem, we need to write a function that converts a given temperature from Celsius to Fahrenheit. The conversion formula is well-known and straightforward, so the task is primarily about implementing this formula accurately in Python.\n\n### Approach\nThe approach involves using the mathematical formula to convert Celsius to Fahrenheit. The formula is:\n\n\\[ F = (C \\times \\frac{9}{5}) + 32 \\]\n\nHere, \\( C \\) is the temperature in Celsius, and \\( F \\) is the resulting temperature in Fahrenheit. The function will take a single float parameter, apply this formula, and return the result as a float.\n\n### Solution Code\n\n```python\ndef celsius_to_fahrenheit(celsius: float) -> float:\n    return celsius * 9/5 + 32\n```\n\n### Explanation\n1. **Function Signature**: The function `celsius_to_fahrenheit` is defined to take a single parameter `celsius` of type float and returns a float.\n2. **Conversion Formula**: The formula \\( F = (C \\times \\frac{9}{5}) + 32 \\) is applied. In Python, this is computed as `celsius * 9 / 5 + 32`.\n3. **Return Value**: The result of the formula is returned, which is the temperature in Fahrenheit as a float.\n\nThis function handles all possible float inputs correctly, including negative values and very large or small numbers, thanks to Python's inherent capability to manage floating-point arithmetic.",
  "r1_solution": "def celsius_to_fahrenheit(celsius: float) -> float:\n    return celsius * 9/5 + 32",
  "metadata": {
    "prompt_id": "00000017",
    "row_id": 17,
    "seed_ids": [
      0
    ],
    "mode": "prefill",
    "original_instruction": "Write a python function to convert a Celsius temperature to Fahrenheit."
  },
  "file_source": "KodCode_prefill_200_1741214325_prepared_results0.jsonl"
}