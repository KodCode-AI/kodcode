{
  "style": "instruct",
  "subset": "Prefill",
  "question_id": "Prefill_00000190_C",
  "question": "def is_perfect_square(num: int) -> bool:\n    \"\"\"Checks if the given number is a perfect square.\n    \n    >>> is_perfect_square(1)\n    True\n    >>> is_perfect_square(4)\n    True\n    >>> is_perfect_square(9)\n    True\n    >>> is_perfect_square(16)\n    True\n    >>> is_perfect_square(25)\n    True\n    >>> is_perfect_square(2)\n    False\n    >>> is_perfect_square(3)\n    False\n    >>> is_perfect_square(5)\n    False\n    >>> is_perfect_square(7)\n    False\n    >>> is_perfect_square(8)\n    False\n    >>> is_perfect_square(0)\n    True\n    >>> is_perfect_square(-4)\n    False\n    \"\"\"",
  "solution": "def is_perfect_square(num: int) -> bool:\n    \"\"\"\n    Checks if the given number is a perfect square.\n    \n    Args:\n    num (int): The number to check.\n    \n    Returns:\n    bool: True if num is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n    root = int(num ** 0.5)\n    return root * root == num",
  "test_code": "from solution import is_perfect_square\n\ndef test_perfect_squares():\n    assert is_perfect_square(1) is True  # 1 = 1^2\n    assert is_perfect_square(4) is True  # 4 = 2^2\n    assert is_perfect_square(9) is True  # 9 = 3^2\n    assert is_perfect_square(16) is True # 16 = 4^2\n    assert is_perfect_square(25) is True # 25 = 5^2\n\ndef test_non_perfect_squares():\n    assert is_perfect_square(2) is False  # No integer square root\n    assert is_perfect_square(3) is False  # No integer square root\n    assert is_perfect_square(5) is False  # No integer square root\n    assert is_perfect_square(7) is False  # No integer square root\n    assert is_perfect_square(8) is False  # No integer square root\n\ndef test_zero_and_negative_numbers():\n    assert is_perfect_square(0) is True  # 0 = 0^2\n    assert is_perfect_square(-4) is False # Negative numbers cannot be perfect squares",
  "test_info": [
    {
      "function_name": "is_perfect_square",
      "parameter_list": "(num)",
      "function_declaration": "def is_perfect_square(num):",
      "docstring": "Checks if the given number is a perfect square.\n\nArgs:\nnum (int): The number to check.\n\nReturns:\nbool: True if num is a perfect square, False otherwise."
    }
  ],
  "gpt_pass_sequence": [
    1,
    0,
    1
  ],
  "gpt_pass_trial_num": 2,
  "gpt_difficulty": "easy",
  "gpt_pass_percentage": 0.667,
  "r1_response": "<think>\nOkay, I need to write a Python function called is_perfect_square that checks if a given number is a perfect square. Hmm, a perfect square is a number that can be expressed as the square of an integer. So like 4 is a perfect square because it's 2 squared, 9 is 3 squared, and so on. \n\nWait, but what about zero? Oh right, zero is 0 squared so it's a perfect square. And negative numbers? Well, squaring any real number gives a non-negative result, so if the input number is negative, it's not a perfect square. So I should handle that case.\n\nSo the function should return False for any input less than zero. Then, for non-negative numbers, I need to check if there's an integer whose square is equal to the input.\n\nHow do I compute the square root? Well, one way is to take the square root and then check if the integer part squared gives back the number. But wait, because of floating point precision issues, I might run into errors if I rely on the square root directly.\n\nAn alternative method is to compute the integer part of the square root and then square it to see if it equals the original number. So for example, take 16. The square root is 4.0. If I convert it to an integer, it's 4. Then 4 squared is 16, which matches.\n\nBut what about numbers that are not perfect squares? Like 8. Its square root is 2.828..., so the integer part is 2. Squared, it's 4, which is not equal to 8. So the function should return False.\n\nSo the steps for the function would be:\n\n1. If num is negative, return False.\n2. If num is 0, return True.\n3. Compute the integer square root of num. (In Python, I can use math.isqrt for integers)\n4. Square that integer and check if it equals num.\n\nWait, math.isqrt is available in Python 3.8 and above. Since that's the current standard, it's probably safe to use. Alternatively, I could use the sqrt function from math, which returns a float, and then convert it to an integer. But that's more precise with isqrt.\n\nAnother edge case: when num is 1. Square root is 1, which is an integer. So function returns True.\n\nWhat about very large numbers? Well, math.isqrt can handle large integers efficiently.\n\nSo steps in code:\n\n- Import math module.\n- Check if num is less than 0. If yes, return False.\n- Else, compute the square root using isqrt. Wait, wait. Wait, wait. Wait no: math.isqrt returns the integer square root, the floor of the exact square root. So for perfect squares, math.isqrt(n) squared will give n.\n\nWait, let's see. For example, math.isqrt(16) is 4, 4 squared is 16. For 17, isqrt is 4, squared is 16, which is less than 17. So yes, for any num >=0: the integer square root is s, then s*s == num if and only if num is a perfect square.\n\nSo the steps in code are:\n\nif num <0: return False\nelse:\n    s = math.isqrt(num)\n    return s*s == num\n\nOh, but wait, for num = 2, isqrt(2) is 1, 1 squared is 1. So result is False, which is correct.\n\nWait, another edge case: for num = 1, isqrt(1) is 1, so 1*1=1. True.\n\nWhat about num=0? Well, math.isqrt(0) is 0. 0*0=0, so returns True. Correct.\n\nHow about a number like 25? isqrt(25)=5, 5^2=25. True.\n\nAnd for something very large, like 10^18, the function should handle it.\n\nBut also, what if num is not an integer? Wait, the function definition says num is an int. So the parameter is of type int, so I don't need to handle float inputs. So no issues there.\n\nSo putting it all together:\n\nFirst, import math.\n\nFunction is_perfect_square(num) returns True if num is a perfect square, else False.\n\nWe will:\n\n- If num < 0: return False\n- Else, compute s = math.isqrt(num)\n- Then check if s*s == num\n- Return the boolean result.\n\nSo coding this.\n\nBut also, what happens for numbers like 2, which have integer square roots but non-integer? Wait, no. Wait, 2's square root is about 1.414..., so isqrt(2) is 1. 1 squared is 1 !=2. So it returns False, correct.\n\nWhat about for 2 < x <3, number like 2 but the function is passed as an integer. Oh, variables of type int can't have such values, since they are discrete. So the function correctly handles the case.\n\nSo the function is correct.\n\nTesting the sample inputs:\n\nSample 1: 1 \u2192 isqrt(1)=1 \u2192 1^2=1 \u2192 True.\n\nSample 2:4 \u2192 isqrt(4)=2 \u2192 4 \u2192 True.\n\nSame for 9,16,25.\n\nFor 2: isqrt returns 1 \u21921 !=2 \u2192 False.\n\nSimilarly for 3,5,7,8, returns False.\n\nFor 0: isqrt(0)=0, 0^2=0 \u2192 True.\n\nFor -4: return False.\n\nAnother test case: num = 100: isqrt is 10 \u2192 100. True.\n\nSo all test cases pass.\n\nThus, the code should be written.\n</think>\n\nTo solve this problem, we need to determine if a given integer is a perfect square. A perfect square is a number that can be expressed as the square of an integer. \n\n### Approach\n1. **Check for Negative Numbers**: Since negative numbers cannot be perfect squares, we immediately return `False` if the input is negative.\n2. **Check for Zero**: Zero is considered a perfect square because it can be expressed as \\(0^2\\).\n3. **Compute Integer Square Root**: For non-negative numbers, we compute the integer square root using `math.isqrt()`, which returns the largest integer less than or equal to the exact square root of the number.\n4. **Square the Integer Root**: We then square the integer root to check if it equals the original number. If it does, the number is a perfect square.\n\nThis approach efficiently handles both small and large numbers, ensuring accuracy with integer operations.\n\n### Solution Code\n```python\nimport math\n\ndef is_perfect_square(num: int) -> bool:\n    if num < 0:\n        return False\n    s = math.isqrt(num)\n    return s * s == num\n```\n\n### Explanation\n- **Negative Check**: The function immediately returns `False` for negative numbers as they cannot be perfect squares.\n- **Zero Handling**: Zero is directly handled by checking if `num` is zero and returning `True`.\n- **Efficient Square Root Calculation**: Using `math.isqrt()` ensures we get the integer square root efficiently.\n- **Square and Compare**: By squaring the integer square root and comparing it to the original number, we determine if the number is a perfect square without floating-point inaccuracies.\n\nThis method efficiently and accurately determines if a given integer is a perfect square with a time complexity of O(1) due to the direct mathematical operations involved.",
  "r1_solution": "import math\n\ndef is_perfect_square(num: int) -> bool:\n    if num < 0:\n        return False\n    s = math.isqrt(num)\n    return s * s == num",
  "metadata": {
    "prompt_id": "00000190",
    "row_id": 190,
    "seed_ids": [
      0
    ],
    "mode": "prefill",
    "original_instruction": "Write a python function to determine if a number is a \"perfect square\" number. A \"perfect square\" number is an integer that is the square of an integer. For example, 16 is a perfect square because it is 4 squared."
  },
  "file_source": "KodCode_prefill_200_1741214325_prepared_results2.jsonl"
}