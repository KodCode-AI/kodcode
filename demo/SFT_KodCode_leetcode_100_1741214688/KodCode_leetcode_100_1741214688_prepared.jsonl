{"messages": [{"role": "user", "content": "Implement a class `CircularQueue` that supports the following operations:\n\n*   `CircularQueue(int k)` constructs the `CircularQueue` with a maximum size of `k`.\n*   `int Front()` retrieves the element at the front of the queue without removing it. Returns `-1` if the queue is empty.\n*   `int Rear()` retrieves the element at the rear of the queue without removing it. Returns `-1` if the queue is empty.\n*   `boolean enQueue(int value)` inserts the element `value` into the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is full).\n*   `boolean deQueue()` deletes an element from the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is empty).\n*   `boolean isEmpty()` returns `true` if the queue is currently empty, `false` otherwise.\n*   `boolean isFull()` returns `true` if the queue is currently full, `false` otherwise.\n\nEnsure that all operations are performed in **constant time** (O(1))."}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000000_I", "question": "Implement a class `CircularQueue` that supports the following operations:\n\n*   `CircularQueue(int k)` constructs the `CircularQueue` with a maximum size of `k`.\n*   `int Front()` retrieves the element at the front of the queue without removing it. Returns `-1` if the queue is empty.\n*   `int Rear()` retrieves the element at the rear of the queue without removing it. Returns `-1` if the queue is empty.\n*   `boolean enQueue(int value)` inserts the element `value` into the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is full).\n*   `boolean deQueue()` deletes an element from the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is empty).\n*   `boolean isEmpty()` returns `true` if the queue is currently empty, `false` otherwise.\n*   `boolean isFull()` returns `true` if the queue is currently full, `false` otherwise.\n\nEnsure that all operations are performed in **constant time** (O(1)).", "solution": "class CircularQueue:\n    def __init__(self, k: int):\n        assert k > 0, \"k must be a positive integer\"\n        self.max_size = k\n        self.queue = [None] * k\n        self.head = -1\n        self.tail = -1\n\n    def Front(self) -> int:\n        if self.head == -1:\n            return -1\n        return self.queue[self.head]\n\n    def Rear(self) -> int:\n        if self.head == -1:\n            return -1\n        return self.queue[self.tail]\n\n    def enQueue(self, value: int) -> bool:\n        if self.head == -1 and self.tail == -1:\n            self.head = 0\n            self.tail = 0\n            self.queue[self.tail] = value\n            return True\n        elif (self.tail + 1) % self.max_size == self.head:\n            return False\n        else:\n            self.tail = (self.tail + 1) % self.max_size\n            self.queue[self.tail] = value\n            return True\n\n    def deQueue(self) -> bool:\n        if self.head == -1:\n            return False\n        elif self.head == self.tail:\n            self.head = -1\n            self.tail = -1\n            return True\n        else:\n            self.head = (self.head + 1) % self.max_size\n            return True\n\n    def isEmpty(self) -> bool:\n        return self.head == -1\n\n    def isFull(self) -> bool:\n        return (self.tail + 1) % self.max_size == self.head", "test_code": "import pytest\n\ndef test_circular_queue():\n    cq = CircularQueue(3)\n\n    assert cq.enQueue(1) is True\n    assert cq.enQueue(2) is True\n    assert cq.enQueue(3) is True\n    assert cq.enQueue(4) is False\n\n    assert cq.Rear() == 3\n    assert cq.Front() == 1\n\n    assert cq.deQueue() is True\n    assert cq.enQueue(4) is True\n\n    assert cq.Front() == 2\n\ndef test_queue_operations():\n    cq = CircularQueue(2)\n\n    assert cq.enQueue(1) is True\n    assert cq.enQueue(2) is True\n    assert cq.enQueue(3) is False\n\n    assert cq.deQueue() is True\n    assert cq.enQueue(3) is True\n\n    assert cq.Front() == 2\n    assert cq.Rear() == 3\n\n    assert cq.deQueue() is True\n    assert cq.deQueue() is True\n    assert cq.Rear() == -1\n    assert cq.Front() == -1", "test_info": null, "gpt_pass_sequence": [0, 1, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000000", "row_id": 0, "seed_ids": ["1797", "1403", "2583"], "mode": "leetcode", "original_instruction": ""}}}
{"messages": [{"role": "user", "content": "Design a function `maxProfitWithTransactionFee` that calculates the maximum profit you can achieve from trading a stock given an array of daily prices and a transaction fee. You can complete as many buy-sell transactions as you like, but you need to pay the transaction fee for each transaction. A transaction consists of buying and then selling one share of the stock. You cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n### Function Signature\n```python\ndef maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    pass\n```\n\n### Constraints\n- `1 <= prices.length <= 5 * 10^4`\n- `0 <= prices[i] <= 10^5`\n- `0 <= fee < 10^5`"}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000012_I", "question": "Design a function `maxProfitWithTransactionFee` that calculates the maximum profit you can achieve from trading a stock given an array of daily prices and a transaction fee. You can complete as many buy-sell transactions as you like, but you need to pay the transaction fee for each transaction. A transaction consists of buying and then selling one share of the stock. You cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n### Function Signature\n```python\ndef maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    pass\n```\n\n### Constraints\n- `1 <= prices.length <= 5 * 10^4`\n- `0 <= prices[i] <= 10^5`\n- `0 <= fee < 10^5`", "solution": "def maxProfitWithTransactionFee(prices: list, fee: int) -> int:\n    \"\"\"\n    Calculate the maximum profit you can achieve from trading a stock with a transaction fee.\n    \"\"\"\n    n = len(prices)\n    if n < 2:\n        return 0\n    \n    # Initialize variables to keep track of the maximum profit when we hold and when we do not hold a stock\n    hold = -prices[0]  # Assume we buy the stock on the first day\n    not_hold = 0       # No stock in hand\n    \n    for i in range(1, n):\n        # If we decide to buy or keep the stock\n        hold = max(hold, not_hold - prices[i])\n        # If we decide to sell the stock\n        not_hold = max(not_hold, hold + prices[i] - fee)\n    \n    return not_hold", "test_code": "def test_maxProfitWithTransactionFee():\n    assert maxProfitWithTransactionFee([1, 3, 2, 8, 4, 9], 2) == 8, \"Test case 1 failed\"\n    assert maxProfitWithTransactionFee([1, 3, 7, 5, 10, 3], 3) == 6, \"Test case 2 failed\"\n    assert maxProfitWithTransactionFee([1], 0) == 0, \"Test case 3 failed\"\n    assert maxProfitWithTransactionFee([1, 2, 3, 4, 5], 1) == 3, \"Test case 4 failed\"\n    assert maxProfitWithTransactionFee([7, 6, 4, 3, 1], 2) == 0, \"Test case 5 failed\"\n\nif __name__ == \"__main__\":\n    import pytest\n    pytest.main([__file__])", "test_info": [{"function_name": "maxProfitWithTransactionFee", "parameter_list": "(prices, fee)", "function_declaration": "def maxProfitWithTransactionFee(prices, fee):", "docstring": "Calculate the maximum profit you can achieve from trading a stock with a transaction fee."}], "gpt_pass_sequence": [1, 0, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000012", "row_id": 12, "seed_ids": ["1476", "2214", "1720"], "mode": "leetcode", "original_instruction": ""}}}
{"messages": [{"role": "user", "content": "Given a binary search tree (BST) and an integer `k`, write a function to find the `k`th smallest element in the tree. Ensure your solution does not modify the tree."}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000021_I", "question": "Given a binary search tree (BST) and an integer `k`, write a function to find the `k`th smallest element in the tree. Ensure your solution does not modify the tree.", "solution": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef kth_smallest(root: TreeNode, k: int) -> int:\n    \"\"\"\n    Returns the kth smallest element in the given binary search tree.\n    \"\"\"\n    def inorder_traversal(node: TreeNode):\n        return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right) if node else []\n    \n    return inorder_traversal(root)[k-1]", "test_code": "import pytest\n\n# Test helper functions and classes\ndef create_bst_from_list(arr):\n    if not arr:\n        return None\n    nodes = [TreeNode(val) if val is not None else None for val in arr]\n    for i, node in enumerate(nodes):\n        if node:\n            node.left = nodes[2 * i + 1] if 2 * i + 1 < len(nodes) else None\n            node.right = nodes[2 * i + 2] if 2 * i + 2 < len(nodes) else None\n    return nodes[0]\n\n# Test cases\ndef test_kth_smallest_simple_tree():\n    root = create_bst_from_list([3, 1, 4, None, 2])\n    assert kth_smallest(root, 1) == 1\n    assert kth_smallest(root, 2) == 2\n    assert kth_smallest(root, 3) == 3\n    assert kth_smallest(root, 4) == 4\n\ndef test_kth_smallest_empty_tree():\n    root = create_bst_from_list([])\n    with pytest.raises(IndexError):\n        kth_smallest(root, 1)\n\ndef test_kth_smallest_large_tree():\n    root = create_bst_from_list([5, 3, 6, 2, 4, None, None, 1])\n    assert kth_smallest(root, 1) == 1\n    assert kth_smallest(root, 2) == 2\n    assert kth_smallest(root, 3) == 3\n    assert kth_smallest(root, 4) == 4\n    assert kth_smallest(root, 5) == 5\n    assert kth_smallest(root, 6) == 6\n\ndef test_kth_smallest_single_node():\n    root = create_bst_from_list([1])\n    assert kth_smallest(root, 1) == 1\n\n# Run the tests\ndef _run_tests():\n    pytest.main([__file__])\n\nif __name__ == \"__main__\":\n    _run_tests()", "test_info": null, "gpt_pass_sequence": [1, 0, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000021", "row_id": 21, "seed_ids": ["61", "79", "623"], "mode": "leetcode", "original_instruction": ""}}}
{"messages": [{"role": "user", "content": "Given a string `s` consisting of lowercase English letters, return the **length** of the longest **palindromic** substring in `s`. A **palindromic** string is a string that reads the same backward as forward."}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000022_I", "question": "Given a string `s` consisting of lowercase English letters, return the **length** of the longest **palindromic** substring in `s`. A **palindromic** string is a string that reads the same backward as forward.", "solution": "def longest_palindrome_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest palindromic substring in the given string s.\n    \"\"\"\n    if not s:\n        return 0\n\n    n = len(s)\n    dp = [[False] * n for _ in range(n)]\n    maxLength = 1\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = True\n\n    # Check for substrings of length 2\n    start = 0\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = True\n            maxLength = 2\n            start = i\n\n    # Check for lengths greater than 2\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j] and dp[i + 1][j - 1]:\n                dp[i][j] = True\n                if length > maxLength:\n                    maxLength = length\n                    start = i\n\n    return maxLength", "test_code": "import pytest\n\ndef test_longest_palindrome_length():\n    assert longest_palindrome_length(\"babad\") == 3\n    assert longest_palindrome_length(\"cbbd\") == 2\n    assert longest_palindrome_length(\"a\") == 1\n    assert longest_palindrome_length(\"ac\") == 1\n    assert longest_palindrome_length(\"\") == 0\n    assert longest_palindrome_length(\"ccc\") == 3\n    assert longest_palindrome_length(\"banana\") == 5\n    assert longest_palindrome_length(\"racecar\") == 7", "test_info": [{"function_name": "longest_palindrome_length", "parameter_list": "(s)", "function_declaration": "def longest_palindrome_length(s):", "docstring": "Returns the length of the longest palindromic substring in the given string s."}], "gpt_pass_sequence": [1, 0, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000022", "row_id": 22, "seed_ids": ["201", "513", "1941"], "mode": "leetcode", "original_instruction": ""}}}
{"messages": [{"role": "user", "content": "Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically largest substring that is a palindrome. A palindrome is a string that reads the same backward as forward. If there are multiple palindromic substrings of the same length, return the one that is lexicographically largest. A substring is any contiguous sequence of characters within a string."}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000031_I", "question": "Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically largest substring that is a palindrome. A palindrome is a string that reads the same backward as forward. If there are multiple palindromic substrings of the same length, return the one that is lexicographically largest. A substring is any contiguous sequence of characters within a string.", "solution": "def find_largest_palindromic_substring(s):\n    \"\"\"\n    Finds the lexicographically largest palindromic substring in the given string s.\n    \"\"\"\n    def expand_around_center(left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1:right]\n    \n    largest_palindrome = \"\"\n    for i in range(len(s)):\n        # Odd length palindromes\n        palindrome_odd = expand_around_center(i, i)\n        # Even length palindromes\n        palindrome_even = expand_around_center(i, i + 1)\n        \n        # Update the largest palindrome found\n        if len(palindrome_odd) > len(largest_palindrome):\n            largest_palindrome = palindrome_odd\n        if len(palindrome_even) > len(largest_palindrome):\n            largest_palindrome = palindrome_even\n    \n    return largest_palindrome", "test_code": "import pytest\n\ndef test_find_largest_palindromic_substring():\n    assert find_largest_palindromic_substring(\"babad\") == \"bab\" or find_largest_palindromic_substring(\"babad\") == \"aba\"\n    assert find_largest_palindromic_substring(\"cbbd\") == \"bb\"\n    assert find_largest_palindromic_substring(\"a\") == \"a\"\n    assert find_largest_palindromic_substring(\"ac\") == \"a\" or find_largest_palindromic_substring(\"ac\") == \"c\"\n    assert find_largest_palindromic_substring(\"racecar\") == \"racecar\"\n    assert find_largest_palindromic_substring(\"banana\") == \"anana\" or find_largest_palindromic_substring(\"banana\") == \"anana\"", "test_info": [{"function_name": "find_largest_palindromic_substring", "parameter_list": "(s)", "function_declaration": "def find_largest_palindromic_substring(s):", "docstring": "Finds the lexicographically largest palindromic substring in the given string s."}, {"function_name": "expand_around_center", "parameter_list": "(left, right)", "function_declaration": "def expand_around_center(left, right):", "docstring": null}], "gpt_pass_sequence": [0, 1, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000031", "row_id": 31, "seed_ids": ["1361", "485", "1629"], "mode": "leetcode", "original_instruction": ""}}}
{"messages": [{"role": "user", "content": "Design a class `CustomQueue` that supports the following operations:\n\n- `CustomQueue(int capacity)` Initializes the queue with a given capacity.\n- `void enqueue(int value)` Adds a value to the end of the queue if there is still space. Returns `false` if the queue is full.\n- `int dequeue()` Removes and returns the value at the front of the queue. Returns `-1` if the queue is empty.\n- `bool isFull()` Returns `true` if the queue is full, otherwise returns `false`.\n- `bool isEmpty()` Returns `true` if the queue is empty, otherwise returns `false`.\n\nImplement the `CustomQueue` class such that all operations are performed in constant time, i.e., O(1). Additionally, provide a method `getQueue()` that returns the current elements in the queue as a list, maintaining the order of elements as they were added."}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000040_I", "question": "Design a class `CustomQueue` that supports the following operations:\n\n- `CustomQueue(int capacity)` Initializes the queue with a given capacity.\n- `void enqueue(int value)` Adds a value to the end of the queue if there is still space. Returns `false` if the queue is full.\n- `int dequeue()` Removes and returns the value at the front of the queue. Returns `-1` if the queue is empty.\n- `bool isFull()` Returns `true` if the queue is full, otherwise returns `false`.\n- `bool isEmpty()` Returns `true` if the queue is empty, otherwise returns `false`.\n\nImplement the `CustomQueue` class such that all operations are performed in constant time, i.e., O(1). Additionally, provide a method `getQueue()` that returns the current elements in the queue as a list, maintaining the order of elements as they were added.", "solution": "class CustomQueue:\n    def __init__(self, capacity: int):\n        self.queue = []\n        self.capacity = capacity\n        self.front = 0\n        self.rear = 0\n\n    def enqueue(self, value: int) -> bool:\n        if self.isFull():\n            return False\n        self.queue.append(value)\n        self.rear += 1\n        return True\n\n    def dequeue(self) -> int:\n        if self.isEmpty():\n            return -1\n        value = self.queue[self.front]\n        self.front += 1\n        return value\n\n    def isFull(self) -> bool:\n        return self.rear - self.front == self.capacity\n\n    def isEmpty(self) -> bool:\n        return self.front == self.rear\n\n    def getQueue(self) -> list:\n        return self.queue[self.front:self.rear]", "test_code": "import pytest\n\ndef test_customqueue_operations():\n    custom_queue = CustomQueue(3)\n    assert custom_queue.enqueue(1) is True\n    assert custom_queue.enqueue(2) is True\n    assert custom_queue.enqueue(3) is True\n    assert custom_queue.enqueue(4) is False  # Queue is full\n    assert custom_queue.dequeue() == 1\n    assert custom_queue.getQueue() == [2, 3]\n    assert custom_queue.dequeue() == 2\n    assert custom_queue.dequeue() == 3\n    assert custom_queue.dequeue() == -1  # Queue is empty\n    assert custom_queue.enqueue(5) is True\n    assert custom_queue.getQueue() == [5]\n\ndef test_queue_limit():\n    custom_queue = CustomQueue(2)\n    assert custom_queue.enqueue(1) is True\n    assert custom_queue.enqueue(2) is True\n    assert custom_queue.isFull() is True\n    assert custom_queue.enqueue(3) is False\n    assert custom_queue.getQueue() == [1, 2]\n\ndef test_empty_queue():\n    custom_queue = CustomQueue(2)\n    assert custom_queue.isEmpty() is True\n    assert custom_queue.enqueue(1) is True\n    assert custom_queue.getQueue() == [1]\n    assert custom_queue.isEmpty() is False\n    assert custom_queue.dequeue() == 1\n    assert custom_queue.isEmpty() is True\n\ndef test_enqueue_and_dequeue_mixed():\n    custom_queue = CustomQueue(2)\n    assert custom_queue.enqueue(1) is True\n    assert custom_queue.enqueue(2) is True\n    assert custom_queue.dequeue() == 1\n    assert custom_queue.enqueue(3) is True\n    assert custom_queue.getQueue() == [2, 3]\n    assert custom_queue.dequeue() == 2\n    assert custom_queue.dequeue() == 3\n    assert custom_queue.isEmpty() is True", "test_info": null, "gpt_pass_sequence": [1, 0, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000040", "row_id": 40, "seed_ids": ["1656", "733", "352"], "mode": "leetcode", "original_instruction": ""}}}
{"messages": [{"role": "user", "content": "Design a class `MyStack` to implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `pop`, `top`, and `empty`). Implement the `MyStack` class:\n\n*   `void push(int x)` Pushes element x to the top of the stack.\n*   `int pop()` Removes the element from the top of the stack and returns it.\n*   `int top()` Returns the element at the top of the stack.\n*   `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.\n\n**Notes:** \n\n*   You must use **only** standard operations of a queue, which means only `enqueue`, `deque`, `size`, and `is empty` operations are valid.\n*   Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations."}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000047_I", "question": "Design a class `MyStack` to implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `pop`, `top`, and `empty`). Implement the `MyStack` class:\n\n*   `void push(int x)` Pushes element x to the top of the stack.\n*   `int pop()` Removes the element from the top of the stack and returns it.\n*   `int top()` Returns the element at the top of the stack.\n*   `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.\n\n**Notes:** \n\n*   You must use **only** standard operations of a queue, which means only `enqueue`, `deque`, `size`, and `is empty` operations are valid.\n*   Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.", "solution": "from collections import deque\n\nclass MyStack:\n    def __init__(self):\n        self.q1 = deque()\n        self.q2 = deque()\n        \n    def push(self, x: int) -> None:\n        # Move all elements from q1 to q2\n        while self.q1:\n            self.q2.append(self.q1.popleft())\n        # Push the new element to q1\n        self.q1.append(x)\n        # Move all elements back from q2 to q1\n        while self.q2:\n            self.q1.append(self.q2.popleft())\n\n    def pop(self) -> int:\n        if self.q1:  # If stack is not empty\n            return self.q1.popleft()\n        return None\n\n    def top(self) -> int:\n        if self.q1:  # If stack is not empty\n            x = self.q1.popleft()\n            self.push(x)  # Push it back to the stack\n            return x\n        return None\n\n    def empty(self) -> bool:\n        return not self.q1", "test_code": "import pytest\nfrom solution import MyStack\n\ndef test_push_and_pop():\n    stack = MyStack()\n    stack.push(1)\n    stack.push(2)\n    assert stack.pop() == 2\n    assert stack.pop() == 1\n    assert stack.pop() is None\n\ndef test_top():\n    stack = MyStack()\n    stack.push(1)\n    stack.push(2)\n    assert stack.top() == 2\n    assert stack.top() == 2  # did not pop, should still be 2\n    assert stack.pop() == 2\n    assert stack.top() == 1\n    assert stack.pop() == 1\n    assert stack.top() is None\n\ndef test_empty():\n    stack = MyStack()\n    assert stack.empty() == True\n    stack.push(1)\n    assert stack.empty() == False\n    stack.pop()\n    assert stack.empty() == True\n\ndef test_multiple_pushes():\n    stack = MyStack()\n    for i in range(5):\n        stack.push(i)\n    for i in range(4, -1, -1):\n        assert stack.pop() == i\n    assert stack.empty() == True", "test_info": null, "gpt_pass_sequence": [1, 1, 0], "gpt_pass_trial_num": 2, "gpt_difficulty": "easy", "gpt_pass_percentage": 0.667, "metadata": {"prompt_id": "00000047", "row_id": 47, "seed_ids": ["952", "222", "232"], "mode": "leetcode", "original_instruction": ""}}}
{"messages": [{"role": "user", "content": "Given an integer array `nums` and a target integer `target`, find the **shortest contiguous subarray** in `nums` such that the sum of the elements in the subarray is equal to or greater than `target`. If no such subarray exists, return `0`. A **contiguous subarray** is a subarray with at least two elements, and the **sum** of its elements is the sum of the corresponding elements in `nums`."}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000049_I", "question": "Given an integer array `nums` and a target integer `target`, find the **shortest contiguous subarray** in `nums` such that the sum of the elements in the subarray is equal to or greater than `target`. If no such subarray exists, return `0`. A **contiguous subarray** is a subarray with at least two elements, and the **sum** of its elements is the sum of the corresponding elements in `nums`.", "solution": "def shortest_subarray_with_sum_at_least_target(nums, target):\n    \"\"\"\n    Finds the shortest contiguous subarray in nums such that the sum of the\n    elements in the subarray is equal to or greater than target. Returns 0 if\n    no such subarray exists.\n    \"\"\"\n    n = len(nums)\n    if n < 2:\n        return 0\n    \n    shortest_length = float('inf')\n    left = 0\n    current_sum = 0\n    \n    for right in range(n):\n        current_sum += nums[right]\n        \n        while current_sum >= target:\n            shortest_length = min(shortest_length, right - left + 1)\n            current_sum -= nums[left]\n            left += 1\n    \n    return shortest_length if shortest_length != float('inf') else 0", "test_code": "import pytest\n\ndef test_shortest_subarray_with_sum_at_least_target():\n    assert shortest_subarray_with_sum_at_least_target([2, 3, 1, 2, 4, 3], 7) == 2\n    assert shortest_subarray_with_sum_at_least_target([1, 4, 4], 4) == 1\n    assert shortest_subarray_with_sum_at_least_target([1, 1, 1, 1, 1, 1, 1, 1], 11) == 0\n    assert shortest_subarray_with_sum_at_least_target([1], 1) == 0\n    assert shortest_subarray_with_sum_at_least_target([1, 2, 3, 4, 5], 15) == 5\n    assert shortest_subarray_with_sum_at_least_target([1, 2, 3, 4, 5], 16) == 0", "test_info": [{"function_name": "shortest_subarray_with_sum_at_least_target", "parameter_list": "(nums, target)", "function_declaration": "def shortest_subarray_with_sum_at_least_target(nums, target):", "docstring": "Finds the shortest contiguous subarray in nums such that the sum of the\nelements in the subarray is equal to or greater than target. Returns 0 if\nno such subarray exists."}], "gpt_pass_sequence": [1, 0, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000049", "row_id": 49, "seed_ids": ["1848", "1455", "1601"], "mode": "leetcode", "original_instruction": ""}}}
{"messages": [{"role": "user", "content": "Design a class `CustomComparator` that implements a custom sorting algorithm for an array of integers. The sorting algorithm should sort the array in ascending order based on the following rules:\n\n1. Elements at even indices should be sorted in ascending order.\n2. Elements at odd indices should be sorted in descending order.\n\nYour task is to implement the `CustomComparator` class with the following methods:\n\n- `CustomComparator(int[] arr)`: Constructor that initializes the array to be sorted.\n- `void sort()`: Sorts the array according to the rules mentioned above.\n- `int[] getResult()`: Returns the sorted array.\n\nAdditionally, provide a `main` method to test your implementation with a sample array and print the sorted array."}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000051_I", "question": "Design a class `CustomComparator` that implements a custom sorting algorithm for an array of integers. The sorting algorithm should sort the array in ascending order based on the following rules:\n\n1. Elements at even indices should be sorted in ascending order.\n2. Elements at odd indices should be sorted in descending order.\n\nYour task is to implement the `CustomComparator` class with the following methods:\n\n- `CustomComparator(int[] arr)`: Constructor that initializes the array to be sorted.\n- `void sort()`: Sorts the array according to the rules mentioned above.\n- `int[] getResult()`: Returns the sorted array.\n\nAdditionally, provide a `main` method to test your implementation with a sample array and print the sorted array.", "solution": "class CustomComparator:\n    def __init__(self, arr):\n        \"\"\"\n        Constructor that initializes the array to be sorted.\n        \"\"\"\n        self.arr = arr\n\n    def sort(self):\n        \"\"\"\n        Sorts the array according to the rules mentioned.\n        \"\"\"\n        even_indices = sorted(self.arr[::2])\n        odd_indices = sorted(self.arr[1::2], reverse=True)\n        self.arr = [even if i % 2 == 0 else odd for i, (even, odd) in enumerate(zip(even_indices, odd_indices + self.arr[-1:] * (len(self.arr) % 2)))]\n\n    def get_result(self):\n        \"\"\"\n        Returns the sorted array.\n        \"\"\"\n        return self.arr\n\n\ndef main():\n    arr = [4, 1, 3, 2, 6, 5]\n    comparator = CustomComparator(arr)\n    comparator.sort()\n    print(comparator.get_result())", "test_code": "def test_custom_comparator():\n    def helper(arr):\n        comparator = CustomComparator(arr)\n        comparator.sort()\n        even_indices = sorted(arr[::2])\n        odd_indices = sorted(arr[1::2], reverse=True)\n        expected = [even if i % 2 == 0 else odd for i, (even, odd) in enumerate(zip(even_indices, odd_indices + arr[-1:] * (len(arr) % 2)))]\n        assert comparator.get_result() == expected\n\n    helper([4, 1, 3, 2, 6, 5])\n    helper([10, 15, 2, 5, 8, 7, 6, 4])\n    helper([3, 1, 4, 1, 5, 9, 2, 6])\n    helper([11, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n    helper([])\n    helper([1])\n\nimport pytest\n\nif __name__ == \"__main__\":\n    pytest.main()", "test_info": null, "gpt_pass_sequence": [0, 0, 1], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000051", "row_id": 51, "seed_ids": ["2515", "264", "1656"], "mode": "leetcode", "original_instruction": ""}}}
{"messages": [{"role": "user", "content": "Given an unsorted array of integers `nums`, return the maximum number of **distinct** elements in any **continuous subarray** of size `k`. A **continuous subarray** is defined as a subarray that contains `k` consecutive elements from the original array."}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000056_I", "question": "Given an unsorted array of integers `nums`, return the maximum number of **distinct** elements in any **continuous subarray** of size `k`. A **continuous subarray** is defined as a subarray that contains `k` consecutive elements from the original array.", "solution": "from collections import defaultdict\n\ndef max_distinct_elements_in_subarray(nums, k):\n    \"\"\"\n    Given an unsorted array of integers and a positive integer k, returns the maximum number of distinct elements\n    in any continuous subarray of size k.\n    \"\"\"\n    if k == 0:\n        return 0\n    distinct_count = defaultdict(int)\n    max_distinct = 0\n    left = 0\n    \n    for right in range(len(nums)):\n        distinct_count[nums[right]] += 1\n        while right - left + 1 > k:\n            distinct_count[nums[left]] -= 1\n            if distinct_count[nums[left]] == 0:\n                del distinct_count[nums[left]]\n            left += 1\n        max_distinct = max(max_distinct, len(distinct_count))\n    \n    return max_distinct", "test_code": "from solution import max_distinct_elements_in_subarray\n\ndef test_max_distinct_elements_in_subarray():\n    assert max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3], 3) == 3\n    assert max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3, 5], 3) == 3\n    assert max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3, 5], 4) == 4\n    assert max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3, 5], 7) == 5\n    assert max_distinct_elements_in_subarray([1, 1, 2, 2, 3, 3], 3) == 2\n    assert max_distinct_elements_in_subarray([1, 2, 3, 4, 5, 6], 1) == 1\n    assert max_distinct_elements_in_subarray([], 3) == 0\n    assert max_distinct_elements_in_subarray([1, 2, 3, 4, 5, 6], 0) == 0", "test_info": [{"function_name": "max_distinct_elements_in_subarray", "parameter_list": "(nums, k)", "function_declaration": "def max_distinct_elements_in_subarray(nums, k):", "docstring": "Given an unsorted array of integers and a positive integer k, returns the maximum number of distinct elements\nin any continuous subarray of size k."}], "gpt_pass_sequence": [0, 1, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000056", "row_id": 56, "seed_ids": ["230", "1433", "674"], "mode": "leetcode", "original_instruction": ""}}}
{"messages": [{"role": "user", "content": "Given a binary search tree (BST) and a node value `target`, return `true` if the `target` is found in the BST, and `false` otherwise. You may assume that each node in the BST has **uniquely** valued children. Additionally, provide a method to insert a new node with a given value into the BST while maintaining its properties."}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000064_I", "question": "Given a binary search tree (BST) and a node value `target`, return `true` if the `target` is found in the BST, and `false` otherwise. You may assume that each node in the BST has **uniquely** valued children. Additionally, provide a method to insert a new node with a given value into the BST while maintaining its properties.", "solution": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_in_bst(root: TreeNode, target: int) -> bool:\n    \"\"\"\n    Searches for the target value in the BST and returns True if found, False otherwise.\n    \"\"\"\n    if root is None:\n        return False\n    if root.val == target:\n        return True\n    elif root.val < target:\n        return find_in_bst(root.right, target)\n    else:\n        return find_in_bst(root.left, target)\n\ndef insert_in_bst(root: TreeNode, val: int) -> TreeNode:\n    \"\"\"\n    Inserts a new node with given value into the BST.\n    \"\"\"\n    if root is None:\n        return TreeNode(val)\n    if val < root.val:\n        root.left = insert_in_bst(root.left, val)\n    else:\n        root.right = insert_in_bst(root.right, val)\n    return root", "test_code": "from solution import TreeNode, find_in_bst, insert_in_bst\n\ndef test_find_in_bst():\n    # Create a simple BST\n    root = TreeNode(8, TreeNode(3, TreeNode(1), TreeNode(6, None, TreeNode(7))), TreeNode(10, None, TreeNode(14)))\n    assert find_in_bst(root, 3) == True\n    assert find_in_bst(root, 10) == True\n    assert find_in_bst(root, 5) == False\n\ndef test_insert_in_bst():\n    # Create a simple tree and insert nodes\n    root = TreeNode(8)\n    insert_in_bst(root, 3)\n    insert_in_bst(root, 10)\n    assert find_in_bst(root, 3) == True\n    assert find_in_bst(root, 10) == True\n\ndef test_insertion_multiple_nodes():\n    root = TreeNode(8)\n    insert_in_bst(root, 3)\n    insert_in_bst(root, 10)\n    insert_in_bst(root, 1)\n    assert find_in_bst(root, 3) == True\n    assert find_in_bst(root, 10) == True\n    assert find_in_bst(root, 1) == True\n    assert find_in_bst(root, 14) == False  # Before insertion\n    insert_in_bst(root, 14)\n    assert find_in_bst(root, 14) == True", "test_info": null, "gpt_pass_sequence": [1, 0, 1], "gpt_pass_trial_num": 2, "gpt_difficulty": "easy", "gpt_pass_percentage": 0.667, "metadata": {"prompt_id": "00000064", "row_id": 64, "seed_ids": ["1470", "1431", "114"], "mode": "leetcode", "original_instruction": ""}}}
{"messages": [{"role": "user", "content": "You are given an array `nums` consisting of integers from `1` to `n` inclusive, where `n` is the length of the array. The array is initially sorted in ascending order. However, exactly one element is missing from the array, and the array is not necessarily contiguous. Your task is to find the missing element and return it. \n\nFor example, if the array is `[1, 2, 4, 5, 6]`, the missing element is `3`, and you should return `3`. If the array is `[1, 3, 4, 5]`, the missing element is `2`, and you should return `2`.\n\nReturn the missing element in the array."}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000065_I", "question": "You are given an array `nums` consisting of integers from `1` to `n` inclusive, where `n` is the length of the array. The array is initially sorted in ascending order. However, exactly one element is missing from the array, and the array is not necessarily contiguous. Your task is to find the missing element and return it. \n\nFor example, if the array is `[1, 2, 4, 5, 6]`, the missing element is `3`, and you should return `3`. If the array is `[1, 3, 4, 5]`, the missing element is `2`, and you should return `2`.\n\nReturn the missing element in the array.", "solution": "def find_missing_element(nums):\n    \"\"\"\n    Finds the missing element in a sorted array of integers from 1 to n inclusive.\n    \"\"\"\n    expected_sum = (len(nums) + 1) * (len(nums) + 2) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum", "test_code": "from solution import find_missing_element\n\ndef test_find_missing_element():\n    assert find_missing_element([1, 2, 4, 5, 6]) == 3\n    assert find_missing_element([1, 3, 4, 5]) == 2\n    assert find_missing_element([2, 3, 4, 5, 6]) == 1\n    assert find_missing_element([1, 2, 3, 4, 5, 6, 8]) == 7\n    assert find_missing_element([1]) == 2\n    assert find_missing_element([2]) == 1\n    assert find_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 10]) == 9\n    assert find_missing_element([1, 2, 3, 4, 6, 7, 8, 9, 10]) == 5\n    assert find_missing_element([1, 3, 4, 5, 6, 7, 8, 9]) == 2", "test_info": [{"function_name": "find_missing_element", "parameter_list": "(nums)", "function_declaration": "def find_missing_element(nums):", "docstring": "Finds the missing element in a sorted array of integers from 1 to n inclusive."}], "gpt_pass_sequence": [0, 0, 1], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000065", "row_id": 65, "seed_ids": ["824", "1329", "1955"], "mode": "leetcode", "original_instruction": ""}}}
{"messages": [{"role": "user", "content": "Design a class `RangeFreqQuery` that supports efficient frequency queries on a given array `arr`. The goal is to implement a method that can quickly determine the frequency of any element within a specified range of the array. Specifically, implement the `RangeFreqQuery` class:\n\n- `RangeFreqQuery(int[] arr)`: Initializes the class with the given array `arr`.\n- `int query(int left, int right, int value)`: Returns the frequency of the value `value` in the subarray `arr[left...right]`.\n\nFor example, given the array `arr = [1, 2, 2, 3, 3, 3, 4]`, the query `query(0, 6, 3)` should return `3` since the value `3` appears three times in the subarray `arr[0...6]`."}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000079_I", "question": "Design a class `RangeFreqQuery` that supports efficient frequency queries on a given array `arr`. The goal is to implement a method that can quickly determine the frequency of any element within a specified range of the array. Specifically, implement the `RangeFreqQuery` class:\n\n- `RangeFreqQuery(int[] arr)`: Initializes the class with the given array `arr`.\n- `int query(int left, int right, int value)`: Returns the frequency of the value `value` in the subarray `arr[left...right]`.\n\nFor example, given the array `arr = [1, 2, 2, 3, 3, 3, 4]`, the query `query(0, 6, 3)` should return `3` since the value `3` appears three times in the subarray `arr[0...6]`.", "solution": "from collections import defaultdict\n\nclass RangeFreqQuery:\n    def __init__(self, arr):\n        \"\"\"\n        Initializes the class with the given array.\n        \"\"\"\n        self.index_map = defaultdict(list)\n        for index, value in enumerate(arr):\n            self.index_map[value].append(index)\n    \n    def query(self, left, right, value):\n        \"\"\"\n        Returns the frequency of the value in the subarray arr[left...right].\n        \"\"\"\n        if value not in self.index_map:\n            return 0\n        indices = self.index_map[value]\n        left_idx = self._binary_search(indices, left)\n        right_idx = self._binary_search(indices, right + 1) - 1\n        return right_idx - left_idx + 1 if right_idx >= left_idx else 0\n    \n    def _binary_search(self, indices, target):\n        left, right = 0, len(indices)\n        while left < right:\n            mid = (left + right) // 2\n            if indices[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        return left", "test_code": "import pytest\nfrom solution import RangeFreqQuery\n\ndef test_range_freq_query_positive():\n    arr = [1, 2, 2, 3, 3, 3, 4]\n    freq_query = RangeFreqQuery(arr)\n    assert freq_query.query(0, 6, 3) == 3\n    assert freq_query.query(0, 2, 2) == 2\n    assert freq_query.query(3, 6, 4) == 1\n\ndef test_range_freq_query_empty_subarray():\n    arr = [1, 2, 2, 3, 3, 3, 4]\n    freq_query = RangeFreqQuery(arr)\n    assert freq_query.query(4, 4, 1) == 0\n\ndef test_range_freq_query_single_value():\n    arr = [1, 1, 1, 1, 1, 1, 1]\n    freq_query = RangeFreqQuery(arr)\n    assert freq_query.query(0, 6, 1) == 7\n\ndef test_range_freq_query_no_occurrence():\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    freq_query = RangeFreqQuery(arr)\n    assert freq_query.query(0, 6, 8) == 0\n\ndef test_range_freq_query_negative_numbers():\n    arr = [-1, -2, -2, -3, -3, -3, -4]\n    freq_query = RangeFreqQuery(arr)\n    assert freq_query.query(0, 6, -3) == 3", "test_info": null, "gpt_pass_sequence": [1, 1, 0], "gpt_pass_trial_num": 2, "gpt_difficulty": "easy", "gpt_pass_percentage": 0.667, "metadata": {"prompt_id": "00000079", "row_id": 79, "seed_ids": ["1157", "751", "2288"], "mode": "leetcode", "original_instruction": ""}}}
{"messages": [{"role": "user", "content": "Given a list of `n` unique integers, determine if there exists a pair of integers in the list whose sum is equal to a given target integer `k`. If such a pair exists, return the indices of the two integers (0-indexed) in any order. If no such pair exists, return an empty list. Note that the same integer cannot be used twice."}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000096_I", "question": "Given a list of `n` unique integers, determine if there exists a pair of integers in the list whose sum is equal to a given target integer `k`. If such a pair exists, return the indices of the two integers (0-indexed) in any order. If no such pair exists, return an empty list. Note that the same integer cannot be used twice.", "solution": "def find_pair_with_sum(nums, k):\n    \"\"\"\n    Returns a list containing the indices of the two integers whose sum equals k.\n    If no such pair exists, returns an empty list.\n    \"\"\"\n    num_to_index = {}\n    for i, num in enumerate(nums):\n        complement = k - num\n        if complement in num_to_index:\n            return [num_to_index[complement], i]\n        num_to_index[num] = i\n    return []", "test_code": "def test_find_pair_with_sum():\n    assert find_pair_with_sum([2, 7, 11, 15], 9) == [0, 1]\n    assert find_pair_with_index([3, 2, 4], 6) == [1, 2]\n    assert find_pair_with_index([3, 3], 6) == [0, 1]\n    assert find_pair_with_index([1, 2, 3, 4, 5], 10) == []\n    assert find_pair_with_sum([], 10) == []\n\ndef find_pair_with_index(nums, k):\n    return find_pair_with_sum(nums, k)", "test_info": [{"function_name": "find_pair_with_sum", "parameter_list": "(nums, k)", "function_declaration": "def find_pair_with_sum(nums, k):", "docstring": "Returns a list containing the indices of the two integers whose sum equals k.\nIf no such pair exists, returns an empty list."}], "gpt_pass_sequence": [1, 0, 1], "gpt_pass_trial_num": 2, "gpt_difficulty": "easy", "gpt_pass_percentage": 0.667, "metadata": {"prompt_id": "00000096", "row_id": 96, "seed_ids": ["2485", "2345", "796"], "mode": "leetcode", "original_instruction": ""}}}
{"messages": [{"role": "user", "content": "Given a complete binary tree represented by an array `tree`, where `tree[i]` represents the value of the node at index `i`, and each parent node's value is the bitwise OR of its two children. You are given the root index `0` and a target value `target`. Your task is to insert a new node with value `target` into the array representation of the tree while maintaining the complete binary tree property, and return the new root index of the modified array.\n\nImplement the `CBTArrayInserter` class with the following methods:\n*   `CBTArrayInserter(int[] tree)`: Initializes the data structure with the given array `tree` representing the complete binary tree.\n*   `int insert(int target)`: Inserts a new node with value `target` into the tree and returns the new root index of the modified array.\n*   `int get_root()`: Returns the root index of the current state of the tree."}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000098_I", "question": "Given a complete binary tree represented by an array `tree`, where `tree[i]` represents the value of the node at index `i`, and each parent node's value is the bitwise OR of its two children. You are given the root index `0` and a target value `target`. Your task is to insert a new node with value `target` into the array representation of the tree while maintaining the complete binary tree property, and return the new root index of the modified array.\n\nImplement the `CBTArrayInserter` class with the following methods:\n*   `CBTArrayInserter(int[] tree)`: Initializes the data structure with the given array `tree` representing the complete binary tree.\n*   `int insert(int target)`: Inserts a new node with value `target` into the tree and returns the new root index of the modified array.\n*   `int get_root()`: Returns the root index of the current state of the tree.", "solution": "class CBTArrayInserter:\n    def __init__(self, tree):\n        self.tree = tree\n        self.size = len(tree)\n\n    def insert(self, target):\n        self.size += 1\n        index = self.size - 1\n        self.tree.append(target)\n        while index > 0 and self.tree[index] != 0:\n            parent = (index - 1) // 2\n            self.tree[parent] |= self.tree[index]\n            index = parent\n        return 0\n\n    def get_root(self):\n        return 0", "test_code": "def test_cbt_array_inserter():\n    tree = [1, 2, 3, 4, 5, 6, 7]\n    inserter = CBTArrayInserter(tree)\n    assert inserter.insert(8) == 0  # Insert a new node with value 8 at the end\n    assert inserter.get_root() == 0  # The root index remains 0\n    assert inserter.insert(9) == 0  # Insert a new node with value 9 at the end\n    assert inserter.insert(10) == 0 # Insert a new node with value 10 at the end\n\n    tree = [0, 1, 0, 0, 2, 3, 4, 5, 6, 7]\n    inserter = CBTArrayInserter(tree)\n    assert inserter.insert(8) == 0  # Insert a new node with value 8 at the end\n    assert inserter.get_root() == 0  # The root index remains 0\n    assert inserter.insert(9) == 0  # Insert a new node with value 9 at the end\n    assert inserter.insert(10) == 0 # Insert a new node with value 10 at the end", "test_info": null, "gpt_pass_sequence": [0, 1, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000098", "row_id": 98, "seed_ids": ["318", "1265", "919"], "mode": "leetcode", "original_instruction": ""}}}
{"messages": [{"role": "user", "content": "from typing import List\n\nclass CircularQueue:\n    \"\"\"Implement a class CircularQueue that supports the following operations:\n    - CircularQueue(int k) constructs the CircularQueue with a maximum size of k.\n    - int Front() retrieves the element at the front of the queue without removing it. Returns -1 if the queue is empty.\n    - int Rear() retrieves the element at the rear of the queue without removing it. Returns -1 if the queue is empty.\n    - boolean enQueue(int value) inserts the element value into the queue. Returns true if the operation is successful, false otherwise (i.e., the queue is full).\n    - boolean deQueue() deletes an element from the queue. Returns true if the operation is successful, false otherwise (i.e., the queue is empty).\n    - boolean isEmpty() returns true if the queue is currently empty, false otherwise.\n    - boolean isFull() returns true if the queue is currently full, false otherwise.\n    \n    Ensure that all operations are performed in constant time (O(1)).\n    \"\"\""}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000000_C", "question": "from typing import List\n\nclass CircularQueue:\n    \"\"\"Implement a class CircularQueue that supports the following operations:\n    - CircularQueue(int k) constructs the CircularQueue with a maximum size of k.\n    - int Front() retrieves the element at the front of the queue without removing it. Returns -1 if the queue is empty.\n    - int Rear() retrieves the element at the rear of the queue without removing it. Returns -1 if the queue is empty.\n    - boolean enQueue(int value) inserts the element value into the queue. Returns true if the operation is successful, false otherwise (i.e., the queue is full).\n    - boolean deQueue() deletes an element from the queue. Returns true if the operation is successful, false otherwise (i.e., the queue is empty).\n    - boolean isEmpty() returns true if the queue is currently empty, false otherwise.\n    - boolean isFull() returns true if the queue is currently full, false otherwise.\n    \n    Ensure that all operations are performed in constant time (O(1)).\n    \"\"\"", "solution": "class CircularQueue:\n    def __init__(self, k: int):\n        assert k > 0, \"k must be a positive integer\"\n        self.max_size = k\n        self.queue = [None] * k\n        self.head = -1\n        self.tail = -1\n\n    def Front(self) -> int:\n        if self.head == -1:\n            return -1\n        return self.queue[self.head]\n\n    def Rear(self) -> int:\n        if self.head == -1:\n            return -1\n        return self.queue[self.tail]\n\n    def enQueue(self, value: int) -> bool:\n        if self.head == -1 and self.tail == -1:\n            self.head = 0\n            self.tail = 0\n            self.queue[self.tail] = value\n            return True\n        elif (self.tail + 1) % self.max_size == self.head:\n            return False\n        else:\n            self.tail = (self.tail + 1) % self.max_size\n            self.queue[self.tail] = value\n            return True\n\n    def deQueue(self) -> bool:\n        if self.head == -1:\n            return False\n        elif self.head == self.tail:\n            self.head = -1\n            self.tail = -1\n            return True\n        else:\n            self.head = (self.head + 1) % self.max_size\n            return True\n\n    def isEmpty(self) -> bool:\n        return self.head == -1\n\n    def isFull(self) -> bool:\n        return (self.tail + 1) % self.max_size == self.head", "test_code": "import pytest\n\ndef test_circular_queue():\n    cq = CircularQueue(3)\n\n    assert cq.enQueue(1) is True\n    assert cq.enQueue(2) is True\n    assert cq.enQueue(3) is True\n    assert cq.enQueue(4) is False\n\n    assert cq.Rear() == 3\n    assert cq.Front() == 1\n\n    assert cq.deQueue() is True\n    assert cq.enQueue(4) is True\n\n    assert cq.Front() == 2\n\ndef test_queue_operations():\n    cq = CircularQueue(2)\n\n    assert cq.enQueue(1) is True\n    assert cq.enQueue(2) is True\n    assert cq.enQueue(3) is False\n\n    assert cq.deQueue() is True\n    assert cq.enQueue(3) is True\n\n    assert cq.Front() == 2\n    assert cq.Rear() == 3\n\n    assert cq.deQueue() is True\n    assert cq.deQueue() is True\n    assert cq.Rear() == -1\n    assert cq.Front() == -1", "test_info": null, "gpt_pass_sequence": [0, 1, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000000", "row_id": 0, "seed_ids": ["1797", "1403", "2583"], "mode": "leetcode", "original_instruction": "Implement a class `CircularQueue` that supports the following operations:\n\n*   `CircularQueue(int k)` constructs the `CircularQueue` with a maximum size of `k`.\n*   `int Front()` retrieves the element at the front of the queue without removing it. Returns `-1` if the queue is empty.\n*   `int Rear()` retrieves the element at the rear of the queue without removing it. Returns `-1` if the queue is empty.\n*   `boolean enQueue(int value)` inserts the element `value` into the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is full).\n*   `boolean deQueue()` deletes an element from the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is empty).\n*   `boolean isEmpty()` returns `true` if the queue is currently empty, `false` otherwise.\n*   `boolean isFull()` returns `true` if the queue is currently full, `false` otherwise.\n\nEnsure that all operations are performed in **constant time** (O(1))."}}}
{"messages": [{"role": "user", "content": "def maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    \"\"\"\n    Calculate the maximum profit you can achieve from trading a stock with a transaction fee.\n    \"\"\"\n    n = len(prices)\n    if n < 2:\n        return 0\n    \n    # Initialize variables to keep track of the maximum profit when we hold and when we do not hold a stock\n    hold = -prices[0]  # Assume we buy the stock on the first day\n    not_hold = 0       # No stock in hand\n    \n    for i in range(1, n):\n        # If we decide to buy or keep the stock\n        hold = max(hold, not_hold - prices[i])\n        # If we decide to sell the stock\n        not_hold = max(not_hold, hold + prices[i] - fee)\n    \n    return not_hold"}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000012_C", "question": "def maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    \"\"\"\n    Calculate the maximum profit you can achieve from trading a stock with a transaction fee.\n    \"\"\"\n    n = len(prices)\n    if n < 2:\n        return 0\n    \n    # Initialize variables to keep track of the maximum profit when we hold and when we do not hold a stock\n    hold = -prices[0]  # Assume we buy the stock on the first day\n    not_hold = 0       # No stock in hand\n    \n    for i in range(1, n):\n        # If we decide to buy or keep the stock\n        hold = max(hold, not_hold - prices[i])\n        # If we decide to sell the stock\n        not_hold = max(not_hold, hold + prices[i] - fee)\n    \n    return not_hold", "solution": "def maxProfitWithTransactionFee(prices: list, fee: int) -> int:\n    \"\"\"\n    Calculate the maximum profit you can achieve from trading a stock with a transaction fee.\n    \"\"\"\n    n = len(prices)\n    if n < 2:\n        return 0\n    \n    # Initialize variables to keep track of the maximum profit when we hold and when we do not hold a stock\n    hold = -prices[0]  # Assume we buy the stock on the first day\n    not_hold = 0       # No stock in hand\n    \n    for i in range(1, n):\n        # If we decide to buy or keep the stock\n        hold = max(hold, not_hold - prices[i])\n        # If we decide to sell the stock\n        not_hold = max(not_hold, hold + prices[i] - fee)\n    \n    return not_hold", "test_code": "def test_maxProfitWithTransactionFee():\n    assert maxProfitWithTransactionFee([1, 3, 2, 8, 4, 9], 2) == 8, \"Test case 1 failed\"\n    assert maxProfitWithTransactionFee([1, 3, 7, 5, 10, 3], 3) == 6, \"Test case 2 failed\"\n    assert maxProfitWithTransactionFee([1], 0) == 0, \"Test case 3 failed\"\n    assert maxProfitWithTransactionFee([1, 2, 3, 4, 5], 1) == 3, \"Test case 4 failed\"\n    assert maxProfitWithTransactionFee([7, 6, 4, 3, 1], 2) == 0, \"Test case 5 failed\"\n\nif __name__ == \"__main__\":\n    import pytest\n    pytest.main([__file__])", "test_info": [{"function_name": "maxProfitWithTransactionFee", "parameter_list": "(prices, fee)", "function_declaration": "def maxProfitWithTransactionFee(prices, fee):", "docstring": "Calculate the maximum profit you can achieve from trading a stock with a transaction fee."}], "gpt_pass_sequence": [1, 0, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000012", "row_id": 12, "seed_ids": ["1476", "2214", "1720"], "mode": "leetcode", "original_instruction": "Design a function `maxProfitWithTransactionFee` that calculates the maximum profit you can achieve from trading a stock given an array of daily prices and a transaction fee. You can complete as many buy-sell transactions as you like, but you need to pay the transaction fee for each transaction. A transaction consists of buying and then selling one share of the stock. You cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n### Function Signature\n```python\ndef maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    pass\n```\n\n### Constraints\n- `1 <= prices.length <= 5 * 10^4`\n- `0 <= prices[i] <= 10^5`\n- `0 <= fee < 10^5`"}}}
{"messages": [{"role": "user", "content": "def kth_smallest(root: TreeNode, k: int) -> int:\n    \"\"\"\n    Given a binary search tree (BST) and an integer k, find the kth smallest element in the tree.\n    Ensure your solution does not modify the tree.\n    >>> kth_smallest(create_bst_from_list([3, 1, 4, None, 2]), 1)\n    1\n    >>> kth_smallest(create_bst_from_list([3, 1, 4, None, 2]), 2)\n    2\n    >>> kth_smallest(create_bst_from_list([3, 1, 4, None, 2]), 3)\n    3\n    >>> kth_smallest(create_bst_from_list([3, 1, 4, None, 2]), 4)\n    4\n    \"\"\""}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000021_C", "question": "def kth_smallest(root: TreeNode, k: int) -> int:\n    \"\"\"\n    Given a binary search tree (BST) and an integer k, find the kth smallest element in the tree.\n    Ensure your solution does not modify the tree.\n    >>> kth_smallest(create_bst_from_list([3, 1, 4, None, 2]), 1)\n    1\n    >>> kth_smallest(create_bst_from_list([3, 1, 4, None, 2]), 2)\n    2\n    >>> kth_smallest(create_bst_from_list([3, 1, 4, None, 2]), 3)\n    3\n    >>> kth_smallest(create_bst_from_list([3, 1, 4, None, 2]), 4)\n    4\n    \"\"\"", "solution": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef kth_smallest(root: TreeNode, k: int) -> int:\n    \"\"\"\n    Returns the kth smallest element in the given binary search tree.\n    \"\"\"\n    def inorder_traversal(node: TreeNode):\n        return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right) if node else []\n    \n    return inorder_traversal(root)[k-1]", "test_code": "import pytest\n\n# Test helper functions and classes\ndef create_bst_from_list(arr):\n    if not arr:\n        return None\n    nodes = [TreeNode(val) if val is not None else None for val in arr]\n    for i, node in enumerate(nodes):\n        if node:\n            node.left = nodes[2 * i + 1] if 2 * i + 1 < len(nodes) else None\n            node.right = nodes[2 * i + 2] if 2 * i + 2 < len(nodes) else None\n    return nodes[0]\n\n# Test cases\ndef test_kth_smallest_simple_tree():\n    root = create_bst_from_list([3, 1, 4, None, 2])\n    assert kth_smallest(root, 1) == 1\n    assert kth_smallest(root, 2) == 2\n    assert kth_smallest(root, 3) == 3\n    assert kth_smallest(root, 4) == 4\n\ndef test_kth_smallest_empty_tree():\n    root = create_bst_from_list([])\n    with pytest.raises(IndexError):\n        kth_smallest(root, 1)\n\ndef test_kth_smallest_large_tree():\n    root = create_bst_from_list([5, 3, 6, 2, 4, None, None, 1])\n    assert kth_smallest(root, 1) == 1\n    assert kth_smallest(root, 2) == 2\n    assert kth_smallest(root, 3) == 3\n    assert kth_smallest(root, 4) == 4\n    assert kth_smallest(root, 5) == 5\n    assert kth_smallest(root, 6) == 6\n\ndef test_kth_smallest_single_node():\n    root = create_bst_from_list([1])\n    assert kth_smallest(root, 1) == 1\n\n# Run the tests\ndef _run_tests():\n    pytest.main([__file__])\n\nif __name__ == \"__main__\":\n    _run_tests()", "test_info": null, "gpt_pass_sequence": [1, 0, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000021", "row_id": 21, "seed_ids": ["61", "79", "623"], "mode": "leetcode", "original_instruction": "Given a binary search tree (BST) and an integer `k`, write a function to find the `k`th smallest element in the tree. Ensure your solution does not modify the tree."}}}
{"messages": [{"role": "user", "content": "def longest_palindrome_length(s: str) -> int:\n    \"\"\"Given a string s consisting of lowercase English letters, return the length of the longest palindromic substring in s.\n    A palindromic string is a string that reads the same backward as forward.\n    >>> longest_palindrome_length(\"babad\")\n    3\n    >>> longest_palindrome_length(\"cbbd\")\n    2\n    >>> longest_palindrome_length(\"a\")\n    1\n    >>> longest_palindrome_length(\"ac\")\n    1\n    >>> longest_palindrome_length(\"\")\n    0\n    >>> longest_palindrome_length(\"ccc\")\n    3\n    >>> longest_palindrome_length(\"banana\")\n    5\n    >>> longest_palindrome_length(\"racecar\")\n    7\n    \"\"\""}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000022_C", "question": "def longest_palindrome_length(s: str) -> int:\n    \"\"\"Given a string s consisting of lowercase English letters, return the length of the longest palindromic substring in s.\n    A palindromic string is a string that reads the same backward as forward.\n    >>> longest_palindrome_length(\"babad\")\n    3\n    >>> longest_palindrome_length(\"cbbd\")\n    2\n    >>> longest_palindrome_length(\"a\")\n    1\n    >>> longest_palindrome_length(\"ac\")\n    1\n    >>> longest_palindrome_length(\"\")\n    0\n    >>> longest_palindrome_length(\"ccc\")\n    3\n    >>> longest_palindrome_length(\"banana\")\n    5\n    >>> longest_palindrome_length(\"racecar\")\n    7\n    \"\"\"", "solution": "def longest_palindrome_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest palindromic substring in the given string s.\n    \"\"\"\n    if not s:\n        return 0\n\n    n = len(s)\n    dp = [[False] * n for _ in range(n)]\n    maxLength = 1\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = True\n\n    # Check for substrings of length 2\n    start = 0\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = True\n            maxLength = 2\n            start = i\n\n    # Check for lengths greater than 2\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j] and dp[i + 1][j - 1]:\n                dp[i][j] = True\n                if length > maxLength:\n                    maxLength = length\n                    start = i\n\n    return maxLength", "test_code": "import pytest\n\ndef test_longest_palindrome_length():\n    assert longest_palindrome_length(\"babad\") == 3\n    assert longest_palindrome_length(\"cbbd\") == 2\n    assert longest_palindrome_length(\"a\") == 1\n    assert longest_palindrome_length(\"ac\") == 1\n    assert longest_palindrome_length(\"\") == 0\n    assert longest_palindrome_length(\"ccc\") == 3\n    assert longest_palindrome_length(\"banana\") == 5\n    assert longest_palindrome_length(\"racecar\") == 7", "test_info": [{"function_name": "longest_palindrome_length", "parameter_list": "(s)", "function_declaration": "def longest_palindrome_length(s):", "docstring": "Returns the length of the longest palindromic substring in the given string s."}], "gpt_pass_sequence": [1, 0, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000022", "row_id": 22, "seed_ids": ["201", "513", "1941"], "mode": "leetcode", "original_instruction": "Given a string `s` consisting of lowercase English letters, return the **length** of the longest **palindromic** substring in `s`. A **palindromic** string is a string that reads the same backward as forward."}}}
{"messages": [{"role": "user", "content": "def find_largest_palindromic_substring(s: str) -> str:\n    \"\"\"\n    Given a string s consisting of lowercase English letters, find the lexicographically largest substring that is a palindrome.\n    If there are multiple palindromic substrings of the same length, return the one that is lexicographically largest.\n    A substring is any contiguous sequence of characters within a string.\n    >>> find_largest_palindromic_substring(\"babad\") \"bab\" or find_largest_palindromic_substring(\"babad\") == \"aba\"\n    >>> find_largest_palindromic_substring(\"cbbd\") \"bb\"\n    >>> find_largest_palindromic_substring(\"a\") \"a\"\n    >>> find_largest_palindromic_substring(\"ac\") \"a\" or find_largest_palindromic_substring(\"ac\") == \"c\"\n    >>> find_largest_palindromic_substring(\"racecar\") \"racecar\"\n    >>> find_largest_palindromic_substring(\"banana\") \"anana\" or find_largest_palindromic_substring(\"banana\") == \"anana\"\n    \"\"\""}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000031_C", "question": "def find_largest_palindromic_substring(s: str) -> str:\n    \"\"\"\n    Given a string s consisting of lowercase English letters, find the lexicographically largest substring that is a palindrome.\n    If there are multiple palindromic substrings of the same length, return the one that is lexicographically largest.\n    A substring is any contiguous sequence of characters within a string.\n    >>> find_largest_palindromic_substring(\"babad\") \"bab\" or find_largest_palindromic_substring(\"babad\") == \"aba\"\n    >>> find_largest_palindromic_substring(\"cbbd\") \"bb\"\n    >>> find_largest_palindromic_substring(\"a\") \"a\"\n    >>> find_largest_palindromic_substring(\"ac\") \"a\" or find_largest_palindromic_substring(\"ac\") == \"c\"\n    >>> find_largest_palindromic_substring(\"racecar\") \"racecar\"\n    >>> find_largest_palindromic_substring(\"banana\") \"anana\" or find_largest_palindromic_substring(\"banana\") == \"anana\"\n    \"\"\"", "solution": "def find_largest_palindromic_substring(s):\n    \"\"\"\n    Finds the lexicographically largest palindromic substring in the given string s.\n    \"\"\"\n    def expand_around_center(left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1:right]\n    \n    largest_palindrome = \"\"\n    for i in range(len(s)):\n        # Odd length palindromes\n        palindrome_odd = expand_around_center(i, i)\n        # Even length palindromes\n        palindrome_even = expand_around_center(i, i + 1)\n        \n        # Update the largest palindrome found\n        if len(palindrome_odd) > len(largest_palindrome):\n            largest_palindrome = palindrome_odd\n        if len(palindrome_even) > len(largest_palindrome):\n            largest_palindrome = palindrome_even\n    \n    return largest_palindrome", "test_code": "import pytest\n\ndef test_find_largest_palindromic_substring():\n    assert find_largest_palindromic_substring(\"babad\") == \"bab\" or find_largest_palindromic_substring(\"babad\") == \"aba\"\n    assert find_largest_palindromic_substring(\"cbbd\") == \"bb\"\n    assert find_largest_palindromic_substring(\"a\") == \"a\"\n    assert find_largest_palindromic_substring(\"ac\") == \"a\" or find_largest_palindromic_substring(\"ac\") == \"c\"\n    assert find_largest_palindromic_substring(\"racecar\") == \"racecar\"\n    assert find_largest_palindromic_substring(\"banana\") == \"anana\" or find_largest_palindromic_substring(\"banana\") == \"anana\"", "test_info": [{"function_name": "find_largest_palindromic_substring", "parameter_list": "(s)", "function_declaration": "def find_largest_palindromic_substring(s):", "docstring": "Finds the lexicographically largest palindromic substring in the given string s."}, {"function_name": "expand_around_center", "parameter_list": "(left, right)", "function_declaration": "def expand_around_center(left, right):", "docstring": null}], "gpt_pass_sequence": [0, 1, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000031", "row_id": 31, "seed_ids": ["1361", "485", "1629"], "mode": "leetcode", "original_instruction": "Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically largest substring that is a palindrome. A palindrome is a string that reads the same backward as forward. If there are multiple palindromic substrings of the same length, return the one that is lexicographically largest. A substring is any contiguous sequence of characters within a string."}}}
{"messages": [{"role": "user", "content": "from typing import List\n\nclass CustomQueue:\n    \"\"\"Design a class CustomQueue that supports the following operations:\n    - CustomQueue(int capacity) Initializes the queue with a given capacity.\n    - void enqueue(int value) Adds a value to the end of the queue if there is still space. Returns false if the queue is full.\n    - int dequeue() Removes and returns the value at the front of the queue. Returns -1 if the queue is empty.\n    - bool isFull() Returns true if the queue is full, otherwise returns false.\n    - bool isEmpty() Returns true if the queue is empty, otherwise returns false.\n    - List[int] getQueue() Returns the current elements in the queue as a list, maintaining the order of elements as they were added.\n    \"\"\""}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000040_C", "question": "from typing import List\n\nclass CustomQueue:\n    \"\"\"Design a class CustomQueue that supports the following operations:\n    - CustomQueue(int capacity) Initializes the queue with a given capacity.\n    - void enqueue(int value) Adds a value to the end of the queue if there is still space. Returns false if the queue is full.\n    - int dequeue() Removes and returns the value at the front of the queue. Returns -1 if the queue is empty.\n    - bool isFull() Returns true if the queue is full, otherwise returns false.\n    - bool isEmpty() Returns true if the queue is empty, otherwise returns false.\n    - List[int] getQueue() Returns the current elements in the queue as a list, maintaining the order of elements as they were added.\n    \"\"\"", "solution": "class CustomQueue:\n    def __init__(self, capacity: int):\n        self.queue = []\n        self.capacity = capacity\n        self.front = 0\n        self.rear = 0\n\n    def enqueue(self, value: int) -> bool:\n        if self.isFull():\n            return False\n        self.queue.append(value)\n        self.rear += 1\n        return True\n\n    def dequeue(self) -> int:\n        if self.isEmpty():\n            return -1\n        value = self.queue[self.front]\n        self.front += 1\n        return value\n\n    def isFull(self) -> bool:\n        return self.rear - self.front == self.capacity\n\n    def isEmpty(self) -> bool:\n        return self.front == self.rear\n\n    def getQueue(self) -> list:\n        return self.queue[self.front:self.rear]", "test_code": "import pytest\n\ndef test_customqueue_operations():\n    custom_queue = CustomQueue(3)\n    assert custom_queue.enqueue(1) is True\n    assert custom_queue.enqueue(2) is True\n    assert custom_queue.enqueue(3) is True\n    assert custom_queue.enqueue(4) is False  # Queue is full\n    assert custom_queue.dequeue() == 1\n    assert custom_queue.getQueue() == [2, 3]\n    assert custom_queue.dequeue() == 2\n    assert custom_queue.dequeue() == 3\n    assert custom_queue.dequeue() == -1  # Queue is empty\n    assert custom_queue.enqueue(5) is True\n    assert custom_queue.getQueue() == [5]\n\ndef test_queue_limit():\n    custom_queue = CustomQueue(2)\n    assert custom_queue.enqueue(1) is True\n    assert custom_queue.enqueue(2) is True\n    assert custom_queue.isFull() is True\n    assert custom_queue.enqueue(3) is False\n    assert custom_queue.getQueue() == [1, 2]\n\ndef test_empty_queue():\n    custom_queue = CustomQueue(2)\n    assert custom_queue.isEmpty() is True\n    assert custom_queue.enqueue(1) is True\n    assert custom_queue.getQueue() == [1]\n    assert custom_queue.isEmpty() is False\n    assert custom_queue.dequeue() == 1\n    assert custom_queue.isEmpty() is True\n\ndef test_enqueue_and_dequeue_mixed():\n    custom_queue = CustomQueue(2)\n    assert custom_queue.enqueue(1) is True\n    assert custom_queue.enqueue(2) is True\n    assert custom_queue.dequeue() == 1\n    assert custom_queue.enqueue(3) is True\n    assert custom_queue.getQueue() == [2, 3]\n    assert custom_queue.dequeue() == 2\n    assert custom_queue.dequeue() == 3\n    assert custom_queue.isEmpty() is True", "test_info": null, "gpt_pass_sequence": [1, 0, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000040", "row_id": 40, "seed_ids": ["1656", "733", "352"], "mode": "leetcode", "original_instruction": "Design a class `CustomQueue` that supports the following operations:\n\n- `CustomQueue(int capacity)` Initializes the queue with a given capacity.\n- `void enqueue(int value)` Adds a value to the end of the queue if there is still space. Returns `false` if the queue is full.\n- `int dequeue()` Removes and returns the value at the front of the queue. Returns `-1` if the queue is empty.\n- `bool isFull()` Returns `true` if the queue is full, otherwise returns `false`.\n- `bool isEmpty()` Returns `true` if the queue is empty, otherwise returns `false`.\n\nImplement the `CustomQueue` class such that all operations are performed in constant time, i.e., O(1). Additionally, provide a method `getQueue()` that returns the current elements in the queue as a list, maintaining the order of elements as they were added."}}}
{"messages": [{"role": "user", "content": "def MyStack:\n    \"\"\"Design a class MyStack to implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, pop, top, and empty).\n    >>> stack = MyStack()\n    >>> stack.push(1)\n    >>> stack.push(2)\n    >>> stack.pop()\n    2\n    >>> stack.top()\n    1\n    >>> stack.empty()\n    False\n    \"\"\"\n    def __init__(self):\n        self.q1 = deque()\n        self.q2 = deque()\n    \n    def push(self, x: int) -> None:\n        pass\n    \n    def pop(self) -> int:\n        pass\n    \n    def top(self) -> int:\n        pass\n    \n    def empty(self) -> bool:\n        pass"}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000047_C", "question": "def MyStack:\n    \"\"\"Design a class MyStack to implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, pop, top, and empty).\n    >>> stack = MyStack()\n    >>> stack.push(1)\n    >>> stack.push(2)\n    >>> stack.pop()\n    2\n    >>> stack.top()\n    1\n    >>> stack.empty()\n    False\n    \"\"\"\n    def __init__(self):\n        self.q1 = deque()\n        self.q2 = deque()\n    \n    def push(self, x: int) -> None:\n        pass\n    \n    def pop(self) -> int:\n        pass\n    \n    def top(self) -> int:\n        pass\n    \n    def empty(self) -> bool:\n        pass", "solution": "from collections import deque\n\nclass MyStack:\n    def __init__(self):\n        self.q1 = deque()\n        self.q2 = deque()\n        \n    def push(self, x: int) -> None:\n        # Move all elements from q1 to q2\n        while self.q1:\n            self.q2.append(self.q1.popleft())\n        # Push the new element to q1\n        self.q1.append(x)\n        # Move all elements back from q2 to q1\n        while self.q2:\n            self.q1.append(self.q2.popleft())\n\n    def pop(self) -> int:\n        if self.q1:  # If stack is not empty\n            return self.q1.popleft()\n        return None\n\n    def top(self) -> int:\n        if self.q1:  # If stack is not empty\n            x = self.q1.popleft()\n            self.push(x)  # Push it back to the stack\n            return x\n        return None\n\n    def empty(self) -> bool:\n        return not self.q1", "test_code": "import pytest\nfrom solution import MyStack\n\ndef test_push_and_pop():\n    stack = MyStack()\n    stack.push(1)\n    stack.push(2)\n    assert stack.pop() == 2\n    assert stack.pop() == 1\n    assert stack.pop() is None\n\ndef test_top():\n    stack = MyStack()\n    stack.push(1)\n    stack.push(2)\n    assert stack.top() == 2\n    assert stack.top() == 2  # did not pop, should still be 2\n    assert stack.pop() == 2\n    assert stack.top() == 1\n    assert stack.pop() == 1\n    assert stack.top() is None\n\ndef test_empty():\n    stack = MyStack()\n    assert stack.empty() == True\n    stack.push(1)\n    assert stack.empty() == False\n    stack.pop()\n    assert stack.empty() == True\n\ndef test_multiple_pushes():\n    stack = MyStack()\n    for i in range(5):\n        stack.push(i)\n    for i in range(4, -1, -1):\n        assert stack.pop() == i\n    assert stack.empty() == True", "test_info": null, "gpt_pass_sequence": [1, 1, 0], "gpt_pass_trial_num": 2, "gpt_difficulty": "easy", "gpt_pass_percentage": 0.667, "metadata": {"prompt_id": "00000047", "row_id": 47, "seed_ids": ["952", "222", "232"], "mode": "leetcode", "original_instruction": "Design a class `MyStack` to implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `pop`, `top`, and `empty`). Implement the `MyStack` class:\n\n*   `void push(int x)` Pushes element x to the top of the stack.\n*   `int pop()` Removes the element from the top of the stack and returns it.\n*   `int top()` Returns the element at the top of the stack.\n*   `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.\n\n**Notes:** \n\n*   You must use **only** standard operations of a queue, which means only `enqueue`, `deque`, `size`, and `is empty` operations are valid.\n*   Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations."}}}
{"messages": [{"role": "user", "content": "def shortest_subarray_with_sum_at_least_target(nums: List[int], target: int) -> int:\n    \"\"\"\n    Finds the shortest contiguous subarray in nums such that the sum of the\n    elements in the subarray is equal to or greater than target. Returns 0 if\n    no such subarray exists.\n    \"\"\""}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000049_C", "question": "def shortest_subarray_with_sum_at_least_target(nums: List[int], target: int) -> int:\n    \"\"\"\n    Finds the shortest contiguous subarray in nums such that the sum of the\n    elements in the subarray is equal to or greater than target. Returns 0 if\n    no such subarray exists.\n    \"\"\"", "solution": "def shortest_subarray_with_sum_at_least_target(nums, target):\n    \"\"\"\n    Finds the shortest contiguous subarray in nums such that the sum of the\n    elements in the subarray is equal to or greater than target. Returns 0 if\n    no such subarray exists.\n    \"\"\"\n    n = len(nums)\n    if n < 2:\n        return 0\n    \n    shortest_length = float('inf')\n    left = 0\n    current_sum = 0\n    \n    for right in range(n):\n        current_sum += nums[right]\n        \n        while current_sum >= target:\n            shortest_length = min(shortest_length, right - left + 1)\n            current_sum -= nums[left]\n            left += 1\n    \n    return shortest_length if shortest_length != float('inf') else 0", "test_code": "import pytest\n\ndef test_shortest_subarray_with_sum_at_least_target():\n    assert shortest_subarray_with_sum_at_least_target([2, 3, 1, 2, 4, 3], 7) == 2\n    assert shortest_subarray_with_sum_at_least_target([1, 4, 4], 4) == 1\n    assert shortest_subarray_with_sum_at_least_target([1, 1, 1, 1, 1, 1, 1, 1], 11) == 0\n    assert shortest_subarray_with_sum_at_least_target([1], 1) == 0\n    assert shortest_subarray_with_sum_at_least_target([1, 2, 3, 4, 5], 15) == 5\n    assert shortest_subarray_with_sum_at_least_target([1, 2, 3, 4, 5], 16) == 0", "test_info": [{"function_name": "shortest_subarray_with_sum_at_least_target", "parameter_list": "(nums, target)", "function_declaration": "def shortest_subarray_with_sum_at_least_target(nums, target):", "docstring": "Finds the shortest contiguous subarray in nums such that the sum of the\nelements in the subarray is equal to or greater than target. Returns 0 if\nno such subarray exists."}], "gpt_pass_sequence": [1, 0, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000049", "row_id": 49, "seed_ids": ["1848", "1455", "1601"], "mode": "leetcode", "original_instruction": "Given an integer array `nums` and a target integer `target`, find the **shortest contiguous subarray** in `nums` such that the sum of the elements in the subarray is equal to or greater than `target`. If no such subarray exists, return `0`. A **contiguous subarray** is a subarray with at least two elements, and the **sum** of its elements is the sum of the corresponding elements in `nums`."}}}
{"messages": [{"role": "user", "content": "def max_distinct_elements_in_subarray(nums: List[int], k: int) -> int:\n    \"\"\" Given an unsorted array of integers and a positive integer k, returns the maximum number of distinct elements in any continuous subarray of size k.\n    >>> max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3], 3)\n    3\n    >>> max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3, 5], 3)\n    3\n    >>> max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3, 5], 4)\n    4\n    >>> max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3, 5], 7)\n    5\n    >>> max_distinct_elements_in_subarray([1, 1, 2, 2, 3, 3], 3)\n    2\n    >>> max_distinct_elements_in_subarray([1, 2, 3, 4, 5, 6], 1)\n    1\n    >>> max_distinct_elements_in_subarray([], 3)\n    0\n    >>> max_distinct_elements_in_subarray([1, 2, 3, 4, 5, 6], 0)\n    0\n    \"\"\""}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000056_C", "question": "def max_distinct_elements_in_subarray(nums: List[int], k: int) -> int:\n    \"\"\" Given an unsorted array of integers and a positive integer k, returns the maximum number of distinct elements in any continuous subarray of size k.\n    >>> max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3], 3)\n    3\n    >>> max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3, 5], 3)\n    3\n    >>> max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3, 5], 4)\n    4\n    >>> max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3, 5], 7)\n    5\n    >>> max_distinct_elements_in_subarray([1, 1, 2, 2, 3, 3], 3)\n    2\n    >>> max_distinct_elements_in_subarray([1, 2, 3, 4, 5, 6], 1)\n    1\n    >>> max_distinct_elements_in_subarray([], 3)\n    0\n    >>> max_distinct_elements_in_subarray([1, 2, 3, 4, 5, 6], 0)\n    0\n    \"\"\"", "solution": "from collections import defaultdict\n\ndef max_distinct_elements_in_subarray(nums, k):\n    \"\"\"\n    Given an unsorted array of integers and a positive integer k, returns the maximum number of distinct elements\n    in any continuous subarray of size k.\n    \"\"\"\n    if k == 0:\n        return 0\n    distinct_count = defaultdict(int)\n    max_distinct = 0\n    left = 0\n    \n    for right in range(len(nums)):\n        distinct_count[nums[right]] += 1\n        while right - left + 1 > k:\n            distinct_count[nums[left]] -= 1\n            if distinct_count[nums[left]] == 0:\n                del distinct_count[nums[left]]\n            left += 1\n        max_distinct = max(max_distinct, len(distinct_count))\n    \n    return max_distinct", "test_code": "from solution import max_distinct_elements_in_subarray\n\ndef test_max_distinct_elements_in_subarray():\n    assert max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3], 3) == 3\n    assert max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3, 5], 3) == 3\n    assert max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3, 5], 4) == 4\n    assert max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3, 5], 7) == 5\n    assert max_distinct_elements_in_subarray([1, 1, 2, 2, 3, 3], 3) == 2\n    assert max_distinct_elements_in_subarray([1, 2, 3, 4, 5, 6], 1) == 1\n    assert max_distinct_elements_in_subarray([], 3) == 0\n    assert max_distinct_elements_in_subarray([1, 2, 3, 4, 5, 6], 0) == 0", "test_info": [{"function_name": "max_distinct_elements_in_subarray", "parameter_list": "(nums, k)", "function_declaration": "def max_distinct_elements_in_subarray(nums, k):", "docstring": "Given an unsorted array of integers and a positive integer k, returns the maximum number of distinct elements\nin any continuous subarray of size k."}], "gpt_pass_sequence": [0, 1, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000056", "row_id": 56, "seed_ids": ["230", "1433", "674"], "mode": "leetcode", "original_instruction": "Given an unsorted array of integers `nums`, return the maximum number of **distinct** elements in any **continuous subarray** of size `k`. A **continuous subarray** is defined as a subarray that contains `k` consecutive elements from the original array."}}}
{"messages": [{"role": "user", "content": "def find_in_bst(root: TreeNode, target: int) -> bool:\n    \"\"\"\n    Searches for the target value in the BST and returns True if found, False otherwise.\n    \"\"\"\ndef insert_in_bst(root: TreeNode, val: int) -> TreeNode:\n    \"\"\"\n    Inserts a new node with given value into the BST.\n    \"\"\""}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000064_C", "question": "def find_in_bst(root: TreeNode, target: int) -> bool:\n    \"\"\"\n    Searches for the target value in the BST and returns True if found, False otherwise.\n    \"\"\"\ndef insert_in_bst(root: TreeNode, val: int) -> TreeNode:\n    \"\"\"\n    Inserts a new node with given value into the BST.\n    \"\"\"", "solution": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_in_bst(root: TreeNode, target: int) -> bool:\n    \"\"\"\n    Searches for the target value in the BST and returns True if found, False otherwise.\n    \"\"\"\n    if root is None:\n        return False\n    if root.val == target:\n        return True\n    elif root.val < target:\n        return find_in_bst(root.right, target)\n    else:\n        return find_in_bst(root.left, target)\n\ndef insert_in_bst(root: TreeNode, val: int) -> TreeNode:\n    \"\"\"\n    Inserts a new node with given value into the BST.\n    \"\"\"\n    if root is None:\n        return TreeNode(val)\n    if val < root.val:\n        root.left = insert_in_bst(root.left, val)\n    else:\n        root.right = insert_in_bst(root.right, val)\n    return root", "test_code": "from solution import TreeNode, find_in_bst, insert_in_bst\n\ndef test_find_in_bst():\n    # Create a simple BST\n    root = TreeNode(8, TreeNode(3, TreeNode(1), TreeNode(6, None, TreeNode(7))), TreeNode(10, None, TreeNode(14)))\n    assert find_in_bst(root, 3) == True\n    assert find_in_bst(root, 10) == True\n    assert find_in_bst(root, 5) == False\n\ndef test_insert_in_bst():\n    # Create a simple tree and insert nodes\n    root = TreeNode(8)\n    insert_in_bst(root, 3)\n    insert_in_bst(root, 10)\n    assert find_in_bst(root, 3) == True\n    assert find_in_bst(root, 10) == True\n\ndef test_insertion_multiple_nodes():\n    root = TreeNode(8)\n    insert_in_bst(root, 3)\n    insert_in_bst(root, 10)\n    insert_in_bst(root, 1)\n    assert find_in_bst(root, 3) == True\n    assert find_in_bst(root, 10) == True\n    assert find_in_bst(root, 1) == True\n    assert find_in_bst(root, 14) == False  # Before insertion\n    insert_in_bst(root, 14)\n    assert find_in_bst(root, 14) == True", "test_info": null, "gpt_pass_sequence": [1, 0, 1], "gpt_pass_trial_num": 2, "gpt_difficulty": "easy", "gpt_pass_percentage": 0.667, "metadata": {"prompt_id": "00000064", "row_id": 64, "seed_ids": ["1470", "1431", "114"], "mode": "leetcode", "original_instruction": "Given a binary search tree (BST) and a node value `target`, return `true` if the `target` is found in the BST, and `false` otherwise. You may assume that each node in the BST has **uniquely** valued children. Additionally, provide a method to insert a new node with a given value into the BST while maintaining its properties."}}}
{"messages": [{"role": "user", "content": "def find_missing_element(nums: List[int]) -> int:\n    \"\"\"\n    Finds the missing element in a sorted array of integers from 1 to n inclusive.\n    >>> find_missing_element([1, 2, 4, 5, 6])\n    3\n    >>> find_missing_element([1, 3, 4, 5])\n    2\n    >>> find_missing_element([2, 3, 4, 5, 6])\n    1\n    >>> find_missing_element([1, 2, 3, 4, 5, 6, 8])\n    7\n    >>> find_missing_element([1])\n    2\n    >>> find_missing_element([2])\n    1\n    >>> find_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 10])\n    9\n    >>> find_missing_element([1, 2, 3, 4, 6, 7, 8, 9, 10])\n    5\n    >>> find_missing_element([1, 3, 4, 5, 6, 7, 8, 9])\n    2\n    \"\"\""}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000065_C", "question": "def find_missing_element(nums: List[int]) -> int:\n    \"\"\"\n    Finds the missing element in a sorted array of integers from 1 to n inclusive.\n    >>> find_missing_element([1, 2, 4, 5, 6])\n    3\n    >>> find_missing_element([1, 3, 4, 5])\n    2\n    >>> find_missing_element([2, 3, 4, 5, 6])\n    1\n    >>> find_missing_element([1, 2, 3, 4, 5, 6, 8])\n    7\n    >>> find_missing_element([1])\n    2\n    >>> find_missing_element([2])\n    1\n    >>> find_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 10])\n    9\n    >>> find_missing_element([1, 2, 3, 4, 6, 7, 8, 9, 10])\n    5\n    >>> find_missing_element([1, 3, 4, 5, 6, 7, 8, 9])\n    2\n    \"\"\"", "solution": "def find_missing_element(nums):\n    \"\"\"\n    Finds the missing element in a sorted array of integers from 1 to n inclusive.\n    \"\"\"\n    expected_sum = (len(nums) + 1) * (len(nums) + 2) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum", "test_code": "from solution import find_missing_element\n\ndef test_find_missing_element():\n    assert find_missing_element([1, 2, 4, 5, 6]) == 3\n    assert find_missing_element([1, 3, 4, 5]) == 2\n    assert find_missing_element([2, 3, 4, 5, 6]) == 1\n    assert find_missing_element([1, 2, 3, 4, 5, 6, 8]) == 7\n    assert find_missing_element([1]) == 2\n    assert find_missing_element([2]) == 1\n    assert find_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 10]) == 9\n    assert find_missing_element([1, 2, 3, 4, 6, 7, 8, 9, 10]) == 5\n    assert find_missing_element([1, 3, 4, 5, 6, 7, 8, 9]) == 2", "test_info": [{"function_name": "find_missing_element", "parameter_list": "(nums)", "function_declaration": "def find_missing_element(nums):", "docstring": "Finds the missing element in a sorted array of integers from 1 to n inclusive."}], "gpt_pass_sequence": [0, 0, 1], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000065", "row_id": 65, "seed_ids": ["824", "1329", "1955"], "mode": "leetcode", "original_instruction": "You are given an array `nums` consisting of integers from `1` to `n` inclusive, where `n` is the length of the array. The array is initially sorted in ascending order. However, exactly one element is missing from the array, and the array is not necessarily contiguous. Your task is to find the missing element and return it. \n\nFor example, if the array is `[1, 2, 4, 5, 6]`, the missing element is `3`, and you should return `3`. If the array is `[1, 3, 4, 5]`, the missing element is `2`, and you should return `2`.\n\nReturn the missing element in the array."}}}
{"messages": [{"role": "user", "content": "from collections import defaultdict\n\nclass RangeFreqQuery:\n    def __init__(self, arr):\n        \"\"\"\n        Initializes the class with the given array.\n        \"\"\"\n        self.index_map = defaultdict(list)\n        for index, value in enumerate(arr):\n            self.index_map[value].append(index)\n    \n    def query(self, left: int, right: int, value: int) -> int:\n        \"\"\"\n        Returns the frequency of the value in the subarray arr[left...right].\n        \"\"\""}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000079_C", "question": "from collections import defaultdict\n\nclass RangeFreqQuery:\n    def __init__(self, arr):\n        \"\"\"\n        Initializes the class with the given array.\n        \"\"\"\n        self.index_map = defaultdict(list)\n        for index, value in enumerate(arr):\n            self.index_map[value].append(index)\n    \n    def query(self, left: int, right: int, value: int) -> int:\n        \"\"\"\n        Returns the frequency of the value in the subarray arr[left...right].\n        \"\"\"", "solution": "from collections import defaultdict\n\nclass RangeFreqQuery:\n    def __init__(self, arr):\n        \"\"\"\n        Initializes the class with the given array.\n        \"\"\"\n        self.index_map = defaultdict(list)\n        for index, value in enumerate(arr):\n            self.index_map[value].append(index)\n    \n    def query(self, left, right, value):\n        \"\"\"\n        Returns the frequency of the value in the subarray arr[left...right].\n        \"\"\"\n        if value not in self.index_map:\n            return 0\n        indices = self.index_map[value]\n        left_idx = self._binary_search(indices, left)\n        right_idx = self._binary_search(indices, right + 1) - 1\n        return right_idx - left_idx + 1 if right_idx >= left_idx else 0\n    \n    def _binary_search(self, indices, target):\n        left, right = 0, len(indices)\n        while left < right:\n            mid = (left + right) // 2\n            if indices[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        return left", "test_code": "import pytest\nfrom solution import RangeFreqQuery\n\ndef test_range_freq_query_positive():\n    arr = [1, 2, 2, 3, 3, 3, 4]\n    freq_query = RangeFreqQuery(arr)\n    assert freq_query.query(0, 6, 3) == 3\n    assert freq_query.query(0, 2, 2) == 2\n    assert freq_query.query(3, 6, 4) == 1\n\ndef test_range_freq_query_empty_subarray():\n    arr = [1, 2, 2, 3, 3, 3, 4]\n    freq_query = RangeFreqQuery(arr)\n    assert freq_query.query(4, 4, 1) == 0\n\ndef test_range_freq_query_single_value():\n    arr = [1, 1, 1, 1, 1, 1, 1]\n    freq_query = RangeFreqQuery(arr)\n    assert freq_query.query(0, 6, 1) == 7\n\ndef test_range_freq_query_no_occurrence():\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    freq_query = RangeFreqQuery(arr)\n    assert freq_query.query(0, 6, 8) == 0\n\ndef test_range_freq_query_negative_numbers():\n    arr = [-1, -2, -2, -3, -3, -3, -4]\n    freq_query = RangeFreqQuery(arr)\n    assert freq_query.query(0, 6, -3) == 3", "test_info": null, "gpt_pass_sequence": [1, 1, 0], "gpt_pass_trial_num": 2, "gpt_difficulty": "easy", "gpt_pass_percentage": 0.667, "metadata": {"prompt_id": "00000079", "row_id": 79, "seed_ids": ["1157", "751", "2288"], "mode": "leetcode", "original_instruction": "Design a class `RangeFreqQuery` that supports efficient frequency queries on a given array `arr`. The goal is to implement a method that can quickly determine the frequency of any element within a specified range of the array. Specifically, implement the `RangeFreqQuery` class:\n\n- `RangeFreqQuery(int[] arr)`: Initializes the class with the given array `arr`.\n- `int query(int left, int right, int value)`: Returns the frequency of the value `value` in the subarray `arr[left...right]`.\n\nFor example, given the array `arr = [1, 2, 2, 3, 3, 3, 4]`, the query `query(0, 6, 3)` should return `3` since the value `3` appears three times in the subarray `arr[0...6]`."}}}
{"messages": [{"role": "user", "content": "def find_pair_with_sum(nums: List[int], k: int) -> List[int]:\n    \"\"\" Given a list of n unique integers, determine if there exists a pair of integers\n    in the list whose sum is equal to a given target integer k. If such a pair exists,\n    return the indices of the two integers (0-indexed) in any order. If no such pair exists,\n    return an empty list. Note that the same integer cannot be used twice.\n\n    >>> find_pair_with_sum([2, 7, 11, 15], 9)\n    [0, 1]\n    >>> find_pair_with_index([3, 2, 4], 6)\n    [1, 2]\n    >>> find_pair_with_index([3, 3], 6)\n    [0, 1]\n    >>> find_pair_with_index([1, 2, 3, 4, 5], 10)\n    []\n    >>> find_pair_with_sum([], 10)\n    []\n    \"\"\""}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000096_C", "question": "def find_pair_with_sum(nums: List[int], k: int) -> List[int]:\n    \"\"\" Given a list of n unique integers, determine if there exists a pair of integers\n    in the list whose sum is equal to a given target integer k. If such a pair exists,\n    return the indices of the two integers (0-indexed) in any order. If no such pair exists,\n    return an empty list. Note that the same integer cannot be used twice.\n\n    >>> find_pair_with_sum([2, 7, 11, 15], 9)\n    [0, 1]\n    >>> find_pair_with_index([3, 2, 4], 6)\n    [1, 2]\n    >>> find_pair_with_index([3, 3], 6)\n    [0, 1]\n    >>> find_pair_with_index([1, 2, 3, 4, 5], 10)\n    []\n    >>> find_pair_with_sum([], 10)\n    []\n    \"\"\"", "solution": "def find_pair_with_sum(nums, k):\n    \"\"\"\n    Returns a list containing the indices of the two integers whose sum equals k.\n    If no such pair exists, returns an empty list.\n    \"\"\"\n    num_to_index = {}\n    for i, num in enumerate(nums):\n        complement = k - num\n        if complement in num_to_index:\n            return [num_to_index[complement], i]\n        num_to_index[num] = i\n    return []", "test_code": "def test_find_pair_with_sum():\n    assert find_pair_with_sum([2, 7, 11, 15], 9) == [0, 1]\n    assert find_pair_with_index([3, 2, 4], 6) == [1, 2]\n    assert find_pair_with_index([3, 3], 6) == [0, 1]\n    assert find_pair_with_index([1, 2, 3, 4, 5], 10) == []\n    assert find_pair_with_sum([], 10) == []\n\ndef find_pair_with_index(nums, k):\n    return find_pair_with_sum(nums, k)", "test_info": [{"function_name": "find_pair_with_sum", "parameter_list": "(nums, k)", "function_declaration": "def find_pair_with_sum(nums, k):", "docstring": "Returns a list containing the indices of the two integers whose sum equals k.\nIf no such pair exists, returns an empty list."}], "gpt_pass_sequence": [1, 0, 1], "gpt_pass_trial_num": 2, "gpt_difficulty": "easy", "gpt_pass_percentage": 0.667, "metadata": {"prompt_id": "00000096", "row_id": 96, "seed_ids": ["2485", "2345", "796"], "mode": "leetcode", "original_instruction": "Given a list of `n` unique integers, determine if there exists a pair of integers in the list whose sum is equal to a given target integer `k`. If such a pair exists, return the indices of the two integers (0-indexed) in any order. If no such pair exists, return an empty list. Note that the same integer cannot be used twice."}}}
{"messages": [{"role": "user", "content": "from typing import List\n\nclass CBTArrayInserter:\n    def __init__(self, tree: List[int]):\n        \"\"\" Initialize the data structure with the given array tree representing the complete binary tree.\n        >>> inserter = CBTArrayInserter([1, 2, 3, 4, 5, 6, 7])\n        \"\"\"\n        self.tree = tree\n        self.size = len(tree)\n\n    def insert(self, target: int) -> int:\n        \"\"\" Inserts a new node with value target into the tree and returns the new root index of the modified array.\n        >>> inserter = CBTArrayInserter([1, 2, 3, 4, 5, 6, 7])\n        >>> inserter.insert(8)\n        0\n        >>> inserter.get_root()\n        0\n        \"\"\"\n        self.size += 1\n        index = self.size - 1\n        self.tree.append(target)\n        while index > 0 and self.tree[index] != 0:\n            parent = (index - 1) // 2\n            self.tree[parent] |= self.tree[index]\n            index = parent\n        return 0\n\n    def get_root(self) -> int:\n        \"\"\" Returns the root index of the current state of the tree.\n        >>> inserter = CBTArrayInserter([1, 2, 3, 4, 5, 6, 7])\n        >>> inserter.get_root()\n        0\n        \"\"\"\n        return 0"}], "metadata": {"style": "instruct", "subset": "Leetcode", "question_id": "Leetcode_00000098_C", "question": "from typing import List\n\nclass CBTArrayInserter:\n    def __init__(self, tree: List[int]):\n        \"\"\" Initialize the data structure with the given array tree representing the complete binary tree.\n        >>> inserter = CBTArrayInserter([1, 2, 3, 4, 5, 6, 7])\n        \"\"\"\n        self.tree = tree\n        self.size = len(tree)\n\n    def insert(self, target: int) -> int:\n        \"\"\" Inserts a new node with value target into the tree and returns the new root index of the modified array.\n        >>> inserter = CBTArrayInserter([1, 2, 3, 4, 5, 6, 7])\n        >>> inserter.insert(8)\n        0\n        >>> inserter.get_root()\n        0\n        \"\"\"\n        self.size += 1\n        index = self.size - 1\n        self.tree.append(target)\n        while index > 0 and self.tree[index] != 0:\n            parent = (index - 1) // 2\n            self.tree[parent] |= self.tree[index]\n            index = parent\n        return 0\n\n    def get_root(self) -> int:\n        \"\"\" Returns the root index of the current state of the tree.\n        >>> inserter = CBTArrayInserter([1, 2, 3, 4, 5, 6, 7])\n        >>> inserter.get_root()\n        0\n        \"\"\"\n        return 0", "solution": "class CBTArrayInserter:\n    def __init__(self, tree):\n        self.tree = tree\n        self.size = len(tree)\n\n    def insert(self, target):\n        self.size += 1\n        index = self.size - 1\n        self.tree.append(target)\n        while index > 0 and self.tree[index] != 0:\n            parent = (index - 1) // 2\n            self.tree[parent] |= self.tree[index]\n            index = parent\n        return 0\n\n    def get_root(self):\n        return 0", "test_code": "def test_cbt_array_inserter():\n    tree = [1, 2, 3, 4, 5, 6, 7]\n    inserter = CBTArrayInserter(tree)\n    assert inserter.insert(8) == 0  # Insert a new node with value 8 at the end\n    assert inserter.get_root() == 0  # The root index remains 0\n    assert inserter.insert(9) == 0  # Insert a new node with value 9 at the end\n    assert inserter.insert(10) == 0 # Insert a new node with value 10 at the end\n\n    tree = [0, 1, 0, 0, 2, 3, 4, 5, 6, 7]\n    inserter = CBTArrayInserter(tree)\n    assert inserter.insert(8) == 0  # Insert a new node with value 8 at the end\n    assert inserter.get_root() == 0  # The root index remains 0\n    assert inserter.insert(9) == 0  # Insert a new node with value 9 at the end\n    assert inserter.insert(10) == 0 # Insert a new node with value 10 at the end", "test_info": null, "gpt_pass_sequence": [0, 1, 0], "gpt_pass_trial_num": 1, "gpt_difficulty": "medium", "gpt_pass_percentage": 0.333, "metadata": {"prompt_id": "00000098", "row_id": 98, "seed_ids": ["318", "1265", "919"], "mode": "leetcode", "original_instruction": "Given a complete binary tree represented by an array `tree`, where `tree[i]` represents the value of the node at index `i`, and each parent node's value is the bitwise OR of its two children. You are given the root index `0` and a target value `target`. Your task is to insert a new node with value `target` into the array representation of the tree while maintaining the complete binary tree property, and return the new root index of the modified array.\n\nImplement the `CBTArrayInserter` class with the following methods:\n*   `CBTArrayInserter(int[] tree)`: Initializes the data structure with the given array `tree` representing the complete binary tree.\n*   `int insert(int target)`: Inserts a new node with value `target` into the tree and returns the new root index of the modified array.\n*   `int get_root()`: Returns the root index of the current state of the tree."}}}
