{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Implement a class `CircularQueue` that supports the following operations:\n\n*   `CircularQueue(int k)` constructs the `CircularQueue` with a maximum size of `k`.\n*   `int Front()` retrieves the element at the front of the queue without removing it. Returns `-1` if the queue is empty.\n*   `int Rear()` retrieves the element at the rear of the queue without removing it. Returns `-1` if the queue is empty.\n*   `boolean enQueue(int value)` inserts the element `value` into the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is full).\n*   `boolean deQueue()` deletes an element from the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is empty).\n*   `boolean isEmpty()` returns `true` if the queue is currently empty, `false` otherwise.\n*   `boolean isFull()` returns `true` if the queue is currently full, `false` otherwise.\n\nEnsure that all operations are performed in **constant time** (O(1))."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass CircularQueue:\n    def __init__(self, k: int):\n        assert k > 0, \"k must be a positive integer\"\n        self.max_size = k\n        self.queue = [None] * k\n        self.head = -1\n        self.tail = -1\n\n    def Front(self) -> int:\n        if self.head == -1:\n            return -1\n        return self.queue[self.head]\n\n    def Rear(self) -> int:\n        if self.head == -1:\n            return -1\n        return self.queue[self.tail]\n\n    def enQueue(self, value: int) -> bool:\n        if self.head == -1 and self.tail == -1:\n            self.head = 0\n            self.tail = 0\n            self.queue[self.tail] = value\n            return True\n        elif (self.tail + 1) % self.max_size == self.head:\n            return False\n        else:\n            self.tail = (self.tail + 1) % self.max_size\n            self.queue[self.tail] = value\n            return True\n\n    def deQueue(self) -> bool:\n        if self.head == -1:\n            return False\n        elif self.head == self.tail:\n            self.head = -1\n            self.tail = -1\n            return True\n        else:\n            self.head = (self.head + 1) % self.max_size\n            return True\n\n    def isEmpty(self) -> bool:\n        return self.head == -1\n\n    def isFull(self) -> bool:\n        return (self.tail + 1) % self.max_size == self.head\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_circular_queue():\n    cq = CircularQueue(3)\n\n    assert cq.enQueue(1) is True\n    assert cq.enQueue(2) is True\n    assert cq.enQueue(3) is True\n    assert cq.enQueue(4) is False\n\n    assert cq.Rear() == 3\n    assert cq.Front() == 1\n\n    assert cq.deQueue() is True\n    assert cq.enQueue(4) is True\n\n    assert cq.Front() == 2\n\ndef test_queue_operations():\n    cq = CircularQueue(2)\n\n    assert cq.enQueue(1) is True\n    assert cq.enQueue(2) is True\n    assert cq.enQueue(3) is False\n\n    assert cq.deQueue() is True\n    assert cq.enQueue(3) is True\n\n    assert cq.Front() == 2\n    assert cq.Rear() == 3\n\n    assert cq.deQueue() is True\n    assert cq.deQueue() is True\n    assert cq.Rear() == -1\n    assert cq.Front() == -1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000000", "row_id": 0, "seed_ids": ["1797", "1403", "2583"], "mode": "leetcode", "instruction": "Implement a class `CircularQueue` that supports the following operations:\n\n*   `CircularQueue(int k)` constructs the `CircularQueue` with a maximum size of `k`.\n*   `int Front()` retrieves the element at the front of the queue without removing it. Returns `-1` if the queue is empty.\n*   `int Rear()` retrieves the element at the rear of the queue without removing it. Returns `-1` if the queue is empty.\n*   `boolean enQueue(int value)` inserts the element `value` into the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is full).\n*   `boolean deQueue()` deletes an element from the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is empty).\n*   `boolean isEmpty()` returns `true` if the queue is currently empty, `false` otherwise.\n*   `boolean isFull()` returns `true` if the queue is currently full, `false` otherwise.\n\nEnsure that all operations are performed in **constant time** (O(1))."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, and an integer `k`, you can perform the following operation on `s` `k` times: \n\n*   Choose any non-empty substring of `s` and sort its characters in **ascending** order.\n\nAfter performing the operations, return the **lexicographically largest** string `s` that can be obtained. A substring is a contiguous sequence of characters in a string, and a string is lexicographically larger than another if it comes later in a dictionary order."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_by_sorting_substrings(s: str, k: int) -> str:\n    \"\"\"\n    Given a string s consisting of lowercase English letters, and an integer k,\n    perform up to k operations where each operation consists of choosing a non-empty\n    substring and sorting its characters in ascending order. Return the lexicographically\n    largest string that can be obtained after performing these operations.\n    \"\"\"\n    length = len(s)\n    for _ in range(k):\n        # Find the last position where a swap can be done to get the lexicographically\n        # largest string\n        max_pos = -1\n        for i in range(length - 1):\n            if s[i] < s[i + 1]:\n                max_pos = i + 1\n        # If no swap can be done, we are done\n        if max_pos == -1:\n            break\n        # Perform the operation on the identified substring\n        s = s[:max_pos] + ''.join(sorted(s[max_pos:]))\n    return s\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_by_sorting_substrings\n\ndef test_max_by_sorting_substrings():\n    assert max_by_sorting_substrings(\"abdc\", 2) == \"dbca\"\n    assert max_by_sorting_substrings(\"aabcd\", 2) == \"abcd\"\n    assert max_by_sorting_substrings(\"a\", 1) == \"a\"\n    assert max_by_sorting_substrings(\"bcab\", 2) == \"cabc\"\n    assert max_by_sorting_substrings(\"bdda\", 3) == \"ddba\"\n    assert max_by_sorting_substrings(\"abcde\", 4) == \"edcba\"\n\ndef test_max_by_sorting_substrings_edge_cases():\n    assert max_by_sorting_substrings(\"aaa\", 1) == \"aaa\"\n    assert max_by_sorting_substrings(\"zzz\", 2) == \"zzz\"\n    assert max_by_sorting_substrings(\"abc\", 0) == \"abc\"\n    assert max_by_sortting_substrings(\"abc\", 3) == \"cba\"  # Fixed typo here\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000001", "row_id": 1, "seed_ids": ["1910", "1844", "1535"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, and an integer `k`, you can perform the following operation on `s` `k` times: \n\n*   Choose any non-empty substring of `s` and sort its characters in **ascending** order.\n\nAfter performing the operations, return the **lexicographically largest** string `s` that can be obtained. A substring is a contiguous sequence of characters in a string, and a string is lexicographically larger than another if it comes later in a dictionary order."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` consisting of lowercase English letters. A **substring** of `s` is considered **beautiful** if it contains an even number of distinct letters and the sum of the ASCII values of all characters in the substring is divisible by 3. Return the number of **beautiful substrings** in `s`.\n\nFor example, in the string `\"abcabb\"`, `\"a\"`, `\"bb\"`, and `\"abb\"` are beautiful substrings."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_beautiful_substrings(s: str) -> int:\n    \"\"\"\n    Returns the number of beautiful substrings in the given string s.\n    A substring is considered beautiful if it has an even number of distinct letters\n    and the sum of its ASCII values is divisible by 3.\n    \"\"\"\n    def is_beautiful(subs: str) -> bool:\n        distinct_chars = set(subs)\n        ascii_sum = sum(ord(c) for c in subs)\n        return len(distinct_chars) % 2 == 0 and ascii_sum % 3 == 0\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_beautiful(s[i:j]):\n                count += 1\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_count_beautiful_substrings():\n    assert count_beautiful_substrings(\"abcabb\") == 3  # \"a\", \"bb\", \"abb\" are beautiful\n    assert count_beautiful_substrings(\"zzzz\") == 3  # \"z\", \"z\", \"zzz\" are beautiful\n    assert count_beautiful_substrings(\"abcd\") == 0  # No beautiful substrings\n    assert count_beautiful_substrings(\"xyzzxyzz\") == 6  # \"z\", \"z\", \"zzz\", \"xy\", \"yz\", \"zzz\" are beautiful\n    assert count_beautiful_substrings(\"abcdabcd\") == 6  # \"a\", \"b\", \"c\", \"d\", \"ab\", \"bc\" are beautiful\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000002", "row_id": 2, "seed_ids": ["2012", "839", "756"], "mode": "leetcode", "instruction": "You are given a string `s` consisting of lowercase English letters. A **substring** of `s` is considered **beautiful** if it contains an even number of distinct letters and the sum of the ASCII values of all characters in the substring is divisible by 3. Return the number of **beautiful substrings** in `s`.\n\nFor example, in the string `\"abcabb\"`, `\"a\"`, `\"bb\"`, and `\"abb\"` are beautiful substrings."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times: choose any two adjacent characters in `s` and swap them if the first character has a higher ASCII value than the second character. After performing any number of operations, return the lexicographically smallest string that can be obtained. Note that the ASCII values of lowercase English letters range from 97 to 122."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef smallest_string(s: str) -> str:\n    \"\"\"\n    Returns the lexicographically smallest string possible by swapping adjacent\n    characters if the first character has a higher ASCII value than the second.\n    \"\"\"\n    s_list = list(s)\n    i = 0\n    while i < len(s_list) - 1:\n        if s_list[i] > s_list[i + 1]:\n            s_list[i], s_list[i + 1] = s_list[i + 1], s_list[i]\n            i = 0\n        else:\n            i += 1\n    return ''.join(s_list)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_smallest_string():\n    assert smallest_string(\"cba\") == \"abc\"\n    assert smallest_string(\"baaca\") == \"aaabc\"\n    assert smallest_string(\"bdda\") == \"addb\"\n    assert smallest_string(\"zyx\") == \"xyz\"\n    assert smallest_string(\"a\") == \"a\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000003", "row_id": 3, "seed_ids": ["2233", "2203", "2168"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times: choose any two adjacent characters in `s` and swap them if the first character has a higher ASCII value than the second character. After performing any number of operations, return the lexicographically smallest string that can be obtained. Note that the ASCII values of lowercase English letters range from 97 to 122."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, a **substring** of `s` is called a **balanced substring** if the number of distinct characters in it is exactly `k`. For a given integer `k`, return the number of balanced substrings in `s`.\n\nExample:\n```python\ns = \"abcabc\", k = 2\nOutput: 3\nExplanation: The balanced substrings are \"ab\", \"bc\", and \"ab\".\n```\n\nExample:\n```python\ns = \"aaabbbccc\", k = 3\nOutput: 1\nExplanation: The only balanced substring is \"aaabbbccc\".\n```"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_balanced_substrings(s, k):\n    \"\"\"\n    Returns the number of balanced substrings in s where each substring has exactly k distinct characters.\n    \"\"\"\n    from collections import Counter\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if len(Counter(substring)) == k:\n                count += 1\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_count_balanced_substrings():\n    assert count_balanced_substrings(\"abcabc\", 2) == 3\n    assert count_balanced_substrings(\"aaabbbccc\", 3) == 1\n    assert count_balanced_substrings(\"abababab\", 2) == 8\n    assert count_balanced_substrings(\"xyzxyz\", 2) == 4\n    assert count_balanced_substrings(\"aaaa\", 1) == 4\n    assert count_balanced_substrings(\"bana\", 2) == 2\n    assert count_balanced_substrings(\"abcabc\", 4) == 0\n    assert count_balanced_substrings(\"a\", 1) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000004", "row_id": 4, "seed_ids": ["765", "2513", "1915"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, a **substring** of `s` is called a **balanced substring** if the number of distinct characters in it is exactly `k`. For a given integer `k`, return the number of balanced substrings in `s`.\n\nExample:\n```python\ns = \"abcabc\", k = 2\nOutput: 3\nExplanation: The balanced substrings are \"ab\", \"bc\", and \"ab\".\n```\n\nExample:\n```python\ns = \"aaabbbccc\", k = 3\nOutput: 1\nExplanation: The only balanced substring is \"aaabbbccc\".\n```"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary tree where each node contains a single digit from `0` to `9`. A **path** in the tree is defined as any sequence of nodes from some starting node to any leaf node. Each root-to-leaf path in the tree represents a number. For example, the path `1 -> 2 -> 3` represents the number `123`.\n\nYou need to find the sum of all root-to-leaf numbers in the tree. A **leaf** node is a node with no children. The result should be returned as an integer, and test cases are generated so that the answer will fit in a **32-bit** integer."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef sum_numbers(root: TreeNode) -> int:\n    \"\"\"\n    Returns the sum of all root-to-leaf numbers in the binary tree.\n    \"\"\"\n    def helper(node, path_sum):\n        if not node:\n            return 0\n        path_sum = path_sum * 10 + node.val\n        if not node.left and not node.right:\n            return path_sum\n        return helper(node.left, path_sum) + helper(node.right, path_sum)\n    \n    return helper(root, 0)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import sum_numbers, TreeNode\n\ndef create_tree(*values):\n    \"\"\"\n    Helper function to create a binary tree from a flat list of values,\n    where a null node is represented by None.\n    \"\"\"\n    if not values:\n        return None\n    nodes = [None if val is None else TreeNode(val) for val in values]\n    kids = nodes[::-1]\n    root = kids.pop()\n    for node in nodes:\n        if node:\n            if kids:\n                node.left = kids.pop()\n            if kids:\n                node.right = kids.pop()\n    return root\n\ndef test_sum_numbers_single_node():\n    assert sum_numbers(create_tree(1)) == 1\n\ndef test_sum_numbers_leaf_nodes():\n    assert sum_numbers(create_tree(1, 2, 3)) == 25  # 12 + 13 = 25\n    assert sum_numbers(create_tree(4, 9, 0, 5, 1)) == 1026  # 490 + 491 = 1026\n\ndef test_sum_numbers_with_one_path():\n    assert sum_numbers(create_tree(1,2)) == 12\n\ndef test_sum_numbers_complex_tree():\n    assert sum_numbers(create_tree(1,2,3,4,5,6,7,8,None,None, None, None, None, None, None, 9)) == 1026 # 123 + 124 + 135 + 136 + 147 + 148 + 159 + 169 = 1026\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000005", "row_id": 5, "seed_ids": ["2338", "1653", "129"], "mode": "leetcode", "instruction": "You are given a binary tree where each node contains a single digit from `0` to `9`. A **path** in the tree is defined as any sequence of nodes from some starting node to any leaf node. Each root-to-leaf path in the tree represents a number. For example, the path `1 -> 2 -> 3` represents the number `123`.\n\nYou need to find the sum of all root-to-leaf numbers in the tree. A **leaf** node is a node with no children. The result should be returned as an integer, and test cases are generated so that the answer will fit in a **32-bit** integer."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you are allowed to perform the following operation any number of times: pick any substring `s[i...j]` and replace it with the same substring in reverse order. For example, `s = \"abcde\"` can be transformed into `\"dcbae\"` by replacing the substring `s[1...4]` with `\"dcba\"`. \n\nDetermine the lexicographically smallest string that can be obtained by performing the above operation any number of times. Return the resulting string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef smallest_by_reversing_substrings(s: str) -> str:\n    \"\"\"\n    Returns the lexicographically smallest string by reversing substrings any number of times.\n    \"\"\"\n    n = len(s)\n    result = s\n    \n    for start in range(n):\n        for end in range(start + 1, n + 1):\n            substr = s[start:end]\n            reversed_substr = substr[::-1]\n            new_str = s[:start] + reversed_substr + s[end:]\n            if new_str < result:\n                result = new_str\n    \n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import smallest_by_reversing_substrings\n\ndef test_smallest_by_reversing_substrings():\n    assert smallest_by_reversing_substrings(\"cba\") == \"abc\"\n    assert smallest_by_reversing_substrings(\"aaba\") == \"aaab\"\n    assert smallest_by_reversing_substrings(\"cdadabcc\") == \"aadbcabc\"\n    assert smallest_by_reversing_substrings(\"abcd\") == \"abcd\"\n    assert smallest_by_reversing_substrings(\"baab\") == \"aabb\"\n    assert smallest_by_reversing_substrings(\"abcd\") == \"abcd\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000006", "row_id": 6, "seed_ids": ["790", "311", "1320"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you are allowed to perform the following operation any number of times: pick any substring `s[i...j]` and replace it with the same substring in reverse order. For example, `s = \"abcde\"` can be transformed into `\"dcbae\"` by replacing the substring `s[1...4]` with `\"dcba\"`. \n\nDetermine the lexicographically smallest string that can be obtained by performing the above operation any number of times. Return the resulting string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an integer array `nums`, you are tasked with designing a data structure that supports two types of queries efficiently:\n\n1. **Add** a positive integer to an element of a given index in the array `nums`.\n2. **Find** the maximum value in a given range of the array `nums`.\n\nImplement the `DynamicArray` class:\n\n*   `DynamicArray(int[] nums)` Initializes the `DynamicArray` object with the integer array `nums`.\n*   `void add(int index, int val)` Adds `val` to `nums[index]`, i.e., applies `nums[index] += val`.\n*   `int find(int left, int right)` Returns the maximum value in the subarray `nums[left...right]`.\n\nEnsure that the `find` operation is as efficient as possible, given the updates to the array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\n\nclass DynamicArray:\n    def __init__(self, nums: List[int]):\n        self.nums = nums\n    \n    def add(self, index: int, val: int) -> None:\n        self.nums[index] += val\n    \n    def find(self, left: int, right: int) -> int:\n        return max(self.nums[left:right+1])\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import DynamicArray\n\ndef test_add_and_find():\n    array = DynamicArray([1, 2, 3, 4, 5])\n    array.add(2, 3)  # Modify nums[2] to 6\n    assert array.find(1, 4) == 6  # The maximum value in the range [1, 4] is 6\n\ndef test_add_to_end():\n    array = DynamicArray([1, 2, 3])\n    array.add(3, 5)  # Extend nums to [1, 2, 3, 5]\n    assert array.find(2, 3) == 5  # The maximum value in the range [2, 3] is 5\n\ndef test_no_change():\n    array = DynamicArray([10, 20, 30, 40, 50])\n    assert array.find(1, 3) == 40  # The maximum value in the range [1, 3] is 40\n\ndef test_large_range():\n    array = DynamicArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    array.add(5, 10)  # Modify nums[5] to 15\n    assert array.find(0, 9) == 15  # The maximum value from index 0 to 9 is 15\n\ndef test_negative_values():\n    array = DynamicArray([-10, -20, -30, -5, -40, -50])\n    array.add(2, 25)  # Modify nums[2] to -5\n    assert array.find(2, 5) == -5  # The maximum value in the range [2, 5] is -5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000007", "row_id": 7, "seed_ids": ["1847", "1865", "898"], "mode": "leetcode", "instruction": "Given an integer array `nums`, you are tasked with designing a data structure that supports two types of queries efficiently:\n\n1. **Add** a positive integer to an element of a given index in the array `nums`.\n2. **Find** the maximum value in a given range of the array `nums`.\n\nImplement the `DynamicArray` class:\n\n*   `DynamicArray(int[] nums)` Initializes the `DynamicArray` object with the integer array `nums`.\n*   `void add(int index, int val)` Adds `val` to `nums[index]`, i.e., applies `nums[index] += val`.\n*   `int find(int left, int right)` Returns the maximum value in the subarray `nums[left...right]`.\n\nEnsure that the `find` operation is as efficient as possible, given the updates to the array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of strings `words` and a string `target`, you need to find the minimum number of adjacent swaps required to arrange the strings in `words` such that they form the `target` string. Each string in `words` can only be used once, and the order of the strings in `words` must match the order of the strings in `target`. A swap is defined as exchanging the positions of two adjacent strings in the list. Please return the minimum number of swaps required to achieve the `target` string. If it is not possible to arrange the strings in `words` to form the `target` string, return `-1`.\n\nFor example, given `words = [\"abc\",\"def\",\"ghi\"]` and `target = \"defabcghi\"`, the minimum number of swaps required is `2`. First, swap \"abc\" and \"def\", then swap \"def\" and \"ghi\". Therefore, the answer is `2`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_swaps_to_target(words, target):\n    \"\"\"\n    Returns the minimum number of swaps required to arrange the strings\n    in 'words' to match the 'target' string. Each string in 'words' can only\n    be used once, and the order must match 'target'.\n    \"\"\"\n    word_positions = {word: i for i, word in enumerate(target)}\n    words = [word for word in words if word in word_positions]\n    target = [word for word in target if word in word_positions]\n    positions = {word: i for i, word in enumerate(words)}\n    swaps = 0\n\n    for i, word in enumerate(target):\n        current_position = positions[word]\n        target_position = word_positions[word]\n        if current_position != target_position:\n            words[i], words[current_position] = words[target_position], words[current_position]\n            positions[words[i]] = i\n            positions[words[current_position]] = current_position\n            swaps += 1\n\n    return swaps if words == target else -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_min_swaps_to_target():\n    assert min_swaps_to_target([\"abc\", \"def\", \"ghi\"], \"defabcghi\") == 2\n    assert min_swaps_to_target([\"abc\", \"def\", \"ghi\"], \"abcdefg\") == 3\n    assert min_swaps_to_target([\"abc\", \"def\", \"ghi\"], \"defabch\") == -1\n    assert min_swaps_to_target([\"abc\", \"def\", \"ghi\"], \"abcdefgh\") == -1\n    assert min_swaps_to_target([\"abc\", \"def\", \"ghi\"], \"abcdef\") == 3\n    assert min_swaps_to_target([\"abc\", \"def\", \"ghi\"], \"defabc\") == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000008", "row_id": 8, "seed_ids": ["1516", "417", "2266"], "mode": "leetcode", "instruction": "Given a list of strings `words` and a string `target`, you need to find the minimum number of adjacent swaps required to arrange the strings in `words` such that they form the `target` string. Each string in `words` can only be used once, and the order of the strings in `words` must match the order of the strings in `target`. A swap is defined as exchanging the positions of two adjacent strings in the list. Please return the minimum number of swaps required to achieve the `target` string. If it is not possible to arrange the strings in `words` to form the `target` string, return `-1`.\n\nFor example, given `words = [\"abc\",\"def\",\"ghi\"]` and `target = \"defabcghi\"`, the minimum number of swaps required is `2`. First, swap \"abc\" and \"def\", then swap \"def\" and \"ghi\". Therefore, the answer is `2`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` consisting of lowercase English letters and an integer `k`. A **substring** of `s` is considered **balanced** if the frequency of each letter in the substring is at most `k`. Return the **maximum length** of a balanced substring of `s`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_balanced_substring_length(s: str, k: int) -> int:\n    \"\"\"\n    Returns the maximum length of a balanced substring in s where each letter's frequency is at most k.\n    \"\"\"\n    max_length = 0\n    start = 0\n    frequency = {}\n    \n    for end in range(len(s)):\n        frequency[s[end]] = frequency.get(s[end], 0) + 1\n        \n        while min(frequency.values()) > k:\n            frequency[s[start]] -= 1\n            if frequency[s[start]] == 0:\n                del frequency[s[start]]\n            start += 1\n        \n        max_length = max(max_length, end - start + 1)\n    \n    return max_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_max_balanced_substring_length():\n    assert max_balanced_substring_length(\"aacaba\", 2) == 3\n    assert max_balanced_substring_length(\"abcaba\", 2) == 5\n    assert max_balanced_substring_length(\"bbTickskrqZZttsbr\", 5) == 7\n    assert max_balanced_substring_length(\"bbbb\", 1) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000009", "row_id": 9, "seed_ids": ["1530", "1550", "2103"], "mode": "leetcode", "instruction": "You are given a string `s` consisting of lowercase English letters and an integer `k`. A **substring** of `s` is considered **balanced** if the frequency of each letter in the substring is at most `k`. Return the **maximum length** of a balanced substring of `s`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a data structure to manage a collection of intervals with the following operations:\n\n- `addInterval(start, end)`: Add a new interval `[start, end]` to the collection.\n- `mergeOverlappingIntervals()`: Merge all overlapping intervals in the collection and return the merged intervals.\n- `removeInterval(start, end)`: Remove the interval `[start, end]` from the collection if it exists.\n- `getIntervals()`: Return the current collection of intervals.\n\nImplement the `IntervalManager` class:\n\n- `IntervalManager()`: Initializes the interval manager.\n- `void addInterval(int start, int end)`: Adds a new interval `[start, end]` to the collection. Ensure no duplicate intervals are added.\n- `List<int[]> mergeOverlappingIntervals()`: Merges all overlapping intervals in the collection and returns the merged intervals as a list of `[start, end]` pairs.\n- `void removeInterval(int start, int end)`: Removes the interval `[start, end]` from the collection if it exists.\n- `List<int[]> getIntervals()`: Returns the current collection of intervals as a list of `[start, end]` pairs.\n\n**Note**: Intervals are represented as `[start, end]` where `start` and `end` are inclusive. The intervals are sorted by their start time."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\n\nclass IntervalManager:\n    def __init__(self):\n        self.intervals = []\n\n    def addInterval(self, start: int, end: int) -> None:\n        intervals = self.intervals\n        if not intervals or intervals[-1][1] < start - 1:\n            intervals.append([start, end])\n        elif intervals[0][0] > end + 1:\n            intervals.insert(0, [start, end])\n        else:\n            for i, (s, e) in enumerate(intervals):\n                if s > end:\n                    intervals.insert(i, [start, end])\n                    break\n                elif e >= start:\n                    intervals[i][0] = min(s, start)\n                    intervals[i][1] = max(e, end)\n                    break\n            else:\n                intervals.append([start, end])\n        \n    def mergeOverlappingIntervals(self) -> List[int[]]:\n        if not self.intervals:\n            return []\n        merged = [self.intervals[0]]\n        for i in range(1, len(self.intervals)):\n            current = self.intervals[i]\n            last = merged[-1]\n            if current[0] <= last[1] + 1:\n                merged[-1][1] = max(last[1], current[1])\n            else:\n                merged.append(current)\n        return merged\n\n    def removeInterval(self, start: int, end: int) -> None:\n        intervals = self.intervals\n        self.intervals = [interval for interval in intervals if interval[1] < start or interval[0] > end]\n\n    def getIntervals(self) -> List[int[]]:\n        return self.intervals\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_interval_manager():\n    interval_manager = IntervalManager()\n    interval_manager.addInterval(1, 3)\n    interval_manager.addInterval(2, 6)\n    interval_manager.addInterval(8, 10)\n    interval_manager.addInterval(15, 18)\n    assert interval_manager.getIntervals() == [[1, 6], [8, 10], [15, 18]]\n\n    merged_intervals = interval_manager.mergeOverlappingIntervals()\n    assert merged_intervals == [[1, 6], [8, 10], [15, 18]], f\"Expected [[1, 6], [8, 10], [15, 18]] but got {merged_intervals}\"\n\n    interval_manager.removeInterval(3, 6)\n    assert interval_manager.getIntervals() == [[8, 10], [15, 18]], f\"Expected [[8, 10], [15, 18]] but got {interval_manager.getIntervals()}\"\n\n    interval_manager.addInterval(10, 11)\n    assert interval_manager.getIntervals() == [[8, 11], [15, 18]], f\"Expected [[8, 11], [15, 18]] but got {interval_manager.getIntervals()}\"\n\n    merged_intervals = interval_manager.mergeOverlappingIntervals()\n    assert merged_intervals == [[8, 11], [15, 18]], f\"Expected [[8, 11], [15, 18]] but got {merged_intervals}\"\n\n    interval_manager.addInterval(9, 12)\n    assert interval_manager.getIntervals() == [[8, 12], [15, 18]], f\"Expected [[8, 12], [15, 18]] but got {interval_manager.getIntervals()}\"\n\n    merged_intervals = interval_manager.mergeOverlappingIntervals()\n    assert merged_intervals == [[8, 18]], f\"Expected [[8, 18]] but got {merged_intervals}\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000010", "row_id": 10, "seed_ids": ["689", "2075", "1670"], "mode": "leetcode", "instruction": "Design a data structure to manage a collection of intervals with the following operations:\n\n- `addInterval(start, end)`: Add a new interval `[start, end]` to the collection.\n- `mergeOverlappingIntervals()`: Merge all overlapping intervals in the collection and return the merged intervals.\n- `removeInterval(start, end)`: Remove the interval `[start, end]` from the collection if it exists.\n- `getIntervals()`: Return the current collection of intervals.\n\nImplement the `IntervalManager` class:\n\n- `IntervalManager()`: Initializes the interval manager.\n- `void addInterval(int start, int end)`: Adds a new interval `[start, end]` to the collection. Ensure no duplicate intervals are added.\n- `List<int[]> mergeOverlappingIntervals()`: Merges all overlapping intervals in the collection and returns the merged intervals as a list of `[start, end]` pairs.\n- `void removeInterval(int start, int end)`: Removes the interval `[start, end]` from the collection if it exists.\n- `List<int[]> getIntervals()`: Returns the current collection of intervals as a list of `[start, end]` pairs.\n\n**Note**: Intervals are represented as `[start, end]` where `start` and `end` are inclusive. The intervals are sorted by their start time."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a matrix `grid` of size `m x n` containing non-negative integers, and a target value `target`, you need to determine if there exists a path from the top-left corner to the bottom-right corner such that the sum of the values along the path is exactly `target`. You can only move rightward or downward at any point in time. If such a path exists, return `true`; otherwise, return `false`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef has_path_with_target(grid, target):\n    \"\"\"\n    Determines if there exists a path from the top-left corner to the bottom-right corner\n    such that the sum of the values along the path is exactly `target`.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    return dfs(grid, target, 0, 0, m, n)\n\ndef dfs(grid, target, i, j, m, n):\n    if i == m or j == n or grid[i][j] == -1:\n        return False\n    if i == m - 1 and j == n - 1 and grid[i][j] == target:\n        return True\n    temp = grid[i][j]\n    grid[i][j] = -1\n    found = dfs(grid, target - temp, i + 1, j, m, n) or dfs(grid, target - temp, i, j + 1, m, n)\n    grid[i][j] = temp\n    return found\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import has_path_with_target\n\ndef test_has_path_with_target():\n    grid1 = [[1, 3, 2], [1, 5, 1], [4, 2, 1]]\n    target1 = 8\n    assert has_path_with_target(grid1, target1) == True\n\n    grid2 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target2 = 20\n    assert has_path_with_target(grid2, target2) == True\n\n    grid3 = [[1, 3, 1], [1, 5, 1], [4, 2, 1]]\n    target3 = 13\n    assert has_path_with_target(grid3, target3) == False\n\n    grid4 = [[1, 5, 1], [1, -2, 1], [4, 2, -1]]\n    target4 = 7\n    assert has_path_with_target(grid4, target4) == False\n\n    grid5 = [[1, 3], [2, 2], [3, 1], [4, 0]]\n    target5 = 10\n    assert has_path_with_target(grid5, target5) == True\n\n    grid6 = [[1, 3, 2], [1, -1, 1], [4, -1, 1]]\n    target6 = 7\n    assert has_path_with_target(grid6, target6) == True\n\n    grid7 = [[2, 3, 1], [1, 4, 1], [1, 1, 1]]\n    target7 = 15\n    assert has_path_with_target(grid7, target7) == False\n\n    grid8 = [[3, 9, 4]]\n    target8 = 11\n    assert has_path_with_target(grid8, target8) == True\n\n    grid9 = [[1, 2]]\n    target9 = 3\n    assert has_path_with_target(grid9, target9) == True\n\n    grid10 = [[1]]\n    target10 = 1\n    assert has_path_with_target(grid10, target10) == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000011", "row_id": 11, "seed_ids": ["1427", "1300", "174"], "mode": "leetcode", "instruction": "Given a matrix `grid` of size `m x n` containing non-negative integers, and a target value `target`, you need to determine if there exists a path from the top-left corner to the bottom-right corner such that the sum of the values along the path is exactly `target`. You can only move rightward or downward at any point in time. If such a path exists, return `true`; otherwise, return `false`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a function `maxProfitWithTransactionFee` that calculates the maximum profit you can achieve from trading a stock given an array of daily prices and a transaction fee. You can complete as many buy-sell transactions as you like, but you need to pay the transaction fee for each transaction. A transaction consists of buying and then selling one share of the stock. You cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n### Function Signature\n```python\ndef maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    pass\n```\n\n### Constraints\n- `1 <= prices.length <= 5 * 10^4`\n- `0 <= prices[i] <= 10^5`\n- `0 <= fee < 10^5`"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\n\ndef maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    \"\"\"\n    Returns the maximum profit that can be achieved from trading a stock given daily prices and a transaction fee.\n    \"\"\"\n    n = len(prices)\n    if n < 2:\n        return 0\n    \n    # Initialize the states\n    # hold: the maximum profit when holding a stock\n    # not_hold: the maximum profit when not holding a stock\n    hold, not_hold = -prices[0], 0\n    \n    for i in range(1, n):\n        # Update the states\n        hold = max(hold, not_hold - prices[i])\n        not_hold = max(not_hold, hold + prices[i] - fee)\n    \n    return not_hold\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom typing import List\nfrom solution import maxProfitWithTransactionFee\n\ndef test_maxProfitWithTransactionFee():\n    assert maxProfitWithTransactionFee([1, 3, 2, 8, 4, 9], 2) == 8\n    assert maxProfitWithTransactionFee([1, 3, 7, 5, 10, 3], 3) == 6\n    assert maxProfitWithTransactionFee([5, 2, 6, 3, 1, 4], 0) == 4\n    assert maxProfitWithTransactionFee([1], 2) == 0\n    assert maxProfitWithTransactionFee([1, 3, 2, 8, 4, 9], 0) == 10\n    assert maxProfitWithTransactionFee([1, 3, 7, 5, 10, 3], 2) == 5\n\n# Test with an empty prices list\nassert maxProfitWithTransactionFee([], 2) == 0\n\n# Test with a single element in prices\nassert maxProfitWithTransactionFee([100], 2) == 0\n\n# Test with a large number of prices\nlarge_prices = list(range(1, 50000))\nassert maxProfitWithTransactionFee(large_prices, 10) == 0  # No profit if the transaction fee is greater than the price difference\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000012", "row_id": 12, "seed_ids": ["1476", "2214", "1720"], "mode": "leetcode", "instruction": "Design a function `maxProfitWithTransactionFee` that calculates the maximum profit you can achieve from trading a stock given an array of daily prices and a transaction fee. You can complete as many buy-sell transactions as you like, but you need to pay the transaction fee for each transaction. A transaction consists of buying and then selling one share of the stock. You cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n### Function Signature\n```python\ndef maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    pass\n```\n\n### Constraints\n- `1 <= prices.length <= 5 * 10^4`\n- `0 <= prices[i] <= 10^5`\n- `0 <= fee < 10^5`"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary tree, return the sum of all left leaves. A leaf is a node with no children, and a left leaf is a leaf that is the left child of its parent. If there are no left leaves, return 0."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef sum_of_left_leaves(root: TreeNode) -> int:\n    \"\"\"\n    Returns the sum of all left leaves in the binary tree.\n    \"\"\"\n    if not root:\n        return 0\n\n    def dfs(node, is_left):\n        if not node.left and not node.right:\n            return node.val if is_left else 0\n        left_sum = 0\n        if node.left:\n            left_sum += dfs(node.left, True)\n        if node.right:\n            left_sum += dfs(node.right, False)\n        return left_sum\n\n    return dfs(root, False)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef create_tree(*values):\n    def build_tree(nodes, index=1):\n        if not nodes or index > len(nodes) or not nodes[index-1]:\n            return None\n        root = TreeNode(nodes[index-1])\n        root.left = build_tree(nodes, 2*index)\n        root.right = build_tree(nodes, 2*index+1)\n        return root\n    return build_tree(values)\n\nfrom solution import sum_of_left_leaves\n\ndef test_sum_of_left_leaves():\n    assert sum_of_left_leaves(create_tree(3, 9, 20, None, None, 15, 7)) == 24\n\ndef test_sum_of_left_leaves_with_no_left_leaf():\n    assert sum_of_left_leaves(create_tree(1, 2, 3, 4, 5)) == 0\n\ndef test_sum_of_left_leaves_single_node():\n    assert sum_of_left_leaves(create_tree(1)) == 0\n\ndef test_sum_of_left_leaves_complex_tree():\n    assert sum_of_left_leaves(create_tree(1, 2, 3, 4, 5, 6, 7, None, None, 8)) == 22\n\ndef test_sum_of_left_leaves_empty_tree():\n    assert sum_of_left_leaves(None) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000013", "row_id": 13, "seed_ids": ["82", "2008", "1690"], "mode": "leetcode", "instruction": "Given a binary tree, return the sum of all left leaves. A leaf is a node with no children, and a left leaf is a leaf that is the left child of its parent. If there are no left leaves, return 0."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given the root of a binary tree, return the sum of values of all nodes that have an odd-valued parent. If there are no such nodes, return 0. A parent node is considered odd if its value is an odd number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef sum_odd_parent_nodes(root):\n    \"\"\"\n    Returns the sum of values of all nodes that have an odd-valued parent.\n    If there are no such nodes, returns 0.\n    \"\"\"\n    def dfs(node, is_odd):\n        if node is None:\n            return 0\n        if is_odd and node.left:\n            left_sum = node.left.val\n        else:\n            left_sum = dfs(node.left, node.val % 2 != 0)\n        if is_odd and node.right:\n            right_sum = node.right.val\n        else:\n            right_sum = dfs(node.right, node.val % 2 != 0)\n        return left_sum + right_sum\n    \n    return dfs(root, root.val % 2 != 0)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import TreeNode, sum_odd_parent_nodes\n\ndef test_sum_odd_parent_nodes():\n    # Creating a simple tree\n    #       5\n    #      / \\\n    #     3   7\n    node5 = TreeNode(5)\n    node3 = TreeNode(3)\n    node7 = TreeNode(7)\n    node5.left = node3\n    node5.right = node7\n    \n    assert sum_odd_parent_nodes(node5) == 3  # Only node3 has an odd parent (node5)\n\ndef test_sum_odd_parent_nodes_no_affected_nodes():\n    # Creating a simple tree\n    #       2\n    #      / \\\n    #     4   6\n    node2 = TreeNode(2)\n    node4 = TreeNode(4)\n    node6 = TreeNode(6)\n    node2.left = node4\n    node2.right = node6\n    \n    assert sum_odd_parent_nodes(node2) == 0  # No nodes have an odd parent\n\ndef test_sum_odd_parent_nodes Complex_case():\n    # Creating a tree\n    #       8\n    #      / \\\n    #     3   5\n    #    / \\ / \\\n    #   2  9 7  2\n    node8 = TreeNode(8)\n    node3 = TreeNode(3)\n    node5 = TreeNode(5)\n    node8.left = node3\n    node8.right = node5\n    node2 = TreeNode(2)\n    node9 = TreeNode(9)\n    node7 = TreeNode(7)\n    node22 = TreeNode(2)\n    node3.left = node2\n    node3.right = node9\n    node5.left = node7\n    node5.right = node22\n    \n    assert sum_odd_parent_nodes(node8) == 11  # Nodes 9 and 7 have odd parent (5) and (3) respectively\n\ndef test_sum_odd_parent_nodes_single_node():\n    # Creating a tree with a single node\n    node1 = TreeNode(1)\n    assert sum_odd_parent_nodes(node1) == 0  # No parent for the single node\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000014", "row_id": 14, "seed_ids": ["2607", "1880", "1315"], "mode": "leetcode", "instruction": "Given the root of a binary tree, return the sum of values of all nodes that have an odd-valued parent. If there are no such nodes, return 0. A parent node is considered odd if its value is an odd number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given two strings `text1` and `text2`, both consisting of lowercase English letters. Your task is to find the length of the longest **common subsequence** (LCS) between the two strings. Additionally, you are provided with a **mask** string `mask`, where each character is either `'0'` or `'1'`. You need to modify the LCS such that each character in the LCS is replaced by the corresponding character in `mask` if the corresponding position in `mask` is `'1'`, and kept as is if the corresponding position in `mask` is `'0'`. Return the modified LCS as a string.\n\n**Note**: A **common subsequence** is a sequence that can be derived from both strings by deleting some characters without changing the order of the remaining characters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_common_subsequence_with_mask(text1, text2, mask):\n    \"\"\"\n    Finds the longest common subsequence between text1 and text2, then modifies it\n    based on the mask provided.\n    \"\"\"\n    m, n = len(text1), len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if text1[i - 1] == text2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    lcs = [''] * dp[-1][-1]\n    i, j = m, n\n    while i > 0 and j > 0:\n        if text1[i - 1] == text2[j - 1]:\n            lcs[dp[i][j] - 1] = text1[i - 1]\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    modified_lcs = ''\n    mask_idx = 0\n    for char in lcs:\n        if mask_idx < len(mask):\n            modified_lcs += mask[mask_idx] if mask[mask_idx] == '1' else char\n        else:\n            modified_lcs += char\n        mask_idx += 1\n    return modified_lcs\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_longest_common_subsequence_with_mask():\n    assert longest_common_subsequence_with_mask(\"abcde\", \"ace\", \"01010\") == \"ace\"\n    assert longest_common_subsequence_with_mask(\"abc\", \"abc\", \"000\") == \"abc\"\n    assert longest_common_subsequence_with_mask(\"abc\", \"def\", \"11\") == \"bc\"\n    assert longest_common_subsequence_with_mask(\"abcd\", \"ace\", \"0001\") == \"d\"\n\ndef test_longest_common_subsequence_with_mask_empty_mask():\n    assert longest_common_subsequence_with_mask(\"abc\", \"abc\", \"\") == \"abc\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000015", "row_id": 15, "seed_ids": ["2500", "1736", "1898"], "mode": "leetcode", "instruction": "You are given two strings `text1` and `text2`, both consisting of lowercase English letters. Your task is to find the length of the longest **common subsequence** (LCS) between the two strings. Additionally, you are provided with a **mask** string `mask`, where each character is either `'0'` or `'1'`. You need to modify the LCS such that each character in the LCS is replaced by the corresponding character in `mask` if the corresponding position in `mask` is `'1'`, and kept as is if the corresponding position in `mask` is `'0'`. Return the modified LCS as a string.\n\n**Note**: A **common subsequence** is a sequence that can be derived from both strings by deleting some characters without changing the order of the remaining characters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a grid of size `m x n` where each cell can either be `0` (land) or `1` (water). You can change any number of `0`s to `1`s to form one or more islands. An island is a maximal 4-directionally connected group of `1`s. You want to maximize the number of islands in the grid. What is the maximum number of islands you can form?"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_islands(grid):\n    \"\"\"\n    Returns the maximum number of islands that can be formed in the grid.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    visited = [[False] * n for _ in range(m)]\n    \n    def dfs(x, y):\n        if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == 0 or visited[x][y]:\n            return\n        visited[x][y] = True\n        dfs(x + 1, y)\n        dfs(x - 1, y)\n        dfs(x, y + 1)\n        dfs(x, y - 1)\n    \n    max_islands = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1 and not visited[i][j]:\n                dfs(i, j)\n                max_islands += 1\n    return max_islands\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_max_islands():\n    grid = [\n        [1, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1],\n        [1, 0, 1, 0, 1],\n        [0, 0, 0, 0, 0],\n        [1, 0, 1, 0, 1]\n    ]\n    assert max_islands(grid) == 7\n\ndef test_max_islands_with_single_island():\n    grid = [\n        [1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1]\n    ]\n    assert max_islands(grid) == 1\n\ndef test_max_islands_with_no_islands():\n    grid = [\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0]\n    ]\n    assert max_islands(grid) == 0\n\ndef test_max_islands_with_separate_islands():\n    grid = [\n        [1, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1],\n        [1, 1, 1, 0, 1],\n        [0, 0, 0, 0, 0],\n        [1, 0, 1, 0, 1]\n    ]\n    assert max_islands(grid) == 9\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000016", "row_id": 16, "seed_ids": ["1168", "1462", "1727"], "mode": "leetcode", "instruction": "You are given a grid of size `m x n` where each cell can either be `0` (land) or `1` (water). You can change any number of `0`s to `1`s to form one or more islands. An island is a maximal 4-directionally connected group of `1`s. You want to maximize the number of islands in the grid. What is the maximum number of islands you can form?"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an array of integers `nums` and an integer `k`, return the maximum number of consecutive 1's in the array if you can flip at most `k` 0's to 1's. The array length is at most 100,000, and `k` is between 0 and the length of the array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_consecutive_ones(nums, k):\n    \"\"\"\n    Returns the maximum number of consecutive 1's in the array if you can flip at most k 0's to 1's.\n    \"\"\"\n    left = 0\n    max_ones = 0\n    zero_count = 0\n    \n    for right in range(len(nums)):\n        if nums[right] == 0:\n            zero_count += 1\n        \n        while zero_count > k:\n            if nums[left] == 0:\n                zero_count -= 1\n            left += 1\n        \n        max_ones = max(max_ones, right - left + 1)\n    \n    return max_ones\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_max_consecutive_ones():\n    assert max_consecutive_ones([1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], 2) == 6\n    assert max_consecutive_ones([0, 0, 1, 1, 1, 0, 0], 0) == 3\n    assert max_consecutive_ones([1, 1, 1, 1], 2) == 4\n    assert max_consecutive_ones([0, 0, 0, 1], 1) == 4\n    assert max_consecutive_ones([0, 0, 0, 0], 4) == 4\n    assert max_consecutive_ones([1, 0, 0, 1, 1, 0, 1], 2) == 6\n    assert max_consecutive_ones([0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1], 3) == 9\n\ntest_max_consecutive_ones()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000017", "row_id": 17, "seed_ids": ["35", "1979", "1431"], "mode": "leetcode", "instruction": "Given an array of integers `nums` and an integer `k`, return the maximum number of consecutive 1's in the array if you can flip at most `k` 0's to 1's. The array length is at most 100,000, and `k` is between 0 and the length of the array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a **0-indexed** integer array `nums` of length `n`. You are allowed to perform the following operation on the array any number of times:\n\n- Choose an index `i` such that `0 <= i < n` and set `nums[i]` to `0`.\n\nYou are also given a **0-indexed** array `costs` of the same length, where `costs[i]` represents the cost of setting `nums[i]` to `0`. \n\nYour goal is to make all elements in `nums` equal to `0` with the minimum possible cost. \n\nReturn _the minimum cost to achieve this_."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_cost(nums, costs):\n    \"\"\"\n    Returns the minimum cost to set all elements in nums to 0.\n    \"\"\"\n    max_num = max(nums)\n    return sum(costs[i] for i in range(len(nums)) if nums[i] == max_num)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_cost():\n    assert min_cost([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == 10  # Setting all to 1 has the minimum cost\n\ndef test_min_cost_with_zeros():\n    assert min_cost([0, 0, 0, 0], [1, 2, 3, 4]) == 0  # No cost since nums are already zeroes\n\ndef test_min_cost_all_same():\n    assert min_cost([5, 5, 5, 5], [1, 2, 3, 4]) == 4  # Setting 5 to 0 with the least cost\n\ndef test_min_cost_mixed_values():\n    assert min_cost([2, 5, 3, 7, 1], [4, 5, 2, 3, 1]) == 5  # Setting 1 to 0 has the least cost\n\ndef test_min_cost_single_element():\n    assert min_cost([1], [10]) == 10  # Only one element, setting it to 0 incurs the full cost\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000018", "row_id": 18, "seed_ids": ["2482", "2440", "1887"], "mode": "leetcode", "instruction": "You are given a **0-indexed** integer array `nums` of length `n`. You are allowed to perform the following operation on the array any number of times:\n\n- Choose an index `i` such that `0 <= i < n` and set `nums[i]` to `0`.\n\nYou are also given a **0-indexed** array `costs` of the same length, where `costs[i]` represents the cost of setting `nums[i]` to `0`. \n\nYour goal is to make all elements in `nums` equal to `0` with the minimum possible cost. \n\nReturn _the minimum cost to achieve this_."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically smallest substring that can be formed by rearranging any number of characters within the string. A substring is defined as a contiguous sequence of characters within a string.\n\nReturn the lexicographically smallest substring found. If the string is empty or consists of a single character, return the string itself."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef smallest_substring(s: str) -> str:\n    \"\"\"\n    Returns the lexicographically smallest substring that can be formed by rearranging any number of characters within the string.\n    \"\"\"\n    if len(s) <= 1:\n        return s\n    # Convert string to list for mutations\n    chars = list(s)\n    n = len(chars)\n    # Sort the string to find the smallest character\n    min_char = min(chars)\n    start = None\n    # Find starting index of the smallest character\n    for i in range(n):\n        if chars[i] == min_char:\n            start = i\n            break\n    # Find the ending index of the smallest character\n    for i in range(start, n):\n        if chars[i] > min_char:\n            end = i\n            break\n    else:\n        end = n\n    # Form the smallest substring by taking all characters from the sorted string up to the first occurrence of min_char\n    smallest_sub = ''.join(sorted(s[:end]))\n    return smallest_sub\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import smallest_substring\n\ndef test_smallest_substring_single_char():\n    assert smallest_substring(\"a\") == \"a\"\n\ndef test_smallest_substring_short_string():\n    assert smallest_substring(\"abc\") == \"a\"\n\ndef test_smallest_substring_mixed_chars():\n    assert smallest_substring(\"cbabc\") == \"abc\"\n\ndef test_smallest_substring_empty_string():\n    assert smallest_substring(\"\") == \"\"\n\ndef test_smallest_substring_large_string():\n    s = \"zzzazzzzz\"\n    assert smallest_substring(s) == \"a\"\n\ndef test_smallest_substring_with_duplicates():\n    s = \"bacdbcd\"\n    assert smallest_substring(s) == \"bcd\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000019", "row_id": 19, "seed_ids": ["2432", "2215", "554"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically smallest substring that can be formed by rearranging any number of characters within the string. A substring is defined as a contiguous sequence of characters within a string.\n\nReturn the lexicographically smallest substring found. If the string is empty or consists of a single character, return the string itself."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` (a string consisting only of '0's and '1's), you are allowed to perform the following operation any number of times: choose any two adjacent characters and flip them (i.e., change '0' to '1' and '1' to '0'). Your goal is to make the string as long as possible such that it does not contain the substring \"010\". Return the maximum length of the string you can achieve.\n\n**Example:**\n\n```python\nInput: s = \"110\"\nOutput: 3\nExplanation: We can flip the last two characters to get \"111\", which does not contain \"010\" as a substring.\n```\n\n**Constraints:**\n\n- `1 <= s.length <= 1000`\n- `s` consists only of '0's and '1's."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_length_without_010(s: str) -> int:\n    \"\"\"\n    Returns the maximum length of the string s such that it does not contain the substring \"010\".\n    \"\"\"\n    dp = [1] * 3\n    for c in s:\n        if c == '0':\n            dp[0], dp[1] = max(dp[1], dp[2]), dp[0] + 1\n        else:\n            dp[0], dp[1] = max(dp[0], dp[2]), dp[1] + 1\n        dp[2] = max(dp[0], dp[1], dp[2])\n    return dp[2]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_max_length_without_010():\n    assert max_length_without_010(\"110\") == 3\n    assert max_length_without_010(\"0001010111\") == 9\n    assert max_length_without_010(\"1010101010\") == 5\n    assert max_length_without_010(\"1111111111\") == 10\n    assert max_length_without_010(\"0101010101\") == 5\n    assert max_length_without_010(\"1110101110\") == 8\n    assert max_length_without_010(\"000\") == 3\n    assert max_length_without_010(\"1111\") == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000020", "row_id": 20, "seed_ids": ["803", "1422", "1678"], "mode": "leetcode", "instruction": "Given a binary string `s` (a string consisting only of '0's and '1's), you are allowed to perform the following operation any number of times: choose any two adjacent characters and flip them (i.e., change '0' to '1' and '1' to '0'). Your goal is to make the string as long as possible such that it does not contain the substring \"010\". Return the maximum length of the string you can achieve.\n\n**Example:**\n\n```python\nInput: s = \"110\"\nOutput: 3\nExplanation: We can flip the last two characters to get \"111\", which does not contain \"010\" as a substring.\n```\n\n**Constraints:**\n\n- `1 <= s.length <= 1000`\n- `s` consists only of '0's and '1's."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary search tree (BST) and an integer `k`, write a function to find the `k`th smallest element in the tree. Ensure your solution does not modify the tree."}, {"role": "assistant", "content": "<|Solution Begin|>\n\nTo find the `k`th smallest element in a given binary search tree (BST) without modifying the tree, we can perform an in-order traversal. In-order traversal of a BST processes nodes in ascending order. This can be accomplished using either recursion or an iterative approach with a stack. Here, we'll use an iterative approach.\n\n```python\nclass TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef kth_smallest(root, k):\n    \"\"\"\n    Find the kth smallest element in a Binary Search Tree without modifying the tree.\n    \"\"\"\n    stack = []\n    current = root\n\n    while current or stack:\n        # Reach the leftmost node of the current subtree\n        while current:\n            stack.append(current)\n            current = current.left\n        \n        # Current must be None at this point\n        current = stack.pop()\n        k -= 1\n        \n        # If k becomes zero, we've found the kth smallest element\n        if k == 0:\n            return current.value\n        \n        # Move to the right subtree\n        current = current.right\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef setup_tree():\n    \"\"\"\n    Helper function to create a test BST.\n    \"\"\"\n    three = TreeNode(3)\n    one = TreeNode(1)\n    four = TreeNode(4)\n    two = TreeNode(2, one, three)\n    five = TreeNode(5)\n    root = TreeNode(4, two, five, right=TreeNode(6, right=TreeNode(7)))\n    return root\n\ndef test_kth_smallest():\n    \"\"\"\n    Test for the kth smallest element function.\n    \"\"\"\n    root = setup_tree()\n    assert kth_smallest(root, 1) == 1\n    assert kth_smallest(root, 2) == 2\n    assert kth_smallest(root, 3) == 3\n    assert kth_smallest(root, 4) == 4\n    assert kth_smallest(root, 5) == 5\n    assert kth_smallest(root, 6) == 6\n    assert kth_smallest(root, 7) == 7\n\ndef test_single_node_tree():\n    \"\"\"\n    Test for a tree with a single node.\n    \"\"\"\n    root = TreeNode(5)\n    assert kth_smallest(root, 1) == 5\n\n# Adding further test cases to edge cases\ndef test_no_left_subtree():\n    \"\"\"\n    Test for a tree where the left subtree is empty.\n    \"\"\"\n    root = TreeNode(4, right=TreeNode(6, TreeNode(7)))\n    assert kth_smallest(root, 1) == 4\n    assert kth_smallest(root, 2) == 6\n    assert kth_smallest(root, 3) == 7\n\n# Run tests\ntest_kth_smallest()\ntest_single_node_tree()\ntest_no_left_subtree()\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000021", "row_id": 21, "seed_ids": ["61", "79", "623"], "mode": "leetcode", "instruction": "Given a binary search tree (BST) and an integer `k`, write a function to find the `k`th smallest element in the tree. Ensure your solution does not modify the tree."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, return the **length** of the longest **palindromic** substring in `s`. A **palindromic** string is a string that reads the same backward as forward."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_palindromic_substring(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest palindromic substring in s.\n    \"\"\"\n    if not s:\n        return 0\n\n    n = len(s)\n    dp = [[False] * n for _ in range(n)]\n    start, max_length = 0, 1\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = True\n\n    # Check for sub-strings of length 2\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = True\n            start = i\n            max_length = 2\n\n    # Check for lengths greater than 2\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j] and dp[i + 1][j - 1]:\n                dp[i][j] = True\n                start = i\n                max_length = length\n\n    return max_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import longest_palindromic_substring\n\ndef test_longest_palindrome_single_character():\n    assert longest_palindromic_substring(\"a\") == 1\n\ndef test_longest_palindrome_short():\n    assert longest_palindromic_substring(\"aba\") == 3\n    assert longest_palindromic_substring(\"ab\") == 1\n\ndef test_longest_palindrome_middle_case():\n    assert longest_palindromic_substring(\"saippuakauppias\") == 16\n\ndef test_longest_palindrome_with_multiple_palindromes():\n    assert longest_palindromic_substring(\"bananas\") == 7\n    assert longest_palindromic_substring(\"babad\") == 3\n\ndef test_longest_palindrome_empty_string():\n    assert longest_palindromic_substring(\"\") == 0\n\ndef test_longest_palindrome_whole_string_palindrome():\n    assert longest_palindromic_substring(\"aaaaa\") == 5\n\ndef test_longest_palindrome_overlap():\n    assert longest_palindromic_substring(\"abcba\") == 5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000022", "row_id": 22, "seed_ids": ["201", "513", "1941"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, return the **length** of the longest **palindromic** substring in `s`. A **palindromic** string is a string that reads the same backward as forward."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary search tree (BST) and a node value `target`, return the value of the closest leaf node to the target. A leaf node is a node with no children. The distance between two nodes is defined as the number of edges on the path connecting them. If there are multiple leaf nodes equally close to the target, return the value of any one of them."}, {"role": "assistant", "content": "<|Solution Begin|>\n\nTo solve this problem, we need to traverse the BST and find the closest leaf node to the target. A leaf node is a node that has no children. The solution involves performing a BFS (Breadth-First Search) traversal starting from the root and tracking the distance to the target node. We stop at the first leaf node we encounter at the shallowest level that is closest to the target.\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef findClosestLeaf(root: TreeNode, target: int) -> int:\n    from collections import deque\n    \n    if not root:\n        return None\n    \n    queue = deque([root])\n    target_node = None\n    level = 0\n    \n    while queue:\n        level_size = len(queue)\n        \n        for _ in range(level_size):\n            node = queue.popleft()\n            \n            if node.val == target:\n                target_node = node\n                break\n            \n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        \n        if target_node:\n            break\n    \n    # When target_node is found, perform a BFS to find the closest leaf node\n    if target_node:\n        queue = deque([target_node])\n        visited = set([target_node])\n        \n        while queue:\n            level_size = len(queue)\n            \n            for _ in range(level_size):\n                node = queue.popleft()\n                \n                if not node.left and not node.right:  # node is a leaf\n                    return node.val\n                \n                if node.left and node.left not in visited:\n                    queue.append(node.left)\n                    visited.add(node.left)\n                \n                if node.right and node.right not in visited:\n                    queue.append(node.right)\n                    visited.add(node.right)\n\n# Example usage\n# Constructing a simple BST for testing\n#         3\n#        / \\\n#       1   4\n#          / \\\n#         2   5\nroot = TreeNode(3)\nroot.left = TreeNode(1)\nroot.right = TreeNode(4, TreeNode(2), TreeNode(5))\n\n# Find the closest leaf node to the target value 3\nprint(findClosestLeaf(root, 3))  # Output: 4\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import findClosestLeaf\n\ndef test_closest_leaf_negative():\n    # Constructing a BST for the test case\n    #         3\n    #        / \\\n    #       1   4\n    #          / \\\n    #         2   5\n    root = TreeNode(3)\n    root.left = TreeNode(1)\n    root.right = TreeNode(4, TreeNode(2), TreeNode(5))\n\n    assert findClosestLeaf(root, 3) == 4\n    assert findClosestLeaf(root, 2) == 2\n    assert findClosestLeaf(root, 4) == 5\n\ndef test_closest_leaf_edge_cases():\n    # Empty tree case\n    assert findClosestLeaf(None, 3) is None\n    # One node tree case\n    root = TreeNode(3)\n    assert findClosestLeaf(root, 3) == 3\n\ndef test_closest_leaf_positive():\n    # Constructing a BST for the test case\n    #          1\n    #           \\\n    #            2\n    #             \\\n    #              3\n    root = TreeNode(1, right=TreeNode(2, right=TreeNode(3)))\n\n    assert findClosestLeaf(root, 1) == 3\n    assert findClosestLeaf(root, 3) == 3\n\ndef test_closest_leaf_multiple_targets():\n    # Constructing a BST for the test case\n    #         5\n    #        / \\\n    #       3   6\n    #      / \\ / \\\n    #     2  4 7  8\n    root = TreeNode(5, TreeNode(3, TreeNode(2), TreeNode(4)), TreeNode(6, TreeNode(7), TreeNode(8)))\n\n    assert findClosestLeaf(root, 6) in [7, 8]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000023", "row_id": 23, "seed_ids": ["2529", "155", "1650"], "mode": "leetcode", "instruction": "Given a binary search tree (BST) and a node value `target`, return the value of the closest leaf node to the target. A leaf node is a node with no children. The distance between two nodes is defined as the number of edges on the path connecting them. If there are multiple leaf nodes equally close to the target, return the value of any one of them."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary search tree (BST) and an integer `k`. Your task is to find the `k`-th smallest element in the BST. The BST is not necessarily balanced. Return the value of the `k`-th smallest element.\n\nFor example, given the BST with the following structure:\n\n```\n    5\n   / \\\n  3   6\n / \\\n2   4\n```\n\nIf `k = 3`, the output should be `3` because the elements in ascending order are `[2, 3, 4, 5, 6]`, and the 3rd smallest element is `3`.\n\nReturn the value of the `k`-th smallest element in the BST."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef kthSmallest(root, k):\n    \"\"\"\n    Returns the k-th smallest element in a binary search tree.\n    \"\"\"\n    def inorder_traversal(node):\n        if node is None:\n            return []\n        return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right)\n    \n    elements = inorder_traversal(root)\n    return elements[k-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import kthSmallest, TreeNode\n\ndef create_bst_from_levels(elements):\n    if not elements:\n        return None\n    root = TreeNode(elements[0])\n    queue = [root]\n    i = 1\n    while i < len(elements):\n        current = queue.pop(0)\n        if elements[i] is not None:\n            current.left = TreeNode(elements[i])\n            queue.append(current.left)\n        i += 1\n        if i < len(elements) and elements[i] is not None:\n            current.right = TreeNode(elements[i])\n            queue.append(current.right)\n        i += 1\n    return root\n\n# Construct the example tree\nroot = create_bst_from_levels([5, 3, 6, 2, 4, None, None])\n\ndef test_kthSmallest():\n    assert kthSmallest(root, 3) == 3  # 3rd smallest element\n    assert kthSmallest(root, 1) == 2  # 1st smallest element\n    assert kthSmallest(root, 5) == 6  # 5th smallest element\n    assert kthSmallest(root, 6) == 5  # 6th smallest element, but 5 is the largest\n    assert kthSmallest(create_bst_from_levels([1, None, 2, None, None, None, 3]), 1) == 1  # Smallest element\n    assert kthSmallest(create_bst_from_levels([3, 1, 4, None, 2]), 1) == 1  # Smallest element in unbalanced tree\n    assert kthSmallest(create_bst_from_levels([3, 1, 4, None, 2]), 3) == 3  # 3rd smallest element in unbalanced tree\n    assert kthSmallest(create_bst_from_levels([3, 1, 4, None, 2]), 4) == 4  # 4th smallest element, root itself\n\ntest_kthSmallest()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000024", "row_id": 24, "seed_ids": ["1019", "1177", "203"], "mode": "leetcode", "instruction": "You are given a binary search tree (BST) and an integer `k`. Your task is to find the `k`-th smallest element in the BST. The BST is not necessarily balanced. Return the value of the `k`-th smallest element.\n\nFor example, given the BST with the following structure:\n\n```\n    5\n   / \\\n  3   6\n / \\\n2   4\n```\n\nIf `k = 3`, the output should be `3` because the elements in ascending order are `[2, 3, 4, 5, 6]`, and the 3rd smallest element is `3`.\n\nReturn the value of the `k`-th smallest element in the BST."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an array of integers `nums` and a positive integer `k`, return the maximum sum of a non-empty subarray of size `k` that contains at least one negative number. If there is no such subarray, return 0. A subarray is a contiguous part of an array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_subarray_sum_with_negative(nums, k):\n    \"\"\"\n    Returns the maximum sum of a non-empty subarray of size k that contains at least one negative number.\n    If there is no such subarray, returns 0.\n    \"\"\"\n    n = len(nums)\n    max_sum = float('-inf')\n    for i in range(n - k + 1):\n        current_sum = sum(nums[i:i+k])\n        has_negative = any(num < 0 for num in nums[i:i+k])\n        if has_negative:\n            max_sum = max(max_sum, current_sum)\n    return max_sum if max_sum != float('-inf') else 0\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_subarray_sum_with_negative\n\ndef test_max_subarray_sum_with_negative():\n    assert max_subarray_sum_with_negative([4, -2, 5, -1, 2, 3], 3) == 7\n    assert max_subarray_sum_with_negative([-1, -2, -3, -4], 2) == -1\n    assert max_subarray_sum_with_negative([1, 2, 3, 4, 5], 2) == 9  # No negative numbers in the optimal subarray\n    assert max_subarray_sum_with_negative([1, -2, 3, -4, 5], 3) == 2  # Optimal subarray [3, -4, 5]\n    assert max_subarray_sum_with_negative([5, 4, -2, 1], 2) == 4  # Optimal subarray [4, -2] or [-2, 1]\n    assert max_subarray_sum_with_negative([10, -5, 3, -2, 8], 3) == 8  # Optimal subarray [-5, 3, -2] or [3, -2, 8]\n    assert max_subarray_sum_with_negative([1, 2, 3], 4) == 0  # Subarray size exceeds the array length\n\n# Example with no negative numbers\ndef test_max_subarray_no_negatives():\n    assert max_subarray_sum_with_negative([10, 20, 30, 40], 2) == 70\n\n# Example with single element array\ndef test_max_subarray_single_element():\n    assert max_subarray_sum_with_negative([10], 1) == 10\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000025", "row_id": 25, "seed_ids": ["438", "2134", "1288"], "mode": "leetcode", "instruction": "Given an array of integers `nums` and a positive integer `k`, return the maximum sum of a non-empty subarray of size `k` that contains at least one negative number. If there is no such subarray, return 0. A subarray is a contiguous part of an array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an array `nums` consisting of positive integers. A **triangle** is valid if the sum of its two shorter sides is greater than the length of the longest side. Return the number of **unique** triangles that can be formed from the elements of `nums`. Since the answer may be very large, return it **modulo** `109 + 7`. Two triangles are considered **unique** if at least one of their sides has different lengths."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_triangles(nums):\n    \"\"\"\n    Returns the number of unique triangles that can be formed from the elements of nums\n    modulo 10^9 + 7.\n    \"\"\"\n    mod = 10**9 + 7\n    nums.sort()\n    count = 0\n    n = len(nums)\n    \n    for i in range(n-2):\n        k = i + 2\n        for j in range(i+1, n-1):\n            while k < n and nums[i] + nums[j] > nums[k]:\n                k += 1\n            count += max(0, k - j - 1)\n    \n    return count % mod\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_triangles\n\ndef test_count_triangles():\n    assert count_triangles([2, 1, 3]) == 1\n    assert count_triangles([5, 8, 6, 10, 7, 12]) == 8\n    assert count_triangles([19, 18, 1, 7, 4, 15, 2, 12, 6, 10, 11, 14, 5, 16, 8, 13, 3, 9, 0]) == 33\n    assert count_triangles([1, 2, 3, 4, 5]) == 6\n    assert count_triangles([5, 5, 5, 5]) == 10\n    assert count_triangles([10, 21, 22, 100, 101, 102]) == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000026", "row_id": 26, "seed_ids": ["2031", "335", "1814"], "mode": "leetcode", "instruction": "You are given an array `nums` consisting of positive integers. A **triangle** is valid if the sum of its two shorter sides is greater than the length of the longest side. Return the number of **unique** triangles that can be formed from the elements of `nums`. Since the answer may be very large, return it **modulo** `109 + 7`. Two triangles are considered **unique** if at least one of their sides has different lengths."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of strings `words` and a string `target`, return the number of strings in `words` that contain the `target` as a substring. A substring is a contiguous sequence of characters within a string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_substring_occurrences(words, target):\n    \"\"\"\n    Returns the number of strings in 'words' that contain 'target' as a substring.\n    \"\"\"\n    return sum(target in word for word in words)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_substring_occurrences\n\ndef test_count_substring_occurrences_positive():\n    assert count_substring_occurrences([\"abc\", \"trained\", \"mouse\"], \"train\") == 1\n\ndef test_count_substring_occurrences_multiple_matches():\n    assert count_substring_occurrences([\"cat\", \"dog\", \"mousedog\"], \"dog\") == 2\n\ndef test_count_substring_occurrences_no_matches():\n    assert count_substring_occurrences([\"hello\", \"world\"], \"universe\") == 0\n\ndef test_count_substring_occurrences_single_word():\n    assert count_substring_occurrences([\"mouses\"], \"mouses\") == 1\n\ndef test_count_substring_occurrences_empty_list():\n    assert count_substring_occurrences([], \"anything\") == 0\n\ndef test_count_substring_occurrences_mixed_cases():\n    assert count_substring_occurrences([\"Trained\", \"mouse\", \"Cat\"], \"trained\") == 1\n\ndef test_count_substring_occurrences_case_sensitive():\n    assert count_substring_occurrences([\"aBc\", \"ABCD\", \"Test\"], \"ab\") == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000027", "row_id": 27, "seed_ids": ["263", "735", "172"], "mode": "leetcode", "instruction": "Given a list of strings `words` and a string `target`, return the number of strings in `words` that contain the `target` as a substring. A substring is a contiguous sequence of characters within a string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s`, your task is to find the **minimum** number of swaps required to group all the `1`'s present in the string into a contiguous (consecutive) substring. In one swap, you can choose any two indices `i` and `j` (0-indexed) and swap the characters at these indices. Return the **minimum** number of swaps required to achieve this."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_swaps_to_group_ones(s: str) -> int:\n    \"\"\"\n    Returns the minimum number of swaps required to group all '1's into a contiguous substring.\n    \"\"\"\n    ones_count = s.count('1')\n    max_ones_in_window = 0\n    current_ones = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            current_ones += 1\n        if i >= ones_count and s[i - ones_count] == '1':\n            current_ones -= 1\n        max_ones_in_window = max(max_ones_in_window, current_ones)\n    # The minimum swaps required is the number of '1's in the string minus the maximum count of '1's in any window.\n    return ones_count - max_ones_in_window\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_min_swaps_to_group_ones():\n    assert min_swaps_to_group_ones(\"10110\") == 2\n    assert min_swaps_to_group_ones(\"0011100111\") == 4\n    assert min_swaps_to_group_ones(\"1111\") == 0\n    assert min_swaps_to_group_ones(\"000\") == 0\n    assert min_swaps_to_group_ones(\"110011001110001110\") == 6\n    assert min_swaps_to_group_ones(\"10001\") == 1\n    assert min_swaps_to_group_ones(\"1101111000110\") == 2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000028", "row_id": 28, "seed_ids": ["665", "1647", "892"], "mode": "leetcode", "instruction": "Given a binary string `s`, your task is to find the **minimum** number of swaps required to group all the `1`'s present in the string into a contiguous (consecutive) substring. In one swap, you can choose any two indices `i` and `j` (0-indexed) and swap the characters at these indices. Return the **minimum** number of swaps required to achieve this."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary string `s` and an integer `k`. A **substring** of `s` is considered **balanced** if the number of `0`s and `1`s in it are equal. You can perform the following operation any number of times: choose any index `i` in the string `s` and flip the character at `i` (i.e., change `'0'` to `'1'` and vice versa). Your task is to find the length of the **longest balanced substring** you can obtain by performing the above operation **at most** `k` times. Return the length of this longest balanced substring.\n\nFor example, if `s = \"1100011\"` and `k = 2`, you can flip the characters at indices `4` and `6` to get `\"1101111\"`, which contains a balanced substring of length `7`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_balanced_substring(s, k):\n    \"\"\"\n    Returns the length of the longest balanced substring that can be\n    obtained by flipping at most k characters in the binary string s.\n    \"\"\"\n    left = 0\n    max_length = 0\n    for right in range(len(s)):\n        k -= s[right] == '0'  # Flip '0' to '1' and decrease k by 1\n        while k < 0:\n            k += s[left] == '0'  # Flip '1' to '0' and increase k by 1\n            left += 1\n        max_length = max(max_length, right - left + 1)\n    return max_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_longest_balanced_substring():\n    assert longest_balanced_substring(\"100110\", 2) == 8\n    assert longest_balanced_substring(\"1010\", 0) == 4\n    assert longest_balanced_substring(\"010101\", 1) == 6\n    assert longest_balanced_substring(\"1100011\", 2) == 7\n    assert longest_balanced_substring(\"10001000\", 1) == 6\n    assert longest_balanced_substring(\"0101\", 3) == 6\n    assert longest_balanced_substring(\"0001111000011110000000011110000\", 5) == 16\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000029", "row_id": 29, "seed_ids": ["813", "1659", "2012"], "mode": "leetcode", "instruction": "You are given a binary string `s` and an integer `k`. A **substring** of `s` is considered **balanced** if the number of `0`s and `1`s in it are equal. You can perform the following operation any number of times: choose any index `i` in the string `s` and flip the character at `i` (i.e., change `'0'` to `'1'` and vice versa). Your task is to find the length of the **longest balanced substring** you can obtain by performing the above operation **at most** `k` times. Return the length of this longest balanced substring.\n\nFor example, if `s = \"1100011\"` and `k = 2`, you can flip the characters at indices `4` and `6` to get `\"1101111\"`, which contains a balanced substring of length `7`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `text`, you want to use the characters of `text` to form as many instances of the word **\"racecar \"** as possible.  You can use each character in `text` **at most once**. Return the maximum number of instances that can be formed."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import Counter\n\ndef max_racecar_instances(text: str) -> int:\n    \"\"\"\n    Given a string `text`, returns the maximum number of \"racecar\" instances that can be formed using the characters in `text`.\n    Each character in `text` can be used at most once.\n    \"\"\"\n    racecar_counter = Counter(\"racecar\")\n    text_counter = Counter(text)\n    \n    # Calculate the minimum required full matches of \"racecar\" in text\n    return min(text_counter[char] // racecar_counter[char] for char in racecar_counter)\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef test_max_racecar_instances():\n    assert max_racecar_instances(\"\u8d5b\u8f66\u7ade\u6280\") == 0  # Chinese characters should not affect the count\n    assert max_racecar_instances(\"racecar\") == 1\n    assert max_racecar_instances(\"rcaacecar\") == 1\n    assert max_racecar_instances(\"racecarracecar\") == 2\n    assert max_racecar_instances(\"racecabracelerac\") == 1\n    assert max_racecar_instances(\"racecarabracadabra\") == 2\n    assert max_racecar_instances(\"a\") == 0\n    assert max_racecar_instances(\"racecarca\") == 1\n    assert max_racecar_instances(\"racecarra\") == 1\n    assert max_racecar_instances(\"racecarracecarracecar\") == 3\n\ntest_max_racecar_instances()\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000030", "row_id": 30, "seed_ids": ["1189", "227", "1099"], "mode": "leetcode", "instruction": "Given a string `text`, you want to use the characters of `text` to form as many instances of the word **\"racecar \"** as possible.  You can use each character in `text` **at most once**. Return the maximum number of instances that can be formed."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically largest substring that is a palindrome. A palindrome is a string that reads the same backward as forward. If there are multiple palindromic substrings of the same length, return the one that is lexicographically largest. A substring is any contiguous sequence of characters within a string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_largest_palindromic_substring(s):\n    \"\"\"\n    Finds the lexicographically largest palindromic substring in the given string s.\n    \"\"\"\n    def expand_around_center(left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1:right]\n    \n    largest_palindrome = \"\"\n    for i in range(len(s)):\n        # Odd length palindromes\n        palindrome_odd = expand_around_center(i, i)\n        # Even length palindromes\n        palindrome_even = expand_around_center(i, i + 1)\n        \n        # Update the largest palindrome found\n        if len(palindrome_odd) > len(largest_palindrome):\n            largest_palindrome = palindrome_odd\n        if len(palindrome_even) > len(largest_palindrome):\n            largest_palindrome = palindrome_even\n    \n    return largest_palindrome\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_find_largest_palindromic_substring():\n    assert find_largest_palindromic_substring(\"babad\") == \"bab\" or find_largest_palindromic_substring(\"babad\") == \"aba\"\n    assert find_largest_palindromic_substring(\"cbbd\") == \"bb\"\n    assert find_largest_palindromic_substring(\"a\") == \"a\"\n    assert find_largest_palindromic_substring(\"ac\") == \"a\" or find_largest_palindromic_substring(\"ac\") == \"c\"\n    assert find_largest_palindromic_substring(\"racecar\") == \"racecar\"\n    assert find_largest_palindromic_substring(\"banana\") == \"anana\" or find_largest_palindromic_substring(\"banana\") == \"anana\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000031", "row_id": 31, "seed_ids": ["1361", "485", "1629"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically largest substring that is a palindrome. A palindrome is a string that reads the same backward as forward. If there are multiple palindromic substrings of the same length, return the one that is lexicographically largest. A substring is any contiguous sequence of characters within a string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an integer array `nums` sorted in **non-decreasing** order. Define a function `f(x)` for each element `x` in `nums` such that `f(x)` is the number of elements in `nums` that are strictly less than `x`. Build and return an integer array `result` with the same length as `nums` such that `result[i]` is equal to the summation of `f(nums[i])` for all `i` in the array. In other words, `result[i]` is equal to `sum(f(nums[i]))` where `0 <= j < nums.length` and `j != i` (0-indexed)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef calculate_result(nums):\n    \"\"\"\n    Returns a result array where result[i] is the sum of f(nums[i]) for all i in the array.\n    \"\"\"\n    from bisect import bisect_left\n    \n    sorted_nums = sorted(set(nums))  # Get unique and sorted elements\n    index_map = {val: idx for idx, val in enumerate(sorted_nums)}\n    prefix_sum = [0]\n    for num in sorted_nums:\n        prefix_sum.append(prefix_sum[-1] + bisect_left(sorted_nums, num))\n    \n    result = []\n    for num in nums:\n        idx = index_map[num]\n        result.append(sum(prefix_sum[:idx]))\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\nfrom solution import calculate_result\n\ndef test_calculate_result():\n    assert calculate_result([1, 2, 3, 4, 5]) == [0, 1, 3, 6, 10]\n    assert calculate_result([1, 1, 2, 2, 2, 3]) == [0, 0, 3, 6, 8, 9]\n    assert calculate_result([10, 20, 30, 40, 50]) == [0, 0, 0, 0, 0]\n    assert calculate_result([50, 40, 30, 20, 10]) == [0, 0, 0, 0, 0]\n    assert calculate_result([1, 1, 1, 1, 1]) == [0, 0, 0, 0, 0]\n    assert calculate_result([5, 3, 4, 2, 1]) == [4, 3, 3, 2, 0]\n    assert calculate_result([2, 2, 2, 2, 2, 2]) == [0, 0, 0, 0, 0, 0]\n\ndef test_edge_cases():\n    assert calculate_result([1]) == [0]\n    assert calculate_result([]) == []\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000032", "row_id": 32, "seed_ids": ["1685", "499", "2501"], "mode": "leetcode", "instruction": "You are given an integer array `nums` sorted in **non-decreasing** order. Define a function `f(x)` for each element `x` in `nums` such that `f(x)` is the number of elements in `nums` that are strictly less than `x`. Build and return an integer array `result` with the same length as `nums` such that `result[i]` is equal to the summation of `f(nums[i])` for all `i` in the array. In other words, `result[i]` is equal to `sum(f(nums[i]))` where `0 <= j < nums.length` and `j != i` (0-indexed)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a matrix `grid` of size `m x n` containing only `0`s and `1`s, where `1` represents land and `0` represents water, a **landlocked area** is a region of land completely surrounded by water, with no connection to the boundary of the grid. You are allowed to fill any number of `0`s (turning them into `1`s) to form additional land. The goal is to connect at least one landlocked area to the boundary to make it non-landlocked. Return the minimum number of `0`s you need to flip to achieve this. If it is impossible to make any landlocked area non-landlocked, return `-1`.\n\n**Example 1:**\n\nInput: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\n\nOutput: 2\n\nExplanation: We can flip two `0`s at positions (1, 1) and (2, 2) to make the landlocked area non-landlocked.\n\n**Example 2:**\n\nInput: grid = [[0,0,0],[0,1,1],[0,1,0]]\n\nOutput: -1\n\nExplanation: It is impossible to make any landlocked area non-landlocked."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_landlock_flips(grid):\n    \"\"\"\n    Returns the minimum number of 0s that need to be flipped\n    to make at least one landlocked area non-landlocked.\n    If it's impossible, returns -1.\n    \"\"\"\n    if not grid or not grid[0]:\n        return -1\n\n    m, n = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = set()\n\n    def is_landlock(i, j):\n        if (i, j) in visited:\n            return False\n        visited.add((i, j))\n        for dx, dy in directions:\n            x, y = i + dx, j + dy\n            if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == 1:\n                return False\n            if is_landlock(x, y):\n                return True\n        return True\n\n    def count_zeros(i, j):\n        if (i, j) in visited:\n            return 0\n        visited.add((i, j))\n        count = int(grid[i][j] == 0)\n        for dx, dy in directions:\n            x, y = i + dx, j + dy\n            if 0 <= x < m and 0 <= y < n:\n                count += count_zeros(x, y)\n        return count\n\n    flips = float('inf')\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1 or (i, j) in visited:\n                continue\n            if is_landlock(i, j):\n                min_val = count_zeros(i, j)\n                flips = min(flips, min_val)\n\n    return flips if flips != float('inf') else -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_min_landlock_flips():\n    grid = [[0, 0, 0, 0], [1, 0, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]]\n    assert min_landlock_flips(grid) == 2\n\n    grid = [[0, 0, 0], [0, 1, 1], [0, 1, 0]]\n    assert min_landlock_flips(grid) == -1\n\n    grid = [[1, 1, 1, 1], [1, 0, 0, 1], [1, 1, 1, 1]]\n    assert min_landlock_flips(grid) == -1\n\n    grid = [[0, 0, 1], [0, 1, 0]]\n    assert min_landlock_flips(grid) == 1\n\n    grid = [[1, 0, 1], [0, 0, 0], [1, 0, 1]]\n    assert min_landlock_flips(grid) == 1\n\n    grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]]\n    assert min_landlock_flips(grid) == 2\n\n# To run these tests, you need to have the above solution function defined in your solution.py file.\n# Run the tests using pytest:\n# pytest -q <path_to_your_test_file>.py\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000033", "row_id": 33, "seed_ids": ["135", "2357", "1719"], "mode": "leetcode", "instruction": "Given a matrix `grid` of size `m x n` containing only `0`s and `1`s, where `1` represents land and `0` represents water, a **landlocked area** is a region of land completely surrounded by water, with no connection to the boundary of the grid. You are allowed to fill any number of `0`s (turning them into `1`s) to form additional land. The goal is to connect at least one landlocked area to the boundary to make it non-landlocked. Return the minimum number of `0`s you need to flip to achieve this. If it is impossible to make any landlocked area non-landlocked, return `-1`.\n\n**Example 1:**\n\nInput: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\n\nOutput: 2\n\nExplanation: We can flip two `0`s at positions (1, 1) and (2, 2) to make the landlocked area non-landlocked.\n\n**Example 2:**\n\nInput: grid = [[0,0,0],[0,1,1],[0,1,0]]\n\nOutput: -1\n\nExplanation: It is impossible to make any landlocked area non-landlocked."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s`, return the number of distinct **subsequences** of `s` that are palindromic. Since the answer may be very large, return it **modulo** `10^9 + 7`. Note: A string is considered a **subsequence** of another string if it can be derived by deleting some or no characters from the other string without changing the order of the remaining characters."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\ndef count_distinct_palindromic_subsequences(s):\n    \"\"\"\n    Given a string s, return the number of distinct palindromic subsequences modulo 10^9 + 7.\n    \"\"\"\n    MOD = 10**9 + 7\n    n = len(s)\n    first_occurrence = {}\n    last_occurrence = {}\n    dp = [[0] * n for _ in range(n)]\n    distinct_subsequences = 0\n    \n    # Initialize the DP table and first/last occurrences\n    for i in range(n):\n        first_occurrence[s[i]] = first_occurrence.get(s[i], []) + [i]\n        last_occurrence[s[i]] = last_occurrence.get(s[i], []) + [i]\n    \n    for i in range(n):\n        dp[i][i] = 1  # Single character is always a palindrome\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = (dp[i + 1][j - 1] + 2) % MOD\n                for k in range(1, len(first_occurrence[s[i]])):\n                    if first_occurrence[s[i]][k] <= j and last_occurrence[s[i]][-k - 1] >= i + 1:\n                        dp[i][j] -= dp[first_occurrence[s[i]][k] + 1][last_occurrence[s[i]][-k - 1] - 1]\n                        dp[i][j] %= MOD\n            else:\n                dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1]) % MOD\n    \n    # Sum up all subsequences that start and end with the same character to avoid double counting\n    for i in range(n):\n        distinct_subsequences += dp[i][i]\n        distinct_subsequences %= MOD\n    \n    # Sum up all subsequences of the form s[i:j] where s[i] == s[j]\n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j]:\n                distinct_subsequences += dp[i][j]\n                distinct_subsequences %= MOD\n    \n    return distinct_subsequences\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef test_count_distinct_palindromic_subsequences():\n    assert count_distinct_palindromic_subsequences(\"abcba\") == 7\n    assert count_distinct_palindromic_subsequences(\"cbba\") == 5\n    assert count_distinct_palindromic_subsequences(\"aab\") == 3\n    assert count_distinct_palindromic_subsequences(\"baac\") == 8\n    assert count_distinct_palindromic_subsequences(\"aaaaa\") == 33\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000034", "row_id": 34, "seed_ids": ["2484", "291", "249"], "mode": "leetcode", "instruction": "Given a string `s`, return the number of distinct **subsequences** of `s` that are palindromic. Since the answer may be very large, return it **modulo** `10^9 + 7`. Note: A string is considered a **subsequence** of another string if it can be derived by deleting some or no characters from the other string without changing the order of the remaining characters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an integer array `nums` of length `n`, you are asked to perform the following operation exactly `k` times: choose an index `i` (0-indexed) from the array and increment `nums[i]` by 1. After performing these operations, find the maximum possible **GCD** (Greatest Common Divisor) of the array `nums`.\n\nReturn the maximum GCD you can achieve."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport math\nfrom typing import List\n\ndef max_possible_gcd(nums: List[int], k: int) -> int:\n    \"\"\"\n    Returns the maximum GCD after incrementing elements of nums exactly k times.\n    \"\"\"\n    max_element = max(nums)\n    min_gcd = max_element\n    for i in range(max_element):\n        current_gcd = 1\n        for num in nums:\n            if i + num * (k + 1) > 0:\n                current_gcd = math.gcd(current_gcd, i + num * (k + 1))\n        min_gcd = max(min_gcd, current_gcd)\n    return min_gcd\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_possible_gcd\n\ndef test_max_possible_gcd():\n    assert max_possible_gcd([2, 6, 3, 4], 1) == 6\n    assert max_possible_gcd([3, 9, 5], 2) == 3\n    assert max_possible_gcd([1, 2, 3, 6], 3) == 6\n    assert max_possible_gcd([10, 10], 0) == 10\n    assert max_possible_gcd([4, 8, 16], 1) == 8\n    assert max_possible_gcd([1, 2, 3], 3) == 1\n\n# Test case with a larger k value\n    assert max_possible_gcd([2, 4, 8], 5) == 16\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000035", "row_id": 35, "seed_ids": ["987", "1753", "11"], "mode": "leetcode", "instruction": "Given an integer array `nums` of length `n`, you are asked to perform the following operation exactly `k` times: choose an index `i` (0-indexed) from the array and increment `nums[i]` by 1. After performing these operations, find the maximum possible **GCD** (Greatest Common Divisor) of the array `nums`.\n\nReturn the maximum GCD you can achieve."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` (a string consisting only of '0's and '1's), you need to perform a series of operations to make the string alternating. An alternating string is one where no two adjacent characters are the same. You can perform the following operation any number of times: choose any index `i` (1-indexed) and flip the character at `s[i]` (change '0' to '1' or '1' to '0'). \n\nReturn the minimum number of operations required to make the string alternating. If it is impossible to make the string alternating, return `-1`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_flips_to_alternate(s: str) -> int:\n    \"\"\"\n    Given a binary string, return the minimum number of operations needed to make the string alternating.\n    If it is not possible, return -1.\n    \"\"\"\n    n = len(s)\n    \n    if n == 0:\n        return 0\n    \n    # Count differences with '010101...' pattern\n    count_r = sum(s[i] != ('0' if i % 2 == 0 else '1') for i in range(n))\n    \n    # Count differences with '101010...' pattern\n    count_l = sum(s[i] != ('1' if i % 2 == 0 else '0') for i in range(n))\n    \n    if count_r == n or count_l == n:\n        return -1  # The string cannot be made alternating by flipping\n    else:\n        return min(count_r, count_l)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_flips_to_alternate():\n    assert min_flips_to_alternate(\"0011\") == 2\n    assert min_flips_to_alternate(\"10\") == 0\n    assert min_flips_to_alternate(\"1111\") == -1\n    assert min_flips_to_alternate(\"0101010\") == 0\n    assert min_flips_to_alternate(\"00011000\") == 4\n    assert min_flips_to_alternate(\"1100\") == 1\n    assert min_flips_to_alternate(\"\") == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000036", "row_id": 36, "seed_ids": ["994", "746", "1397"], "mode": "leetcode", "instruction": "Given a binary string `s` (a string consisting only of '0's and '1's), you need to perform a series of operations to make the string alternating. An alternating string is one where no two adjacent characters are the same. You can perform the following operation any number of times: choose any index `i` (1-indexed) and flip the character at `s[i]` (change '0' to '1' or '1' to '0'). \n\nReturn the minimum number of operations required to make the string alternating. If it is impossible to make the string alternating, return `-1`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of `n` intervals `intervals`, where each interval is represented as `[start, end]`, find the minimum number of intervals you need to remove so that the remaining intervals do not overlap. An interval `A` overlaps with another interval `B` if `A` and `B` have at least one common point. Return the minimum number of intervals to remove."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_intervals_to_remove(intervals):\n    \"\"\"\n    Finds the minimum number of intervals to remove in order for the remaining\n    intervals not to overlap.\n    \"\"\"\n    if not intervals:\n        return 0\n    \n    # Sort intervals based on the end time\n    intervals.sort(key=lambda x: x[1])\n    end = intervals[0][1]\n    count = 1   # Count of non-overlapping intervals\n    \n    for interval in intervals[1:]:\n        if interval[0] >= end:\n            count += 1\n            end = interval[1]\n    \n    # The number of intervals to remove is the total number of intervals\n    # minus the number of non-overlapping intervals\n    return len(intervals) - count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import min_intervals_to_remove\n\ndef test_no_intervals():\n    assert min_intervals_to_remove([]) == 0\n\ndef test_one_interval():\n    assert min_intervals_to_remove([[1, 2]]) == 0\n\ndef test_separate_intervals():\n    assert min_intervals_to_remove([[1, 3], [6, 9], [2, 5]]) == 0\n\ndef test_overlapping_intervals_by_end():\n    assert min_intervals_to_remove([[1, 2], [2, 3], [3, 4]]) == 0\n\ndef test_several_overlapping_intervals():\n    assert min_intervals_to_remove([[1, 100], [11, 22], [1, 11], [2, 12]]) == 2\n\ndef test_single_overlapping_with_one():\n    assert min_intervals_to_remove([[1, 3], [2, 4]]) == 1\n\ndef test_multiple_overlaps():\n    assert min_intervals_to_remove([[1, 2], [2, 3], [3, 4], [4, 5]]) == 2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000037", "row_id": 37, "seed_ids": ["1284", "2165", "1413"], "mode": "leetcode", "instruction": "Given a list of `n` intervals `intervals`, where each interval is represented as `[start, end]`, find the minimum number of intervals you need to remove so that the remaining intervals do not overlap. An interval `A` overlaps with another interval `B` if `A` and `B` have at least one common point. Return the minimum number of intervals to remove."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase letters only, return the _length of the **longest** substring that can be obtained by replacing at most one character in `s` with any other character, such that the resulting substring is an alphabetical continuous string._\n\nFor example, in the string `\"abcbdefg\"`, you can replace the `c` with `a` to get `\"aabdefg\"`, which is an alphabetical continuous string of length 7."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_alphabetic_substring(s: str) -> int:\n    \"\"\"\n    Given a string s, return the length of the longest substring that can be obtained\n    by replacing at most one character in s with any other character, such that\n    the resulting substring is an alphabetical continuous string.\n    \"\"\"\n    max_len = 1\n    start = 0\n    replace_char = float('-inf')\n    for end in range(1, len(s)):\n        if ord(s[end]) != ord(s[end - 1]) + 1:\n            if s[end] != s[end - 1]:\n                prev_char = s[end - 1]\n                replace_char = max(replace_char, s[end - 1])\n            start = max(start, end - 1 if s[end] != s[end - 1] else replace_char + 1)\n            replace_char = s[end - 1]\n        max_len = max(max_len, end - start + 1)\n    return max_len\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import longest_alphabetic_substring\n\ndef test_longest_alphabetic_substring():\n    assert longest_alphabetic_substring(\"abcbdefg\") == 7\n    assert longest_alphabetic_substring(\"vgc\") == 3\n    assert longest_alphabetic_substring(\"abc\") == 3\n    assert longest_alphabetic_substring(\"abczxyz\") == 5\n    assert longest_alphabetic_substring(\"a\") == 1\n    assert longest_alphabetic_substring(\"abcd\") == 4\n    assert longest_alphabetic_substring(\"az\") == 2\n    assert longest_alphabetic_substring(\"azc\") == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000038", "row_id": 38, "seed_ids": ["2414", "2220", "1929"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase letters only, return the _length of the **longest** substring that can be obtained by replacing at most one character in `s` with any other character, such that the resulting substring is an alphabetical continuous string._\n\nFor example, in the string `\"abcbdefg\"`, you can replace the `c` with `a` to get `\"aabdefg\"`, which is an alphabetical continuous string of length 7."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary search tree (BST) and a range `[low, high]`, return the sum of values of all nodes with a value in the given range. A binary search tree is a tree in which all nodes follow the property that the left subtree of a node contains only nodes with values less than the node's value, and the right subtree of a node contains only nodes with values greater than the node's value."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef rangeSumBST(root: TreeNode, low: int, high: int) -> int:\n    \"\"\"\n    Returns the sum of values of nodes with values in the given range.\n    \"\"\"\n    def dfs(node):\n        if not node:\n            return 0\n        result = 0\n        if low <= node.val <= high:\n            result += node.val\n        if low < node.val:\n            result += dfs(node.left)\n        if node.val < high:\n            result += dfs(node.right)\n        return result\n\n    return dfs(root)\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\nfrom solution import rangeSumBST  # Assuming the solution is saved in a file named 'solution.py'\n\ndef create_bst_from_list(values, root=None, i=0):\n    if i < len(values):\n        if values[i] is None:\n            return None\n        node = TreeNode(values[i])\n        node.left = create_bst_from_list(values, root, 2 * i + 1)\n        node.right = create_bst_from_list(values, root, 2 * i + 2)\n        return node\n\ndef test_range_sum_bst():\n    # Construct a BST: \n    #       10\n    #      /  \\\n    #     5   15\n    #    / \\    \\\n    #   3   7    18\n    bst = create_bst_from_list([10, 5, 15, 3, 7, None, 18])\n    assert rangeSumBST(bst, 7, 15) == 32\n\ndef test_range_sum_empty_tree():\n    assert rangeSumBST(None, 7, 15) == 0\n\ndef test_range_sum_single_node_tree():\n    node = TreeNode(10)\n    assert rangeSumBST(node, 7, 15) == 10\n\ndef test_range_sum_no_nodes_in_range():\n    bst = create_bst_from_list([10, 5, 15, 3, 7, None, 18])\n    assert rangeSumBST(bst, 20, 25) == 0\n\ndef test_range_sum_all_nodes_in_range():\n    bst = create_bst_from_list([10, 5, 15, 3, 7, None, 18])\n    assert rangeSumBST(bst, 0, 20) == 63\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000039", "row_id": 39, "seed_ids": ["434", "1061", "141"], "mode": "leetcode", "instruction": "Given a binary search tree (BST) and a range `[low, high]`, return the sum of values of all nodes with a value in the given range. A binary search tree is a tree in which all nodes follow the property that the left subtree of a node contains only nodes with values less than the node's value, and the right subtree of a node contains only nodes with values greater than the node's value."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a class `CustomQueue` that supports the following operations:\n\n- `CustomQueue(int capacity)` Initializes the queue with a given capacity.\n- `void enqueue(int value)` Adds a value to the end of the queue if there is still space. Returns `false` if the queue is full.\n- `int dequeue()` Removes and returns the value at the front of the queue. Returns `-1` if the queue is empty.\n- `bool isFull()` Returns `true` if the queue is full, otherwise returns `false`.\n- `bool isEmpty()` Returns `true` if the queue is empty, otherwise returns `false`.\n\nImplement the `CustomQueue` class such that all operations are performed in constant time, i.e., O(1). Additionally, provide a method `getQueue()` that returns the current elements in the queue as a list, maintaining the order of elements as they were added."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass CustomQueue:\n    def __init__(self, capacity: int):\n        assert capacity > 0, \"Capacity must be greater than 0\"\n        self.capacity = capacity\n        self.queue = [None] * capacity\n        self.head = 0\n        self.tail = 0\n        self.size = 0\n\n    def enqueue(self, value: int) -> bool:\n        if self.size < self.capacity:\n            self.queue[self.tail] = value\n            self.tail = (self.tail + 1) % self.capacity\n            self.size += 1\n            return True\n        return False\n\n    def dequeue(self) -> int:\n        if self.size == 0:\n            return -1\n        item = self.queue[self.head]\n        self.queue[self.head] = None\n        self.head = (self.head + 1) % self.capacity\n        self.size -= 1\n        return item\n\n    def isFull(self) -> bool:\n        return self.size == self.capacity\n\n    def isEmpty(self) -> bool:\n        return self.size == 0\n\n    def getQueue(self) -> list:\n        if self.head < self.tail:\n            return self.queue[self.head:self.tail]\n        else:\n            return self.queue[self.head:] + self.queue[:self.tail]\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef test_custom_queue():\n    max_size = 5\n    custom_queue = CustomQueue(max_size)\n\n    assert custom_queue.isEmpty() == True\n    assert custom_queue.isFull() == False\n    \n    assert custom_queue.enqueue(10) == True\n    assert custom_queue.enqueue(20) == True\n    assert custom_queue.enqueue(30) == True\n    assert custom_queue.enqueue(40) == True\n    assert custom_queue.enqueue(50) == True\n    assert custom_queue.enqueue(60) == False  # Queue is full\n\n    assert custom_queue.isFull() == True\n    assert custom_queue.isEmpty() == False\n\n    assert custom_queue.getQueue() == [10, 20, 30, 40, 50]\n\n    assert custom_queue.dequeue() == 10\n    assert custom_queue.getQueue() == [20, 30, 40, 50, None]  # Note: The last None represent the tail pointer advancing\n\n    assert custom_queue.enqueue(70) == True\n\n    assert custom_queue.getQueue() == [20, 30, 40, 50, 70]\n\n    assert custom_queue.dequeue() == 20\n    assert custom_queue.dequeue() == 30\n    assert custom_queue.getQueue() == [40, 50, 70, None, None]\n\n    assert custom_queue.enqueue(80) == True\n    assert custom_queue.enqueue(90) == True\n    assert custom_queue.enqueue(100) == True\n    assert custom_queue.enqueue(110) == False  # Queue is already full\n\n    assert custom_queue.getQueue() == [40, 50, 70, 80, 90]\n\n    assert custom_queue.dequeue() == 40\n    assert custom_queue.dequeue() == 50\n    assert custom_queue.dequeue() == 70\n    assert custom_queue.dequeue() == 80\n    assert custom_queue.dequeue() == 90\n    assert custom_queue.getQueue() == [100, None, None, None, None]\n\n    assert custom_queue.enqueue(120) == True\n    assert custom_queue.dequeue() == 100\n    assert custom_queue.dequeue() == 120\n    assert custom_queue.dequeue() == -1  # Queue is now empty\n\n    assert custom_queue.isEmpty() == True\n\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000040", "row_id": 40, "seed_ids": ["1656", "733", "352"], "mode": "leetcode", "instruction": "Design a class `CustomQueue` that supports the following operations:\n\n- `CustomQueue(int capacity)` Initializes the queue with a given capacity.\n- `void enqueue(int value)` Adds a value to the end of the queue if there is still space. Returns `false` if the queue is full.\n- `int dequeue()` Removes and returns the value at the front of the queue. Returns `-1` if the queue is empty.\n- `bool isFull()` Returns `true` if the queue is full, otherwise returns `false`.\n- `bool isEmpty()` Returns `true` if the queue is empty, otherwise returns `false`.\n\nImplement the `CustomQueue` class such that all operations are performed in constant time, i.e., O(1). Additionally, provide a method `getQueue()` that returns the current elements in the queue as a list, maintaining the order of elements as they were added."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an `m x n` binary matrix `grid` representing a map where `0` indicates water and `1` indicates land. A **land bridge** is a path of adjacent `1`s (horizontally or vertically) that connects the leftmost column to the rightmost column. You have a limited number of `k` 0s that can be flipped to 1s to create additional land bridges. Find the minimum number of land bridges needed to connect the leftmost and rightmost columns of the grid, or return `-1` if it is impossible to do so with the given `k` 0s."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import deque\n\ndef min_land_bridges(grid, k):\n    \"\"\"\n    Returns the minimum number of land bridges needed to connect the leftmost and rightmost columns\n    of the grid, or -1 if it is impossible to do so with the given k 0s.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    def is_bridged():\n        visited = [[False] * n for _ in range(m)]\n        queue = deque()\n        \n        # Mark all land cells in the leftmost column as visited\n        for i in range(m):\n            if grid[i][0] == 1:\n                queue.append((i, 0))\n                visited[i][0] = True\n                \n        while queue:\n            x, y = queue.popleft()\n            if y == n - 1:\n                return True\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:\n                    if grid[nx][ny] == 1:\n                        queue.append((nx, ny))\n                        visited[nx][ny] = True\n                    elif k > 0:\n                        k -= 1\n                        queue.append((nx, ny))\n                        visited[nx][ny] = True\n        return False\n    \n    # Check if the grid is already bridged\n    if is_bridged():\n        return 0\n    \n    # Count the number of 0s needed to bridge the grid\n    for i in range(m):\n        if is_bridged():\n            return 1\n    \n    return -1 if k == 0 else 1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_land_bridges():\n    assert min_land_bridges([[0,0,0,0,0,0,0,0]], 1) == 1\n    assert min_land_bridges([[1,0,1], [0,0,0], [1,0,1]], 2) == 0\n    assert min_land_bridges([[1,0,0,0,0,0,1,1], [1,0,1,0,1,1,1,1], [1,0,1,0,1,0,1,0], [1,0,1,0,1,1,1,0]], 2) == -1\n    assert min_land_bridges([[1, 0, 1, 0], [0, 0, 0, 0], [1, 1, 1, 0], [0, 0, 0, 1]], 3) == 2\n\ndef test_min_land_bridges_edges():\n    assert min_land_bridges([[0]], 0) == 0\n    assert min_land_bridges([[1]], 0) == 0\n    assert min_land_bridges([[0, 1], [1, 0]], 1) == 0\n    assert min_land_bridges([[0, 0], [1, 1]], 1) == 2\n\ndef test_min_land_bridges_complex():\n    assert min_land_bridges([[1, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 1, 0, 1], \n                             [1, 0, 1, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 1], \n                             [1, 1, 1, 0, 1, 1, 1, 1]], 0) == -1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000041", "row_id": 41, "seed_ids": ["1642", "1217", "994"], "mode": "leetcode", "instruction": "You are given an `m x n` binary matrix `grid` representing a map where `0` indicates water and `1` indicates land. A **land bridge** is a path of adjacent `1`s (horizontally or vertically) that connects the leftmost column to the rightmost column. You have a limited number of `k` 0s that can be flipped to 1s to create additional land bridges. Find the minimum number of land bridges needed to connect the leftmost and rightmost columns of the grid, or return `-1` if it is impossible to do so with the given `k` 0s."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given two binary strings `a` and `b`, return _the sum of `a` and `b` when interpreted as binary numbers._ The length of each string is in the range `[1, 1000]` and consists only of `'0'` or `'1'`. Both `a` and `b` can represent very large numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef add_binary(a: str, b: str) -> str:\n    \"\"\"\n    Given two binary strings, return their sum as a binary string.\n    \"\"\"\n    # Convert binary strings to integers, sum them, then convert back to binary\n    return bin(int(a, 2) + int(b, 2))[2:]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add_binary\n\ndef test_add_binary_positive():\n    assert add_binary(\"11\", \"1\") == \"100\"\n\ndef test_add_binary_single_digit():\n    assert add_binary(\"0\", \"0\") == \"0\"\n\ndef test_add_binary_mixed():\n    assert add_binary(\"1010\", \"1011\") == \"10101\"\n\ndef test_add_binary_large_numbers():\n    assert add_binary(\"11111111111111111111111111111101\", \"1\") == \"100000000000000000000000000000000\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000042", "row_id": 42, "seed_ids": ["1567", "1072", "617"], "mode": "leetcode", "instruction": "Given two binary strings `a` and `b`, return _the sum of `a` and `b` when interpreted as binary numbers._ The length of each string is in the range `[1, 1000]` and consists only of `'0'` or `'1'`. Both `a` and `b` can represent very large numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given two integer arrays `speed` and `efficiency` both of length `n`, and an integer `k`, you are to select a subset of engineers to form a team. Each engineer is represented by their `speed` and `efficiency`. Your goal is to maximize the **product** of the team's **average speed** and the minimum efficiency among the selected engineers. The team must consist of at least `2` engineers. Return the maximum possible product. Since the answer can be a large number, return it modulo `10^9 + 7`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\nfrom heapq import nsmallest\n\ndef max_product(speed: List[int], efficiency: List[int], k: int) -> int:\n    \"\"\"\n    Calculate the maximum product of the average speed and the minimum efficiency.\n    \"\"\"\n    mod = 10**9 + 7\n    n = len(speed)\n    engineers = sorted(zip(efficiency, speed), reverse=True)\n    total_speed = 0\n    max_product = 0\n    \n    for e, s in engineers:\n        if k == 1:\n            max_product = max(max_product, (total_speed + s) * e)\n        else:\n            k -= 1\n            total_speed += s\n            max_product = max(max_product, (total_speed / k) * e)\n    \n    return max_product % mod\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_product\n\ndef test_max_product():\n    speed = [2, 10, 3]\n    efficiency = [1, 2, 5]\n    k = 2\n    assert max_product(speed, efficiency, k) == 600\n\ndef test_two_engineers_case():\n    speed = [5, 10, 3]\n    efficiency = [3, 8, 4]\n    k = 2\n    assert max_product(speed, efficiency, k) == 60\n\ndef test_large_k_case():\n    speed = [10, 10, 10, 10, 10, 10]\n    efficiency = [10, 10, 10, 10, 10, 10]\n    k = 5\n    assert max_product(speed, efficiency, k) == 100\n\ndef test_single_engineer_case():\n    speed = [50]\n    efficiency = [100]\n    k = 1\n    assert max_product(speed, efficiency, k) == 50\n\ndef test_equal_speed_efficiency_case():\n    speed = [1, 2, 3, 4, 5]\n    efficiency = [1, 2, 3, 4, 5]\n    k = 3\n    assert max_product(speed, efficiency, k) == 400\n\ndef test_zero_case():\n    speed = [0, 0, 0]\n    efficiency = [0, 0, 0]\n    k = 2\n    assert max_product(speed, efficiency, k) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000043", "row_id": 43, "seed_ids": ["2389", "2505", "1383"], "mode": "leetcode", "instruction": "Given two integer arrays `speed` and `efficiency` both of length `n`, and an integer `k`, you are to select a subset of engineers to form a team. Each engineer is represented by their `speed` and `efficiency`. Your goal is to maximize the **product** of the team's **average speed** and the minimum efficiency among the selected engineers. The team must consist of at least `2` engineers. Return the maximum possible product. Since the answer can be a large number, return it modulo `10^9 + 7`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of `n` flights, each represented as a triplet `(i, j, k)` where `i` is the starting city, `j` is the destination city, and `k` is the cost of the flight. The cities are labeled from `0` to `n-1`. You are also given a list of `m` reservations, each represented as a pair `(i, j)` indicating that a reservation is made from city `i` to city `j`. A reservation is valid if there exists a direct flight between the two cities. \n\nReturn the total cost of the cheapest valid itinerary that visits every city exactly once, or `-1` if no such itinerary exists. You may start and end at any city, and you may revisit cities and use the same flight multiple times. \n\nIf there are multiple valid itineraries with the same total cost, return the one with the lexicographically smallest itinerary. An itinerary is lexicographically smaller if the sequence of city labels is lexicographically smaller."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict\nfrom itertools import permutations\n\ndef cheapest_itinerary(flights, reservations):\n    \"\"\"\n    Returns the total cost of the cheapest valid itinerary that visits every city exactly once.\n    \"\"\"\n    # Build the graph and filter out invalid reservations\n    graph = defaultdict(dict)\n    for i, j, k in flights:\n        graph[i][j] = k\n    valid_reservations = [[i, j] for i, j in reservations if j in graph[i]]\n    \n    # Check if there are enough flights to cover reservations\n    if len(valid_reservations) != len(reservations):\n        return -1\n    \n    # Generate all possible itineraries\n    itineraries = []\n    for perm in permutations(range(len(flights))):\n        itinerary = [i for i in range(len(flights))]\n        for i in range(len(perm)):\n            if perm[i] != i and itinerary[perm[i]] != itinerary[i]:\n                break\n        else:\n            itineraries.append(itinerary)\n    \n    # Calculate the total cost for each valid itinerary\n    costs = [sum(graph[from_city][to_city] for from_city, to_city in zip(itinerary, itinerary[1:])) for itinerary in itineraries if all(graph[from_city][to_city] for from_city, to_city in zip(itinerary, itinerary[1:]))]\n    \n    # Return the cheapest valid itinerary or -1 if none exist\n    if costs:\n        min_cost = min(costs)\n        min_index = costs.index(min_cost)\n        return min_cost, itineraries[min_index]\n    return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_cheapest_itinerary():\n    # Test case 1: Basic case\n    flights = [(0, 1, 100), (1, 2, 100), (2, 0, 100)]\n    reservations = [(0, 1), (1, 2), (2, 0)]\n    assert cheapest_itinerary(flights, reservations) == (300, [0, 1, 2])\n    \n    # Test case 2: No valid itininerary\n    flights = [(0, 1, 100), (1, 2, 100), (2, 0, 100)]\n    reservations = [(0, 2), (2, 1)]\n    assert cheapest_itinerary(flights, reservations) == -1\n    \n    # Test case 3: Lexicographically smallest itinerary\n    flights = [(0, 1, 100), (1, 2, 100), (2, 0, 100)]\n    reservations = [(0, 1), (1, 2), (1, 2)]\n    assert cheapest_itinerary(flights, reservations) == (200, [0, 1, 1, 2])\n\n# To run the tests, use pytest\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000044", "row_id": 44, "seed_ids": ["847", "1820", "963"], "mode": "leetcode", "instruction": "You are given a list of `n` flights, each represented as a triplet `(i, j, k)` where `i` is the starting city, `j` is the destination city, and `k` is the cost of the flight. The cities are labeled from `0` to `n-1`. You are also given a list of `m` reservations, each represented as a pair `(i, j)` indicating that a reservation is made from city `i` to city `j`. A reservation is valid if there exists a direct flight between the two cities. \n\nReturn the total cost of the cheapest valid itinerary that visits every city exactly once, or `-1` if no such itinerary exists. You may start and end at any city, and you may revisit cities and use the same flight multiple times. \n\nIf there are multiple valid itineraries with the same total cost, return the one with the lexicographically smallest itinerary. An itinerary is lexicographically smaller if the sequence of city labels is lexicographically smaller."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary tree, return the vertical order traversal of its nodes' values. Vertical order traversal means starting from the root, traverse the tree column by column from left to right. If two nodes are in the same row and column, order them from left to right based on their values. The tree is represented using a list of `TreeNode` objects, where each `TreeNode` has an integer value, and left and right pointers to its children. If a node is `null`, it should be represented as `None` in the list. For example, the tree\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\ncan be represented as `[3, [9], [20, 15, 7]]`. Return the vertical order traversal as a list of lists, where each sublist represents a vertical level."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict, deque\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef vertical_order(root):\n    \"\"\"\n    Returns the vertical order traversal of its nodes' values.\n    \"\"\"\n    if not root:\n        return []\n    \n    column_table = defaultdict(list)\n    queue = deque([(root, 0)])  # (node, column_index)\n    min_col = 0\n    max_col = 0\n    \n    while queue:\n        node, col = queue.popleft()\n        if node:\n            column_table[col].append(node.val)\n            min_col = min(min_col, col)\n            max_col = max(max_col, col)\n            queue.append((node.left, col - 1))\n            queue.append((node.right, col + 1))\n    \n    return [column_table[i] for i in range(min_col, max_col + 1)]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom collections import defaultdict, deque\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef vertical_order_tester():\n    # Creating the tree\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    root.right.left = TreeNode(15)\n    root.right.right = TreeNode(7)\n\n    expected_output = [[9], [3, 15], [20], [7]]\n    assert vertical_order(root) == expected_output\n\n    # Creating another tree\n    root2 = None\n    expected_output2 = []\n    assert vertical_order(root2) == expected_output2\n\n    # Another tree with a single root node\n    root3 = TreeNode(1)\n    expected_output3 = [[1]]\n    assert vertical_order(root3) == expected_output3\n\n    # Tree with nodes in a single column\n    root4 = TreeNode(1)\n    root4.left = TreeNode(2)\n    root4.right = TreeNode(3)\n    root4.left.left = TreeNode(4)\n    root4.left.right = TreeNode(5)\n    expected_output4 = [[4], [2], [1], [3], [5]]\n    assert vertical_order(root4) == expected_output4\n\nvertical_order_tester()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000045", "row_id": 45, "seed_ids": ["223", "1228", "1528"], "mode": "leetcode", "instruction": "Given a binary tree, return the vertical order traversal of its nodes' values. Vertical order traversal means starting from the root, traverse the tree column by column from left to right. If two nodes are in the same row and column, order them from left to right based on their values. The tree is represented using a list of `TreeNode` objects, where each `TreeNode` has an integer value, and left and right pointers to its children. If a node is `null`, it should be represented as `None` in the list. For example, the tree\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\ncan be represented as `[3, [9], [20, 15, 7]]`. Return the vertical order traversal as a list of lists, where each sublist represents a vertical level."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary tree where each node has a unique value. The tree is represented as a list of lists, where each sublist represents a level of the tree. Each element in a sublist is either `None` (indicating a null node) or an integer representing the value of a node. For example:\n\n```python\n[\n    [1],\n    [2, 3],\n    [4, 5, 6, 7]\n]\n```\n\nThis represents a tree with the following structure:\n\n```\n    1\n   / \\\n  2   3\n / \\ / \\\n4  5 6  7\n```\n\nYou are also given a list of **queries** where each query is a 2D integer array `queries[i] = [startValuei, destValuei]`. For each query, you need to find the lowest common ancestor (LCA) of the nodes with values `startValuei` and `destValuei`. The LCA of two nodes is defined as the lowest node that has both nodes in its subtree. If either node does not exist in the tree, return `-1`.\n\nReturn an integer array `answer` where `answer[i]` is the result of the `i-th` query.\n\nFor example, given the tree above and the queries:\n\n```python\nqueries = [[4, 7], [3, 5]]\n```\n\nThe answers would be `[2, 2]`, since the LCA of 4 and 7 is 2, and the LCA of 3 and 5 is also 2."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict, deque\n\ndef build_tree(level_order):\n    if not level_order:\n        return None\n    root = TreeNode(level_order[0][0])\n    parent_dict = defaultdict(TreeNode)\n    parent_dict[None] = None\n    queue = deque([root])\n    for level in level_order[1:]:\n        while queue and len(queue[0].children) == len(level):\n            queue.popleft()\n        while queue:\n            parent = queue[0]\n            for val in level:\n                if val:\n                    node = TreeNode(val)\n                    parent.children.append(node)\n                    parent_dict[val] = parent\n                    if len(parent.children) == len(level):\n                        queue.popleft()\n                        queue.append(node)\n                else:\n                    queue.popleft()\n                    break\n    return root, parent_dict\n\ndef find_node(node, val, parent_dict):\n    if not node or not val in parent_dict:\n        return None\n    if node.val == val:\n        return node\n    for child in node.children:\n        found = find_node(child, val, parent_dict)\n        if found:\n            return found\n    return None\n\ndef lowest_common_ancestor(root, p, q, parent_dict):\n    if not root or not p or not q:\n        return -1\n    if p.val == q.val:\n        return p.val\n    path_p = set()\n    while p:\n        path_p.add(p.val)\n        p = parent_dict[p.val]\n    while q:\n        if q.val in path_p:\n            return q.val\n        q = parent_dict[q.val]\n    return -1\n\ndef find_lca_in_tree(level_order, queries):\n    root, parent_dict = build_tree(level_order)\n    answers = []\n    for query in queries:\n        p = find_node(root, query[0], parent_dict)\n        q = find_node(root, query[1], parent_dict)\n        if not p or not q:\n            answers.append(-1)\n        else:\n            answers.append(lowest_common_ancestor(root, p, q, parent_dict))\n    return answers\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n\n# Example:\nlevel_order = [\n    [1],\n    [2, 3],\n    [4, 5, 6, 7]\n]\nqueries = [[4, 7], [3, 5]]\n\nprint(find_lca_in_tree(level_order, queries))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_lca_in_tree, TreeNode\n\ndef test_find_lca_in_tree():\n    level_order = [\n        [1],\n        [2, 3],\n        [4, 5, 6, 7]\n    ]\n    queries = [[4, 7], [3, 5]]\n    assert find_lca_in_tree(level_order, queries) == [2, 2]\n\n    level_order = [\n        [1],\n        [2, 3],\n        [4, 5, 6, 7]\n    ]\n    queries = [[1, 3], [1, 5], [1, 7]]\n    assert find_lca_in_tree(level_order, queries) == [1, 1, 1]\n\n    level_order = [\n        [1],\n        [2, 3],\n        [4, 5, 6, 7]\n    ]\n    queries = [[4, 4], [5, 5]]\n    assert find_lca_in_tree(level_order, queries) == [4, 5]\n\n    level_order = [[1]]\n    queries = [[1, 1]]\n    assert find_lca_in_tree(level_order, queries) == [1]\n\n    level_order = [\n        [1],\n        [2, 3],\n        [4, 5, 6, 7]\n    ]\n    queries = [[8, 9]]\n    assert find_lca_in_tree(level_order, queries) == [-1]\n\ntest_find_lca_in_tree()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000046", "row_id": 46, "seed_ids": ["2055", "565", "2581"], "mode": "leetcode", "instruction": "You are given a binary tree where each node has a unique value. The tree is represented as a list of lists, where each sublist represents a level of the tree. Each element in a sublist is either `None` (indicating a null node) or an integer representing the value of a node. For example:\n\n```python\n[\n    [1],\n    [2, 3],\n    [4, 5, 6, 7]\n]\n```\n\nThis represents a tree with the following structure:\n\n```\n    1\n   / \\\n  2   3\n / \\ / \\\n4  5 6  7\n```\n\nYou are also given a list of **queries** where each query is a 2D integer array `queries[i] = [startValuei, destValuei]`. For each query, you need to find the lowest common ancestor (LCA) of the nodes with values `startValuei` and `destValuei`. The LCA of two nodes is defined as the lowest node that has both nodes in its subtree. If either node does not exist in the tree, return `-1`.\n\nReturn an integer array `answer` where `answer[i]` is the result of the `i-th` query.\n\nFor example, given the tree above and the queries:\n\n```python\nqueries = [[4, 7], [3, 5]]\n```\n\nThe answers would be `[2, 2]`, since the LCA of 4 and 7 is 2, and the LCA of 3 and 5 is also 2."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a class `MyStack` to implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `pop`, `top`, and `empty`). Implement the `MyStack` class:\n\n*   `void push(int x)` Pushes element x to the top of the stack.\n*   `int pop()` Removes the element from the top of the stack and returns it.\n*   `int top()` Returns the element at the top of the stack.\n*   `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.\n\n**Notes:** \n\n*   You must use **only** standard operations of a queue, which means only `enqueue`, `deque`, `size`, and `is empty` operations are valid.\n*   Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import deque\n\nclass MyStack:\n    def __init__(self):\n        self.q1 = deque()\n        self.q2 = deque()\n        \n    def push(self, x: int) -> None:\n        # Move all elements from q1 to q2\n        while self.q1:\n            self.q2.append(self.q1.popleft())\n        # Push the new element to q1\n        self.q1.append(x)\n        # Move all elements back from q2 to q1\n        while self.q2:\n            self.q1.append(self.q2.popleft())\n\n    def pop(self) -> int:\n        if self.q1:  # If stack is not empty\n            return self.q1.popleft()\n        return None\n\n    def top(self) -> int:\n        if self.q1:  # If stack is not empty\n            x = self.q1.popleft()\n            self.push(x)  # Push it back to the stack\n            return x\n        return None\n\n    def empty(self) -> bool:\n        return not self.q1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import MyStack\n\ndef test_push_and_pop():\n    stack = MyStack()\n    stack.push(1)\n    stack.push(2)\n    assert stack.pop() == 2\n    assert stack.pop() == 1\n    assert stack.pop() is None\n\ndef test_top():\n    stack = MyStack()\n    stack.push(1)\n    stack.push(2)\n    assert stack.top() == 2\n    assert stack.top() == 2  # did not pop, should still be 2\n    assert stack.pop() == 2\n    assert stack.top() == 1\n    assert stack.pop() == 1\n    assert stack.top() is None\n\ndef test_empty():\n    stack = MyStack()\n    assert stack.empty() == True\n    stack.push(1)\n    assert stack.empty() == False\n    stack.pop()\n    assert stack.empty() == True\n\ndef test_multiple_pushes():\n    stack = MyStack()\n    for i in range(5):\n        stack.push(i)\n    for i in range(4, -1, -1):\n        assert stack.pop() == i\n    assert stack.empty() == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000047", "row_id": 47, "seed_ids": ["952", "222", "232"], "mode": "leetcode", "instruction": "Design a class `MyStack` to implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `pop`, `top`, and `empty`). Implement the `MyStack` class:\n\n*   `void push(int x)` Pushes element x to the top of the stack.\n*   `int pop()` Removes the element from the top of the stack and returns it.\n*   `int top()` Returns the element at the top of the stack.\n*   `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.\n\n**Notes:** \n\n*   You must use **only** standard operations of a queue, which means only `enqueue`, `deque`, `size`, and `is empty` operations are valid.\n*   Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of `n` jobs where each job is represented by a tuple `(start, end, cpuTime)`, determine the minimum time required to complete all jobs. Each job must be processed in the given order, and the jobs can only be processed one at a time. A job can start immediately after the previous job ends. The goal is to find the total time taken to complete all jobs, including the time spent on the jobs themselves and any waiting time.\n\nFor example, given the jobs `[(1, 3, 2), (2, 5, 3), (7, 9, 1)]`, the total time to complete all jobs is `10` (2 + 3 + 5).\n\nImplement the function `minCompletionTime(jobs)` that takes a list of jobs and returns the minimum completion time."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef minCompletionTime(jobs):\n    \"\"\"\n    Returns the minimum time required to complete all jobs in the given order.\n    \"\"\"\n    if not jobs:\n        return 0\n\n    total_time = 0\n    current_time = jobs[0][0]  # Start time of the first job\n    \n    for start, end, cpu_time in jobs:\n        if start > current_time:\n            total_time += start - current_time\n        total_time += cpu_time\n        current_time = end\n\n    return total_time\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_minCompletionTime():\n    assert minCompletionTime([(1, 3, 2), (2, 5, 3), (7, 9, 1)]) == 10\n    assert minCompletionTime([(0, 2, 1)]) == 3\n    assert minCompletionTime([(1, 2, 1), (3, 4, 2)]) == 5\n    assert minCompletionTime([(10, 12, 3), (11, 13, 2), (8, 10, 1)]) == 14\n    assert minCompletionTime([]) == 0\n\ntest_minCompletionTime()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000048", "row_id": 48, "seed_ids": ["1433", "353", "265"], "mode": "leetcode", "instruction": "Given a list of `n` jobs where each job is represented by a tuple `(start, end, cpuTime)`, determine the minimum time required to complete all jobs. Each job must be processed in the given order, and the jobs can only be processed one at a time. A job can start immediately after the previous job ends. The goal is to find the total time taken to complete all jobs, including the time spent on the jobs themselves and any waiting time.\n\nFor example, given the jobs `[(1, 3, 2), (2, 5, 3), (7, 9, 1)]`, the total time to complete all jobs is `10` (2 + 3 + 5).\n\nImplement the function `minCompletionTime(jobs)` that takes a list of jobs and returns the minimum completion time."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an integer array `nums` and a target integer `target`, find the **shortest contiguous subarray** in `nums` such that the sum of the elements in the subarray is equal to or greater than `target`. If no such subarray exists, return `0`. A **contiguous subarray** is a subarray with at least two elements, and the **sum** of its elements is the sum of the corresponding elements in `nums`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef shortest_subarray_with_target(nums, target):\n    \"\"\"\n    Returns the length of the shortest contiguous subarray in nums\n    such that the sum of the elements in the subarray is equal to or greater than target.\n    If no such subarray exists, return 0.\n    \"\"\"\n    n = len(nums)\n    if n < 2:\n        return 0\n    \n    min_length = float('inf')\n    current_sum = 0\n    start = 0\n    \n    for end in range(n):\n        current_sum += nums[end]\n        \n        while current_sum >= target:\n            min_length = min(min_length, end - start + 1)\n            current_sum -= nums[start]\n            start += 1\n            \n    return min_length if min_length != float('inf') else 0\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import shortest_subarray_with_target\n\ndef test_shortest_subarray_with_target():\n    assert shortest_subarray_with_target([2, 3, 1, 2, 4, 3], 7) == 2\n    assert shortest_subarray_with_target([1, 4, 4], 4) == 1\n    assert shortest_subarray_with_target([2, 3, 1, 2, 4, 3], 11) == 3\n    assert shortest_subarray_with_target([1, 1, 1, 1, 1, 1, 1, 1], 11) == 0\n    assert shortest_subarray_with_target([1, 2, 3, 4, 5], 15) == 5\n    assert shortest_subarray_with_target([10, 2, -2, -20, 10], -10) == 3\n    assert shortest_subarray_with_target([1], 2) == 0\n    assert shortest_subarray_with_target([5, 6], 11) == 2\n\ndef test_cases_with_small_arrays():\n    assert shortest_subarray_with_target([2, 3], 5) == 2\n    assert shortest_subarray_with_target([1], 2) == 0\n    assert shortest_subarray_with_target([], 2) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000049", "row_id": 49, "seed_ids": ["1848", "1455", "1601"], "mode": "leetcode", "instruction": "Given an integer array `nums` and a target integer `target`, find the **shortest contiguous subarray** in `nums` such that the sum of the elements in the subarray is equal to or greater than `target`. If no such subarray exists, return `0`. A **contiguous subarray** is a subarray with at least two elements, and the **sum** of its elements is the sum of the corresponding elements in `nums`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an integer `n`, you are asked to find the number of ways to represent `n` as a sum of consecutive positive integers. For example, `5` can be represented as `2 + 3`, which is one way. Return the total number of ways to represent `n` in this manner.\n\nNote: Consecutive positive integers are those where each integer is one more than the previous one, such as `1, 2, 3, ...`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_ways_to_sum_consecutively(n):\n    \"\"\"\n    Given an integer n, returns the number of ways to represent n as a sum of consecutive positive integers.\n    \"\"\"\n    total_ways = 0\n    start = 1\n    current_sum = 0\n    \n    while start <= n // 2:\n        current_sum += start\n        start += 1\n        \n        while current_sum > n:\n            current_sum -= start - 1\n            start -= 1\n        \n        if current_sum == n:\n            total_ways += 1\n    \n    return total_ways\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_ways_to_sum_consecutively\n\ndef test_count_ways_to_sum_consecutively():\n    assert count_ways_to_sum_consecutively(5) == 2  # 1+4 or 2+3\n    assert count_ways_to_sum_consecutively(9) == 3  # 4+5, 2+3+4, 1+2+3+3\n    assert count_ways_to_sum_consecutively(15) == 4  # 1+2+3+4+5, 8+7, 4+5+6, 1+2+3+4+5\n    assert count_ways_to_sum_consecutively(1) == 1  # 1\n    assert count_ways_to_sum_consecutively(3) == 1  # 1+2\n    assert count_ways_to_sum_consecutively(16) == 1  # No way to represent 16 as sum of consecutive positive integers\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000050", "row_id": 50, "seed_ids": ["1057", "1399", "157"], "mode": "leetcode", "instruction": "Given an integer `n`, you are asked to find the number of ways to represent `n` as a sum of consecutive positive integers. For example, `5` can be represented as `2 + 3`, which is one way. Return the total number of ways to represent `n` in this manner.\n\nNote: Consecutive positive integers are those where each integer is one more than the previous one, such as `1, 2, 3, ...`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a class `CustomComparator` that implements a custom sorting algorithm for an array of integers. The sorting algorithm should sort the array in ascending order based on the following rules:\n\n1. Elements at even indices should be sorted in ascending order.\n2. Elements at odd indices should be sorted in descending order.\n\nYour task is to implement the `CustomComparator` class with the following methods:\n\n- `CustomComparator(int[] arr)`: Constructor that initializes the array to be sorted.\n- `void sort()`: Sorts the array according to the rules mentioned above.\n- `int[] getResult()`: Returns the sorted array.\n\nAdditionally, provide a `main` method to test your implementation with a sample array and print the sorted array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass CustomComparator:\n    def __init__(self, arr):\n        \"\"\"\n        Initializes the array to be sorted.\n        \"\"\"\n        self.arr = arr[:]\n\n    def sort(self):\n        \"\"\"\n        Sorts the array according to the rules:\n        - Elements at even indices are sorted in ascending order.\n        - Elements at odd indices are sorted in descending order.\n        \"\"\"\n        even_indices = sorted([self.arr[i] for i in range(0, len(self.arr), 2)])\n        odd_indices = sorted([self.arr[i] for i in range(1, len(self.arr), 2)], reverse=True)\n        \n        sorted_arr = []\n        for i in range(len(self.arr)):\n            if i % 2 == 0:\n                sorted_arr.append(even_indices.pop(0))\n            else:\n                sorted_arr.append(odd_indices.pop(0))\n        \n        self.arr = sorted_arr\n\n    def get_result(self):\n        \"\"\"\n        Returns the sorted array.\n        \"\"\"\n        return self.arr\n\n\ndef main():\n    comparator = CustomComparator([10, 11, 12, 13, 14, 15, 16, 17])\n    comparator.sort()\n    print(comparator.get_result())  # Expected output: [10, 17, 12, 15, 14, 13, 16, 11]\n\n\nif __name__ == \"__main__\":\n    main()\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import CustomComparator\n\ndef test_custom_comparator():\n    comparator = CustomComparator([10, 11, 12, 13, 14, 15, 16, 17])\n    comparator.sort()\n    assert comparator.get_result() == [10, 17, 12, 15, 14, 13, 16, 11]\n\ndef test_empty_array():\n    comparator = CustomComparator([])\n    comparator.sort()\n    assert comparator.get_result() == []\n\ndef test_single_element_array():\n    comparator = CustomComparator([1])\n    comparator.sort()\n    assert comparator.get_result() == [1]\n\ndef test_odd_element_array():\n    comparator = CustomComparator([10, 11, 12])\n    comparator.sort()\n    assert comparator.get_result() == [10, 12, 11]\n\ndef test_all_even_indices_same():\n    comparator = CustomComparator([10, 10, 10, 10])\n    comparator.sort()\n    assert comparator.get_result() == [10, 10, 10, 10]\n\ndef test_all_odd_indices_same():\n    comparator = CustomComparator([10, 20, 10, 20])\n    comparator.sort()\n    assert comparator.get_result() == [10, 20, 10, 20]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000051", "row_id": 51, "seed_ids": ["2515", "264", "1656"], "mode": "leetcode", "instruction": "Design a class `CustomComparator` that implements a custom sorting algorithm for an array of integers. The sorting algorithm should sort the array in ascending order based on the following rules:\n\n1. Elements at even indices should be sorted in ascending order.\n2. Elements at odd indices should be sorted in descending order.\n\nYour task is to implement the `CustomComparator` class with the following methods:\n\n- `CustomComparator(int[] arr)`: Constructor that initializes the array to be sorted.\n- `void sort()`: Sorts the array according to the rules mentioned above.\n- `int[] getResult()`: Returns the sorted array.\n\nAdditionally, provide a `main` method to test your implementation with a sample array and print the sorted array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` of length `n`, and a positive integer `k`, you are allowed to perform the following operation **any number of times**: choose any index `i` (0-indexed) and flip the value of `s[i]` (i.e., change `s[i]` from `0` to `1` or from `1` to `0`). A **substring** of `s` is said to be **balanced** if the number of `1`s in the substring is equal to the number of `0`s. \n\nAfter performing the above operations, return the **maximum** possible length of a **balanced** substring of `s`. A balanced substring must have an equal number of `0`s and `1`s. If no such balanced substring can be formed, return `0`.\n\nFor example, if `s = \"00110011\"` and `k = 1`, you can flip the second `0` to `1` to form the balanced substring `\"01110011\"`, which has a length of `6`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_balanced_substring_length(s: str, k: int) -> int:\n    \"\"\"\n    Returns the maximum possible length of a balanced substring of s.\n    \"\"\"\n    max_length = 0\n    balance = 0\n    left = 0\n    for right in range(len(s)):\n        balance += 1 if s[right] == '1' else -1\n        while balance < 0:\n            balance += 1 if s[left] == '1' else -1\n            left += 1\n        max_length = max(max_length, right - left + 1 + (2 * k))\n    return max_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_max_balanced_substring_length():\n    assert max_balanced_substring_length(\"010\", 1) == 4\n    assert max_balanced_substring_length(\"0011\", 2) == 6\n    assert max_balanced_substring_length(\"00110011\", 1) == 6\n    assert max_balanced_substring_length(\"01010101\", 2) == 8\n    assert max_balanced_substring_length(\"11111111\", 10) == 0\n\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000052", "row_id": 52, "seed_ids": ["1252", "828", "2560"], "mode": "leetcode", "instruction": "Given a binary string `s` of length `n`, and a positive integer `k`, you are allowed to perform the following operation **any number of times**: choose any index `i` (0-indexed) and flip the value of `s[i]` (i.e., change `s[i]` from `0` to `1` or from `1` to `0`). A **substring** of `s` is said to be **balanced** if the number of `1`s in the substring is equal to the number of `0`s. \n\nAfter performing the above operations, return the **maximum** possible length of a **balanced** substring of `s`. A balanced substring must have an equal number of `0`s and `1`s. If no such balanced substring can be formed, return `0`.\n\nFor example, if `s = \"00110011\"` and `k = 1`, you can flip the second `0` to `1` to form the balanced substring `\"01110011\"`, which has a length of `6`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a rectangular grid of size `m x n`, you are initially positioned at the top-left cell `(0, 0)`. You are allowed to move either down or right at any point in time. Each cell in the grid contains a unique integer. Design a function that returns the lexicographically smallest path of length `k` from the starting cell to the bottom-right cell `(m-1, n-1)`. A path is defined as a sequence of `k` cells from the grid, starting from `(0, 0)` and ending at `(m-1, n-1)`. The path must follow the movement rules (only down or right) and the cells must be distinct. The cells in the path are considered in the order they are visited. The lexicographically smallest path is the one where the sequence of cell values, when concatenated, forms the smallest possible number. For example, if the path is `[5, 7, 8]`, the value is `578`. If the path is `[1, 3, 2]`, the value is `132`. If two paths have the same sequence of cell values, the lexicographically smaller one is the one with the smaller first element."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_smallest_path(grid, k):\n    \"\"\"\n    Returns the lexicographically smallest path of length k from (0, 0) to (m-1, n-1) in a grid.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    if k >= m + n - 1:\n        # If k is too large, return the entire path from (0, 0) to (m-1, n-1)\n        return [str(grid[i][j]) for i in range(m) for j in range(n) if i == m-1 or j == n-1][-k:]\n    \n    # Directions: right and down\n    directions = [(0, 1), (1, 0)]\n    memo = {}  # Memoization dictionary to store (path, last_position) -> path_value\n    \n    def dfs(i, j, path_length, path):\n        if path_length == k:\n            return ''.join(path)\n        \n        if (tuple(path), (i, j)) in memo:\n            return memo[(tuple(path), (i, j))]\n        \n        min_path = float('inf')\n        for dx, dy in directions:\n            nx, ny = i + dx, j + dy\n            if 0 <= nx < m and 0 <= ny < n:\n                current_value = dfs(nx, ny, path_length + 1, path + [str(grid[nx][ny])])\n                if current_value < min_path:\n                    min_path = current_value\n                memo[(tuple(path), (i, j))] = min_path\n        return min_path\n    \n    return dfs(0, 0, 1, [str(grid[0][0])]) if k > 0 else ''\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_find_smallest_path():\n    grid1 = [[1,2,3],[4,5,6],[7,8,9]]\n    k1 = 3\n    assert find_smallest_path(grid1, k1) == '147'\n    \n    grid2 = [[5,9,3],[4,1,6],[7,8,2]]\n    k2 = 1\n    assert find_smallest_path(grid2, k2) == '1'\n    \n    grid3 = [[5,3],[4,4]]\n    k3 = 2\n    assert find_smallest_path(grid3, k3) == '34'\n    \n    grid4 = [[1,1,1],[1,1,1],[1,1,1]]\n    k4 = 3\n    assert find_smallest_path(grid4, k4) == '111'\n    \n    grid5 = [[10,1,12],[11,2,13],[12,3,14]]\n    k5 = 5\n    assert find_smallest_path(grid5, k5) == '11213'\n\ndef test_find_smallest_path_edge_cases():\n    grid6 = [[]]\n    k6 = 0\n    assert find_smallest_path(grid6, k6) == ''\n    \n    grid7 = [[1]]\n    k7 = 1\n    assert find_smallest_path(grid7, k7) == '1'\n\npytest.main()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000053", "row_id": 53, "seed_ids": ["866", "2194", "2503"], "mode": "leetcode", "instruction": "Given a rectangular grid of size `m x n`, you are initially positioned at the top-left cell `(0, 0)`. You are allowed to move either down or right at any point in time. Each cell in the grid contains a unique integer. Design a function that returns the lexicographically smallest path of length `k` from the starting cell to the bottom-right cell `(m-1, n-1)`. A path is defined as a sequence of `k` cells from the grid, starting from `(0, 0)` and ending at `(m-1, n-1)`. The path must follow the movement rules (only down or right) and the cells must be distinct. The cells in the path are considered in the order they are visited. The lexicographically smallest path is the one where the sequence of cell values, when concatenated, forms the smallest possible number. For example, if the path is `[5, 7, 8]`, the value is `578`. If the path is `[1, 3, 2]`, the value is `132`. If two paths have the same sequence of cell values, the lexicographically smaller one is the one with the smaller first element."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given two strings `s` and `t` of equal length. Each string consists of lowercase English letters. A **swap** is defined as exchanging the positions of two characters within a string. Your task is to determine the minimum number of swaps required to make the string `s` an anagram of string `t`. An anagram of a string is another string that contains the same characters, only the order of characters can be different.\n\nFor example, if `s = \"abc\"` and `t = \"bca\"`, you can make `s` an anagram of `t` by swapping `s[0]` and `s[1]`, resulting in `s = \"bca\"`. Return the minimum number of swaps needed to achieve this.\n\nConstraints:\n- `1 <= s.length == t.length <= 100`\n- `s` and `t` consist of lowercase English letters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_swaps_to_anagram(s: str, t: str) -> int:\n    \"\"\"\n    Returns the minimum number of swaps required to make s an anagram of t.\n    \"\"\"\n    from collections import Counter\n    s_count, t_count = Counter(s), Counter(t)\n    if s_count != t_count:\n        return -1  # Impossible to make an anagram if the counts of characters are different\n    swaps = 0\n    for char in s_count:\n        if s_count[char] > t_count[char]:\n            swaps += s_count[char] - t_count[char]\n    return swaps // 2  # Each pair of mismatched characters requires one swap\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_swaps_to_anagram():\n    assert min_swaps_to_anagram(\"abc\", \"bca\") == 0\n    assert min_swaps_to_anagram(\"abcd\", \"cdab\") == 2\n    assert min_swaps_to_anagram(\"abcd\", \"dacb\") == 4\n    assert min_swaps_to_anagram(\"bananas\", \"bananas\") == 0\n    assert min_swaps_to_anagram(\"abc\", \"cba\") == 1  # Only one swap needed\n    assert min_swaps_to_anagram(\"abc\", \"def\") == -1  # Different set of characters, not an anagram\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000054", "row_id": 54, "seed_ids": ["1519", "2137", "1638"], "mode": "leetcode", "instruction": "You are given two strings `s` and `t` of equal length. Each string consists of lowercase English letters. A **swap** is defined as exchanging the positions of two characters within a string. Your task is to determine the minimum number of swaps required to make the string `s` an anagram of string `t`. An anagram of a string is another string that contains the same characters, only the order of characters can be different.\n\nFor example, if `s = \"abc\"` and `t = \"bca\"`, you can make `s` an anagram of `t` by swapping `s[0]` and `s[1]`, resulting in `s = \"bca\"`. Return the minimum number of swaps needed to achieve this.\n\nConstraints:\n- `1 <= s.length == t.length <= 100`\n- `s` and `t` consist of lowercase English letters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times:\n\n- Pick any two adjacent characters in `s` and replace them with a single character that is the **lexicographically smallest** character among them. For example, `ab` can be replaced with `a`, and `bb` can be replaced with `b`.\n\nReturn _the lexicographically smallest string that can be obtained by applying the above operation any number of times._\n\nExample:\n```python\nInput: s = \"cbaaaabc\"\nOutput: \"aaaabca\"\nExplanation:\nFirst, replace \"cba\" to get \"aabaaabc\".\nThen, replace \"aabaaabc\" to get \"aaaabca\".\n```"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef smallest_string(s: str) -> str:\n    \"\"\"\n    Returns the lexicographically smallest string that can be obtained by replacing\n    any two adjacent characters with the lexicographically smallest character among them.\n    \"\"\"\n    s = list(s)  # Convert string to list for in-place modification\n    i = 0\n    n = len(s)\n    while i < n - 1:\n        if s[i] <= s[i + 1]:\n            i += 1\n        else:\n            s[i] = s[i + 1]  # Replace the character\n            n -= 1  # Reduce the length since one character is effectively removed\n    return ''.join(s)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import smallest_string\n\ndef test_smallest_string():\n    assert smallest_string(\"cbaaaabc\") == \"aaaabca\"\n    assert smallest_string(\"leetcode\") == \"aaaceeee\"\n    assert smallest_string(\"abc\") == \"a\"\n    assert smallest_string(\"bb\") == \"b\"\n    assert smallest_string(\"a\") == \"a\"\n    assert smallest_string(\"abccba\") == \"aacca\"\n    assert smallest_string(\"zxy\") == \"xyz\"\n    assert smallest_string(\"xyzzyx\") == \"xyyxy\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000055", "row_id": 55, "seed_ids": ["96", "427", "2347"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times:\n\n- Pick any two adjacent characters in `s` and replace them with a single character that is the **lexicographically smallest** character among them. For example, `ab` can be replaced with `a`, and `bb` can be replaced with `b`.\n\nReturn _the lexicographically smallest string that can be obtained by applying the above operation any number of times._\n\nExample:\n```python\nInput: s = \"cbaaaabc\"\nOutput: \"aaaabca\"\nExplanation:\nFirst, replace \"cba\" to get \"aabaaabc\".\nThen, replace \"aabaaabc\" to get \"aaaabca\".\n```"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an unsorted array of integers `nums`, return the maximum number of **distinct** elements in any **continuous subarray** of size `k`. A **continuous subarray** is defined as a subarray that contains `k` consecutive elements from the original array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict\n\ndef max_distinct_elements_in_subarray(nums, k):\n    \"\"\"\n    Given an unsorted array of integers and a positive integer k, returns the maximum number of distinct elements\n    in any continuous subarray of size k.\n    \"\"\"\n    if k == 0:\n        return 0\n    distinct_count = defaultdict(int)\n    max_distinct = 0\n    left = 0\n    \n    for right in range(len(nums)):\n        distinct_count[nums[right]] += 1\n        while right - left + 1 > k:\n            distinct_count[nums[left]] -= 1\n            if distinct_count[nums[left]] == 0:\n                del distinct_count[nums[left]]\n            left += 1\n        max_distinct = max(max_distinct, len(distinct_count))\n    \n    return max_distinct\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_distinct_elements_in_subarray\n\ndef test_max_distinct_elements_in_subarray():\n    assert max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3], 3) == 3\n    assert max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3, 5], 3) == 3\n    assert max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3, 5], 4) == 4\n    assert max_distinct_elements_in_subarray([1, 2, 1, 3, 4, 3, 5], 7) == 5\n    assert max_distinct_elements_in_subarray([1, 1, 2, 2, 3, 3], 3) == 2\n    assert max_distinct_elements_in_subarray([1, 2, 3, 4, 5, 6], 1) == 1\n    assert max_distinct_elements_in_subarray([], 3) == 0\n    assert max_distinct_elements_in_subarray([1, 2, 3, 4, 5, 6], 0) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000056", "row_id": 56, "seed_ids": ["230", "1433", "674"], "mode": "leetcode", "instruction": "Given an unsorted array of integers `nums`, return the maximum number of **distinct** elements in any **continuous subarray** of size `k`. A **continuous subarray** is defined as a subarray that contains `k` consecutive elements from the original array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` consisting of lowercase English letters. You are also given an integer `k`. You can perform the following operation on the string any number of times:\n\n- Pick any substring of length `k` from `s` and reverse it.\n\nYour task is to determine the lexicographically smallest string that can be obtained after performing the above operation any number of times. Return the resulting string.\n\nExample:\n- If `s = \"cbaebabacd\"` and `k = 3`, you can reverse the substring `\"bac\"` to get `\"cbabcabad\"`. Reversing `\"bac\"` again gives `\"cbabcabad\"` which is the lexicographically smallest string possible. So, the answer is `\"abcabad\"`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef smallest_by_reversing_substrings(s, k):\n    \"\"\"\n    Returns the lexicographically smallest string that can be obtained\n    by reversing any number of substrings of length k in the input string s.\n    \"\"\"\n    n = len(s)\n    result = list(s)\n    for i in range(0, n - k + 1):\n        substring = s[i:i+k]\n        min_sub = min(s[i:i+k], s[i:i+k][::-1])\n        if min_sub == substring[::-1]:\n            result[i:i+k] = s[i:i+k][::-1]\n        else:\n            result[i:i+k] = s[i:i+k]\n    return ''.join(result)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_smallest_by_reversing_substrings():\n    assert smallest_by_reversing_substrings(\"cbaebabacd\", 3) == \"abacababc\"\n    assert smallest_by_reversing_substrings(\"aabc\", 3) == \"aacb\"\n    assert smallest_by_reversing_substrings(\"zxy\", 3) == \"xyz\"\n    assert smallest_by_reversing_substrings(\"abcd\", 3) == \"abdc\"\n    assert smallest_by_reversing_substrings(\"zzx\", 3) == \"zxx\"\n    assert smallest_by_reversing_substrings(\"cbabcabad\", 3) == \"abcabad\"\n    assert smallest_by_reversing_substrings(\"abcabc\", 3) == \"abcabc\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000057", "row_id": 57, "seed_ids": ["2285", "637", "848"], "mode": "leetcode", "instruction": "You are given a string `s` consisting of lowercase English letters. You are also given an integer `k`. You can perform the following operation on the string any number of times:\n\n- Pick any substring of length `k` from `s` and reverse it.\n\nYour task is to determine the lexicographically smallest string that can be obtained after performing the above operation any number of times. Return the resulting string.\n\nExample:\n- If `s = \"cbaebabacd\"` and `k = 3`, you can reverse the substring `\"bac\"` to get `\"cbabcabad\"`. Reversing `\"bac\"` again gives `\"cbabcabad\"` which is the lexicographically smallest string possible. So, the answer is `\"abcabad\"`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a **0-indexed** string `s` and an integer `k`, reverse the segment of `s` that starts at index `0` and ends at the index of the **k-th** occurrence of the character `a` (**inclusive**). If the character `a` does not occur `k` times in `s`, do nothing. \n\n*   For example, if `s = \"abcdeaa \"` and `k = 3`, then you should reverse the segment that starts at `0` and ends at `3` (**inclusive**). The resulting string will be `\"aebcd \"`.\n\nReturn the resulting string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef reverse_segment(s: str, k: int, char: str = 'a') -> str:\n    \"\"\"\n    Reverses the segment of s that starts at index 0 and ends at the index of the k-th occurrence of char.\n    If char does not occur k times, returns the original string.\n    \"\"\"\n    count = 0\n    for i, c in enumerate(s):\n        if c == char:\n            count += 1\n        if count == k:\n            return s[:i+1][::-1] + s[i+1:]\n    return s\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_reverse_segment():\n    assert reverse_segment(\"abcdeaa\", 3, 'a') == \"aebcd\"\n    assert reverse_segment(\"aabcde\", 2, 'a') == \"aebcd\"\n    assert reverse_segment(\"abcd\", 5, 'a') == \"abcd\"\n    assert reverse_segment(\"ababa\", 2, 'a') == \"aaaba\"\n    assert reverse_segment(\"ababa\", 5, 'b') == \"baaba\"\n    assert reverse_segment(\"xyz\", 1, 'a') == \"xyz\"\n    assert reverse_segment(\"\", 2, 'a') == \"\"\n    assert reverse_segment(\"aaaaa\", 3, 'a') == \"aaaab\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000058", "row_id": 58, "seed_ids": ["558", "2000", "1674"], "mode": "leetcode", "instruction": "Given a **0-indexed** string `s` and an integer `k`, reverse the segment of `s` that starts at index `0` and ends at the index of the **k-th** occurrence of the character `a` (**inclusive**). If the character `a` does not occur `k` times in `s`, do nothing. \n\n*   For example, if `s = \"abcdeaa \"` and `k = 3`, then you should reverse the segment that starts at `0` and ends at `3` (**inclusive**). The resulting string will be `\"aebcd \"`.\n\nReturn the resulting string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given two arrays of integers, `nums1` and `nums2`, both of the same length, you are allowed to rearrange the elements of `nums1`. Your task is to find the maximum possible sum of the absolute differences between corresponding elements of `nums1` and `nums2`. In other words, you want to maximize the expression `\u03a3 |nums1[i] - nums2[i]|` for `0 <= i < length(nums1)`. Return this maximum possible sum.\n\nFor example, if `nums1 = [1, 2, 3, 4]` and `nums2 = [2, 1, 4, 3]`, one possible rearrangement of `nums1` could be `[4, 3, 2, 1]`, which would give a sum of `|4-2| + |3-1| + |2-4| + |1-3| = 10`. Find the optimal rearrangement of `nums1` to achieve the highest possible sum."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_absolute_difference_sum(nums1, nums2):\n    \"\"\"\n    Rearranges nums1 to maximize the sum of absolute differences with nums2.\n    \"\"\"\n    nums1.sort()\n    nums2.sort(reverse=True)\n    max_sum = sum(abs(a - b) for a, b in zip(nums1, nums2))\n    return max_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_max_absolute_difference_sum():\n    assert max_absolute_difference_sum([1, 2, 3, 4], [2, 1, 4, 3]) == 10\n    assert max_absolute_difference_sum([1, 2, 3, 4, 5], [1, 4, 3, 2, 5]) == 10\n    assert max_absolute_difference_sum([-1, -2, -3], [-2, -1, -4]) == 6\n    assert max_absolute_difference_sum([1, 3, 5, 7], [8, 6, 4, 2]) == 18\n\ndef test_max_absolute_difference_sum_with_equal_elements():\n    assert max_absolute_difference_sum([1, 1, 1], [1, 1, 1]) == 0\n    assert max_absolute_difference_sum([-1, -1, -1], [-1, -1, -1]) == 0\n\ndef test_max_absolute_difference_sum_with_large_numbers():\n    assert max_absolute_difference_sum([10, 100, 1000], [1, 0, 0]) == 1989\n    assert max_absolute_difference_sum([500, 600, 700], [1000, 900, 800]) == 1300\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000059", "row_id": 59, "seed_ids": ["1181", "1859", "1874"], "mode": "leetcode", "instruction": "Given two arrays of integers, `nums1` and `nums2`, both of the same length, you are allowed to rearrange the elements of `nums1`. Your task is to find the maximum possible sum of the absolute differences between corresponding elements of `nums1` and `nums2`. In other words, you want to maximize the expression `\u03a3 |nums1[i] - nums2[i]|` for `0 <= i < length(nums1)`. Return this maximum possible sum.\n\nFor example, if `nums1 = [1, 2, 3, 4]` and `nums2 = [2, 1, 4, 3]`, one possible rearrangement of `nums1` could be `[4, 3, 2, 1]`, which would give a sum of `|4-2| + |3-1| + |2-4| + |1-3| = 10`. Find the optimal rearrangement of `nums1` to achieve the highest possible sum."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of `n` tasks, each with a unique identifier from `1` to `n`. The tasks are to be scheduled on a single machine that processes them sequentially. Each task takes a certain amount of time to complete, which is given by an array `times` of length `n` where `times[i]` is the time required to complete the `i+1`-th task. The machine can skip any task once, but only before it starts processing that task. Once a task is skipped, it cannot be processed. Given `times` and an integer `k` (where `0 <= k <= n`), find the minimum possible time required to complete all tasks if you can skip up to `k` tasks. Return the minimum time."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_task_time(times, k):\n    \"\"\"\n    Finds the minimum time required to complete all tasks given that up to k tasks can be skipped.\n    \"\"\"\n    # If k is large enough to skip all tasks or there are no tasks, return 0\n    if k >= len(times) or len(times) == 0:\n        return 0\n\n    # Sort times to prioritize longer tasks\n    times.sort()\n\n    # If k is 0, we cannot skip any tasks, so return the sum of all times\n    if k == 0:\n        return sum(times)\n\n    # Calculate the remaining time after skipping the k largest tasks\n    remaining_tasks = len(times) - k\n    total_time = sum(times[:remaining_tasks])\n    for i in range(k):\n        total_time += times[-(i + 1)]\n    return total_time\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_task_time():\n    assert min_task_time([2, 3, 5], 1) == 12\n    assert min_task_time([2, 3, 5], 2) == 10\n    assert min_task_time([1, 2, 3], 3) == 0\n    assert min_task_time([], 0) == 0\n    assert min_task_time([5], 0) == 5\n    assert min_task_time([1, 2, 3, 4, 5], 2) == 14\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000060", "row_id": 60, "seed_ids": ["2335", "805", "558"], "mode": "leetcode", "instruction": "You are given a list of `n` tasks, each with a unique identifier from `1` to `n`. The tasks are to be scheduled on a single machine that processes them sequentially. Each task takes a certain amount of time to complete, which is given by an array `times` of length `n` where `times[i]` is the time required to complete the `i+1`-th task. The machine can skip any task once, but only before it starts processing that task. Once a task is skipped, it cannot be processed. Given `times` and an integer `k` (where `0 <= k <= n`), find the minimum possible time required to complete all tasks if you can skip up to `k` tasks. Return the minimum time."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary string `s` consisting only of `0`s and `1`s. A **substring** of `s` is called **good** if it does not contain more than one `0`. You are also given an integer `k`. Your task is to find the **maximum** number of **good** substrings that can be obtained by rearranging the characters of `s` and then splitting the string into at most `k` non-empty substrings. Return the maximum number of good substrings you can obtain.\n\nFor example, if `s = \"1001010011\"` and `k = 3`, one possible way to split `s` into good substrings is `\"10010\"`, `\"100\"`, and `\"11\"`, which gives a total of 3 good substrings."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_good_substrings(s, k):\n    \"\"\"\n    Returns the maximum number of good substrings that can be obtained by rearranging\n    the characters of s and then splitting the string into at most k non-empty substrings.\n    \"\"\"\n    ones, zeros = 0, 0\n    for char in s:\n        if char == '1':\n            ones += 1\n        else:\n            zeros += 1\n    \n    if zeros <= k:\n        return zeros\n    else:\n        # Split the string at most k times\n        splits = 1\n        zeros_in_chunk = 0\n        for i in range(len(s) - 1):\n            if s[i] == '0':\n                zeros_in_chunk += 1\n            if zeros_in_chunk > k:\n                splits += 1\n                zeros_in_chunk = 1  # Reset for the next chunk\n            if splits > k:\n                break\n        \n        return min(zeros, splits)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_max_good_substrings():\n    assert max_good_substrings(\"1001010011\", 3) == 3\n    assert max_good_substrings(\"100011000\", 1) == 2\n    assert max_good_substrings(\"101010101\", 2) == 4\n    assert max_good_substrings(\"0001\", 3) == 1\n    assert max_good_substrings(\"111100000\", 5) == 5\n    assert max_good_substrings(\"010101010\", 8) == 8\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000061", "row_id": 61, "seed_ids": ["294", "2562", "1881"], "mode": "leetcode", "instruction": "You are given a binary string `s` consisting only of `0`s and `1`s. A **substring** of `s` is called **good** if it does not contain more than one `0`. You are also given an integer `k`. Your task is to find the **maximum** number of **good** substrings that can be obtained by rearranging the characters of `s` and then splitting the string into at most `k` non-empty substrings. Return the maximum number of good substrings you can obtain.\n\nFor example, if `s = \"1001010011\"` and `k = 3`, one possible way to split `s` into good substrings is `\"10010\"`, `\"100\"`, and `\"11\"`, which gives a total of 3 good substrings."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times:\n\n- Choose any two indices `i` and `j` (0-indexed) where `0 <= i < j < s.length` and `s[i] = 'a'` and `s[j] = 'z'`. Reverse the substring `s[i+1..j-1]`.\n\nYour task is to determine the minimum number of operations required to transform the string `s` into a string where all characters are the same. If it is impossible to achieve such a string, return `-1`.\n\nFor example, given the string `s = \"azbzczbzcz\"`, you can perform the following operations:\n1. Choose `i = 0` and `j = 1` to get `s = \"aabzczbzcz\"`.\n2. Choose `i = 2` and `j = 3` to get `s = \"aaazbzczcz\"`.\n3. Choose `i = 4` and `j = 5` to get `s = \"aaaaaaazcz\"`.\n4. Choose `i = 6` and `j = 7` to get `s = \"aaaaaaaazz\"`.\n5. Choose `i = 8` and `j = 9` to get `s = \"aaaaaaaaaz\"`.\n\nReturn `5` as the answer."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_operations_to_uniform(s: str) -> int:\n    \"\"\"\n    Calculates the minimum number of operations required to make the string uniform.\n    \"\"\"\n    if len(s) < 2:\n        return 0\n\n    min_operations = float('inf')\n    for i, j in ((0, s.rfind('a')), (s.find('z'), s.rfind('z'))):\n        operations = 0\n        while i < j:\n            operations += 1\n            k = s.rfind('z', i, j)  # Find the last 'z' in the substring s[i..j-1]\n            s = s[:i] + s[i:j][::-1] + s[j:]  # Reverse the substring s[i+1..k-1]\n            i = k  # Move 'i' to the last 'z'\n            j = s.find('a', i + 1)  # Find the next 'a' after 'i'\n        if i == j and s[i] == 'a':\n            min_operations = min(min_operations, operations)\n    if min_operations == float('inf'):\n        return -1\n    return min_operations\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_operations_to_uniform():\n    assert min_operations_to_uniform(\"azbzczbzcz\") == 5\n    assert min_operations_to_uniform(\"a\") == 0\n    assert min_operations_to_uniform(\"z\") == 0\n    assert min_operations_to_uniform(\"abz\") == 1\n    assert min_operations_to_uniform(\"azbz\") == 1\n    assert min_operations_to_uniform(\"aaz\") == -1\n    assert min_operations_to_uniform(\"zzaa\") == -1\n    assert min_operations_to_uniform(\"aba\") == -1\n    assert min_operations_to_uniform(\"azbzzbza\") == 2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000062", "row_id": 62, "seed_ids": ["1442", "522", "2612"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times:\n\n- Choose any two indices `i` and `j` (0-indexed) where `0 <= i < j < s.length` and `s[i] = 'a'` and `s[j] = 'z'`. Reverse the substring `s[i+1..j-1]`.\n\nYour task is to determine the minimum number of operations required to transform the string `s` into a string where all characters are the same. If it is impossible to achieve such a string, return `-1`.\n\nFor example, given the string `s = \"azbzczbzcz\"`, you can perform the following operations:\n1. Choose `i = 0` and `j = 1` to get `s = \"aabzczbzcz\"`.\n2. Choose `i = 2` and `j = 3` to get `s = \"aaazbzczcz\"`.\n3. Choose `i = 4` and `j = 5` to get `s = \"aaaaaaazcz\"`.\n4. Choose `i = 6` and `j = 7` to get `s = \"aaaaaaaazz\"`.\n5. Choose `i = 8` and `j = 9` to get `s = \"aaaaaaaaaz\"`.\n\nReturn `5` as the answer."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` and an integer `k`, return the minimum number of operations required to make exactly `k` characters in the string '1'. In one operation, you can choose any substring of the string and flip all the characters in it (i.e., change '0' to '1' and '1' to '0'). Two strings are considered to be **similar** if they have the same number of '1's. The test cases are generated such that the binary string `s` can always be made to have exactly `k` '1's."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_operations_to_k_ones(binary_str, k):\n    \"\"\"\n    Calculates the minimum number of operations required to have exactly k '1's in the binary string.\n    \"\"\"\n    ones = sum(1 for char in binary_str if char == '1')\n    if ones == k:\n        return 0\n    \n    max_consecutive_ones = current_consecutive_ones = binary_str.count('1')\n    for i in range(len(binary_str)):\n        if binary_str[i] == '1':\n            current_consecutive_ones -= 1\n        else:\n            max_consecutive_ones = max(max_consecutive_ones, (i + 1 - current_consecutive_ones) - 1)\n            current_consecutive_ones = 0\n    \n    operations = k - ones if binary_str[-1] == '0' else k - ones + max_consecutive_ones\n    return operations\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_operations_to_k_ones():\n    assert min_operations_to_k_ones(\"00010101001\", 3) == 3\n    assert min_operations_to_k_ones(\"0101010\", 1) == 2\n    assert min_operations_to_k_ones(\"111000\", 3) == 0\n    assert min_operations_to_k_ones(\"00\", 1) == 1\n    assert min_operations_to_k_ones(\"1111111\", 5) == 6\n\ndef test_min_operations_with_large_input():\n    input_str = '0' * 100 + '1' * 100 + '0' * 100 + '1' * 100\n    assert min_operations_to_k_ones(input_str, 200) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000063", "row_id": 63, "seed_ids": ["2449", "1456", "1711"], "mode": "leetcode", "instruction": "Given a binary string `s` and an integer `k`, return the minimum number of operations required to make exactly `k` characters in the string '1'. In one operation, you can choose any substring of the string and flip all the characters in it (i.e., change '0' to '1' and '1' to '0'). Two strings are considered to be **similar** if they have the same number of '1's. The test cases are generated such that the binary string `s` can always be made to have exactly `k` '1's."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary search tree (BST) and a node value `target`, return `true` if the `target` is found in the BST, and `false` otherwise. You may assume that each node in the BST has **uniquely** valued children. Additionally, provide a method to insert a new node with a given value into the BST while maintaining its properties."}, {"role": "assistant", "content": "<|Solution Begin|>\n\nTo solve this problem, we need to implement two functions: `find_target`, which checks if a given target value exists in the BST, and `insert`, which inserts a new node with a given value into the BST while ensuring the BST properties are maintained.\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_target(root, target):\n    \"\"\"\n    Returns True if the target is found in the BST, and False otherwise.\n    \"\"\"\n    if root is None:\n        return False\n    if root.val == target:\n        return True\n    elif target < root.val:\n        return find_target(root.left, target)\n    else:\n        return find_target(root.right, target)\n\ndef insert(root, val):\n    \"\"\"\n    Inserts a new node with the given value into the BST.\n    \"\"\"\n    if root is None:\n        return TreeNode(val)\n    if val < root.val:\n        root.left = insert(root.left, val)\n    else:\n        root.right = insert(root.right, val)\n    return root\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import TreeNode, find_target, insert\n\ndef test_find_target_exist():\n    root = TreeNode(4, TreeNode(2, TreeNode(1), TreeNode(3)), TreeNode(6, TreeNode(5), TreeNode(7)))\n    assert find_target(root, 3) == True\n    assert find_target(root, 5) == True\n    assert find_target(root, 7) == True\n\ndef test_find_target_not_exist():\n    root = TreeNode(4, TreeNode(2, TreeNode(1), TreeNode(3)), TreeNode(6, TreeNode(5), TreeNode(7)))\n    assert find_target(root, 0) == False\n    assert find_target(root, 8) == False\n\ndef test_insert():\n    root = None\n    root = insert(root, 4)\n    root = insert(root, 2)\n    root = insert(root, 6)\n    root = insert(root, 1)\n    root = insert(root, 3)\n    root = insert(root, 5)\n    root = insert(root, 7)\n    assert find_target(root, 2) == True\n    assert find_target(root, 6) == True\n    assert find_target(root, 1) == True\n    assert find_target(root, 3) == True\n    assert find_target(root, 5) == True\n    assert find_target(root, 7) == True\n    assert find_target(root, 0) == False\n    assert find_target(root, 8) == False\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000064", "row_id": 64, "seed_ids": ["1470", "1431", "114"], "mode": "leetcode", "instruction": "Given a binary search tree (BST) and a node value `target`, return `true` if the `target` is found in the BST, and `false` otherwise. You may assume that each node in the BST has **uniquely** valued children. Additionally, provide a method to insert a new node with a given value into the BST while maintaining its properties."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an array `nums` consisting of integers from `1` to `n` inclusive, where `n` is the length of the array. The array is initially sorted in ascending order. However, exactly one element is missing from the array, and the array is not necessarily contiguous. Your task is to find the missing element and return it. \n\nFor example, if the array is `[1, 2, 4, 5, 6]`, the missing element is `3`, and you should return `3`. If the array is `[1, 3, 4, 5]`, the missing element is `2`, and you should return `2`.\n\nReturn the missing element in the array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_missing_element(nums):\n    \"\"\"\n    Finds the missing element in the array which is sorted in ascending order except for\n    one missing number. The array contains integers from 1 to n inclusive, where n is the\n    length of the array + 1 due to the missing number.\n    \"\"\"\n    n = len(nums) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_find_missing_element():\n    assert find_missing_element([1, 2, 4, 5, 6]) == 3\n    assert find_missing_element([1, 3, 4, 5]) == 2\n    assert find_missing_element([1, 2, 3, 5]) == 4\n    assert find_missing_element([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\n    assert find_missing_element([1, 2, 3, 4, 5, 7, 8, 9, 10]) == 6\n\ndef test_edge_cases():\n    assert find_missing_element([1]) == 2\n    assert find_missing_element([2]) == 1\n    assert find_missing_element([3, 4, 5]) == 2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000065", "row_id": 65, "seed_ids": ["824", "1329", "1955"], "mode": "leetcode", "instruction": "You are given an array `nums` consisting of integers from `1` to `n` inclusive, where `n` is the length of the array. The array is initially sorted in ascending order. However, exactly one element is missing from the array, and the array is not necessarily contiguous. Your task is to find the missing element and return it. \n\nFor example, if the array is `[1, 2, 4, 5, 6]`, the missing element is `3`, and you should return `3`. If the array is `[1, 3, 4, 5]`, the missing element is `2`, and you should return `2`.\n\nReturn the missing element in the array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a **binary search tree (BST)**, return the number of **valid** sequences of **node values** such that for every node, the value of that node is **strictly greater** than the sum of the values of all nodes that come before it and **strictly less** than the sum of the values of all nodes that come after it. In other words, a valid sequence is one where each node's value is the sum of a contiguous subsequence of its in-order traversal values. For example, in the tree:\n\n```\n    5\n   / \\\n  3   7\n / \\\n2   4\n```\n\nThe sequence `[2, 3, 4, 5, 7]` is valid because each node's value is greater than the sum of all previous nodes and less than the sum of all subsequent nodes. Note that the sequence must strictly follow the in-order traversal of the tree."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef count_valid_sequences(root: TreeNode) -> int:\n    \"\"\"\n    Returns the number of valid node value sequences in a binary search tree.\n    \"\"\"\n    def traverse(node: TreeNode, prefix_sum: int, suffix_sum: int, min_val: int, max_val: int, is_valid: bool, memo):\n        if not node:\n            return 1 if is_valid else 0\n        \n        current_val = node.val\n        new_prefix_sum = prefix_sum + current_val\n        new_min_val = min_val\n        new_max_val = max_val\n        \n        if (prefix_sum, suffix_sum, new_min_val, new_max_val, is_valid, current_val) in memo:\n            return memo[(prefix_sum, suffix_sum, new_min_val, new_max_val, is_valid, current_val)]\n        \n        left_count = traverse(node.left, new_prefix_sum, suffix_sum + current_val, new_min_val, max(new_max_val, current_val), False, memo)\n        right_count = traverse(node.right, prefix_sum + current_val, suffix_sum, current_val, max_val, False, memo)\n        \n        if current_val > prefix_sum and current_val < suffix_sum and new_min_val < current_val < new_max_val and is_valid:\n            left_count += traverse(node.left, new_prefix_sum, suffix_sum + current_val, new_min_val, max(new_max_val, current_val), True, memo)\n            right_count += traverse(node.right, prefix_sum + current_val, suffix_sum, current_val, max_val, True, memo)\n        \n        memo[(prefix_sum, suffix_sum, new_min_val, new_max_val, is_valid, current_val)] = left_count + right_count\n        return left_count + right_count\n    \n    return traverse(root, 0, 0, float('-inf'), float('inf'), False, {})\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom typing import List\nfrom solution import count_valid_sequences\n\ndef build_bst(from_list: List[int]) -> TreeNode:\n    if not from_list:\n        return None\n    import math\n    def build_tree(nodes: List[TreeNode], index: int) -> TreeNode:\n        if index < len(nodes) and nodes[index]:\n            node = nodes[index]\n            left_index = 2 * index + 1\n            right_index = 2 * index + 2\n            node.left = build_tree(nodes, left_index)\n            node.right = build_tree(nodes, right_index)\n            return node\n    nodes = [TreeNode(val) if val is not None else None for val in from_list]\n    return build_tree(nodes, 0)\n\n# Test case\ndef test_count_valid_sequences():\n    root = build_bst([5, 3, 7, 2, 4])\n    assert count_valid_sequences(root) == 3\n\ndef test_count_valid_sequences_with Repeat():\n    # This tree doesn't have the increasing/decreasing subsequence property\n    root = build_bst([8, 5, 9, 4, 7, 10, 11])\n    assert count_valid_sequences(root) == 0\n\ndef test_count_valid_sequences_with_only_leaf():\n    root = build_bst([1])\n    assert count_valid_sequences(root) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000066", "row_id": 66, "seed_ids": ["929", "376", "663"], "mode": "leetcode", "instruction": "Given a **binary search tree (BST)**, return the number of **valid** sequences of **node values** such that for every node, the value of that node is **strictly greater** than the sum of the values of all nodes that come before it and **strictly less** than the sum of the values of all nodes that come after it. In other words, a valid sequence is one where each node's value is the sum of a contiguous subsequence of its in-order traversal values. For example, in the tree:\n\n```\n    5\n   / \\\n  3   7\n / \\\n2   4\n```\n\nThe sequence `[2, 3, 4, 5, 7]` is valid because each node's value is greater than the sum of all previous nodes and less than the sum of all subsequent nodes. Note that the sequence must strictly follow the in-order traversal of the tree."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an integer array `nums` and an integer `k`. The _value_ of this array is defined as the sum of `|nums[i] - nums[i + 1]|` for all `0 <= i < nums.length - 1`. You are allowed to select any subarray of the given array and shift its elements cyclically (i.e., rotate the subarray elements to the left or right) any number of times. You can perform this operation **only once**. Find the maximum possible value of the final array after performing the operation."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_possible_value(nums, k):\n    \"\"\"\n    Computes the maximum possible value of the array after performing\n    at most one cyclic shift operation on any subarray.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = [0] * n\n    total_sum = 0\n    \n    # Calculate prefix sums and total sum\n    for i in range(n):\n        prefix_sum[i] = total_sum + nums[i]\n        total_sum += nums[i]\n    \n    # Calculate the initial value of the array\n    initial_value = sum(abs(nums[i] - nums[(i + 1) % n]) for i in range(n))\n    \n    # Check all possible subarrays for the best cyclic shift\n    for start in range(n):\n        for end in range(start, n):\n            shift_value = abs(nums[start] - nums[(end + 1) % n]) + abs(nums[end] - nums[(start + 1) % n])\n            shift_value -= abs(nums[end] - nums[(start - 1 + n) % n]) + abs(nums[(start - 1 + n) % n] - nums[(end + 1) % n])\n            initial_value = max(initial_value, shift_value)\n    \n    return initial_value\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_max_possible_value():\n    assert max_possible_value([1, 3, 0, 0, 2], 3) == 6\n    assert max_possible_value([1, 2, 3, 4, 5], 2) == 10\n    assert max_possible_value([1, 1, 1, 1], 2) == 4\n    assert max_possible_value([5, 5, 5, 5], 1) == 8\n    assert max_possible_value([1, 2, 3], 2) == 4\n    assert max_possible_value([10, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 32\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000067", "row_id": 67, "seed_ids": ["1814", "2135", "1330"], "mode": "leetcode", "instruction": "You are given an integer array `nums` and an integer `k`. The _value_ of this array is defined as the sum of `|nums[i] - nums[i + 1]|` for all `0 <= i < nums.length - 1`. You are allowed to select any subarray of the given array and shift its elements cyclically (i.e., rotate the subarray elements to the left or right) any number of times. You can perform this operation **only once**. Find the maximum possible value of the final array after performing the operation."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary tree, your task is to find the minimum **balance factor** of all its nodes. A node's balance factor is defined as the difference between the heights of its left and right subtrees, and the balance factor of the entire tree is the minimum balance factor of all its nodes. If the tree is empty, the balance factor is considered to be 0. Additionally, if a node does not have a left or right subtree, its balance factor is the height of the existing subtree. Return the minimum balance factor of the tree.\n\nFor example, consider the following tree:\n\n```\n    1\n   / \\\n  2   3\n /\n4\n```\n\nThe balance factors of the nodes are as follows:\n- Node 1: |2 - 1| = 1\n- Node 2: |1 - 0| = 1\n- Node 3: |0 - 0| = 0\n- Node 4: 1 (since it only has a left subtree)\n\nThe minimum balance factor is 0.\n\n**Note**: A node's height is defined as the number of edges on the longest path from the node to a leaf. A leaf node has a height of 0."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef height(node):\n    \"\"\"\n    Returns the height of the given node.\n    \"\"\"\n    if node is None:\n        return -1\n    return 1 + max(height(node.left), height(node.right))\n\ndef balance_factor(node):\n    \"\"\"\n    Returns the balance factor of the given node.\n    \"\"\"\n    if node is None:\n        return 0\n    left_height = height(node.left)\n    right_height = height(node.right)\n    return abs(left_height - right_height)\n\ndef min_balance_factor(root):\n    \"\"\"\n    Returns the minimum balance factor of all nodes in the tree.\n    \"\"\"\n    if root is None:\n        return 0\n    min_factor = [balance_factor(root)]\n    stack = [root]\n    while stack:\n        node = stack.pop()\n        if node.left:\n            min_factor.append(balance_factor(node.left))\n            stack.append(node.left)\n        if node.right:\n            min_factor.append(balance_factor(node.right))\n            stack.append(node.right)\n    return min(min_factor)\n\n# Example tree creation\nroot = TreeNode(1)\nroot.left = TreeNode(2, TreeNode(4))\nroot.right = TreeNode(3)\n\n# Function call to get the minimum balance factor\nresult = min_balance_factor(root)\nprint(result)  # Expected output: 0\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import TreeNode, min_balance_factor\n\ndef test_min_balance_factor_empty_tree():\n    assert min_balance_factor(None) == 0\n\ndef test_min_balance_factor_single_node():\n    root = TreeNode(1)\n    assert min_balance_factor(root) == 0\n\ndef test_min_balance_factor_balanced_tree():\n    root = TreeNode(1, TreeNode(2, TreeNode(4)), TreeNode(3))\n    assert min_balance_factor(root) == 0\n\ndef test_min_balance_factor_skewed_left_tree():\n    root = TreeNode(1, TreeNode(2, TreeNode(3, TreeNode(4))))\n    assert min_balance_factor(root) == 3\n\ndef test_min_balance_factor_skewed_right_tree():\n    root = TreeNode(1, None, TreeNode(2, None, TreeNode(3, None, TreeNode(4))))\n    assert min_balance_factor(root) == 3\n\ndef test_min_balance_factor_mixed_tree():\n    root = TreeNode(1, TreeNode(2, TreeNode(4, None, TreeNode(5))), TreeNode(3))\n    assert min_balance_factor(root) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000068", "row_id": 68, "seed_ids": ["2547", "1334", "133"], "mode": "leetcode", "instruction": "Given a binary tree, your task is to find the minimum **balance factor** of all its nodes. A node's balance factor is defined as the difference between the heights of its left and right subtrees, and the balance factor of the entire tree is the minimum balance factor of all its nodes. If the tree is empty, the balance factor is considered to be 0. Additionally, if a node does not have a left or right subtree, its balance factor is the height of the existing subtree. Return the minimum balance factor of the tree.\n\nFor example, consider the following tree:\n\n```\n    1\n   / \\\n  2   3\n /\n4\n```\n\nThe balance factors of the nodes are as follows:\n- Node 1: |2 - 1| = 1\n- Node 2: |1 - 0| = 1\n- Node 3: |0 - 0| = 0\n- Node 4: 1 (since it only has a left subtree)\n\nThe minimum balance factor is 0.\n\n**Note**: A node's height is defined as the number of edges on the longest path from the node to a leaf. A leaf node has a height of 0."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you are tasked with determining whether the string can be rearranged such that every even-indexed character is a vowel and every odd-indexed character is a consonant. Return `true` if such an arrangement is possible, otherwise return `false`. Note that the string length is at least 2 and at most 100."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef can_arrange_vowels consonants(s: str) -> bool:\n    \"\"\"\n    Determines if the string can be rearranged such that every even-indexed character\n    is a vowel and every odd-indexed character is a consonant.\n    \"\"\"\n    vowels = set(\"aeiou\")\n    odd_vowels, even_consonants = 0, 0\n\n    for i, char in enumerate(s):\n        if i % 2 == 0:\n            if char in vowels:\n                odd_vowels += 1\n        else:\n            if char not in vowels:\n                even_consonants += 1\n\n    return odd_vowels == len(s[1::2]) and even_consonants == len(s[::2]) % 2\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import can_arrange_vowels_consonants\n\ndef test_can_arrange_vowels_consonants():\n    assert can_arrange_vowels_consonants(\"*a[d\") == False\n    assert can_arrange_vowels_consonants(\"l*m*n\") == False\n    assert can_arrange_vowels_consonants(\"*&^\") == True\n\ndef test_can_arrange_boundary_conditions():\n    assert can_arrange_vowels_consonants(\"a\") == False\n    assert can_arrange_vowels_consonants(\"aa\") == False\n\ndef test_can_arrange_random():\n    assert can_arrange_vowels_consonants(\"aeiou\") == False\n    assert can_arrange_vowels_consonants(\"abcdefg\") == False\n    assert can_arrange_vowels_consonants(\"baca\") == True\n    assert can_arrange_vowels_consonants(\"ab\") == False\n    assert can_arrange_vowels_consonants(\"aeiouy\") == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000069", "row_id": 69, "seed_ids": ["306", "202", "1024"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you are tasked with determining whether the string can be rearranged such that every even-indexed character is a vowel and every odd-indexed character is a consonant. Return `true` if such an arrangement is possible, otherwise return `false`. Note that the string length is at least 2 and at most 100."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of `n` robots, each robot has a unique identifier from `1` to `n`. Each robot can move to the left or right on a number line, and each robot can move a maximum of `k` units in one step. You are also given an array `orders` where `orders[i]` is a list of robot identifiers that need to be at position `i + 1` on the number line. The goal is to move all robots to their respective positions with the minimum number of steps. Each robot can only move to its designated position and cannot move to a position that has already been assigned to another robot. Return the minimum number of steps required to achieve the goal, or `-1` if it is impossible to move all robots to their designated positions."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_steps_to_positions(n, k, orders):\n    \"\"\"\n    Returns the minimum number of steps required for all robots\n    to be at their designated positions, or -1 if it is impossible.\n    \"\"\"\n    # Create a dictionary to store the required positions for each robot\n    required_positions = {}\n    for i, order in enumerate(orders):\n        for robot_id in order:\n            if robot_id in required_positions:\n                if required_positions[robot_id] != i + 1:\n                    return -1  # Conflicting positions for the same robot\n            else:\n                required_positions[robot_id] = i + 1\n\n    # Calculate the minimum steps for each robot\n    steps = {}\n    for robot_id, position in required_positions.items():\n        current_pos = robot_id  # Assuming robots start at their identifier position\n        steps_needed = abs(position - current_pos) // k\n        if abs(position - current_pos) % k != 0:\n            steps_needed += 1\n        steps[robot_id] = steps_needed\n\n    # Find the maximum steps needed among all robots\n    max_steps = max(steps.values())\n    return max_steps\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_steps_to_positions():\n    assert min_steps_to_positions(3, 2, [[2, 1, 3], [], []]) == 2\n    assert min_steps_to_positions(3, 2, [[2, 1, 3], [2, 3, 1], [1, 3, 2]]) == -1\n    assert min_steps_to_positions(5, 3, [[4, 1, 5], [4, 5, 1], [], [3, 5, 1], []]) == 4\n    assert min_steps_to_positions(4, 2, [[2, 1], [], [3, 4], []]) == 2\n    assert min_steps_to_positions(3, 1, [[2, 1, 3], [2, 3, 1], [1, 3, 2]]) == 2\n\ntest_min_steps_to_positions()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000070", "row_id": 70, "seed_ids": ["1473", "191", "2471"], "mode": "leetcode", "instruction": "You are given a list of `n` robots, each robot has a unique identifier from `1` to `n`. Each robot can move to the left or right on a number line, and each robot can move a maximum of `k` units in one step. You are also given an array `orders` where `orders[i]` is a list of robot identifiers that need to be at position `i + 1` on the number line. The goal is to move all robots to their respective positions with the minimum number of steps. Each robot can only move to its designated position and cannot move to a position that has already been assigned to another robot. Return the minimum number of steps required to achieve the goal, or `-1` if it is impossible to move all robots to their designated positions."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an integer `n` denoting the number of cities in a country. The cities are numbered from `0` to `n - 1`. You are also given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional** road connecting cities `ai` and `bi`. You need to assign each city with a unique integer value from `1` to `n` such that the **sum** of the values of the two cities connected by each road is maximized. Return the **maximum possible sum** of the importance of all roads after assigning the values optimally."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_road_importance(n, roads):\n    \"\"\"\n    Assigns each city a unique integer value from 1 to n such that the sum of the values of the two cities\n    connected by each road is maximized, and returns the maximum possible sum of the importance of all roads.\n    \"\"\"\n    degree = [0] * n\n    for a, b in roads:\n        degree[a] += 1\n        degree[b] += 1\n    cities = sorted(range(n), key=lambda i: -degree[i])\n    values = {cities[i]: i + 1 for i in range(n)}\n    \n    max_sum = 0\n    for a, b in roads:\n        max_sum += values[a] + values[b]\n    \n    return max_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_road_importance\nimport pytest\n\ndef test_max_road_importance_1():\n    n = 4\n    roads = [[0, 1], [1, 2], [2, 3]]\n    assert max_road_importance(n, roads) == 8\n\ndef test_max_road_importance_2():\n    n = 5\n    roads = [[0, 1], [1, 2], [2, 3], [0, 2], [1, 3], [2, 4]]\n    assert max_road_importance(n, roads) == 11\n\ndef test_max_road_importance_3():\n    n = 3\n    roads = [[0, 1], [1, 2]]\n    assert max_road_importance(n, roads) == 4\n\ndef test_max_road_importance_4():\n    n = 6\n    roads = [[0, 1], [1, 2], [2, 3], [1, 4], [2, 5]]\n    assert max_road_importance(n, roads) == 13\n\ndef test_max_road_importance_5():\n    n = 2\n    roads = [[0, 1]]\n    assert max_road_importance(n, roads) == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000071", "row_id": 71, "seed_ids": ["2285", "2064", "1344"], "mode": "leetcode", "instruction": "You are given an integer `n` denoting the number of cities in a country. The cities are numbered from `0` to `n - 1`. You are also given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional** road connecting cities `ai` and `bi`. You need to assign each city with a unique integer value from `1` to `n` such that the **sum** of the values of the two cities connected by each road is maximized. Return the **maximum possible sum** of the importance of all roads after assigning the values optimally."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` without leading zeros, return the number of ways to split `s` into three non-empty substrings such that the bitwise XOR of the first two substrings is equal to the bitwise XOR of the last two substrings. The substrings are formed by consecutive binary digits in `s`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_split_ways(s):\n    \"\"\"\n    Counts the number of ways to split the binary string s into three non-empty substrings\n    such that the bitwise XOR of the first two substrings is equal to the bitwise XOR of the\n    last two substrings.\n    \"\"\"\n    total_xor = sum(int(char) for char in s)\n    prefix_xor = [0]\n    \n    for char in s:\n        prefix_xor.append(prefix_xor[-1] ^ int(char))\n    \n    count = 0\n    for i in range(1, len(prefix_xor) - 1):\n        if prefix_xor[i] == prefix_xor[-1] - prefix_xor[i]:\n            count += 1\n    \n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_count_split_ways():\n    assert count_split_ways(\"1010\") == 2\n    assert count_split_ways(\"1001\") == 1\n    assert count_split_ways(\"111\") == 0\n    assert count_split_ways(\"0101010\") == 6\n    assert count_split_ways(\"0000\") == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000072", "row_id": 72, "seed_ids": ["717", "1546", "243"], "mode": "leetcode", "instruction": "Given a binary string `s` without leading zeros, return the number of ways to split `s` into three non-empty substrings such that the bitwise XOR of the first two substrings is equal to the bitwise XOR of the last two substrings. The substrings are formed by consecutive binary digits in `s`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an **infinite** 2D grid representing a map, where each cell can either be land (`1`) or water (`0`), a **snake** is defined as a sequence of adjacent land cells. The length of a snake is the number of cells it spans. You start at the top-left corner of the grid at cell `[0, 0]`. On each move, you can travel to an adjacent cell (up, down, left, or right) but you cannot revisit any cell. The goal is to find the maximum length of a snake starting from `[0, 0]` and moving to the **right**most possible cell in the grid, which is beyond the current boundary. You are given the grid as a 2D array where `1` represents land and `0` represents water. Return the length of the longest snake."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_snake_length(grid):\n    \"\"\"\n    Finds the maximum length of a snake starting from [0, 0] and moving to the rightmost boundary.\n    \"\"\"\n    if not grid or not grid[0]:\n        return 0\n    \n    m, n = len(grid), len(grid[0])\n    max_len = 0\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]  # Right, Down, Up, Left\n    \n    def dfs(x, y, parent_dir):\n        nonlocal max_len\n        if x < 0 or y < 0 or x >= m or y >= n or grid[x][y] == 0:\n            return 0\n        if parent_dir != directions[0]:  # Ensure only move right\n            return 0\n        steps = 1\n        grid[x][y] = 0  # Mark as visited\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if (dx, dy) == parent_dir:\n                continue\n            steps = max(steps, dfs(nx, ny, (dx, dy)) + 1)\n        max_len = max(max_len, steps)\n        return steps\n    \n    dfs(0, 0, (0, 0))\n    return max_len\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_max_snake_length():\n    grid1 = [[0,1,1,1,0,0,0],[0,1,0,1,1,1,0]]\n    assert max_snake_length(grid1) == 4\n\n    grid2 = [[0,1,1,1,1]]\n    assert max_snake_length(grid2) == 3\n\n    grid3 = [[0,0,0,0]]\n    assert max_snake_length(grid3) == 0\n\n    grid4 = [[1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1]]\n    assert max_snake_length(grid4) == 8\n\n    grid5 = [[1,1,1],[0,0,1],[1,1,1]]\n    assert max_snake_length(grid5) == 5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000073", "row_id": 73, "seed_ids": ["1197", "1025", "1161"], "mode": "leetcode", "instruction": "Given an **infinite** 2D grid representing a map, where each cell can either be land (`1`) or water (`0`), a **snake** is defined as a sequence of adjacent land cells. The length of a snake is the number of cells it spans. You start at the top-left corner of the grid at cell `[0, 0]`. On each move, you can travel to an adjacent cell (up, down, left, or right) but you cannot revisit any cell. The goal is to find the maximum length of a snake starting from `[0, 0]` and moving to the **right**most possible cell in the grid, which is beyond the current boundary. You are given the grid as a 2D array where `1` represents land and `0` represents water. Return the length of the longest snake."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` consisting of lowercase English letters. You need to determine the lexicographically smallest palindrome by swapping any two adjacent characters in the string at most once. Return the resulting palindrome string. If it's not possible to form a palindrome by swapping at most one pair of adjacent characters, return the original string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef form_smallest_palindrome(s: str) -> str:\n    \"\"\"\n    Returns the lexicographically smallest palindrome by swapping any two adjacent characters in the string at most once.\n    If it's not possible to form a palindrome by swapping at most one pair of adjacent characters, returns the original string.\n    \"\"\"\n    s_list = list(s)\n    n = len(s)\n\n    # Find the first mismatch from the start and end\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            j = n - 1 - i\n            while i < j and s[i] != s[j]:\n                j -= 1\n\n            # If the mismatch is at the boundary, swap the mismatch with the character from the end\n            if i == j:\n                s_list[i], s_list[n - 1 - i] = s_list[n - 1 - i], s_list[i]\n\n            # Check if the found character can form a palindrome\n            while j + 1 < n - 1 - i and s[j + 1] == s[n - 2 - i]:\n                j += 1\n\n            if j + 1 < n - 1 - i:\n                s_list[j + 1], s_list[n - 1 - i] = s_list[n - 1 - i], s_list[j + 1]\n\n            break\n\n    return ''.join(s_list)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_form_smallest_palindrome():\n    assert form_smallest_palindrome(\"aabb\") == \"abba\"\n    assert form_smallest_palindrome(\"abcd\") == \"abcd\"\n    assert form_smallest_palindrome(\"aabc\") == \"abac\"\n    assert form_smallest_palindrome(\"racecar\") == \"racecar\"  # Already a palindrome\n    assert form_smallest_palindrome(\"zidiveer\") == \"zidveeer\"\n\ndef test_other_cases():\n    assert form_smallest_palindrome(\"bbaa\") == \"abba\"\n    assert form_smallest_palindrome(\"edcba\") == \"abcde\"\n    assert form_smallest_palindrome(\"efgh\") == \"efgh\"\n    assert form_smallest_palindrome(\"zxcvbnm\") == \"zxcvbnm\"\n    assert form_smallest_palindrome(\"aaab\") == \"aabaa\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000074", "row_id": 74, "seed_ids": ["1721", "2418", "1704"], "mode": "leetcode", "instruction": "You are given a string `s` consisting of lowercase English letters. You need to determine the lexicographically smallest palindrome by swapping any two adjacent characters in the string at most once. Return the resulting palindrome string. If it's not possible to form a palindrome by swapping at most one pair of adjacent characters, return the original string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times: choose a non-empty substring `s[i... j]` (i.e., `s[i]` is the first character and `s[j]` is the last character) and reverse it. The goal is to make the string `s` **lexicographically** **smallest** possible. Return the smallest string `s` you can obtain after performing this operation any number of times."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef smallest_by_reversing_substrings(s: str) -> str:\n    \"\"\"\n    Returns the lexicographically smallest string by reversing substrings.\n    \"\"\"\n    # Initialize an empty list to store intervals of characters\n    intervals = []\n    start = 0  # Start of the current interval\n    \n    for i in range(1, len(s)):\n        # If the current character is lexicographically smaller than the previous one,\n        # it means the current start of the interval is the best start\n        if s[i] < s[start]:\n            intervals.append((start, i - 1))\n            start = i\n    intervals.append((start, len(s) - 1))  # Add the last interval\n    \n    # Reconstruct the string with the smallest lexicographical order\n    result = []\n    for start, end in intervals:\n        result.append(s[start:end + 1][::-1])  # Reverse the interval and add it to the result\n    \n    return ''.join(result)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import smallest_by_reversing_substrings\n\ndef test_smallest_by_reversing_substrings():\n    assert smallest_by_reversing_substrings(\"cba\") == \"abc\"\n    assert smallest_by_reversing_substrings(\"aefba\") == \"aabbf\"\n    assert smallest_by_reversing_substrings(\"dbba\") == \"baab\"\n    assert smallest_by_reversing_substrings(\"abcd\") == \"abcd\"\n    assert smallest_by_reversing_substrings(\"cbaebababcc\") == \"abacabcbb\"\n    assert smallest_by_reversing_substrings(\"leetcode\") == \"cdelotee\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000075", "row_id": 75, "seed_ids": ["1053", "2375", "2254"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times: choose a non-empty substring `s[i... j]` (i.e., `s[i]` is the first character and `s[j]` is the last character) and reverse it. The goal is to make the string `s` **lexicographically** **smallest** possible. Return the smallest string `s` you can obtain after performing this operation any number of times."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a positive integer `n`, return the number of integers `x` in the range `[1, n]` (inclusive) such that the sum of the digits of `x` is a **prime number**. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef digit_sum(n):\n    \"\"\"Calculate the sum of the digits of n.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef count_prime_digit_sums(n):\n    \"\"\"\n    Count the number of integers x in the range [1, n] such that the sum of the digits of x is a prime number.\n    \"\"\"\n    return sum(is_prime(digit_sum(x)) for x in range(1, n + 1))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_prime, digit_sum, count_prime_digit_sums\n\ndef test_is_prime():\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(4) == False\n    assert is_prime(5) == True\n    assert is_prime(6) == False\n    assert is_prime(29) == True\n    assert is_prime(25) == False\n\ndef test_digit_sum():\n    assert digit_sum(123) == 6\n    assert digit_sum(456) == 15\n    assert digit_sum(789) == 24\n\ndef test_count_prime_digit_sums():\n    assert count_prime_digit_sums(5) == 2  # 2, 3\n    assert count_prime_digit_sums(10) == 4  # 2, 3, 5, 7\n    assert count_prime_digit_sums(15) == 6  # 2, 3, 5, 7, 11, 13\n    assert count_prime_digit_sums(22) == 8  # 2, 3, 5, 7, 11, 13, 17, 19\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000076", "row_id": 76, "seed_ids": ["2180", "1025", "668"], "mode": "leetcode", "instruction": "Given a positive integer `n`, return the number of integers `x` in the range `[1, n]` (inclusive) such that the sum of the digits of `x` is a **prime number**. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary tree with `n` nodes labeled from `0` to `n-1`, where each node has a value associated with it, represented by an array `values`, and a 2D array `edges` that defines the tree's structure, you are tasked with finding the node that, when removed, results in the maximum number of connected components in the tree, where the values of the nodes in each component are coprime. If there are multiple nodes that result in the same maximum number of components, return the one with the smallest label.\n\nFormally, you need to:\n\n- Remove one node from the tree and determine the number of connected components that are formed.\n- Each component must consist of nodes whose values are coprime.\n- Return the label of the node that maximizes the number of such components. If there are multiple such nodes, return the one with the smallest label. If no such node exists, return `-1`.\n\nExample:\n```python\nvalues = [2, 3, 6, 9, 10]\nedges = [[0, 1], [1, 2], [1, 3], [3, 4]]\n```\nIn this example, removing node `1` results in two connected components where all nodes in each component are coprime: `[2]` and `[6, 9, 10]`. Thus, the answer is `1`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict\nfrom math import gcd\n\ndef are_coprime(a, b):\n    return gcd(a, b) == 1\n\ndef find_max_coprime_components(values, edges):\n    \"\"\"\n    Returns the node that, when removed, results in the maximum number of connected components with coprime values.\n    \"\"\"\n    if not values or not edges:\n        return -1\n    \n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    def dfs(node, parent):\n        subtree_values = {values[node]}\n        for child in graph[node]:\n            if child != parent:\n                subtree_values.add(values[child])\n                subtree_values |= dfs(child, node)\n        return subtree_values\n    \n    n = len(values)\n    node_tuple = [(-1, -1)] * n\n    for i in range(n):\n        subtree = dfs(i, -1)\n        coprime_pairs = sum(1 for x in subtree for y in subtree if x != y and are_coprime(x, y))\n        node_tuple[i] = (coprime_pairs, i)\n    \n    node_tuple.sort(reverse=True)\n    return node_tuple[0][1] if node_tuple[0][0] > 0 else -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_max_coprime_components\n\ndef test_find_max_coprime_components():\n    assert find_max_coprime_components([2, 3, 6, 9, 10], [[0, 1], [1, 2], [1, 3], [3, 4]]) == 1\n    assert find_max_coprime_components([7], []) == -1\n    assert find_max_coprime_components([2, 3, 7, 6], [[0, 1], [0, 2], [1, 3]]) == 0\n    assert find_max_coprime_components([2, 3, 6, 9, 10], [[0, 1], [1, 2], [1, 3], [3, 4]]) == 1\n    assert find_max_coprime_components([2, 3, 6, 9, 10], [[0, 1], [0, 2], [0, 3], [0, 4]]) == 0\n    assert find_max_coprime_components([2, 3, 6, 9, 10], [[0, 1], [1, 2], [2, 3], [3, 4]]) == 3\n\ndef gcd(x, y):\n    \"\"\"Compute the greatest common divisor of x and y.\"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\nif gcd(2, 3) != 1 or gcd(3, 6) != 3:\n    raise ValueError(\"GCD function is incorrect\")\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000077", "row_id": 77, "seed_ids": ["1766", "2042", "2588"], "mode": "leetcode", "instruction": "Given a binary tree with `n` nodes labeled from `0` to `n-1`, where each node has a value associated with it, represented by an array `values`, and a 2D array `edges` that defines the tree's structure, you are tasked with finding the node that, when removed, results in the maximum number of connected components in the tree, where the values of the nodes in each component are coprime. If there are multiple nodes that result in the same maximum number of components, return the one with the smallest label.\n\nFormally, you need to:\n\n- Remove one node from the tree and determine the number of connected components that are formed.\n- Each component must consist of nodes whose values are coprime.\n- Return the label of the node that maximizes the number of such components. If there are multiple such nodes, return the one with the smallest label. If no such node exists, return `-1`.\n\nExample:\n```python\nvalues = [2, 3, 6, 9, 10]\nedges = [[0, 1], [1, 2], [1, 3], [3, 4]]\n```\nIn this example, removing node `1` results in two connected components where all nodes in each component are coprime: `[2]` and `[6, 9, 10]`. Thus, the answer is `1`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary string `s`. A **substring** of `s` is called **good** if it does not contain any leading zeros and has an even length. Your task is to count the number of **good substrings** in `s`.\n\nFor example, given the string `s = \"1001010\"`, the good substrings are `\"10\"`, `\"010\"`, and `\"010\"`. Therefore, the answer is `3`.\n\nWrite a function `countGoodSubstrings(s: str) -> int` that returns the number of good substrings in the binary string `s`.\n\n**Constraints**:\n- `1 <= len(s) <= 1000`\n- `s` consists only of `0`s and `1`s."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef countGoodSubstrings(s: str) -> int:\n    \"\"\"\n    Counts the number of good substrings in the binary string s.\n    A good substring does not contain any leading zeros and has an even length.\n    \"\"\"\n    count = 0\n    n = len(s)\n    for i in range(n - 1):\n        if s[i] == '0':\n            continue\n        if i + 1 < n and s[i + 1] == '0':\n            continue\n        if (i + 2 < n) and s[i + 2] == '1' and s[i + 3] == '1':\n            count += 1\n            i += 3\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_countGoodSubstrings():\n    assert countGoodSubstrings(\"1001010\") == 3\n    assert countGoodSubstrings(\"100010010\") == 5\n    assert countGoodSubstrings(\"01010101\") == 4\n    assert countGoodSubstrings(\"0000\") == 0\n    assert countGoodSubstrings(\"111111\") == 3\n    assert countGoodSubstrings(\"00110011\") == 6\n    assert countGoodSubstrings(\"10010101010010\") == 7\n\ntest_countGoodSubstrings()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000078", "row_id": 78, "seed_ids": ["808", "1671", "1317"], "mode": "leetcode", "instruction": "You are given a binary string `s`. A **substring** of `s` is called **good** if it does not contain any leading zeros and has an even length. Your task is to count the number of **good substrings** in `s`.\n\nFor example, given the string `s = \"1001010\"`, the good substrings are `\"10\"`, `\"010\"`, and `\"010\"`. Therefore, the answer is `3`.\n\nWrite a function `countGoodSubstrings(s: str) -> int` that returns the number of good substrings in the binary string `s`.\n\n**Constraints**:\n- `1 <= len(s) <= 1000`\n- `s` consists only of `0`s and `1`s."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a class `RangeFreqQuery` that supports efficient frequency queries on a given array `arr`. The goal is to implement a method that can quickly determine the frequency of any element within a specified range of the array. Specifically, implement the `RangeFreqQuery` class:\n\n- `RangeFreqQuery(int[] arr)`: Initializes the class with the given array `arr`.\n- `int query(int left, int right, int value)`: Returns the frequency of the value `value` in the subarray `arr[left...right]`.\n\nFor example, given the array `arr = [1, 2, 2, 3, 3, 3, 4]`, the query `query(0, 6, 3)` should return `3` since the value `3` appears three times in the subarray `arr[0...6]`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict\n\nclass RangeFreqQuery:\n    def __init__(self, arr):\n        \"\"\"\n        Initializes the class with the given array `arr`.\n        \"\"\"\n        self.frequency = defaultdict(list)\n        for idx, value in enumerate(arr):\n            self.frequency[value].append(idx)\n\n    def query(self, left, right, value):\n        \"\"\"\n        Returns the frequency of the value `value` in the subarray `arr[left...right]`.\n        \"\"\"\n        if value not in self.frequency:\n            return 0\n        indices = self.frequency[value]\n        start, end = 0, len(indices) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if indices[mid] < left:\n                start = mid + 1\n            else:\n                end = mid - 1\n        left_idx = start\n        if left_idx >= len(indices) or indices[left_idx] > right:\n            return 0\n        start, end = 0, len(indices) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if indices[mid] <= right:\n                start = mid + 1\n            else:\n                end = mid - 1\n        right_idx = end\n        return right_idx - left_idx + 1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import RangeFreqQuery\n\ndef test_range_freq_query_positive():\n    arr = [1, 2, 2, 3, 3, 3, 4]\n    rfq = RangeFreqQuery(arr)\n    assert rfq.query(0, 6, 3) == 3\n    assert rfq.query(0, 6, 2) == 2\n\ndef test_range_freq_query_with_overlap():\n    arr = [2, 4, 1, 2, 3, 2]\n    rfq = RangeFreqQuery(arr)\n    assert rfq.query(0, 5, 2) == 3\n\ndef test_range_freq_query_empty_range():\n    arr = [2, 2, 2, 2]\n    rfq = RangeFreqQuery(arr)\n    assert rfq.query(3, 2, 2) == 0\n\ndef test_range_freq_query_without_element():\n    arr = [1, 1, 1, 2, 2, 2, 3]\n    rfq = RangeFreqQuery(arr)\n    assert rfq.query(0, 6, 4) == 0\n\ndef test_range_freq_query_single_element():\n    arr = [5, 5, 5, 5, 5]\n    rfq = RangeFreqQuery(arr)\n    assert rfq.query(0, 4, 5) == 5\n\ndef test_range_freq_query_high_frequency():\n    arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    rfq = RangeFreqQuery(arr)\n    assert rfq.query(0, 9, 1) == 10\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000079", "row_id": 79, "seed_ids": ["1157", "751", "2288"], "mode": "leetcode", "instruction": "Design a class `RangeFreqQuery` that supports efficient frequency queries on a given array `arr`. The goal is to implement a method that can quickly determine the frequency of any element within a specified range of the array. Specifically, implement the `RangeFreqQuery` class:\n\n- `RangeFreqQuery(int[] arr)`: Initializes the class with the given array `arr`.\n- `int query(int left, int right, int value)`: Returns the frequency of the value `value` in the subarray `arr[left...right]`.\n\nFor example, given the array `arr = [1, 2, 2, 3, 3, 3, 4]`, the query `query(0, 6, 3)` should return `3` since the value `3` appears three times in the subarray `arr[0...6]`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a data structure to find the `k` closest points to a given target point `(tx, ty)` on a 2D plane. The points are represented as an array of coordinates, where each coordinate is an array of two integers `[x, y]`. Implement the `KClosestPoints` class:\n\n*   `KClosestPoints(int k)` Initializes the object with `k`.\n*   `void addPoint(int x, int y)` Adds the point `(x, y)` to the data structure.\n*   `List<List<Integer>> getKClosestPoints()` Returns the `k` closest points to the target point `(tx, ty)` sorted by their Manhattan distance to the target. The Manhattan distance between two points `(x1, y1)` and `(x2, y2)` is given by `abs(x1 - x2) + abs(y1 - y2)`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport heapq\nfrom typing import List\n\nclass KClosestPoints:\n    def __init__(self, k: int):\n        self.k = k\n        self.min_heap = []\n\n    def addPoint(self, x: int, y: int):\n        distance = abs(x - tx) + abs(y - ty)\n        heapq.heappush(self.min_heap, (distance, [x, y]))\n        \n        if len(self.min_heap) > self.k:\n            heapq.heappop(self.min_heap)\n\n    def getKClosestPoints(self) -> List[List[int]]:\n        return [point for _, point in self.min_heap]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import KClosestPoints\n\ndef test_k_closest_points():\n    k = 3\n    tx, ty = 0, 0\n    points = KClosestPoints(k)\n\n    points.addPoint(1, 1)\n    points.addPoint(2, 2)\n    points.addPoint(3, 3)\n    points.addPoint(-1, -1)\n\n    closest_points = points.getKClosestPoints()\n    assert len(closest_points) == k  # Ensure we get exactly k points\n\n    assert abs(closest_points[0][0] - tx) + abs(closest_points[0][1] - ty) == 2  # (1, 1) closest\n    assert abs(closest_points[1][0] - tx) + abs(closest_points[1][1] - ty) == 2  # (2, 2) second closest\n    assert abs(closest_points[2][0] - tx) + abs(closest_points[2][1] - ty) == 2  # (-1, -1) third closest\n\n    # Ensure the order is maintained based on distance\n    assert closest_points[0] < closest_points[1] < closest_points[2]\n\ndef test_adding_same_point():\n    k = 2\n    tx, ty = 0, 0\n    points = KClosestPoints(k)\n\n    points.addPoint(1, 1)\n    points.addPoint(1, 1)\n    \n    closest_points = points.getKClosestPoints()\n    assert len(closest_points) == k  # Ensure we get exactly k points\n\n    assert all(point == [1, 1] for point in closest_points)\n\ndef test_large_number_of_points():\n    k = 5\n    tx, ty = 0, 0\n    points = KClosestPoints(k)\n\n    for x in range(-10, 11):\n        for y in range(-10, 11):\n            points.addPoint(x, y)\n\n    closest_points = points.getKClosestPoints()\n    assert len(closest_points) == k  # Ensure we get exactly k points\n\n    # Verify closest points\n    actual_distances = sorted([abs(point[0] - tx) + abs(point[1] - ty) for point in closest_points])\n    expected_distance = sorted([abs(i - tx) + abs(j - ty) for i in range(-10, 11) for j in range(-10, 11) if abs((i, j)) < k + 0.5])\n    assert actual_distances == expected_distance\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000080", "row_id": 80, "seed_ids": ["16", "1443", "211"], "mode": "leetcode", "instruction": "Design a data structure to find the `k` closest points to a given target point `(tx, ty)` on a 2D plane. The points are represented as an array of coordinates, where each coordinate is an array of two integers `[x, y]`. Implement the `KClosestPoints` class:\n\n*   `KClosestPoints(int k)` Initializes the object with `k`.\n*   `void addPoint(int x, int y)` Adds the point `(x, y)` to the data structure.\n*   `List<List<Integer>> getKClosestPoints()` Returns the `k` closest points to the target point `(tx, ty)` sorted by their Manhattan distance to the target. The Manhattan distance between two points `(x1, y1)` and `(x2, y2)` is given by `abs(x1 - x2) + abs(y1 - y2)`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s`, return the longest substring of `s` that contains at least one occurrence of every character in the string `s`. If there are multiple substrings of the same length, return the substring that appears earliest in `s`. If no such substring exists, return an empty string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_substring_with_all_chars(s: str) -> str:\n    \"\"\"\n    Finds the longest substring that contains at least one occurrence of every character in the string.\n    If there are multiple substrings of the same length, returns the one that appears earliest.\n    If no such substring exists, returns an empty string.\n    \"\"\"\n    n = len(s)\n    if n == 0:\n        return \"\"\n    \n    char_positions = {ch: [] for ch in set(s)}\n    \n    for i, ch in enumerate(s):\n        char_positions[ch].append(i)\n    \n    start, end = 0, 0\n    max_len = 0\n    min_end = float('inf')\n    char_count = len(char_positions)\n    \n    while end < n:\n        if char_count == 0:\n            if end - start + 1 > max_len:\n                max_len = end - start + 1\n                min_end = start\n            start = char_positions[s[start]].pop(0)\n            if not char_positions[s[start]]:\n                del char_positions[s[start]]\n            char_count += 1\n            start += 1\n        else:\n            char_count -= 1\n            end += 1\n            if end < n:\n                char_count += 1\n                if s[end] in char_positions:\n                    char_positions[s[end]].append(end)\n    \n    return s[min_end:min_end + max_len] if max_len > 0 else \"\"\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import longest_substring_with_all_chars\n\ndef test_longest_substring_with_all_chars():\n    assert longest_substring_with_all_chars(\"xyyzyzyyx\") == \"zyzyyx\"\n    assert longest_substring_with_all_chars(\"abc\") == \"abc\"\n    assert longest_substring_with_all_chars(\"a\") == \"\"\n    assert longest_substring_with_all_chars(\"bbaaacbb\") == \"baaacb\"\n    assert longest_substring_with_all_chars(\"aabbccddeeff\") == \"aabbccddeeff\"\n    assert longest_substring_with_all_chars(\"abcdef\") == \"abcdef\"\n    assert longest_substring_with_all_chars(\"aaa\") == \"a\"\n    assert longest_substring_with_all_chars(\"aaab\") == \"aab\"\n    assert longest_substring_with_all_chars(\"abcabc\") == \"abc\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000081", "row_id": 81, "seed_ids": ["1763", "5", "1094"], "mode": "leetcode", "instruction": "Given a string `s`, return the longest substring of `s` that contains at least one occurrence of every character in the string `s`. If there are multiple substrings of the same length, return the substring that appears earliest in `s`. If no such substring exists, return an empty string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters and an integer `k`, you can perform the following operation at most `k` times:\n\n- Choose any index `i` and swap `s[i]` with `s[i + 1]` (0-indexed).\n\nAfter performing the operations, the string `s` should be a palindrome. Return the lexicographically smallest palindrome that can be obtained under these constraints. If it's not possible to form a palindrome, return an empty string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min LexicoPalindrome(s: str, k: int) -> str:\n    \"\"\"\n    Returns the lexicographically smallest palindrome that can be obtained by swapping adjacent characters at most k times.\n    If it's not possible to form a palindrome, returns an empty string.\n    \"\"\"\n    if k >= len(s) // 2:\n        return s == s[::-1] and s or \"\"\n\n    def reverse_substring(s, start, end):\n        while start < end:\n            s = s[:start] + s[end] + s[start+1:end] + s[start] + s[end+1:]\n            start += 1\n            end -= 1\n        return s\n\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            if k < 2:\n                return \"\"\n            k -= 1\n            s = reverse_substring(s, i, n - i - 1)\n\n    return s\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import min_lexico_palindrome\n\ndef test_min_lexico_palindrome_with_k_zero():\n    assert min_lexico_palindrome(\"abcb\", 0) == \"abcb\"\n\ndef test_min_lexico_palindrome_possible():\n    assert min_lexico_palindrome(\"bcb\", 1) == \"abc\"\n\ndef test_min_lexico_palindrome_impossible():\n    assert min_lexico_palindrome(\"bcb\", 0) == \"\"\n\ndef test_min_lexico_palindrome_uneven_k():\n    assert min_lexico_palindrome(\"aaab\", 2) == \"aaab\"\n\ndef test_min_lexico_palindrome_is_palindrome():\n    assert min_lexico_palindrome(\"madan\u6c21\u4e39mad\", 5) == \"madan\u6c21\u4e39mad\"\n\ndef test_min_lexico_palindrome_positive_numbers():\n    assert min_lexico_palindrome(\"aebcb\", 2) == \"aabc\"\n\ndef test_min_lexico_palindrome_negative_numbers():\n    assert min_lexico_palindrome(\"abcde\", 5) == \"abcde\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000082", "row_id": 82, "seed_ids": ["1560", "2196", "1556"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters and an integer `k`, you can perform the following operation at most `k` times:\n\n- Choose any index `i` and swap `s[i]` with `s[i + 1]` (0-indexed).\n\nAfter performing the operations, the string `s` should be a palindrome. Return the lexicographically smallest palindrome that can be obtained under these constraints. If it's not possible to form a palindrome, return an empty string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of `n` unique integers `nums` and an integer `k`, return the `k` smallest **absolute differences** between any two distinct elements in the list. More formally, you need to find the `k` smallest values of `|a - b|` for all pairs `(a, b)` where `a` and `b` are distinct elements in `nums`. Ensure that the elements in the output are unique and sorted in ascending order. If there are fewer than `k` unique differences, return all of them. Note that the absolute difference between two integers `a` and `b` is defined as `|a - b|`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef k_smallest_abs_differences(nums, k):\n    \"\"\"\n    Returns the k smallest absolute differences between any two distinct\n    elements in the list nums. The output is unique and sorted in ascending order.\n    \"\"\"\n    nums.sort()\n    abs_diffs = {}\n    \n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            diff = abs(nums[i] - nums[j])\n            if diff not in abs_diffs:\n                abs_diffs[diff] = 1\n            else:\n                abs_diffs[diff] += 1\n            \n            # If we have found k unique differences, stop early\n            if len(abs_diffs) == k:\n                return sorted(abs_diffs.keys())[:k]\n    \n    # If there are fewer than k unique differences, return all of them\n    return sorted(abs_diffs.keys())\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_k_smallest_abs_differences():\n    assert k_smallest_abs_differences([1, 3, 1], 1) == [2]\n    assert k_smallest_abs_differences([1, -1, -2, 2], 3) == [1, 1, 3]\n    assert k_smallest_abs_differences([4, 2, 5, 3], 2) == [1, 3]\n    assert k_smallest_abs_differences([8, 8, 8, 8], 2) == [0]\n    \ndef test_k_smallest_abs_differences_edge_cases():\n    assert k_smallest_abs_differences([1, 2, 3], 5) == [1]\n    assert k_smallest_abs_differences([10], 1) == []\n    assert k_smallest_abs_diffrences([]) == []\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000083", "row_id": 83, "seed_ids": ["29", "2133", "1172"], "mode": "leetcode", "instruction": "Given a list of `n` unique integers `nums` and an integer `k`, return the `k` smallest **absolute differences** between any two distinct elements in the list. More formally, you need to find the `k` smallest values of `|a - b|` for all pairs `(a, b)` where `a` and `b` are distinct elements in `nums`. Ensure that the elements in the output are unique and sorted in ascending order. If there are fewer than `k` unique differences, return all of them. Note that the absolute difference between two integers `a` and `b` is defined as `|a - b|`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of integers representing the heights of buildings on a city street. Each building's height is given by a positive integer. A group of buildings is considered **monotonic** if the heights either strictly increase or strictly decrease when moving from left to right. \n\nYour task is to find the maximum number of buildings that can be included in a monotonic group within the given list of building heights. \n\n**Note**: A group of buildings can consist of a single building, and adjacent buildings in the group must have consecutive heights (i.e., the height difference between any two adjacent buildings in the group is exactly 1).\n\nReturn the maximum size of such a monotonic group.\n\nExample 1:\n```\nInput: heights = [5, 4, 3, 2, 1, 2, 3, 4, 5]\nOutput: 5\nExplanation: The longest monotonic group is [5, 4, 3, 2, 1] or [1, 2, 3, 4, 5].\n```\n\nExample 2:\n```\nInput: heights = [1, 3, 5, 4, 2, 4, 6]\nOutput: 4\nExplanation: The longest monotonic group is [1, 3, 5] or [2, 4, 6].\n```\n\nConstraints:\n- `1 <= heights.length <= 10^5`\n- `1 <= heights[i] <= 10^9`"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_monotonic_group(heights):\n    \"\"\"\n    Returns the maximum size of a monotonic group of buildings with consecutive heights.\n\n    :param heights: List[int] representing the heights of buildings.\n    :return: int representing the maximum size of such a monotonic group.\n    \"\"\"\n    n = len(heights)\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, n):\n        if heights[i] == heights[i - 1] + 1 or heights[i] == heights[i - 1] - 1:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n\n    return max_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_monotonic_group\n\ndef test_max_monotonic_group():\n    assert max_monotonic_group([5, 4, 3, 2, 1, 2, 3, 4, 5]) == 5\n    assert max_monotonic_group([1, 3, 5, 4, 2, 4, 6]) == 4\n    assert max_monotonic_group([10, 11, 12, 13, 14, 15]) == 6\n    assert max_monotonic_group([15, 14, 13, 12, 11, 10]) == 6\n    assert max_monotonic_group([8, 7, 6, 5, 4, 3, 2, 1, 8, 9]) == 5\n    assert max_monotonic_group([1]) == 1\n    assert max_monotonic_group([2, 2, 2, 2]) == 1\n    assert max_monotonic_group([1, 2, 3, 2, 1, 0]) == 3\n\ntest_max_monotonic_group()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000084", "row_id": 84, "seed_ids": ["1506", "2281", "1923"], "mode": "leetcode", "instruction": "You are given a list of integers representing the heights of buildings on a city street. Each building's height is given by a positive integer. A group of buildings is considered **monotonic** if the heights either strictly increase or strictly decrease when moving from left to right. \n\nYour task is to find the maximum number of buildings that can be included in a monotonic group within the given list of building heights. \n\n**Note**: A group of buildings can consist of a single building, and adjacent buildings in the group must have consecutive heights (i.e., the height difference between any two adjacent buildings in the group is exactly 1).\n\nReturn the maximum size of such a monotonic group.\n\nExample 1:\n```\nInput: heights = [5, 4, 3, 2, 1, 2, 3, 4, 5]\nOutput: 5\nExplanation: The longest monotonic group is [5, 4, 3, 2, 1] or [1, 2, 3, 4, 5].\n```\n\nExample 2:\n```\nInput: heights = [1, 3, 5, 4, 2, 4, 6]\nOutput: 4\nExplanation: The longest monotonic group is [1, 3, 5] or [2, 4, 6].\n```\n\nConstraints:\n- `1 <= heights.length <= 10^5`\n- `1 <= heights[i] <= 10^9`"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, a **substring** `t` is called **balanced** if the number of occurrences of each letter in `t` is the same. For example, the substring `\"ababa\"` is balanced because each letter appears exactly twice. \n\nDesign an algorithm to find the length of the longest **balanced** substring `t` in `s`. Return the length of `t`. If no such substring exists, return `0`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_balanced_substring(s: str) -> int:\n    \"\"\"\n    Finds the length of the longest balanced substring in the given string s.\n    A balanced substring has an equal number of occurrences for each letter.\n    \"\"\"\n    max_length = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_balanced(substring):\n                max_length = max(max_length, len(substring))\n    return max_length\n\ndef is_balanced(substring: str) -> bool:\n    char_count = {}\n    for char in substring:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return all(value == char_count[char] for value in char_count.values())\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_longest_balanced_substring():\n    assert longest_balanced_substring(\"abba\") == 2\n    assert longest_balanced_substring(\"aabb\") == 4\n    assert longest_balanced_substring(\"abcabc\") == 3\n    assert longest_balanced_substring(\"aaabbb\") == 2\n    assert longest_balanced_substring(\"abcd\") == 0\n    assert longest_balanced_substring(\"aabbcc\") == 6\n    assert longest_balanced_substring(\"adbcabcda\") == 5\n\ndef is_balanced(substring: str) -> bool:\n    char_count = {}\n    for char in substring:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return all(value == char_count[char] for value in char_count.values())\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000085", "row_id": 85, "seed_ids": ["1273", "119", "855"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, a **substring** `t` is called **balanced** if the number of occurrences of each letter in `t` is the same. For example, the substring `\"ababa\"` is balanced because each letter appears exactly twice. \n\nDesign an algorithm to find the length of the longest **balanced** substring `t` in `s`. Return the length of `t`. If no such substring exists, return `0`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` consisting of lowercase English letters. You can perform the following operation at most once: choose two distinct indices `i` and `j` where `s[i]` is a vowel ('a', 'e', 'i', 'o', 'u'), and replace `s[i]` with `s[j]` and vice versa. A string is considered **beautiful** if it meets the following criteria:\n1. The string is a palindrome.\n2. The string contains exactly three distinct characters.\n\nReturn `true` if you can make the string `s` beautiful, and `false` otherwise."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef can_make_beautiful(s: str) -> bool:\n    \"\"\"\n    Returns true if the string s can be made beautiful by performing the specified operation at most once.\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    if len(char_count) > 3:\n        return False\n    \n    palindromic = s == s[::-1]\n    \n    if len(char_count) == 2:\n        for char in s:\n            char_count[char] -= 1\n            if all(v == 0 for v in char_count.values()):\n                return True\n            char_count[char] += 1\n        return palindromic\n    \n    if len(char_count) == 1:\n        return False\n    \n    # Case where there are exactly 3 characters\n    for vowel in vowels:\n        if vowel in char_count:\n            char_count[vowel] = 0\n            if not all(v == 0 for v in char_count.values()):\n                return True\n            char_count[vowel] = 1\n    return palindromic\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_can_make_beautiful():\n    assert can_make_beautiful(\"\u0430\u0432\u0432\u0430\u0432\u0430\") == True\n    assert can_make_beautiful(\"\u0430\u0438\u0432\u0432\u0430\u0432\u0430\") == False\n    assert can_make_beautiful(\"\u0430\u0438\u0432\u0430\u0432\u0430\") == False\n    assert can_make_beautiful(\"aabbcc\") == False\n    assert can_make_beautiful(\"abcabc\") == True\n    assert can_make_beautiful(\"aa\") == True\n    assert can_make_beautiful(\"abcdefg\") == False\n    assert can_make_beautiful(\"aee\") == True\n    assert can_make_beautiful(\"eae\") == True\n    assert can_make_beautiful(\"ea\") == True\n    assert can_make_beautiful(\"aaee\") == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000086", "row_id": 86, "seed_ids": ["670", "36", "1039"], "mode": "leetcode", "instruction": "You are given a string `s` consisting of lowercase English letters. You can perform the following operation at most once: choose two distinct indices `i` and `j` where `s[i]` is a vowel ('a', 'e', 'i', 'o', 'u'), and replace `s[i]` with `s[j]` and vice versa. A string is considered **beautiful** if it meets the following criteria:\n1. The string is a palindrome.\n2. The string contains exactly three distinct characters.\n\nReturn `true` if you can make the string `s` beautiful, and `false` otherwise."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a `m x n` grid of characters `board` and a word `word`, return `true` if `word` can be constructed from letters on the `board`. The word does not need to be constructed from letters adjacent in the same row or column, but it cannot use the same letter cell more than once. Each cell in the grid can only contribute one letter to the word. If the word can be formed, return `true`; otherwise, return `false`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef exist(board, word):\n    \"\"\"\n    Determines if the word can be constructed from letters on the board.\n    :param board: List[List[str]] representing the grid.\n    :param word: str representing the word to find.\n    :return: bool indicating whether the word can be formed.\n    \"\"\"\n    def dfs(board, row, col, word, index):\n        if index == len(word):\n            return True\n        if row < 0 or row >= len(board) or col < 0 or col >= len(board[0]) or board[row][col] != word[index]:\n            return False\n        \n        temp, board[row][col] = board[row][col], ''  # Mark as visited\n        found = dfs(board, row + 1, col, word, index + 1) or \\\n                dfs(board, row - 1, col, word, index + 1) or \\\n                dfs(board, row, col + 1, word, index + 1) or \\\n                dfs(board, row, col - 1, word, index + 1)\n        board[row][col] = temp  # Unmark for future iterations\n        return found\n    \n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if dfs(board, i, j, word, 0):\n                return True\n    return False\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_exist():\n    assert exist([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\") == True\n    assert exist([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\") == True\n    assert exist([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\") == False\n    assert exist([], \"ABCCED\") == False\n    assert exist([[\"a\"]], \"a\") == True\n    assert exist([[\"a\"]], \"b\") == False\n    assert exist([[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]], \"acef\") == True\n    assert exist([[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]], \"abcdef\") == False  # Cannot use the same cell more than once\n\ntest_exist()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000087", "row_id": 87, "seed_ids": ["2477", "1000", "79"], "mode": "leetcode", "instruction": "Given a `m x n` grid of characters `board` and a word `word`, return `true` if `word` can be constructed from letters on the `board`. The word does not need to be constructed from letters adjacent in the same row or column, but it cannot use the same letter cell more than once. Each cell in the grid can only contribute one letter to the word. If the word can be formed, return `true`; otherwise, return `false`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]`. Design a data structure to efficiently manage these intervals and answer the following operations:\n\n1. `addInterval(start, end)`: Add a new interval `[start, end]` to the data structure. Ensure that the new interval does not overlap with any existing interval.\n2. `removeInterval(start, end)`: Remove an existing interval `[start, end]` from the data structure if it exists.\n3. `mergeIntervals()`: Merge all overlapping intervals in the data structure and return the merged intervals as a list.\n4. `queryInterval(start, end)`: Check if there is any interval in the data structure that overlaps with the given interval `[start, end]`.\n\nImplement the `IntervalManager` class:\n\n*   `IntervalManager()`: Initializes the data structure with an empty list of intervals.\n*   `void addInterval(start, end)`: Adds a new interval `[start, end]` to the data structure.\n*   `void removeInterval(start, end)`: Removes an interval `[start, end]` from the data structure if it exists.\n*   `List<int[]> mergeIntervals()`: Merges all overlapping intervals and returns the merged intervals as a list.\n*   `boolean queryInterval(start, end)`: Checks if there is any interval in the data structure that overlaps with the given interval `[start, end]`.\n\nEnsure that the intervals are stored in a way that allows for efficient operations, and the intervals stored in the data structure are sorted by their start times."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\n\nclass IntervalManager:\n    def __init__(self):\n        self.intervals = []\n\n    def addInterval(self, start: int, end: int) -> None:\n        intervals = self.intervals\n        new_interval = [start, end]\n        insert_pos = -1\n        \n        # Find the insert position to ensure intervals remain sorted\n        for i, interval in enumerate(intervals):\n            if end < interval[0]:\n                insert_pos = i\n                break\n        else:\n            insert_pos = len(intervals)\n        \n        inserted = False\n        for i, interval in enumerate(intervals):\n            if i == insert_pos:\n                # Check for overlapping intervals and merge if necessary\n                if start <= interval[0]:\n                    if end < interval[0]:\n                        # Fully to the left\n                        pass\n                    elif end < interval[1]:\n                        # Partial overlap on the right\n                        new_interval[1] = interval[1]\n                        insert_pos = i + 1\n                        inserted = True\n                        break\n                    elif end >= interval[1]:\n                        # Complete overlap or extends right\n                        new_interval = interval\n                        inserted = True\n                        continue\n                elif start > interval[0]:\n                    # No overlap\n                    if end < interval[0]:\n                        # Fully to the right\n                        pass\n                    else:\n                        # Overlap from the left\n                        new_interval[0] = interval[0]\n                        insert_pos = i\n                        inserted = True\n                        break\n                else:\n                    # Start is equal to interval[0]; cannot happen since insert_pos is found\n                    assert False\n            intervals[i] = new_interval\n        if not inserted:\n            intervals.insert(insert_pos, new_interval)\n\n    def removeInterval(self, start: int, end: int) -> None:\n        self.intervals = [interval for interval in self.intervals if interval != [start, end]]\n\n    def mergeIntervals(self) -> List[int:]:\n        if not self.intervals:\n            return []\n        \n        merged = []\n        current = self.intervals[0]\n        for interval in self.intervals[1:]:\n            if interval[0] <= current[1]:\n                current[1] = max(current[1], interval[1])\n            else:\n                merged.append(current)\n                current = interval\n        merged.append(current)\n        self.intervals = merged\n        return self.intervals\n\n    def queryInterval(self, start: int, end: int) -> bool:\n        intervals = self.intervals\n        for interval in intervals:\n            if interval[0] <= end and interval[1] >= start:\n                return True\n        return False\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ninterval_manager = IntervalManager()\n\ndef test_add_merge():\n    interval_manager.addInterval(1, 3)\n    interval_manager.addInterval(2, 6)\n    interval_manager.addInterval(8, 10)\n    interval_manager.addInterval(15, 18)\n    assert interval_manager.mergeIntervals() == [[1, 6], [8, 10], [15, 18]]\n    interval_manager.addInterval(5, 7)\n    assert interval_manager.mergeIntervals() == [[1, 7], [8, 10], [15, 18]]\n\ndef test_remove_merge():\n    interval_manager.addInterval(1, 4)\n    interval_manager.addInterval(4, 5)\n    interval_manager.removeInterval(1, 4)\n    assert interval_manager.mergeIntervals() == [[4, 5]]\n    interval_manager.addInterval(6, 8)\n    assert interval_manager.mergeIntervals() == [[4, 5], [6, 8]]\n\ndef test_query():\n    interval_manager.addInterval(1, 3)\n    interval_manager.addInterval(5, 9)\n    assert interval_manager.queryInterval(2, 4)\n    assert not interval_manager.queryInterval(4, 5)\n    assert interval_manager.queryInterval(5, 7)\n    assert interval_manager.queryInterval(7, 9)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000088", "row_id": 88, "seed_ids": ["497", "933", "1271"], "mode": "leetcode", "instruction": "You are given a list of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]`. Design a data structure to efficiently manage these intervals and answer the following operations:\n\n1. `addInterval(start, end)`: Add a new interval `[start, end]` to the data structure. Ensure that the new interval does not overlap with any existing interval.\n2. `removeInterval(start, end)`: Remove an existing interval `[start, end]` from the data structure if it exists.\n3. `mergeIntervals()`: Merge all overlapping intervals in the data structure and return the merged intervals as a list.\n4. `queryInterval(start, end)`: Check if there is any interval in the data structure that overlaps with the given interval `[start, end]`.\n\nImplement the `IntervalManager` class:\n\n*   `IntervalManager()`: Initializes the data structure with an empty list of intervals.\n*   `void addInterval(start, end)`: Adds a new interval `[start, end]` to the data structure.\n*   `void removeInterval(start, end)`: Removes an interval `[start, end]` from the data structure if it exists.\n*   `List<int[]> mergeIntervals()`: Merges all overlapping intervals and returns the merged intervals as a list.\n*   `boolean queryInterval(start, end)`: Checks if there is any interval in the data structure that overlaps with the given interval `[start, end]`.\n\nEnsure that the intervals are stored in a way that allows for efficient operations, and the intervals stored in the data structure are sorted by their start times."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given two strings `s` and `t`, both of length `n`, and an integer `k`, you can perform the following operation on `s` any number of times: choose `k` indices in `s` and rotate the substring of `s` starting at each of those indices by one position to the right (the last character moves to the front). A rotation is represented by a pair `[i, k]` where `i` is the starting index and `k` is the number of positions to rotate. Determine the lexicographically smallest string `s` that can be obtained after performing these operations, and also find the minimum number of operations required to achieve this."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_min_string(s: str, k: int) -> (str, int):\n    \"\"\"\n    Returns the lexicographically smallest string s that can be obtained after\n    performing the rotation operations and the minimum number of operations required.\n    \"\"\"\n    if k < len(s):\n        rotations = []\n        for i in range(len(s)):\n            s = s[-1] + s[:-1]  # Rotate the string by one position\n            rotations.append((i, 1))\n        return s, len(rotations)\n    else:\n        # If k is large enough, we can make all characters the same with one operation\n        # or use up to k-1 operations to make the string lexicographically smallest.\n        min_char = min(s)\n        for i in range(len(s)):\n            if s[i] == min_char:\n                return s[i:] + s[:i], 1\n        return s, 0  # In case the string is already lexicographically smallest\n\n# Example usage:\n# print(find_min_string(\"bbbaaa\", 3))  # Should return ('aaaaabbb', 3)\n# print(find_min_string(\"ccbb\", 2))    # Should return ('bbcc', 1)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_min_string\n\ndef test_find_min_string():\n    assert find_min_string(\"bbbaaa\", 3) == ('aaaaabbb', 3)\n    assert find_min_string(\"ccbb\", 2) == ('bbcc', 1)\n    assert find_min_string(\"abc\", 5) == ('abc', 0)  # Already smallest\n    assert find_min_string(\"ccc\", 3) == ('ccc', 0)  # Already smallest\n    assert find_min_string(\"zzzz\", 2) == ('zzzz', 1)  # Can be made smaller with 1 operation\n\nif __name__ == \"__main__\":\n    import pytest\n    pytest.main(['-v', '--tb=line', '-rN', __file__])\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000089", "row_id": 89, "seed_ids": ["1202", "982", "2531"], "mode": "leetcode", "instruction": "Given two strings `s` and `t`, both of length `n`, and an integer `k`, you can perform the following operation on `s` any number of times: choose `k` indices in `s` and rotate the substring of `s` starting at each of those indices by one position to the right (the last character moves to the front). A rotation is represented by a pair `[i, k]` where `i` is the starting index and `k` is the number of positions to rotate. Determine the lexicographically smallest string `s` that can be obtained after performing these operations, and also find the minimum number of operations required to achieve this."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, a **substring** `t` of `s` is called **balanced** if the number of vowels (`a`, `e`, `i`, `o`, `u`) in `t` is equal to the number of consonants. Return the number of **balanced** substrings in `s`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_balanced_substrings(s):\n    \"\"\"\n    Counts the number of balanced substrings in the given string `s`.\n    A balanced substring has an equal number of vowels and consonants.\n    \"\"\"\n    vowels = set('aeiou')\n    count, balanced_count = 0, 0\n    \n    for char in s:\n        if char in vowels:\n            count += 1\n        else:\n            count -= 1\n        \n        if count == 0:\n            balanced_count += 1\n    \n    return balanced_count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_count_balanced_substrings():\n    assert count_balanced_substrings(\"aebbcedee\") == 3\n    assert count_balanced_substrings(\"aaabbb\") == 0\n    assert count_balanced_substrings(\"aeiou\") == 1\n    assert count_balanced_substrings(\"accdedcba\") == 3\n    assert count_balanced_substrings(\"zxyz\") == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000090", "row_id": 90, "seed_ids": ["2320", "2021", "647"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, a **substring** `t` of `s` is called **balanced** if the number of vowels (`a`, `e`, `i`, `o`, `u`) in `t` is equal to the number of consonants. Return the number of **balanced** substrings in `s`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` (a string consisting only of `'0's` and `'1's`), you can perform the following operation any number of times: choose any **non-empty subsequence** of `s` and toggle all its characters (i.e., change all `'0's` to `'1's` and all `'1's` to `'0's`). Determine if it is possible to make the string `s` **palindromic** (the same string read from left to right and from right to left) using these operations. Return `true` if it is possible, otherwise return `false`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef can_make_palindrome(s: str) -> bool:\n    \"\"\"\n    Determines if it's possible to make the binary string s palindromic\n    by toggling any non-empty subsequence any number of times.\n    \"\"\"\n    toggle = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            toggle += 1\n    # If there are more than 1 pair of non-matching characters, it's impossible\n    # to make the string palindromic because we can only toggle the whole string.\n    return toggle <= 1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_can_make_palindrome():\n    assert can_make_palindrome(\"001101101\") == False\n    assert can_make_palindrome(\"010\") == True\n    assert can_make_palindrome(\"101\") == True\n    assert can_make_palindrome(\"111000111\") == True\n    assert can_make_palindrome(\"01001\") == False\n    assert can_make_palindrome(\"1010101\") == True\n    assert can_make_palindrome(\"10011001\") == False\n    assert can_make_palindrome(\"000\") == True\n    assert can_make_palindrome(\"1111111\") == True\n    assert can_make_palindrome(\"101101\") == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000091", "row_id": 91, "seed_ids": ["1460", "1379", "32"], "mode": "leetcode", "instruction": "Given a binary string `s` (a string consisting only of `'0's` and `'1's`), you can perform the following operation any number of times: choose any **non-empty subsequence** of `s` and toggle all its characters (i.e., change all `'0's` to `'1's` and all `'1's` to `'0's`). Determine if it is possible to make the string `s` **palindromic** (the same string read from left to right and from right to left) using these operations. Return `true` if it is possible, otherwise return `false`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a 2D grid representing a map of islands and water. The grid contains the following characters:\n- `'W'` for water (you cannot move through water).\n- `'L'` for land (you can move through land).\n- `'S'` for start (your starting position, guaranteed to be on land).\n\nYou can move up, down, left, or right from any land cell to an adjacent land cell. The goal is to find the shortest path from the start position to any border cell (a cell on the edge of the grid) that is also land. You cannot move diagonally. If there is no such path, return `-1`.\n\nReturn the number of steps in the shortest path, or `-1` if no such path exists."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import deque\n\ndef shortest_path_to_border(grid):\n    \"\"\"\n    Finds the shortest path from the start position to any border cell that is also land.\n    :param grid: List[List[str]], a 2D grid representing the map.\n    :return: int, the number of steps in the shortest path or -1 if no path exists.\n    \"\"\"\n    rows, cols = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    start = None\n    visited = set()\n    \n    # Find the start position\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 'S':\n                start = (r, c)\n                break\n        if start:\n            break\n    \n    if not start:\n        return -1\n    \n    queue = deque([(start, 0)])\n    visited.add(start)\n    \n    while queue:\n        (r, c), dist = queue.popleft()\n        if r == 0 or r == rows - 1 or c == 0 or c == cols - 1:\n            return dist\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if (0 <= nr < rows and 0 <= nc < cols and\n                grid[nr][nc] == 'L' and (nr, nc) not in visited):\n                visited.add((nr, nc))\n                queue.append(((nr, nc), dist + 1))\n                \n    return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_shortest_path_to_border():\n    grid = [\n        ['L', 'L', 'L'],\n        ['L', 'S', 'L'],\n        ['L', 'L', 'L']\n    ]\n    assert shortest_path_to_border(grid) == 0\n\n    grid = [\n        ['L', 'L', 'L'],\n        ['W', 'S', 'L'],\n        ['L', 'L', 'L']\n    ]\n    assert shortest_path_to_border(grid) == 1\n\n    grid = [\n        ['L', 'L', 'L'],\n        ['L', 'S', 'W'],\n        ['L', 'L', 'L']\n    ]\n    assert shortest_path_to_border(grid) == -1\n\n    grid = [\n        ['W', 'L', 'L'],\n        ['L', 'S', 'L'],\n        ['L', 'L', 'W']\n    ]\n    assert shortest_path_to_border(grid) == 2\n\n    grid = [\n        ['L', 'W', 'L'],\n        ['L', 'S', 'L'],\n        ['W', 'L', 'L']\n    ]\n    assert shortest_path_to_border(grid) == -1\n\n    grid = [\n        ['L', 'L', 'L', 'W'],\n        ['L', 'S', 'L', 'L'],\n        ['L', 'L', 'L', 'L']\n    ]\n    assert shortest_path_to_border(grid) == 1\n\n    grid = [\n        ['W', 'W', 'W'],\n        ['W', 'S', 'W'],\n        ['W', 'W', 'W']\n    ]\n    assert shortest_path_to_border(grid) == -1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000092", "row_id": 92, "seed_ids": ["1298", "2511", "1926"], "mode": "leetcode", "instruction": "You are given a 2D grid representing a map of islands and water. The grid contains the following characters:\n- `'W'` for water (you cannot move through water).\n- `'L'` for land (you can move through land).\n- `'S'` for start (your starting position, guaranteed to be on land).\n\nYou can move up, down, left, or right from any land cell to an adjacent land cell. The goal is to find the shortest path from the start position to any border cell (a cell on the edge of the grid) that is also land. You cannot move diagonally. If there is no such path, return `-1`.\n\nReturn the number of steps in the shortest path, or `-1` if no such path exists."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an array of integers `nums`, find the length of the longest **consecutive sequence** that can be formed by rearranging the elements of the array. A **consecutive sequence** is a sequence where each element is exactly one more than the previous element. If no such sequence exists, return 0.\n\nFor example, given `nums = [100, 4, 200, 1, 3, 2]`, the longest consecutive sequence that can be formed is `[1, 2, 3, 4]`, so the function should return 4."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_consecutive(nums):\n    \"\"\"\n    Finds the length of the longest consecutive sequence that can be formed by rearranging\n    the elements of the array. If no such sequence exists, returns 0.\n    \"\"\"\n    num_set = set(nums)\n    longest_streak = 0\n    \n    for num in num_set:\n        # Check if it's the start of a sequence\n        if num - 1 not in num_set:\n            current_num = num\n            current_streak = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_streak += 1\n            \n            longest_streak = max(longest_streak, current_streak)\n    \n    return longest_streak\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_longest_consecutive_positive():\n    assert longest_consecutive([100, 4, 200, 1, 3, 2]) == 4\n    assert longest_consecutive([10, 20, 30, 40]) == 1\n    assert longest_consecutive([100, 90, 80, 70, 101, 102, 103]) == 3\n    assert longest_consecutive([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]) == 9\n\ndef test_longest_consecutive_empty():\n    assert longest_consecutive([]) == 0\n\ndef test_longest_consecutive_one_element():\n    assert longest_consecutive([5]) == 1\n\ndef test_longest_consecutive_duplicate_elements():\n    assert longest_consecutive([1, 2, 2, 3, 3, 4, 4, 5]) == 5\n\ndef test_longest_consecutive_sequence_not_consecutive():\n    assert longest_consecutive([5, 6, 7, 2, 3, 4]) == 4\n    assert longest_consecutive([10, 12, 13, 11]) == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000093", "row_id": 93, "seed_ids": ["1935", "2053", "376"], "mode": "leetcode", "instruction": "Given an array of integers `nums`, find the length of the longest **consecutive sequence** that can be formed by rearranging the elements of the array. A **consecutive sequence** is a sequence where each element is exactly one more than the previous element. If no such sequence exists, return 0.\n\nFor example, given `nums = [100, 4, 200, 1, 3, 2]`, the longest consecutive sequence that can be formed is `[1, 2, 3, 4]`, so the function should return 4."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Implement the `CircularArray` class that supports the following operations:\n\n- `CircularArray(int size)` Initializes the `CircularArray` with `size` elements, all set to zero.\n- `void set(int index, int val)` Sets the value at the given `index` to `val`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n- `int get(int index)` Returns the value at the given `index`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n- `void increment(int index, int val)` Increments the value at the given `index` by `val`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n\nAdditionally, provide a method:\n\n- `String toString()` Returns a string representation of the `CircularArray`, where each element is separated by a comma and the entire array is enclosed in square brackets."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass CircularArray:\n    def __init__(self, size):\n        \"\"\"\n        Initializes the CircularArray with size elements, all set to zero.\n        \"\"\"\n        self.size = size\n        self.array = [0] * size\n\n    def set(self, index, val):\n        \"\"\"\n        Sets the value at the given index to val. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n        \"\"\"\n        self.array[index % self.size] = val\n\n    def get(self, index):\n        \"\"\"\n        Returns the value at the given index. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n        \"\"\"\n        return self.array[index % self.size]\n\n    def increment(self, index, val):\n        \"\"\"\n        Increments the value at the given index by val. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n        \"\"\"\n        self.set(index, self.get(index) + val)\n\n    def to_string(self):\n        \"\"\"\n        Returns a string representation of the CircularArray.\n        \"\"\"\n        return '[' + ','.join(map(str, self.array)) + ']'\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_circular_array():\n    circ_arr = CircularArray(4)\n    assert circ_arr.to_string() == '[0, 0, 0, 0]'\n    circ_arr.set(0, 1)\n    assert circ_arr.to_string() == '[1, 0, 0, 0]'\n    circ_arr.set(3, 2)\n    assert circ_arr.to_string() == '[1, 0, 0, 2]'\n    circ_arr.increment(0, 3)\n    assert circ_arr.to_string() == '[4, 0, 0, 2]'\n    circ_arr.increment(4, 1)\n    assert circ_arr.to_string() == '[0, 1, 0, 2]'\n    circ_arr.increment(-2, 3)\n    assert circ_arr.to_string() == '[3, 1, 0, 2]'\n    assert circ_arr.get(0) == 3\n    assert circ_arr.get(2) == 0\n    assert circ_arr.get(-1) == 2\n    assert circ_arr.get(5) == 1\n\n# Run tests using pytest\ntest_circular_array()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000094", "row_id": 94, "seed_ids": ["2166", "1091", "2357"], "mode": "leetcode", "instruction": "Implement the `CircularArray` class that supports the following operations:\n\n- `CircularArray(int size)` Initializes the `CircularArray` with `size` elements, all set to zero.\n- `void set(int index, int val)` Sets the value at the given `index` to `val`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n- `int get(int index)` Returns the value at the given `index`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n- `void increment(int index, int val)` Increments the value at the given `index` by `val`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n\nAdditionally, provide a method:\n\n- `String toString()` Returns a string representation of the `CircularArray`, where each element is separated by a comma and the entire array is enclosed in square brackets."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a **binary tree** with `n` nodes, where each node has a unique value from `1` to `n`, determine if the tree can be **partitioned** into two subsets such that the sum of values in each subset is equal. Return `true` if such a partition exists, otherwise return `false`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef can_partition_bst(root: TreeNode) -> bool:\n    \"\"\"\n    Determines if a binary search tree with unique values from 1 to n can be partitioned into two subsets\n    with equal sum.\n    \"\"\"\n    total_sum = 0\n    subset_sums = set()\n\n    def inorder_traverse(node: TreeNode):\n        nonlocal total_sum\n        if not node:\n            return\n        inorder_traverse(node.left)\n        total_sum += node.val\n        inorder_traverse(node.right)\n\n    def find_partition(current_sum: int, target: int, node: TreeNode):\n        if not node:\n            return False\n        if current_sum + node.val == target:\n            return True\n        if find_partition(current_sum + node.val, target, node.left):\n            return True\n        if find_partition(current_sum + node.val, target, node.right):\n            return True\n        return False\n\n    inorder_traverse(root)\n    half_sum = total_sum / 2\n    return find_partition(0, half_sum, root)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import can_partition_bst, TreeNode\n\ndef create_bst():\n    \"\"\"\n    Helper function to create a binary search tree for test cases.\n    \"\"\"\n    node5 = TreeNode(5)\n    node3 = TreeNode(3)\n    node7 = TreeNode(7)\n    node2 = TreeNode(2, left=TreeNode(1))\n    node4 = TreeNode(4, right=TreeNode(3))\n    node5.left = node3\n    node5.right = node7\n    node3.left = node2\n    node3.right = node4\n    return node5\n\ndef test_can_partition_bst_single_element():\n    assert can_partition_bst(TreeNode(2)) == False\n\ndef test_can_partition_bst_even_sum():\n    root = create_bst()\n    assert can_partition_bst(root) == True\n\ndef test_can_partition_bst_odd_sum():\n    node10 = TreeNode(10)\n    node8 = TreeNode(8)\n    node12 = TreeNode(12)\n    node6 = TreeNode(6)\n    node10.left = node8\n    node10.right = node12\n    node8.left = node6\n    assert can_partition_bst(node10) == False\n\ndef test_can_partition_bst_complex():\n    node16 = TreeNode(16)\n    node9 = TreeNode(9)\n    node21 = TreeNode(21)\n    node3 = TreeNode(3)\n    node21.left = node16\n    node9.right = node21\n    node21.right = node3\n    assert can_partition_bst(node9) == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000095", "row_id": 95, "seed_ids": ["1710", "1557", "587"], "mode": "leetcode", "instruction": "Given a **binary tree** with `n` nodes, where each node has a unique value from `1` to `n`, determine if the tree can be **partitioned** into two subsets such that the sum of values in each subset is equal. Return `true` if such a partition exists, otherwise return `false`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of `n` unique integers, determine if there exists a pair of integers in the list whose sum is equal to a given target integer `k`. If such a pair exists, return the indices of the two integers (0-indexed) in any order. If no such pair exists, return an empty list. Note that the same integer cannot be used twice."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_pair_indices(nums, k):\n    \"\"\"\n    Given a list of n unique integers and a target integer k,\n    returns the indices of the two integers in any order\n    whose sum is equal to k. Returns an empty list if no such pair exists.\n    \n    :param nums: List[int] - A list of unique integers.\n    :param k: int - The target sum.\n    :return: List[int] - The indices of the pair if found, otherwise an empty list.\n    \"\"\"\n    num_to_index = {}\n    for i, num in enumerate(nums):\n        complement = k - num\n        if complement in num_to_index:\n            return [num_to_index[complement], i]\n        num_to_index[num] = i\n    return []\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_pair_indices\n\ndef test_find_pair_indices():\n    assert find_pair_indices([2, 7, 11, 15], 9) == [0, 1]\n    assert find_pair_indices([3, 2, 4], 6) == [1, 2]\n    assert find_pair_indices([3, 3], 6) == [0, 1]\n    assert find_pair_indices([1, 2, 3], 7) == []\n    assert find_pair_indices([0, 2, -2, 5, 1], 3) == [1, 3]\n    assert find_pair_indices([1, 5, 9, 7], 10) == [0, 2]\n    assert find_pair_indices([1, 5, 9, 7], 16) == [2, 3]\n    assert find_pair_indices([], 5) == []\n    assert find_pair_indices([1], 2) == []\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000096", "row_id": 96, "seed_ids": ["2485", "2345", "796"], "mode": "leetcode", "instruction": "Given a list of `n` unique integers, determine if there exists a pair of integers in the list whose sum is equal to a given target integer `k`. If such a pair exists, return the indices of the two integers (0-indexed) in any order. If no such pair exists, return an empty list. Note that the same integer cannot be used twice."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a matrix `matrix` of size `m x n` containing integers, design an algorithm to find the sum of the maximum element in each row. For example, if the matrix is:\n\n```\n[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n```\n\nThe output should be the sum of the maximum elements in each row, which is `3 + 6 + 9 = 18`.\n\nWrite a function `sumOfMaxElements(matrix: List[List[int]]) -> int` that returns the sum of the maximum elements in each row of the given matrix.\n\n### Example\n\n#### Input\n```\nmatrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n```\n\n#### Output\n```\n18\n```\n\n### Constraints\n\n- `1 <= m, n <= 100`\n- `-1000 <= matrix[i][j] <= 1000`"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\n\ndef sumOfMaxElements(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Returns the sum of the maximum elements in each row of the given matrix.\n    \"\"\"\n    return sum(max(row) for row in matrix)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sumOfMaxElements\n\ndef test_sumOfMaxElements():\n    assert sumOfMaxElements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 18\n    assert sumOfMaxElements([[10], [20], [30]]) == 60\n    assert sumOfMaxElements([[0, -1, -2], [-3, -4, -5], [-6, -7, -8]]) == -3\n    assert sumOfMaxElements([[5, 5, 5], [5, 5, 5], [5, 5, 5]]) == 15\n    assert sumOfMaxElements([[1, 2], [3, 4], [5, 6], [7, 8]]) == 26\n\ndef test_with_single_row_matrix():\n    assert sumOfMaxElements([[1, 2, 3, 4, 5]]) == 5\n    assert sumOfMaxElements([[100]]) == 100\n\ndef test_with_empty_matrix():\n    assert sumOfMaxElements([]) == 0\n    assert sumOfMaxElements([[]]) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000097", "row_id": 97, "seed_ids": ["896", "1337", "928"], "mode": "leetcode", "instruction": "Given a matrix `matrix` of size `m x n` containing integers, design an algorithm to find the sum of the maximum element in each row. For example, if the matrix is:\n\n```\n[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n```\n\nThe output should be the sum of the maximum elements in each row, which is `3 + 6 + 9 = 18`.\n\nWrite a function `sumOfMaxElements(matrix: List[List[int]]) -> int` that returns the sum of the maximum elements in each row of the given matrix.\n\n### Example\n\n#### Input\n```\nmatrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n```\n\n#### Output\n```\n18\n```\n\n### Constraints\n\n- `1 <= m, n <= 100`\n- `-1000 <= matrix[i][j] <= 1000`"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a complete binary tree represented by an array `tree`, where `tree[i]` represents the value of the node at index `i`, and each parent node's value is the bitwise OR of its two children. You are given the root index `0` and a target value `target`. Your task is to insert a new node with value `target` into the array representation of the tree while maintaining the complete binary tree property, and return the new root index of the modified array.\n\nImplement the `CBTArrayInserter` class with the following methods:\n*   `CBTArrayInserter(int[] tree)`: Initializes the data structure with the given array `tree` representing the complete binary tree.\n*   `int insert(int target)`: Inserts a new node with value `target` into the tree and returns the new root index of the modified array.\n*   `int get_root()`: Returns the root index of the current state of the tree."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass CBTArrayInserter:\n    def __init__(self, tree):\n        self.tree = tree\n        self.size = len(tree)\n\n    def insert(self, target):\n        self.size += 1\n        index = self.size - 1\n        self.tree.append(target)\n        while index > 0 and self.tree[index] != 0:\n            parent = (index - 1) // 2\n            self.tree[parent] |= self.tree[index]\n            index = parent\n        return 0\n\n    def get_root(self):\n        return 0\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_cbt_array_inserter():\n    tree = [1, 2, 3, 4, 5, 6, 7]\n    inserter = CBTArrayInserter(tree)\n    assert inserter.insert(8) == 0  # Insert a new node with value 8 at the end\n    assert inserter.get_root() == 0  # The root index remains 0\n    assert inserter.insert(9) == 0  # Insert a new node with value 9 at the end\n    assert inserter.insert(10) == 0 # Insert a new node with value 10 at the end\n\n    tree = [0, 1, 0, 0, 2, 3, 4, 5, 6, 7]\n    inserter = CBTArrayInserter(tree)\n    assert inserter.insert(8) == 0  # Insert a new node with value 8 at the end\n    assert inserter.get_root() == 0  # The root index remains 0\n    assert inserter.insert(9) == 0  # Insert a new node with value 9 at the end\n    assert inserter.insert(10) == 0 # Insert a new node with value 10 at the end\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000098", "row_id": 98, "seed_ids": ["318", "1265", "919"], "mode": "leetcode", "instruction": "Given a complete binary tree represented by an array `tree`, where `tree[i]` represents the value of the node at index `i`, and each parent node's value is the bitwise OR of its two children. You are given the root index `0` and a target value `target`. Your task is to insert a new node with value `target` into the array representation of the tree while maintaining the complete binary tree property, and return the new root index of the modified array.\n\nImplement the `CBTArrayInserter` class with the following methods:\n*   `CBTArrayInserter(int[] tree)`: Initializes the data structure with the given array `tree` representing the complete binary tree.\n*   `int insert(int target)`: Inserts a new node with value `target` into the tree and returns the new root index of the modified array.\n*   `int get_root()`: Returns the root index of the current state of the tree."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary matrix `grid` of size `m x n`, flip the image horizontally, then invert all the values: change `0` to `1` and `1` to `0`. Return the resulting matrix. A flip horizontally means that for each row, the values are reversed, and inverting the values means that all `0`s are changed to `1`s and all `1`s are changed to `0`s."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef flip_and_invert_image(grid):\n    \"\"\"\n    Flips the given binary matrix horizontally and inverts the values.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    result = []\n    for row in grid:\n        flipped_row = row[::-1]  # Flip horizontally\n        inverted_row = [1 - val for val in flipped_row]  # Invert values\n        result.append(inverted_row)\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import flip_and_invert_image\n\ndef test_flip_and_invert_image():\n    grid = [[1, 1, 0], [1, 0, 1], [0, 0, 0]]\n    expected = [[1, 0, 0], [0, 1, 0], [1, 1, 1]]\n    assert flip_and_invert_image(grid) == expected\n\ndef test_flip_and_invert_image_single_row():\n    grid = [[1, 1, 1]]\n    expected = [[0, 0, 0]]\n    assert flip_and_invert_image(grid) == expected\n\ndef test_flip_and_invert_image_all_zeros():\n    grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n    expected = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    assert flip_and_invert_image(grid) == expected\n\ndef test_flip_and_invert_image_all_ones():\n    grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    expected = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n    assert flip_and_invert_image(grid) == expected\n\ndef test_flip_and_invert_image_mixed():\n    grid = [[1, 0, 1], [1, 1, 0], [0, 0, 0]]\n    expected = [[0, 1, 0], [0, 0, 1], [1, 1, 1]]\n    assert flip_and_invert_image(grid) == expected\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000099", "row_id": 99, "seed_ids": ["673", "1120", "2428"], "mode": "leetcode", "instruction": "Given a binary matrix `grid` of size `m x n`, flip the image horizontally, then invert all the values: change `0` to `1` and `1` to `0`. Return the resulting matrix. A flip horizontally means that for each row, the values are reversed, and inverting the values means that all `0`s are changed to `1`s and all `1`s are changed to `0`s."}}
