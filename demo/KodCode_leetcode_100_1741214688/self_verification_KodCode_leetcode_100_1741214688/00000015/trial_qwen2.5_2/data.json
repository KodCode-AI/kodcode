{
  "metadata": {
    "prompt_id": "00000015",
    "row_id": 15,
    "seed_ids": [
      "2500",
      "1736",
      "1898"
    ],
    "mode": "leetcode"
  },
  "instruction": "You are given two strings `text1` and `text2`, both consisting of lowercase English letters. Your task is to find the length of the longest **common subsequence** (LCS) between the two strings. Additionally, you are provided with a **mask** string `mask`, where each character is either `'0'` or `'1'`. You need to modify the LCS such that each character in the LCS is replaced by the corresponding character in `mask` if the corresponding position in `mask` is `'1'`, and kept as is if the corresponding position in `mask` is `'0'`. Return the modified LCS as a string.\n\n**Note**: A **common subsequence** is a sequence that can be derived from both strings by deleting some characters without changing the order of the remaining characters.",
  "solution_code": "def longest_common_subsequence(text1, text2, mask):\n    \"\"\"\n    Returns the modified longest common subsequence between text1 and text2,\n    where each character in the LCS is replaced by the corresponding character\n    in mask if the corresponding position in mask is '1'.\n    \"\"\"\n    m, n = len(text1), len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if text1[i - 1] == text2[j - 1] and mask[i - 1] == '1':\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # Reconstruct the LCS\n    result = []\n    i, j = m, n\n    while i > 0 and j > 0:\n        if text1[i - 1] == text2[j - 1] and mask[i - 1] == '1':\n            result.append(text1[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    return ''.join(result[::-1])\n\n# Example usage:\nresult = longest_common_subsequence(\"abcde\", \"ace\", \"10111\")\nprint(result)  # Output: \"ace\"",
  "test_code": "from solution import longest_common_subsequence\n\ndef test_lcs_with_mask():\n    assert longest_common_subsequence(\"abcde\", \"ace\", \"10111\") == \"ace\"\n    assert longest_common_subsequence(\"abcdef\", \"acdf\", \"010011\") == \"cdf\"\n    assert longest_common_subsequence(\"programming\", \"gaming\", \"0001001110\") == \"gmingm\"\n    assert longest_common_subsequence(\"abcdefghijklmnopqrstuvwxyz\", \"bcdefghijklmnopqrstuvwxyza\", \"1111111111111111111111100000\") == \"bcdefghijklmnopqrstuvwxyza\"\n    assert longest_common_subsequence(\"xyz\", \"xyz\", \"000\") == \"xyz\"\n    assert longest_common_subsequence(\"\", \"abc\", \"111\") == \"\"\n    assert longest_common_subsequence(\"abc\", \"\", \"000\") == \"\"",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results2.jsonl"
}