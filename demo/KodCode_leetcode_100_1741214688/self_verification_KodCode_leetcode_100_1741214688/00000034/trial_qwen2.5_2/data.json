{
  "metadata": {
    "prompt_id": "00000034",
    "row_id": 34,
    "seed_ids": [
      "2484",
      "291",
      "249"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a string `s`, return the number of distinct **subsequences** of `s` that are palindromic. Since the answer may be very large, return it **modulo** `10^9 + 7`. Note: A string is considered a **subsequence** of another string if it can be derived by deleting some or no characters from the other string without changing the order of the remaining characters.",
  "solution_code": "def count_palindromic_subsequences(s: str) -> int:\n    \"\"\"\n    Returns the number of distinct palindromic subsequences in the given string s.\n    The result is returned modulo 10^9 + 7.\n    \"\"\"\n    mod = 10**9 + 7\n    n = len(s)\n    dp = [[[0 for _ in range(n)] for _ in range(n)] for _ in range(4)]\n    for i in range(n):\n        dp[0][i][i] = 1  # Single character is a palindrome.\n        \n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if s[start] == s[end]:\n                for j in range(1, 4):\n                    dp[j][start][end] = (dp[j-1][start+1][end-1] * 2) % mod\n                    if start + 1 <= end - 1:\n                        dp[j][start][end] += dp[j][start+1][end-1]\n                    if start + 2 <= end:\n                        dp[j][start][end] += dp[j][start+2][end]\n            else:\n                for j in range(1, 4):\n                    dp[j][start][end] = (dp[j-1][start+1][end] + dp[j-1][start][end-1]) % mod\n\n    return (dp[3][0][n-1] - 2 + mod) % mod  # Subtract the count of palindromic subsequences that are not distinct.",
  "test_code": "from solution import count_palindromic_subsequences\n\ndef test_count_palindromic_subsequences():\n    assert count_palindromic_subsequences(\"abc\") == 3\n    assert count_palindromic_subsequences(\"aaa\") == 6\n    assert count_palindromic_subsequences(\"aab\") == 7\n    assert count_palindromic_subsequences(\"odbcocdo\") == 25\n    assert count_palindromic_subsequences(\"a\") == 1\n    assert count_palindromic_subsequences(\"bb\") == 3\n\ndef test_large_string():\n    s = \"abcdefghijklmnopqrstuvwxyz\" * 1000\n    assert 0 < count_palindromic_subsequences(s) <= 10**9 + 7",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results2.jsonl"
}