{
  "metadata": {
    "prompt_id": "00000034",
    "row_id": 34,
    "seed_ids": [
      "2484",
      "291",
      "249"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a string `s`, return the number of distinct **subsequences** of `s` that are palindromic. Since the answer may be very large, return it **modulo** `10^9 + 7`. Note: A string is considered a **subsequence** of another string if it can be derived by deleting some or no characters from the other string without changing the order of the remaining characters.",
  "solution_code": "def count_distinct_palindromic_subsequences(s):\n    \"\"\"\n    Given a string s, return the number of distinct palindromic subsequences modulo 10^9 + 7.\n    \"\"\"\n    MOD = 10**9 + 7\n    n = len(s)\n    first_occurrence = {}\n    last_occurrence = {}\n    dp = [[0] * n for _ in range(n)]\n    distinct_subsequences = 0\n    \n    # Initialize the DP table and first/last occurrences\n    for i in range(n):\n        first_occurrence[s[i]] = first_occurrence.get(s[i], []) + [i]\n        last_occurrence[s[i]] = last_occurrence.get(s[i], []) + [i]\n    \n    for i in range(n):\n        dp[i][i] = 1  # Single character is always a palindrome\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = (dp[i + 1][j - 1] + 2) % MOD\n                for k in range(1, len(first_occurrence[s[i]])):\n                    if first_occurrence[s[i]][k] <= j and last_occurrence[s[i]][-k - 1] >= i + 1:\n                        dp[i][j] -= dp[first_occurrence[s[i]][k] + 1][last_occurrence[s[i]][-k - 1] - 1]\n                        dp[i][j] %= MOD\n            else:\n                dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1]) % MOD\n    \n    # Sum up all subsequences that start and end with the same character to avoid double counting\n    for i in range(n):\n        distinct_subsequences += dp[i][i]\n        distinct_subsequences %= MOD\n    \n    # Sum up all subsequences of the form s[i:j] where s[i] == s[j]\n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j]:\n                distinct_subsequences += dp[i][j]\n                distinct_subsequences %= MOD\n    \n    return distinct_subsequences",
  "test_code": "import pytest\n\ndef test_count_distinct_palindromic_subsequences():\n    assert count_distinct_palindromic_subsequences(\"abcba\") == 7\n    assert count_distinct_palindromic_subsequences(\"cbba\") == 5\n    assert count_distinct_palindromic_subsequences(\"aab\") == 3\n    assert count_distinct_palindromic_subsequences(\"baac\") == 8\n    assert count_distinct_palindromic_subsequences(\"aaaaa\") == 33",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}