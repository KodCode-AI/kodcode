{
  "metadata": {
    "prompt_id": "00000091",
    "row_id": 91,
    "seed_ids": [
      "1460",
      "1379",
      "32"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a binary string `s` (a string consisting only of `'0's` and `'1's`), you can perform the following operation any number of times: choose any **non-empty subsequence** of `s` and toggle all its characters (i.e., change all `'0's` to `'1's` and all `'1's` to `'0's`). Determine if it is possible to make the string `s` **palindromic** (the same string read from left to right and from right to left) using these operations. Return `true` if it is possible, otherwise return `false`.",
  "solution_code": "def can_make_palindrome(s: str) -> bool:\n    \"\"\"\n    Determines if it's possible to make the binary string s palindromic\n    by toggling any non-empty subsequence any number of times.\n    \"\"\"\n    toggle = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            toggle += 1\n    # If there are more than 1 pair of non-matching characters, it's impossible\n    # to make the string palindromic because we can only toggle the whole string.\n    return toggle <= 1",
  "test_code": "import pytest\n\ndef test_can_make_palindrome():\n    assert can_make_palindrome(\"001101101\") == False\n    assert can_make_palindrome(\"010\") == True\n    assert can_make_palindrome(\"101\") == True\n    assert can_make_palindrome(\"111000111\") == True\n    assert can_make_palindrome(\"01001\") == False\n    assert can_make_palindrome(\"1010101\") == True\n    assert can_make_palindrome(\"10011001\") == False\n    assert can_make_palindrome(\"000\") == True\n    assert can_make_palindrome(\"1111111\") == True\n    assert can_make_palindrome(\"101101\") == True",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}