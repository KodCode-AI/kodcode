{
  "metadata": {
    "prompt_id": "00000036",
    "row_id": 36,
    "seed_ids": [
      "994",
      "746",
      "1397"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a binary string `s` (a string consisting only of '0's and '1's), you need to perform a series of operations to make the string alternating. An alternating string is one where no two adjacent characters are the same. You can perform the following operation any number of times: choose any index `i` (1-indexed) and flip the character at `s[i]` (change '0' to '1' or '1' to '0'). \n\nReturn the minimum number of operations required to make the string alternating. If it is impossible to make the string alternating, return `-1`.",
  "solution_code": "def min_flips_to_alternate(s: str) -> int:\n    \"\"\"\n    Given a binary string, return the minimum number of operations needed to make the string alternating.\n    If it is not possible, return -1.\n    \"\"\"\n    n = len(s)\n    \n    if n == 0:\n        return 0\n    \n    # Count differences with '010101...' pattern\n    count_r = sum(s[i] != ('0' if i % 2 == 0 else '1') for i in range(n))\n    \n    # Count differences with '101010...' pattern\n    count_l = sum(s[i] != ('1' if i % 2 == 0 else '0') for i in range(n))\n    \n    if count_r == n or count_l == n:\n        return -1  # The string cannot be made alternating by flipping\n    else:\n        return min(count_r, count_l)",
  "test_code": "def test_min_flips_to_alternate():\n    assert min_flips_to_alternate(\"0011\") == 2\n    assert min_flips_to_alternate(\"10\") == 0\n    assert min_flips_to_alternate(\"1111\") == -1\n    assert min_flips_to_alternate(\"0101010\") == 0\n    assert min_flips_to_alternate(\"00011000\") == 4\n    assert min_flips_to_alternate(\"1100\") == 1\n    assert min_flips_to_alternate(\"\") == 0",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}