{
  "metadata": {
    "prompt_id": "00000072",
    "row_id": 72,
    "seed_ids": [
      "717",
      "1546",
      "243"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a binary string `s` without leading zeros, return the number of ways to split `s` into three non-empty substrings such that the bitwise XOR of the first two substrings is equal to the bitwise XOR of the last two substrings. The substrings are formed by consecutive binary digits in `s`.",
  "solution_code": "def count_split_ways(s):\n    \"\"\"\n    Counts the number of ways to split the binary string s into three non-empty\n    substrings such that the bitwise XOR of the first two substrings is equal to\n    the bitwise XOR of the last two substrings.\n    \"\"\"\n    n = len(s)\n    if n < 6:  # At least 6 characters are needed for a valid split\n        return 0\n    \n    prefix_xor = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ int(s[i - 1])\n\n    count = 0\n    xor_value = prefix_xor[n]  # XOR of the entire string\n    for i in range(1, n - 4):  # First split point\n        for j in range(i + 1, n - 2):  # Second split point\n            if prefix_xor[i] == xor_value:\n                count += 1\n    return count",
  "test_code": "import pytest\n\ndef test_count_split_ways():\n    assert count_split_ways(\"1010\") == 1\n    assert count_split_ways(\"001101\") == 2\n    assert count_split_ways(\"111\") == 0\n    assert count_split_ways(\"0000\") == 0  # Invalid as there are no ways to split a string of length less than 6\n    assert count_split_ways(\"101010\") == 4",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results0.jsonl"
}