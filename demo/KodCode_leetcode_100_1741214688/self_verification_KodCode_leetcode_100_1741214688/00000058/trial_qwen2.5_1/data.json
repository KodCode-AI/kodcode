{
  "metadata": {
    "prompt_id": "00000058",
    "row_id": 58,
    "seed_ids": [
      "558",
      "2000",
      "1674"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a **0-indexed** string `s` and an integer `k`, reverse the segment of `s` that starts at index `0` and ends at the index of the **k-th** occurrence of the character `a` (**inclusive**). If the character `a` does not occur `k` times in `s`, do nothing. \n\n*   For example, if `s = \"abcdeaa \"` and `k = 3`, then you should reverse the segment that starts at `0` and ends at `3` (**inclusive**). The resulting string will be `\"aebcd \"`.\n\nReturn the resulting string.",
  "solution_code": "def reverse_segment(s: str, k: int, char: str = 'a') -> str:\n    \"\"\"\n    Reverses the segment of s that starts at index 0 and ends at the index of the k-th occurrence of char.\n    If char does not occur k times, returns the original string.\n    \"\"\"\n    count = 0\n    for i, c in enumerate(s):\n        if c == char:\n            count += 1\n        if count == k:\n            return s[:i+1][::-1] + s[i+1:]\n    return s",
  "test_code": "def test_reverse_segment():\n    assert reverse_segment(\"abcdeaa\", 3, 'a') == \"aebcd\"\n    assert reverse_segment(\"aabcde\", 2, 'a') == \"aebcd\"\n    assert reverse_segment(\"abcd\", 5, 'a') == \"abcd\"\n    assert reverse_segment(\"ababa\", 2, 'a') == \"aaaba\"\n    assert reverse_segment(\"ababa\", 5, 'b') == \"baaba\"\n    assert reverse_segment(\"xyz\", 1, 'a') == \"xyz\"\n    assert reverse_segment(\"\", 2, 'a') == \"\"\n    assert reverse_segment(\"aaaaa\", 3, 'a') == \"aaaab\"",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}