{
  "metadata": {
    "prompt_id": "00000058",
    "row_id": 58,
    "seed_ids": [
      "558",
      "2000",
      "1674"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a **0-indexed** string `s` and an integer `k`, reverse the segment of `s` that starts at index `0` and ends at the index of the **k-th** occurrence of the character `a` (**inclusive**). If the character `a` does not occur `k` times in `s`, do nothing. \n\n*   For example, if `s = \"abcdeaa \"` and `k = 3`, then you should reverse the segment that starts at `0` and ends at `3` (**inclusive**). The resulting string will be `\"aebcd \"`.\n\nReturn the resulting string.",
  "solution_code": "def reverse_segment(s: str, k: int) -> str:\n    \"\"\"\n    Reverses the segment of s that starts at index 0 and ends at the index of the k-th occurrence of the character 'a'.\n    If 'a' does not occur k times, returns the original string.\n    \"\"\"\n    count = 0\n    target_index = -1\n    for i in range(len(s)):\n        if s[i] == 'a':\n            count += 1\n            if count == k:\n                target_index = i\n                break\n    if target_index >= 0:\n        return s[:target_index+1][::-1] + s[target_index+1:]\n    return s",
  "test_code": "def test_reverse_segment():\n    assert reverse_segment(\"abcdeaa\", 3) == \"aebcd\"\n    assert reverse_segment(\"aabb\", 2) == \"aaab\"\n    assert reverse_segment(\"abracadabra\", 3) == \"aacaabrdrab\"\n    assert reverse_segment(\"abcd\", 1) == \"abcd\"\n    assert reverse_segment(\"aaa\", 2) == \"aaa\"\n    assert reverse_segment(\"a\", 1) == \"a\"\n    assert reverse_segment(\"b\", 1) == \"b\"\n    assert reverse_segment(\"babaa\", 2) == \"aabab\"\n    assert reverse_segment(\"abcdefa\", 4) == \"fbcdea\"\n    assert reverse_segment(\"xyz\", 2) == \"xyz\"",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results0.jsonl"
}