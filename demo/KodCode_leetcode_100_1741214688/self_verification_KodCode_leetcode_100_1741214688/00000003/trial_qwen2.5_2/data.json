{
  "metadata": {
    "prompt_id": "00000003",
    "row_id": 3,
    "seed_ids": [
      "2233",
      "2203",
      "2168"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times: choose any two adjacent characters in `s` and swap them if the first character has a higher ASCII value than the second character. After performing any number of operations, return the lexicographically smallest string that can be obtained. Note that the ASCII values of lowercase English letters range from 97 to 122.",
  "solution_code": "def smallest_string(s):\n    \"\"\"\n    Returns the lexicographically smallest string that can be obtained by swapping adjacent characters\n    in the given string 's' any number of times according to the specified rule.\n    \"\"\"\n    stack = []\n    for char in s:\n        # Keep popping from stack until the current character is smaller than the character at the top\n        # of the stack. This ensures the string remains lexicographically smallest.\n        while stack and stack[-1] > char:\n            stack.pop()\n        stack.append(char)\n    return ''.join(stack)",
  "test_code": "from solution import smallest_string\n\ndef test_smallest_string_positive():\n    assert smallest_string(\"cba\") == \"acb\"\n    assert smallest_string(\"baaca\") == \"aaabc\"\n\ndef test_smallest_string_single_char():\n    assert smallest_string(\"a\") == \"a\"\n\ndef test_smallest_string_large_input():\n    long_string = \"z\"*10000  # 10000 'z's\n    assert smallest_string(long_string) == \"z\"*10000\n\ndef test_smallest_string_example1():\n    assert smallest_string(\"ccaabaaca\") == \"aacaaabca\"\n\ndef test_smallest_string_mixed_ascii():\n    assert smallest_string(\"xyz\") == \"xyz\"  # Already in the smallest lexicographical order",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results2.jsonl"
}