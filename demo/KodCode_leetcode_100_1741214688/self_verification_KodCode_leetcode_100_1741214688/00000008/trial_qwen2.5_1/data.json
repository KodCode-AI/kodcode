{
  "metadata": {
    "prompt_id": "00000008",
    "row_id": 8,
    "seed_ids": [
      "1516",
      "417",
      "2266"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a list of strings `words` and a string `target`, you need to find the minimum number of adjacent swaps required to arrange the strings in `words` such that they form the `target` string. Each string in `words` can only be used once, and the order of the strings in `words` must match the order of the strings in `target`. A swap is defined as exchanging the positions of two adjacent strings in the list. Please return the minimum number of swaps required to achieve the `target` string. If it is not possible to arrange the strings in `words` to form the `target` string, return `-1`.\n\nFor example, given `words = [\"abc\",\"def\",\"ghi\"]` and `target = \"defabcghi\"`, the minimum number of swaps required is `2`. First, swap \"abc\" and \"def\", then swap \"def\" and \"ghi\". Therefore, the answer is `2`.",
  "solution_code": "def min_swaps_to_target(words, target):\n    \"\"\"\n    Returns the minimum number of swaps required to arrange the strings\n    in 'words' to match the 'target' string. Each string in 'words' can only\n    be used once, and the order must match 'target'.\n    \"\"\"\n    word_positions = {word: i for i, word in enumerate(target)}\n    words = [word for word in words if word in word_positions]\n    target = [word for word in target if word in word_positions]\n    positions = {word: i for i, word in enumerate(words)}\n    swaps = 0\n\n    for i, word in enumerate(target):\n        current_position = positions[word]\n        target_position = word_positions[word]\n        if current_position != target_position:\n            words[i], words[current_position] = words[target_position], words[current_position]\n            positions[words[i]] = i\n            positions[words[current_position]] = current_position\n            swaps += 1\n\n    return swaps if words == target else -1",
  "test_code": "import pytest\n\ndef test_min_swaps_to_target():\n    assert min_swaps_to_target([\"abc\", \"def\", \"ghi\"], \"defabcghi\") == 2\n    assert min_swaps_to_target([\"abc\", \"def\", \"ghi\"], \"abcdefg\") == 3\n    assert min_swaps_to_target([\"abc\", \"def\", \"ghi\"], \"defabch\") == -1\n    assert min_swaps_to_target([\"abc\", \"def\", \"ghi\"], \"abcdefgh\") == -1\n    assert min_swaps_to_target([\"abc\", \"def\", \"ghi\"], \"abcdef\") == 3\n    assert min_swaps_to_target([\"abc\", \"def\", \"ghi\"], \"defabc\") == 1",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}