{
  "metadata": {
    "prompt_id": "00000024",
    "row_id": 24,
    "seed_ids": [
      "1019",
      "1177",
      "203"
    ],
    "mode": "leetcode"
  },
  "instruction": "You are given a binary search tree (BST) and an integer `k`. Your task is to find the `k`-th smallest element in the BST. The BST is not necessarily balanced. Return the value of the `k`-th smallest element.\n\nFor example, given the BST with the following structure:\n\n```\n    5\n   / \\\n  3   6\n / \\\n2   4\n```\n\nIf `k = 3`, the output should be `3` because the elements in ascending order are `[2, 3, 4, 5, 6]`, and the 3rd smallest element is `3`.\n\nReturn the value of the `k`-th smallest element in the BST.",
  "solution_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef kthSmallest(root, k):\n    \"\"\"\n    Returns the k-th smallest element in the BST.\n    \"\"\"\n    def inorder_traversal(node):\n        if node is None:\n            return []\n        return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right)\n    \n    elements = inorder_traversal(root)\n    return elements[k-1]",
  "test_code": "import pytest\nfrom solution import TreeNode, kthSmallest\n\ndef create_bst():\n    \"\"\"\n    Helper function to create the BST for testing.\n    \"\"\"\n    five = TreeNode(5)\n    three = TreeNode(3)\n    six = TreeNode(6)\n    two = TreeNode(2)\n    four = TreeNode(4)\n    \n    five.left = three\n    five.right = six\n    three.left = two\n    three.right = four\n    \n    return five\n\ndef test_kth_smallest_positive():\n    root = create_bst()\n    assert kthSmallest(root, 3) == 3\n    \ndef test_kth_smallest_edge_cases():\n    root = TreeNode(1)\n    assert kthSmallest(root, 1) == 1\n    \n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    with pytest.raises(Exception):\n        kthSmallest(root, 2)  # This should raise an error as 2nd smallest does not exist\n\ndef test_kth_smallest_with_duplicates():\n    root = TreeNode(3)\n    root.left = TreeNode(1)\n    root.right = TreeNode(4)\n    root.left.right = TreeNode(2)\n    \n    assert kthSmallest(root, 2) == 2\n\ndef test_kth_smallest_in_order_traversal():\n    root = create_bst()\n    assert kthSmallest(root, 4) == 5",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results0.jsonl"
}