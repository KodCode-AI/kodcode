{
  "metadata": {
    "prompt_id": "00000024",
    "row_id": 24,
    "seed_ids": [
      "1019",
      "1177",
      "203"
    ],
    "mode": "leetcode"
  },
  "instruction": "You are given a binary search tree (BST) and an integer `k`. Your task is to find the `k`-th smallest element in the BST. The BST is not necessarily balanced. Return the value of the `k`-th smallest element.\n\nFor example, given the BST with the following structure:\n\n```\n    5\n   / \\\n  3   6\n / \\\n2   4\n```\n\nIf `k = 3`, the output should be `3` because the elements in ascending order are `[2, 3, 4, 5, 6]`, and the 3rd smallest element is `3`.\n\nReturn the value of the `k`-th smallest element in the BST.",
  "solution_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef kthSmallest(root, k):\n    \"\"\"\n    Returns the k-th smallest element in a binary search tree.\n    \"\"\"\n    def inorder_traversal(node):\n        return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right) if node else []\n    \n    return inorder_traversal(root)[k-1]",
  "test_code": "from solution import TreeNode, kthSmallest\n\ndef test_kthSmallest_case1():\n    # Construct the example tree\n    node5 = TreeNode(5)\n    node3 = TreeNode(3)\n    node6 = TreeNode(6)\n    node2 = TreeNode(2)\n    node4 = TreeNode(4)\n    \n    node5.left = node3\n    node5.right = node6\n    node3.left = node2\n    node3.right = node4\n    \n    assert kthSmallest(node5, 3) == 3\n\ndef test_kthSmallest_case2():\n    node1 = TreeNode(1)\n    assert kthSmallest(node1, 1) == 1\n\ndef test_kthSmallest_case3():\n    node4 = TreeNode(4)\n    node1 = TreeNode(1)\n    node2 = TreeNode(2)\n    node3 = TreeNode(3)\n    node4.left = node2\n    node4.right = node5\n    node2.left = node1\n    node2.right = node3\n    \n    assert kthSmallest(node4, 1) == 1\n    assert kthSmallest(node4, 3) == 3\n\ndef test_kthSmallest_case4():\n    node1 = TreeNode(1)\n    node2 = TreeNode(2)\n    node3 = TreeNode(3)\n    node2.left = node1\n    node2.right = node3\n    \n    assert kthSmallest(node2, 2) == 2",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results2.jsonl"
}