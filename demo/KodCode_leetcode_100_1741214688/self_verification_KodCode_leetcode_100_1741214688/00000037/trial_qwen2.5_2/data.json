{
  "metadata": {
    "prompt_id": "00000037",
    "row_id": 37,
    "seed_ids": [
      "1284",
      "2165",
      "1413"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a list of `n` intervals `intervals`, where each interval is represented as `[start, end]`, find the minimum number of intervals you need to remove so that the remaining intervals do not overlap. An interval `A` overlaps with another interval `B` if `A` and `B` have at least one common point. Return the minimum number of intervals to remove.",
  "solution_code": "def min_intervals_to_remove(intervals):\n    \"\"\"\n    Finds the minimum number of intervals to remove so that no two remaining intervals overlap.\n    \"\"\"\n    if not intervals:\n        return 0\n    \n    # Sort intervals based on their end times\n    intervals.sort(key=lambda x: x[1])\n    \n    end = intervals[0][1]\n    count = 1  # We will keep at least one interval before removing any\n    \n    for i in range(1, len(intervals)):\n        if intervals[i][0] >= end:\n            end = intervals[i][1]\n            count += 1\n            \n    return len(intervals) - count",
  "test_code": "def test_min_intervals_to_remove():\n    assert min_intervals_to_remove([[1,2], [2,3], [3,4], [1,3]]) == 1, \"Test case 1 failed\"\n    assert min_intervals_to_remove([[1,2], [1,2], [1,2]]) == 2, \"Test case 2 failed\"\n    assert min_intervals_to_remove([[1,2], [2,3]]) == 0, \"Test case 3 failed\"\n    assert min_intervals_to_remove([[1,10], [2,3], [4,5], [6,7], [8,9],[1,1],[2,2]]) == 5, \"Test case 4 failed\"\n    assert min_intervals_to_remove([]) == 0, \"Test case 5 failed\"\n\nif __name__ == \"__main__\":\n    import pytest\n    pytest.main([__file__])",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results2.jsonl"
}