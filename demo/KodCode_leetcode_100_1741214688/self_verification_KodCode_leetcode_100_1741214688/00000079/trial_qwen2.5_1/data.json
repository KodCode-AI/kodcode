{
  "metadata": {
    "prompt_id": "00000079",
    "row_id": 79,
    "seed_ids": [
      "1157",
      "751",
      "2288"
    ],
    "mode": "leetcode"
  },
  "instruction": "Design a class `RangeFreqQuery` that supports efficient frequency queries on a given array `arr`. The goal is to implement a method that can quickly determine the frequency of any element within a specified range of the array. Specifically, implement the `RangeFreqQuery` class:\n\n- `RangeFreqQuery(int[] arr)`: Initializes the class with the given array `arr`.\n- `int query(int left, int right, int value)`: Returns the frequency of the value `value` in the subarray `arr[left...right]`.\n\nFor example, given the array `arr = [1, 2, 2, 3, 3, 3, 4]`, the query `query(0, 6, 3)` should return `3` since the value `3` appears three times in the subarray `arr[0...6]`.",
  "solution_code": "from collections import defaultdict\n\nclass RangeFreqQuery:\n    def __init__(self, arr):\n        \"\"\"\n        Initializes the class with the given array `arr`.\n        \"\"\"\n        self.frequency = defaultdict(list)\n        for idx, value in enumerate(arr):\n            self.frequency[value].append(idx)\n\n    def query(self, left, right, value):\n        \"\"\"\n        Returns the frequency of the value `value` in the subarray `arr[left...right]`.\n        \"\"\"\n        if value not in self.frequency:\n            return 0\n        indices = self.frequency[value]\n        start, end = 0, len(indices) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if indices[mid] < left:\n                start = mid + 1\n            else:\n                end = mid - 1\n        left_idx = start\n        if left_idx >= len(indices) or indices[left_idx] > right:\n            return 0\n        start, end = 0, len(indices) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if indices[mid] <= right:\n                start = mid + 1\n            else:\n                end = mid - 1\n        right_idx = end\n        return right_idx - left_idx + 1",
  "test_code": "from solution import RangeFreqQuery\n\ndef test_range_freq_query_positive():\n    arr = [1, 2, 2, 3, 3, 3, 4]\n    rfq = RangeFreqQuery(arr)\n    assert rfq.query(0, 6, 3) == 3\n    assert rfq.query(0, 6, 2) == 2\n\ndef test_range_freq_query_with_overlap():\n    arr = [2, 4, 1, 2, 3, 2]\n    rfq = RangeFreqQuery(arr)\n    assert rfq.query(0, 5, 2) == 3\n\ndef test_range_freq_query_empty_range():\n    arr = [2, 2, 2, 2]\n    rfq = RangeFreqQuery(arr)\n    assert rfq.query(3, 2, 2) == 0\n\ndef test_range_freq_query_without_element():\n    arr = [1, 1, 1, 2, 2, 2, 3]\n    rfq = RangeFreqQuery(arr)\n    assert rfq.query(0, 6, 4) == 0\n\ndef test_range_freq_query_single_element():\n    arr = [5, 5, 5, 5, 5]\n    rfq = RangeFreqQuery(arr)\n    assert rfq.query(0, 4, 5) == 5\n\ndef test_range_freq_query_high_frequency():\n    arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    rfq = RangeFreqQuery(arr)\n    assert rfq.query(0, 9, 1) == 10",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}