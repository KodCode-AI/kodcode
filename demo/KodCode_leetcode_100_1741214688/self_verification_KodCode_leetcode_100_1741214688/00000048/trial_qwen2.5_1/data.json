{
  "metadata": {
    "prompt_id": "00000048",
    "row_id": 48,
    "seed_ids": [
      "1433",
      "353",
      "265"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a list of `n` jobs where each job is represented by a tuple `(start, end, cpuTime)`, determine the minimum time required to complete all jobs. Each job must be processed in the given order, and the jobs can only be processed one at a time. A job can start immediately after the previous job ends. The goal is to find the total time taken to complete all jobs, including the time spent on the jobs themselves and any waiting time.\n\nFor example, given the jobs `[(1, 3, 2), (2, 5, 3), (7, 9, 1)]`, the total time to complete all jobs is `10` (2 + 3 + 5).\n\nImplement the function `minCompletionTime(jobs)` that takes a list of jobs and returns the minimum completion time.",
  "solution_code": "def minCompletionTime(jobs):\n    \"\"\"\n    Returns the minimum time required to complete all jobs in the given order.\n    \"\"\"\n    if not jobs:\n        return 0\n\n    total_time = 0\n    current_time = jobs[0][0]  # Start time of the first job\n    \n    for start, end, cpu_time in jobs:\n        if start > current_time:\n            total_time += start - current_time\n        total_time += cpu_time\n        current_time = end\n\n    return total_time",
  "test_code": "def test_minCompletionTime():\n    assert minCompletionTime([(1, 3, 2), (2, 5, 3), (7, 9, 1)]) == 10\n    assert minCompletionTime([(0, 2, 1)]) == 3\n    assert minCompletionTime([(1, 2, 1), (3, 4, 2)]) == 5\n    assert minCompletionTime([(10, 12, 3), (11, 13, 2), (8, 10, 1)]) == 14\n    assert minCompletionTime([]) == 0\n\ntest_minCompletionTime()",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}