{
  "metadata": {
    "prompt_id": "00000066",
    "row_id": 66,
    "seed_ids": [
      "929",
      "376",
      "663"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a **binary search tree (BST)**, return the number of **valid** sequences of **node values** such that for every node, the value of that node is **strictly greater** than the sum of the values of all nodes that come before it and **strictly less** than the sum of the values of all nodes that come after it. In other words, a valid sequence is one where each node's value is the sum of a contiguous subsequence of its in-order traversal values. For example, in the tree:\n\n```\n    5\n   / \\\n  3   7\n / \\\n2   4\n```\n\nThe sequence `[2, 3, 4, 5, 7]` is valid because each node's value is greater than the sum of all previous nodes and less than the sum of all subsequent nodes. Note that the sequence must strictly follow the in-order traversal of the tree.",
  "solution_code": "from typing import List\n\ndef count_valid_sequences(root: 'TreeNode') -> int:\n    \"\"\"\n    Returns the number of valid sequences of node values in a BST.\n    \"\"\"\n    def dfs(node):\n        if not node:\n            return [0, 1]\n        left = dfs(node.left)\n        right = dfs(node.right)\n        \n        # Calculate the sum of left and right children's values\n        left_sum = node.val + left[0]\n        right_sum = node.val + right[0]\n        \n        # Count valid sequences for the current node\n        if left[1] != 0 and right[1] != 0:\n            count = 1\n            for x in range(left[1]):\n                if left[0][x] < left_sum and right_sum < right[0][x]:\n                    count += 1\n            return [left_sum, count]\n        elif left[1] != 0:\n            count = sum(1 for x in left[0] if x < left_sum)\n            return [left_sum, count]\n        elif right[1] != 0:\n            count = sum(1 for x in right[0] if right_sum < x)\n            return [right_sum, count]\n        else:\n            return [node.val, 1]\n\n    return dfs(root)[1]",
  "test_code": "import pytest\nfrom typing import *\nfrom solution import TreeNode, count_valid_sequences\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef test_count_valid_sequences_simple():\n    root = TreeNode(5, TreeNode(3, TreeNode(2), TreeNode(4)), TreeNode(7))\n    assert count_valid_sequences(root) == 2\n\ndef test_count_valid_sequences_empty_tree():\n    assert count_valid_sequences(None) == 0\n\ndef test_count_valid_sequences_single_node():\n    root = TreeNode(5)\n    assert count_valid_sequences(root) == 1\n\ndef test_count_valid_sequences_root_restricted():\n    root = TreeNode(10, TreeNode(5, TreeNode(2), TreeNode(8)), TreeNode(15, TreeNode(13), TreeNode(22)))\n    assert count_valid_sequences(root) == 3\n\ndef test_count_valid_sequences_large_sequence():\n    root = TreeNode(5, TreeNode(3, TreeNode(2), TreeNode(4)), TreeNode(10, TreeNode(8, TreeNode(6), TreeNode(9)), TreeNode(12)))\n    assert count_valid_sequences(root) == 3",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results2.jsonl"
}