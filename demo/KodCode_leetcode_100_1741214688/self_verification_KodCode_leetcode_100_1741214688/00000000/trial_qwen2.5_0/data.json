{
  "metadata": {
    "prompt_id": "00000000",
    "row_id": 0,
    "seed_ids": [
      "1797",
      "1403",
      "2583"
    ],
    "mode": "leetcode"
  },
  "instruction": "Implement a class `CircularQueue` that supports the following operations:\n\n*   `CircularQueue(int k)` constructs the `CircularQueue` with a maximum size of `k`.\n*   `int Front()` retrieves the element at the front of the queue without removing it. Returns `-1` if the queue is empty.\n*   `int Rear()` retrieves the element at the rear of the queue without removing it. Returns `-1` if the queue is empty.\n*   `boolean enQueue(int value)` inserts the element `value` into the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is full).\n*   `boolean deQueue()` deletes an element from the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is empty).\n*   `boolean isEmpty()` returns `true` if the queue is currently empty, `false` otherwise.\n*   `boolean isFull()` returns `true` if the queue is currently full, `false` otherwise.\n\nEnsure that all operations are performed in **constant time** (O(1)).",
  "solution_code": "class CircularQueue:\n    def __init__(self, k: int):\n        self.max_size = k\n        self.front = 0\n        self.rear = -1\n        self.current_size = 0\n        self.queue = [-1] * k\n\n    def Front(self) -> int:\n        return self.queue[self.front] if self.current_size else -1\n\n    def Rear(self) -> int:\n        return self.queue[self.rear] if self.current_size else -1\n\n    def enQueue(self, value: int) -> bool:\n        if self.isFull():\n            return False\n        self.rear = (self.rear + 1) % self.max_size\n        self.queue[self.rear] = value\n        self.current_size += 1\n        return True\n\n    def deQueue(self) -> bool:\n        if self.isEmpty():\n            return False\n        self.queue[self.front] = -1\n        self.front = (self.front + 1) % self.max_size\n        self.current_size -= 1\n        if self.current_size == 0:\n            self.rear = -1\n        return True\n\n    def isEmpty(self) -> bool:\n        return self.current_size == 0\n\n    def isFull(self) -> bool:\n        return self.current_size == self.max_size",
  "test_code": "import pytest\n\ndef test_circular_queue():\n    circular_queue = CircularQueue(3)\n    assert circular_queue.enQueue(1) == True\n    assert circular_queue.enQueue(2) == True\n    assert circular_queue.enQueue(3) == True\n    assert circular_queue.Front() == 1\n    assert circular_queue.deQueue() == True\n    assert circular_queue.Rear() == 2\n    assert circular_queue.enQueue(4) == True\n    assert circular_queue.Front() == 2\n\n    circular_queue2 = CircularQueue(2)\n    assert circular_queue2.enQueue(1) == True\n    assert circular_queue2.enQueue(2) == True\n    assert circular_queue2.enQueue(3) == False  # Should return false as the queue is full\n    assert circular_queue2.deQueue() == True\n    assert circular_queue2.enQueue(3) == True\n    assert circular_queue2.Rear() == 3\n\n    circular_queue3 = CircularQueue(1)\n    assert circular_queue3.enQueue(1) == True\n    assert circular_queue3.deQueue() == True\n    assert circular_queue3.isEmpty() == True\n    assert circular_queue3.Front() == -1\n    assert circular_queue3.deQueue() == False  # Should return false as the queue is empty",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results0.jsonl"
}