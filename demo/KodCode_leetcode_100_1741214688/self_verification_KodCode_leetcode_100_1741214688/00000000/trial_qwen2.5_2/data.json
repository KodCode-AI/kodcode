{
  "metadata": {
    "prompt_id": "00000000",
    "row_id": 0,
    "seed_ids": [
      "1797",
      "1403",
      "2583"
    ],
    "mode": "leetcode"
  },
  "instruction": "Implement a class `CircularQueue` that supports the following operations:\n\n*   `CircularQueue(int k)` constructs the `CircularQueue` with a maximum size of `k`.\n*   `int Front()` retrieves the element at the front of the queue without removing it. Returns `-1` if the queue is empty.\n*   `int Rear()` retrieves the element at the rear of the queue without removing it. Returns `-1` if the queue is empty.\n*   `boolean enQueue(int value)` inserts the element `value` into the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is full).\n*   `boolean deQueue()` deletes an element from the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is empty).\n*   `boolean isEmpty()` returns `true` if the queue is currently empty, `false` otherwise.\n*   `boolean isFull()` returns `true` if the queue is currently full, `false` otherwise.\n\nEnsure that all operations are performed in **constant time** (O(1)).",
  "solution_code": "class Node:\n    def __init__(self, value=None, next=None):\n        self.value = value\n        self.next = next\n\nclass CircularQueue:\n    def __init__(self, k):\n        self.max_size = k\n        self.size = 0\n        self.head = None\n        self.tail = None\n\n    def Front(self):\n        return -1 if self.head is None else self.head.value\n\n    def Rear(self):\n        return -1 if self.head is None else self.tail.value\n\n    def enQueue(self, value):\n        if self.size == self.max_size:\n            return False\n        new_node = Node(value)\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            self.tail.next = new_node\n            self.tail = new_node\n            self.tail.next = self.head\n        self.size += 1\n        return True\n\n    def deQueue(self):\n        if self.head is None:\n            return False\n        if self.head == self.tail:\n            self.head = None\n            self.tail = None\n        else:\n            self.head = self.head.next\n            self.tail.next = self.head\n        self.size -= 1\n        return True\n\n    def isEmpty(self):\n        return self.head is None\n\n    def isFull(self):\n        return self.size == self.max_size",
  "test_code": "from circular_queue import CircularQueue\n\ndef test_circular_queue_ops():\n    q = CircularQueue(3)\n    assert q.enQueue(1) == True\n    assert q.enQueue(2) == True\n    assert q.enQueue(3) == True\n    assert q.enQueue(4) == False\n    assert q.Rear() == 3\n    assert q.Front() == 1\n    assert q.deQueue() == True\n    assert q.enQueue(4) == True\n    assert q.Front() == 2\n\ndef test_is_empty_and_is_full():\n    q = CircularQueue(1)\n    assert q.isFull() == False\n    assert q.isEmpty() == True\n    assert q.enQueue(1) == True\n    assert q.isFull() == True\n    assert q.isEmpty() == False\n    assert q.deQueue() == True\n    assert q.isFull() == False\n    assert q.isEmpty() == True\n\ndef test_deQueue_empty_queue():\n    q = CircularQueue(2)\n    assert q.deQueue() == False",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results2.jsonl"
}