{
  "metadata": {
    "prompt_id": "00000000",
    "row_id": 0,
    "seed_ids": [
      "1797",
      "1403",
      "2583"
    ],
    "mode": "leetcode"
  },
  "instruction": "Implement a class `CircularQueue` that supports the following operations:\n\n*   `CircularQueue(int k)` constructs the `CircularQueue` with a maximum size of `k`.\n*   `int Front()` retrieves the element at the front of the queue without removing it. Returns `-1` if the queue is empty.\n*   `int Rear()` retrieves the element at the rear of the queue without removing it. Returns `-1` if the queue is empty.\n*   `boolean enQueue(int value)` inserts the element `value` into the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is full).\n*   `boolean deQueue()` deletes an element from the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is empty).\n*   `boolean isEmpty()` returns `true` if the queue is currently empty, `false` otherwise.\n*   `boolean isFull()` returns `true` if the queue is currently full, `false` otherwise.\n\nEnsure that all operations are performed in **constant time** (O(1)).",
  "solution_code": "class CircularQueue:\n    def __init__(self, k: int):\n        assert k > 0, \"k must be a positive integer\"\n        self.max_size = k\n        self.queue = [None] * k\n        self.head = -1\n        self.tail = -1\n\n    def Front(self) -> int:\n        if self.head == -1:\n            return -1\n        return self.queue[self.head]\n\n    def Rear(self) -> int:\n        if self.head == -1:\n            return -1\n        return self.queue[self.tail]\n\n    def enQueue(self, value: int) -> bool:\n        if self.head == -1 and self.tail == -1:\n            self.head = 0\n            self.tail = 0\n            self.queue[self.tail] = value\n            return True\n        elif (self.tail + 1) % self.max_size == self.head:\n            return False\n        else:\n            self.tail = (self.tail + 1) % self.max_size\n            self.queue[self.tail] = value\n            return True\n\n    def deQueue(self) -> bool:\n        if self.head == -1:\n            return False\n        elif self.head == self.tail:\n            self.head = -1\n            self.tail = -1\n            return True\n        else:\n            self.head = (self.head + 1) % self.max_size\n            return True\n\n    def isEmpty(self) -> bool:\n        return self.head == -1\n\n    def isFull(self) -> bool:\n        return (self.tail + 1) % self.max_size == self.head",
  "test_code": "import pytest\n\ndef test_circular_queue():\n    cq = CircularQueue(3)\n\n    assert cq.enQueue(1) is True\n    assert cq.enQueue(2) is True\n    assert cq.enQueue(3) is True\n    assert cq.enQueue(4) is False\n\n    assert cq.Rear() == 3\n    assert cq.Front() == 1\n\n    assert cq.deQueue() is True\n    assert cq.enQueue(4) is True\n\n    assert cq.Front() == 2\n\ndef test_queue_operations():\n    cq = CircularQueue(2)\n\n    assert cq.enQueue(1) is True\n    assert cq.enQueue(2) is True\n    assert cq.enQueue(3) is False\n\n    assert cq.deQueue() is True\n    assert cq.enQueue(3) is True\n\n    assert cq.Front() == 2\n    assert cq.Rear() == 3\n\n    assert cq.deQueue() is True\n    assert cq.deQueue() is True\n    assert cq.Rear() == -1\n    assert cq.Front() == -1",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}