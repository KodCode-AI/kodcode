{
  "metadata": {
    "prompt_id": "00000095",
    "row_id": 95,
    "seed_ids": [
      "1710",
      "1557",
      "587"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a **binary tree** with `n` nodes, where each node has a unique value from `1` to `n`, determine if the tree can be **partitioned** into two subsets such that the sum of values in each subset is equal. Return `true` if such a partition exists, otherwise return `false`.",
  "solution_code": "from typing import List\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef can_partition_bst(root: TreeNode) -> bool:\n    \"\"\"\n    Determine if a BST can be partitioned into two subsets with equal sum.\n    \"\"\"\n    def sum_of_bst(root: TreeNode) -> int:\n        if not root:\n            return 0\n        return root.val + sum_of_bst(root.left) + sum_of_bst(root.right)\n    \n    total_sum = sum_of_bst(root)\n    if total_sum % 2 != 0:\n        return False\n    \n    target = total_sum // 2\n    visited = set()\n\n    def dfs(node: TreeNode, current_sum: int) -> bool:\n        if not node:\n            return False\n        if current_sum == target and node not in visited:\n            return True\n        visited.add(node)\n        return dfs(node.left, current_sum + node.val) or dfs(node.right, current_sum + node.val)\n    \n    return dfs(root, 0)",
  "test_code": "from solution import TreeNode, can_partition_bst\n\ndef test_can_partition_bst():\n    # Constructing a simple BST\n    #       1\n    #        \\\n    #         2\n    #        /\n    #       3\n    root = TreeNode(1)\n    root.right = TreeNode(2)\n    root.right.left = TreeNode(3)\n\n    assert not can_partition_bst(root)\n\n    # Constructing a balanced BST\n    #       1\n    #      / \\\n    #     2   3\n    #    / \\ / \\\n    #   4  5 6  7\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    assert can_partition_bst(root)\n\n# Constructing a BST where the sum of the values cannot be partitioned into two equal subsets\n#       1\n#        \\\n#         2\n#        /\n#       4\n#      /\n#     8\n    root = TreeNode(1)\n    root.right = TreeNode(2)\n    root.right.left = TreeNode(4)\n    root.right.left.left = TreeNode(8)\n\n    assert not can_partition_bst(root)",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results2.jsonl"
}