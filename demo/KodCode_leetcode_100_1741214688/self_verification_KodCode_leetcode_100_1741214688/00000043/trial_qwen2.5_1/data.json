{
  "metadata": {
    "prompt_id": "00000043",
    "row_id": 43,
    "seed_ids": [
      "2389",
      "2505",
      "1383"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given two integer arrays `speed` and `efficiency` both of length `n`, and an integer `k`, you are to select a subset of engineers to form a team. Each engineer is represented by their `speed` and `efficiency`. Your goal is to maximize the **product** of the team's **average speed** and the minimum efficiency among the selected engineers. The team must consist of at least `2` engineers. Return the maximum possible product. Since the answer can be a large number, return it modulo `10^9 + 7`.",
  "solution_code": "from typing import List\nfrom heapq import nsmallest\n\ndef max_product(speed: List[int], efficiency: List[int], k: int) -> int:\n    \"\"\"\n    Calculate the maximum product of the average speed and the minimum efficiency.\n    \"\"\"\n    mod = 10**9 + 7\n    n = len(speed)\n    engineers = sorted(zip(efficiency, speed), reverse=True)\n    total_speed = 0\n    max_product = 0\n    \n    for e, s in engineers:\n        if k == 1:\n            max_product = max(max_product, (total_speed + s) * e)\n        else:\n            k -= 1\n            total_speed += s\n            max_product = max(max_product, (total_speed / k) * e)\n    \n    return max_product % mod",
  "test_code": "from solution import max_product\n\ndef test_max_product():\n    speed = [2, 10, 3]\n    efficiency = [1, 2, 5]\n    k = 2\n    assert max_product(speed, efficiency, k) == 600\n\ndef test_two_engineers_case():\n    speed = [5, 10, 3]\n    efficiency = [3, 8, 4]\n    k = 2\n    assert max_product(speed, efficiency, k) == 60\n\ndef test_large_k_case():\n    speed = [10, 10, 10, 10, 10, 10]\n    efficiency = [10, 10, 10, 10, 10, 10]\n    k = 5\n    assert max_product(speed, efficiency, k) == 100\n\ndef test_single_engineer_case():\n    speed = [50]\n    efficiency = [100]\n    k = 1\n    assert max_product(speed, efficiency, k) == 50\n\ndef test_equal_speed_efficiency_case():\n    speed = [1, 2, 3, 4, 5]\n    efficiency = [1, 2, 3, 4, 5]\n    k = 3\n    assert max_product(speed, efficiency, k) == 400\n\ndef test_zero_case():\n    speed = [0, 0, 0]\n    efficiency = [0, 0, 0]\n    k = 2\n    assert max_product(speed, efficiency, k) == 0",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}