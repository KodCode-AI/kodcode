{
  "metadata": {
    "prompt_id": "00000013",
    "row_id": 13,
    "seed_ids": [
      "82",
      "2008",
      "1690"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a binary tree, return the sum of all left leaves. A leaf is a node with no children, and a left leaf is a leaf that is the left child of its parent. If there are no left leaves, return 0.",
  "solution_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef sum_of_left_leaves(root):\n    \"\"\"\n    Return the sum of all left leaves in the binary tree.\n    \"\"\"\n    def dfs(node, is_left):\n        if not node:\n            return 0\n        if not node.left and not node.right and is_left:\n            return node.val\n        return dfs(node.left, True) + dfs(node.right, False)\n    \n    return dfs(root, False)",
  "test_code": "from solution import TreeNode, sum_of_left_leaves\n\ndef test_sum_of_left_leaves_empty_tree():\n    assert sum_of_left_leaves(None) == 0\n\ndef test_sum_of_left_leaves_no_left_leaves():\n    root = TreeNode(1)\n    root.right = TreeNode(2)\n    assert sum_of_left_leaves(root) == 0\n\ndef test_sum_of_left_leaves_left_leaf_only():\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    assert sum_of_left_leaves(root) == 9\n\ndef test_sum_of_left_leaves_right_leaf():\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    assert sum_of_left_leaves(root) == 9\n\ndef test_sum_of_left_leaves_complex_tree():\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    root.right.left = TreeNode(15)\n    root.right.right = TreeNode(7)\n    root.left.left = TreeNode(4)\n    assert sum_of_left_leaves(root) == 13",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results0.jsonl"
}