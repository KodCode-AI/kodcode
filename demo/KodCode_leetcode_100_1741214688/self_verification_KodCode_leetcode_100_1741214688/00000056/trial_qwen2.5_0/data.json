{
  "metadata": {
    "prompt_id": "00000056",
    "row_id": 56,
    "seed_ids": [
      "230",
      "1433",
      "674"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given an unsorted array of integers `nums`, return the maximum number of **distinct** elements in any **continuous subarray** of size `k`. A **continuous subarray** is defined as a subarray that contains `k` consecutive elements from the original array.",
  "solution_code": "from collections import Counter\n\ndef max_distinct_elements(nums, k):\n    \"\"\"\n    Returns the maximum number of distinct elements in any continuous subarray of size k.\n    \"\"\"\n    if k == 0:\n        return 0\n    window_counter = Counter(nums[:k])\n    max_distinct = len(window_counter)\n    for i in range(k, len(nums)):\n        window_counter[nums[i]] += 1\n        window_counter[nums[i - k]] -= 1\n        if window_counter[nums[i - k]] == 0:\n            del window_counter[nums[i - k]]\n        max_distinct = max(max_distinct, len(window_counter))\n    return max_distinct",
  "test_code": "from solution import max_distinct_elements\n\ndef test_max_distinct_elements():\n    assert max_distinct_elements([1, 2, 1, 3, 4, 3], 3) == 3\n    assert max_distinct_elements([1, 2, 1, 3, 4, 3], 5) == 4\n    assert max_distinct_elements([1, 2, 1, 3, 4, 3], 6) == 6\n    assert max_distinct_elements([1, 2, 3, 4, 5], 2) == 5\n    assert max_distinct_elements([1, 2, 3, 4, 5], 3) == 4\n    assert max_distinct_elements([1, 3, 1, 2, 2], 2) == 2\n    assert max_distinct_elements([1], 1) == 1\n    assert max_distinct_elements([], 5) == 0\n\ndef test_window_counter_logn_update():\n    nums = [1, 2, 1, 3, 4, 3]\n    k = 3\n    window_counter = Counter()\n    for i in range(k):\n        window_counter[nums[i]] += 1\n    # Check if the counter contains 3 distinct elements\n    assert len(window_counter) == 3\n    for i in range(k, len(nums)):\n        window_counter[nums[i]] += 1\n        window_counter[nums[i - k]] -= 1\n        if window_counter[nums[i - k]] == 0:\n            del window_counter[nums[i - k]]\n        # Check if the counter contains the maximum possible distinct elements\n        assert len(window_counter) in [2, 3]",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results0.jsonl"
}