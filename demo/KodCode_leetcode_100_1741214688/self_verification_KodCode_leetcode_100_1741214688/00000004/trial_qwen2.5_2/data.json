{
  "metadata": {
    "prompt_id": "00000004",
    "row_id": 4,
    "seed_ids": [
      "765",
      "2513",
      "1915"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a string `s` consisting of lowercase English letters, a **substring** of `s` is called a **balanced substring** if the number of distinct characters in it is exactly `k`. For a given integer `k`, return the number of balanced substrings in `s`.\n\nExample:\n```python\ns = \"abcabc\", k = 2\nOutput: 3\nExplanation: The balanced substrings are \"ab\", \"bc\", and \"ab\".\n```\n\nExample:\n```python\ns = \"aaabbbccc\", k = 3\nOutput: 1\nExplanation: The only balanced substring is \"aaabbbccc\".\n```",
  "solution_code": "def count_balanced_substrings(s, k):\n    \"\"\"\n    Returns the number of balanced substrings in s where the number of distinct\n    characters is exactly k.\n    \"\"\"\n    i, j = 0, 0\n    count, distinct_chars = 0, {}\n    while j < len(s):\n        distinct_chars[s[j]] = distinct_chars.get(s[j], 0) + 1\n        if len(distinct_chars) <= k:\n            count += (j - i + 1)\n            j += 1\n        else:\n            while len(distinct_chars) > k:\n                distinct_chars[s[i]] -= 1\n                if distinct_chars[s[i]] == 0:\n                    del distinct_chars[s[i]]\n                i += 1\n            j += 1\n    return count",
  "test_code": "def test_count_balanced_substrings():\n    assert count_balanced_substrings(\"abcabc\", 2) == 3\n    assert count_balanced_substrings(\"aaabbbccc\", 3) == 1\n    assert count_balanced_substrings(\"aabac\", 2) == 3\n    assert count_balanced_substrings(\"aabbcc\", 3) == 6\n    assert count_balanced_substrings(\"xyz\", 3) == 1\n    assert count_balanced_substrings(\"xyzz\", 4) == 1",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results2.jsonl"
}