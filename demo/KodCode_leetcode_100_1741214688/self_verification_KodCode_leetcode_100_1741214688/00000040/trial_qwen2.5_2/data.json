{
  "metadata": {
    "prompt_id": "00000040",
    "row_id": 40,
    "seed_ids": [
      "1656",
      "733",
      "352"
    ],
    "mode": "leetcode"
  },
  "instruction": "Design a class `CustomQueue` that supports the following operations:\n\n- `CustomQueue(int capacity)` Initializes the queue with a given capacity.\n- `void enqueue(int value)` Adds a value to the end of the queue if there is still space. Returns `false` if the queue is full.\n- `int dequeue()` Removes and returns the value at the front of the queue. Returns `-1` if the queue is empty.\n- `bool isFull()` Returns `true` if the queue is full, otherwise returns `false`.\n- `bool isEmpty()` Returns `true` if the queue is empty, otherwise returns `false`.\n\nImplement the `CustomQueue` class such that all operations are performed in constant time, i.e., O(1). Additionally, provide a method `getQueue()` that returns the current elements in the queue as a list, maintaining the order of elements as they were added.",
  "solution_code": "class CustomQueue:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.queue = [None] * capacity\n        self.head = 0\n        self.tail = 0\n        self.size = 0\n\n    def enqueue(self, value: int) -> bool:\n        if self.size == self.capacity:\n            return False\n        self.queue[self.tail] = value\n        self.tail = (self.tail + 1) % self.capacity\n        self.size += 1\n        return True\n\n    def dequeue(self) -> int:\n        if self.size == 0:\n            return -1\n        item = self.queue[self.head]\n        self.head = (self.head + 1) % self.capacity\n        self.size -= 1\n        return item\n\n    def isFull(self) -> bool:\n        return self.size == self.capacity\n\n    def isEmpty(self) -> bool:\n        return self.size == 0\n\n    def getQueue(self) -> list:\n        if self.head <= self.tail:\n            return self.queue[self.head:self.tail]\n        return self.queue[self.head:] + self.queue[:self.tail]",
  "test_code": "import pytest\n\ndef test_custom_queue():\n    q = CustomQueue(3)\n    assert q.enqueue(1) == True\n    assert q.enqueue(2) == True\n    assert q.enqueue(3) == True\n    assert q.enqueue(4) == False  # Queue is full\n    assert q.isFull() == True\n    assert q.isEmpty() == False\n    assert q.dequeue() == 1\n    assert q.dequeue() == 2\n    assert q.dequeue() == 3\n    assert q.isFull() == False\n    assert q.isEmpty() == False\n    assert q.enqueue(4) == True\n    assert q.enqueue(5) == True\n    assert q.enqueue(6) == False  # Queue is full\n    assert q.getQueue() == [4, 5]\n\ndef test_empty_queue():\n    q = CustomQueue(1)\n    assert q.enqueue(1) == True\n    assert q.isEmpty() == False\n    assert q.dequeue() == 1\n    assert q.isEmpty() == True\n    assert q.isFull() == False\n\ndef test_dequeue_empty():\n    q = CustomQueue(3)\n    assert q.dequeue() == -1\n\ndef test_get_queue():\n    q = CustomQueue(5)\n    assert q.getQueue() == []\n    q.enqueue(1)\n    q.enqueue(2)\n    assert q.getQueue() == [1, 2]",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results2.jsonl"
}