{
  "metadata": {
    "prompt_id": "00000054",
    "row_id": 54,
    "seed_ids": [
      "1519",
      "2137",
      "1638"
    ],
    "mode": "leetcode"
  },
  "instruction": "You are given two strings `s` and `t` of equal length. Each string consists of lowercase English letters. A **swap** is defined as exchanging the positions of two characters within a string. Your task is to determine the minimum number of swaps required to make the string `s` an anagram of string `t`. An anagram of a string is another string that contains the same characters, only the order of characters can be different.\n\nFor example, if `s = \"abc\"` and `t = \"bca\"`, you can make `s` an anagram of `t` by swapping `s[0]` and `s[1]`, resulting in `s = \"bca\"`. Return the minimum number of swaps needed to achieve this.\n\nConstraints:\n- `1 <= s.length == t.length <= 100`\n- `s` and `t` consist of lowercase English letters.",
  "solution_code": "def min_swaps_to_anagram(s: str, t: str) -> int:\n    \"\"\"\n    Returns the minimum number of swaps required to make string s an anagram of string t.\n    \"\"\"\n    from collections import Counter\n    s_counter, t_counter = Counter(s), Counter(t)\n    if s_counter != t_counter:\n        return -1  # Early return if s cannot be an anagram of t\n    mismatches = [char for char in s if s.count(char) != t.count(char)]\n    swaps = 0\n    while len(mismatches) > 0:\n        for char in mismatches:\n            if s.count(char) > t.count(char):\n                mismatches.extend([other_char for other_char in t if other_char != char and s.count(other_char) >= t.count(other_char) * 2])\n            s.remove(char)\n            t.remove(char)\n            swaps += 1\n            if len(set(s) & set(t)) == len(t) and len(set(s) - set(t)) == 0:\n                return swaps\n    return swaps",
  "test_code": "import pytest\nfrom solution import min_swaps_to_anagram\n\ndef test_min_swaps_to_anagram():\n    assert min_swaps_to_anagram(\"abc\", \"bca\") == 1\n    assert min_swaps_to_anagram(\"abcd\", \"dacb\") == 3\n    assert min_swaps_to_anagram(\"abcd\", \"dbca\") == 2\n    assert min_swaps_to_anagram(\"aaaa\", \"aaaa\") == 0\n    assert min_swaps_to_anagram(\"abc\", \"def\") == -1  # s cannot be an anagram of t\n\ndef test_min_swaps_to_anagram_edge_cases():\n    assert min_swaps_to_anagram(\"a\", \"a\") == 0\n    assert min_swaps_to_anagram(\"ab\", \"ba\") == 1\n    assert min_swaps_to_anagram(\"abc\", \"abc\") == 0\n    assert min_swaps_to_anagram(\"aabbcc\", \"aabbcc\") == 0\n\ndef test_min_swaps_to_anagram_complex_cases():\n    assert min_swaps_to_anagram(\"aabbcc\", \"cabbac\") == 3\n    assert min_swaps_to_anagram(\"analysis\", \"sitablyna\") == 5\n    assert min_swaps_to_anagram(\"standard\", \"tandstorm\") == 4",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results2.jsonl"
}