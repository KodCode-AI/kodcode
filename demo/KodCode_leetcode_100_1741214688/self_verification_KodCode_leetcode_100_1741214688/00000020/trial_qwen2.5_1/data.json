{
  "metadata": {
    "prompt_id": "00000020",
    "row_id": 20,
    "seed_ids": [
      "803",
      "1422",
      "1678"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a binary string `s` (a string consisting only of '0's and '1's), you are allowed to perform the following operation any number of times: choose any two adjacent characters and flip them (i.e., change '0' to '1' and '1' to '0'). Your goal is to make the string as long as possible such that it does not contain the substring \"010\". Return the maximum length of the string you can achieve.\n\n**Example:**\n\n```python\nInput: s = \"110\"\nOutput: 3\nExplanation: We can flip the last two characters to get \"111\", which does not contain \"010\" as a substring.\n```\n\n**Constraints:**\n\n- `1 <= s.length <= 1000`\n- `s` consists only of '0's and '1's.",
  "solution_code": "def max_length_without_010(s: str) -> int:\n    \"\"\"\n    Returns the maximum length of the string s such that it does not contain the substring \"010\".\n    \"\"\"\n    dp = [1] * 3\n    for c in s:\n        if c == '0':\n            dp[0], dp[1] = max(dp[1], dp[2]), dp[0] + 1\n        else:\n            dp[0], dp[1] = max(dp[0], dp[2]), dp[1] + 1\n        dp[2] = max(dp[0], dp[1], dp[2])\n    return dp[2]",
  "test_code": "def test_max_length_without_010():\n    assert max_length_without_010(\"110\") == 3\n    assert max_length_without_010(\"0001010111\") == 9\n    assert max_length_without_010(\"1010101010\") == 5\n    assert max_length_without_010(\"1111111111\") == 10\n    assert max_length_without_010(\"0101010101\") == 5\n    assert max_length_without_010(\"1110101110\") == 8\n    assert max_length_without_010(\"000\") == 3\n    assert max_length_without_010(\"1111\") == 4",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}