{
  "metadata": {
    "prompt_id": "00000039",
    "row_id": 39,
    "seed_ids": [
      "434",
      "1061",
      "141"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a binary search tree (BST) and a range `[low, high]`, return the sum of values of all nodes with a value in the given range. A binary search tree is a tree in which all nodes follow the property that the left subtree of a node contains only nodes with values less than the node's value, and the right subtree of a node contains only nodes with values greater than the node's value.",
  "solution_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef rangeSumBST(root: TreeNode, low: int, high: int) -> int:\n    \"\"\"\n    Returns the sum of values of nodes with values in the given range.\n    \"\"\"\n    def dfs(node):\n        if not node:\n            return 0\n        result = 0\n        if low <= node.val <= high:\n            result += node.val\n        if low < node.val:\n            result += dfs(node.left)\n        if node.val < high:\n            result += dfs(node.right)\n        return result\n\n    return dfs(root)",
  "test_code": "import pytest\nfrom solution import rangeSumBST  # Assuming the solution is saved in a file named 'solution.py'\n\ndef create_bst_from_list(values, root=None, i=0):\n    if i < len(values):\n        if values[i] is None:\n            return None\n        node = TreeNode(values[i])\n        node.left = create_bst_from_list(values, root, 2 * i + 1)\n        node.right = create_bst_from_list(values, root, 2 * i + 2)\n        return node\n\ndef test_range_sum_bst():\n    # Construct a BST: \n    #       10\n    #      /  \\\n    #     5   15\n    #    / \\    \\\n    #   3   7    18\n    bst = create_bst_from_list([10, 5, 15, 3, 7, None, 18])\n    assert rangeSumBST(bst, 7, 15) == 32\n\ndef test_range_sum_empty_tree():\n    assert rangeSumBST(None, 7, 15) == 0\n\ndef test_range_sum_single_node_tree():\n    node = TreeNode(10)\n    assert rangeSumBST(node, 7, 15) == 10\n\ndef test_range_sum_no_nodes_in_range():\n    bst = create_bst_from_list([10, 5, 15, 3, 7, None, 18])\n    assert rangeSumBST(bst, 20, 25) == 0\n\ndef test_range_sum_all_nodes_in_range():\n    bst = create_bst_from_list([10, 5, 15, 3, 7, None, 18])\n    assert rangeSumBST(bst, 0, 20) == 63",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}