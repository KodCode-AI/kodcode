{
  "metadata": {
    "prompt_id": "00000010",
    "row_id": 10,
    "seed_ids": [
      "689",
      "2075",
      "1670"
    ],
    "mode": "leetcode"
  },
  "instruction": "Design a data structure to manage a collection of intervals with the following operations:\n\n- `addInterval(start, end)`: Add a new interval `[start, end]` to the collection.\n- `mergeOverlappingIntervals()`: Merge all overlapping intervals in the collection and return the merged intervals.\n- `removeInterval(start, end)`: Remove the interval `[start, end]` from the collection if it exists.\n- `getIntervals()`: Return the current collection of intervals.\n\nImplement the `IntervalManager` class:\n\n- `IntervalManager()`: Initializes the interval manager.\n- `void addInterval(int start, int end)`: Adds a new interval `[start, end]` to the collection. Ensure no duplicate intervals are added.\n- `List<int[]> mergeOverlappingIntervals()`: Merges all overlapping intervals in the collection and returns the merged intervals as a list of `[start, end]` pairs.\n- `void removeInterval(int start, int end)`: Removes the interval `[start, end]` from the collection if it exists.\n- `List<int[]> getIntervals()`: Returns the current collection of intervals as a list of `[start, end]` pairs.\n\n**Note**: Intervals are represented as `[start, end]` where `start` and `end` are inclusive. The intervals are sorted by their start time.",
  "solution_code": "from typing import List\n\nclass IntervalManager:\n    def __init__(self):\n        self.intervals = []\n\n    def addInterval(self, start: int, end: int) -> None:\n        intervals = self.intervals\n        if not intervals or intervals[-1][1] < start - 1:\n            intervals.append([start, end])\n        elif intervals[0][0] > end + 1:\n            intervals.insert(0, [start, end])\n        else:\n            for i, (s, e) in enumerate(intervals):\n                if s > end:\n                    intervals.insert(i, [start, end])\n                    break\n                elif e >= start:\n                    intervals[i][0] = min(s, start)\n                    intervals[i][1] = max(e, end)\n                    break\n            else:\n                intervals.append([start, end])\n        \n    def mergeOverlappingIntervals(self) -> List[int[]]:\n        if not self.intervals:\n            return []\n        merged = [self.intervals[0]]\n        for i in range(1, len(self.intervals)):\n            current = self.intervals[i]\n            last = merged[-1]\n            if current[0] <= last[1] + 1:\n                merged[-1][1] = max(last[1], current[1])\n            else:\n                merged.append(current)\n        return merged\n\n    def removeInterval(self, start: int, end: int) -> None:\n        intervals = self.intervals\n        self.intervals = [interval for interval in intervals if interval[1] < start or interval[0] > end]\n\n    def getIntervals(self) -> List[int[]]:\n        return self.intervals",
  "test_code": "def test_interval_manager():\n    interval_manager = IntervalManager()\n    interval_manager.addInterval(1, 3)\n    interval_manager.addInterval(2, 6)\n    interval_manager.addInterval(8, 10)\n    interval_manager.addInterval(15, 18)\n    assert interval_manager.getIntervals() == [[1, 6], [8, 10], [15, 18]]\n\n    merged_intervals = interval_manager.mergeOverlappingIntervals()\n    assert merged_intervals == [[1, 6], [8, 10], [15, 18]], f\"Expected [[1, 6], [8, 10], [15, 18]] but got {merged_intervals}\"\n\n    interval_manager.removeInterval(3, 6)\n    assert interval_manager.getIntervals() == [[8, 10], [15, 18]], f\"Expected [[8, 10], [15, 18]] but got {interval_manager.getIntervals()}\"\n\n    interval_manager.addInterval(10, 11)\n    assert interval_manager.getIntervals() == [[8, 11], [15, 18]], f\"Expected [[8, 11], [15, 18]] but got {interval_manager.getIntervals()}\"\n\n    merged_intervals = interval_manager.mergeOverlappingIntervals()\n    assert merged_intervals == [[8, 11], [15, 18]], f\"Expected [[8, 11], [15, 18]] but got {merged_intervals}\"\n\n    interval_manager.addInterval(9, 12)\n    assert interval_manager.getIntervals() == [[8, 12], [15, 18]], f\"Expected [[8, 12], [15, 18]] but got {interval_manager.getIntervals()}\"\n\n    merged_intervals = interval_manager.mergeOverlappingIntervals()\n    assert merged_intervals == [[8, 18]], f\"Expected [[8, 18]] but got {merged_intervals}\"",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}