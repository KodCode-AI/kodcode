{
  "metadata": {
    "prompt_id": "00000059",
    "row_id": 59,
    "seed_ids": [
      "1181",
      "1859",
      "1874"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given two arrays of integers, `nums1` and `nums2`, both of the same length, you are allowed to rearrange the elements of `nums1`. Your task is to find the maximum possible sum of the absolute differences between corresponding elements of `nums1` and `nums2`. In other words, you want to maximize the expression `\u03a3 |nums1[i] - nums2[i]|` for `0 <= i < length(nums1)`. Return this maximum possible sum.\n\nFor example, if `nums1 = [1, 2, 3, 4]` and `nums2 = [2, 1, 4, 3]`, one possible rearrangement of `nums1` could be `[4, 3, 2, 1]`, which would give a sum of `|4-2| + |3-1| + |2-4| + |1-3| = 10`. Find the optimal rearrangement of `nums1` to achieve the highest possible sum.",
  "solution_code": "def max_absolute_difference_sum(nums1, nums2):\n    \"\"\"\n    Rearranges nums1 to maximize the sum of absolute differences with nums2.\n    \"\"\"\n    nums1.sort()\n    nums2.sort(reverse=True)\n    max_sum = sum(abs(a - b) for a, b in zip(nums1, nums2))\n    return max_sum",
  "test_code": "def test_max_absolute_difference_sum():\n    assert max_absolute_difference_sum([1, 2, 3, 4], [2, 1, 4, 3]) == 10\n    assert max_absolute_difference_sum([1, 2, 3, 4, 5], [1, 4, 3, 2, 5]) == 10\n    assert max_absolute_difference_sum([-1, -2, -3], [-2, -1, -4]) == 6\n    assert max_absolute_difference_sum([1, 3, 5, 7], [8, 6, 4, 2]) == 18\n\ndef test_max_absolute_difference_sum_with_equal_elements():\n    assert max_absolute_difference_sum([1, 1, 1], [1, 1, 1]) == 0\n    assert max_absolute_difference_sum([-1, -1, -1], [-1, -1, -1]) == 0\n\ndef test_max_absolute_difference_sum_with_large_numbers():\n    assert max_absolute_difference_sum([10, 100, 1000], [1, 0, 0]) == 1989\n    assert max_absolute_difference_sum([500, 600, 700], [1000, 900, 800]) == 1300",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}