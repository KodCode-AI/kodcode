{
  "metadata": {
    "prompt_id": "00000055",
    "row_id": 55,
    "seed_ids": [
      "96",
      "427",
      "2347"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times:\n\n- Pick any two adjacent characters in `s` and replace them with a single character that is the **lexicographically smallest** character among them. For example, `ab` can be replaced with `a`, and `bb` can be replaced with `b`.\n\nReturn _the lexicographically smallest string that can be obtained by applying the above operation any number of times._\n\nExample:\n```python\nInput: s = \"cbaaaabc\"\nOutput: \"aaaabca\"\nExplanation:\nFirst, replace \"cba\" to get \"aabaaabc\".\nThen, replace \"aabaaabc\" to get \"aaaabca\".\n```",
  "solution_code": "def smallest_string(s: str) -> str:\n    \"\"\"\n    Returns the lexicographically smallest string that can be obtained by replacing\n    any two adjacent characters with the lexicographically smallest character among them.\n    \"\"\"\n    s = list(s)  # Convert string to list for in-place modification\n    i = 0\n    n = len(s)\n    while i < n - 1:\n        if s[i] <= s[i + 1]:\n            i += 1\n        else:\n            s[i] = s[i + 1]  # Replace the character\n            n -= 1  # Reduce the length since one character is effectively removed\n    return ''.join(s)",
  "test_code": "from solution import smallest_string\n\ndef test_smallest_string():\n    assert smallest_string(\"cbaaaabc\") == \"aaaabca\"\n    assert smallest_string(\"leetcode\") == \"aaaceeee\"\n    assert smallest_string(\"abc\") == \"a\"\n    assert smallest_string(\"bb\") == \"b\"\n    assert smallest_string(\"a\") == \"a\"\n    assert smallest_string(\"abccba\") == \"aacca\"\n    assert smallest_string(\"zxy\") == \"xyz\"\n    assert smallest_string(\"xyzzyx\") == \"xyyxy\"",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}