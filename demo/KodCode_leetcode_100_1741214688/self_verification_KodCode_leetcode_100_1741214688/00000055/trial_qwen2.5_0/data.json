{
  "metadata": {
    "prompt_id": "00000055",
    "row_id": 55,
    "seed_ids": [
      "96",
      "427",
      "2347"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times:\n\n- Pick any two adjacent characters in `s` and replace them with a single character that is the **lexicographically smallest** character among them. For example, `ab` can be replaced with `a`, and `bb` can be replaced with `b`.\n\nReturn _the lexicographically smallest string that can be obtained by applying the above operation any number of times._\n\nExample:\n```python\nInput: s = \"cbaaaabc\"\nOutput: \"aaaabca\"\nExplanation:\nFirst, replace \"cba\" to get \"aabaaabc\".\nThen, replace \"aabaaabc\" to get \"aaaabca\".\n```",
  "solution_code": "def smallest_string(s):\n    \"\"\"\n    Returns the lexicographically smallest string that can be obtained.\n    \"\"\"\n    result = \"\"\n    i = 0\n    n = len(s)\n    while i < n:\n        start = i\n        while i < n and s[i] == s[start]:\n            i += 1\n        if i - start > 1:\n            result += s[start]\n        else:\n            result += s[start:i]\n    return result.replace(s[0], 'a')",
  "test_code": "def test_smallest_string():\n    assert smallest_string(\"cbaaaabc\") == \"aaaabca\"\n    assert smallest_string(\"bbbbbb\") == \"bb\"\n    assert smallest_string(\"abcd\") == \"a\"\n    assert smallest_string(\"aaabbbccc\") == \"abc\"\n    assert smallest_string(\"zzzzz\") == \"z\"\n    assert smallest_string(\"aazbzbz\") == \"aaabz\"\n    assert smallest_string(\"abbaabba\") == \"aaa\"\n    assert smallest_string(\"zzzzyyyxx\") == \"xyz\"",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results0.jsonl"
}