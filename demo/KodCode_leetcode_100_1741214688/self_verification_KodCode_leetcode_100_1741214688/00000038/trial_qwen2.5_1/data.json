{
  "metadata": {
    "prompt_id": "00000038",
    "row_id": 38,
    "seed_ids": [
      "2414",
      "2220",
      "1929"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a string `s` consisting of lowercase letters only, return the _length of the **longest** substring that can be obtained by replacing at most one character in `s` with any other character, such that the resulting substring is an alphabetical continuous string._\n\nFor example, in the string `\"abcbdefg\"`, you can replace the `c` with `a` to get `\"aabdefg\"`, which is an alphabetical continuous string of length 7.",
  "solution_code": "def longest_alphabetic_substring(s: str) -> int:\n    \"\"\"\n    Given a string s, return the length of the longest substring that can be obtained\n    by replacing at most one character in s with any other character, such that\n    the resulting substring is an alphabetical continuous string.\n    \"\"\"\n    max_len = 1\n    start = 0\n    replace_char = float('-inf')\n    for end in range(1, len(s)):\n        if ord(s[end]) != ord(s[end - 1]) + 1:\n            if s[end] != s[end - 1]:\n                prev_char = s[end - 1]\n                replace_char = max(replace_char, s[end - 1])\n            start = max(start, end - 1 if s[end] != s[end - 1] else replace_char + 1)\n            replace_char = s[end - 1]\n        max_len = max(max_len, end - start + 1)\n    return max_len",
  "test_code": "from solution import longest_alphabetic_substring\n\ndef test_longest_alphabetic_substring():\n    assert longest_alphabetic_substring(\"abcbdefg\") == 7\n    assert longest_alphabetic_substring(\"vgc\") == 3\n    assert longest_alphabetic_substring(\"abc\") == 3\n    assert longest_alphabetic_substring(\"abczxyz\") == 5\n    assert longest_alphabetic_substring(\"a\") == 1\n    assert longest_alphabetic_substring(\"abcd\") == 4\n    assert longest_alphabetic_substring(\"az\") == 2\n    assert longest_alphabetic_substring(\"azc\") == 3",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}