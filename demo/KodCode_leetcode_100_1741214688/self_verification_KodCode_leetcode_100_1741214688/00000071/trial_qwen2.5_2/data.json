{
  "metadata": {
    "prompt_id": "00000071",
    "row_id": 71,
    "seed_ids": [
      "2285",
      "2064",
      "1344"
    ],
    "mode": "leetcode"
  },
  "instruction": "You are given an integer `n` denoting the number of cities in a country. The cities are numbered from `0` to `n - 1`. You are also given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional** road connecting cities `ai` and `bi`. You need to assign each city with a unique integer value from `1` to `n` such that the **sum** of the values of the two cities connected by each road is maximized. Return the **maximum possible sum** of the importance of all roads after assigning the values optimally.",
  "solution_code": "def assign_values(n, roads):\n    \"\"\"\n    Assigns each city a unique value from 1 to n to maximize the sum of the values\n    of the two cities connected by each road. Returns the maximum possible sum.\n    \"\"\"\n    # Create a graph representation\n    graph = [[] for _ in range(n)]\n    for a, b in roads:\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    def dfs(city, values, visited):\n        visited[city] = True\n        value = n - len(graph[city])\n        for neighbor in graph[city]:\n            if not visited[neighbor]:\n                value += dfs(neighbor, values, visited)\n        values.append(value)\n        return value\n    \n    # Perform DFS to assign values\n    values = []\n    for i in range(n):\n        if not values:\n            dfs(i, values, [False] * n)\n    \n    # Sort values in descending order\n    values.sort(reverse=True)\n    \n    # Calculate the result\n    max_sum = 0\n    for i in range(n):\n        max_sum += (n + 1 - i) * values[i]\n    \n    return max_sum",
  "test_code": "import pytest\nfrom solution import assign_values\n\ndef test_simple_case():\n    assert assign_values(4, [[0, 1], [1, 2], [2, 0], [1, 3]]) == 8\n\ndef test_random_case():\n    assert assign_values(5, [[0, 1], [1, 2], [2, 0], [1, 3], [3, 4], [4, 1]]) == 13\n\ndef test_single_city():\n    assert assign_values(1, []) == 1\n\ndef test_two_cities():\n    assert assign_values(2, [[0, 1]]) == 3\n\ndef test_three_cities():\n    assert assign_values(3, [[0, 1], [1, 2], [2, 0]]) == 6\n\ndef test_four_cities():\n    assert assign_values(4, [[0, 1], [1, 2], [2, 0], [1, 3], [3, 0], [2, 3]]) == 12",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results2.jsonl"
}