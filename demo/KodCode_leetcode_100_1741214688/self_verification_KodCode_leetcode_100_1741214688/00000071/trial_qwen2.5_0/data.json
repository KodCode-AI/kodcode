{
  "metadata": {
    "prompt_id": "00000071",
    "row_id": 71,
    "seed_ids": [
      "2285",
      "2064",
      "1344"
    ],
    "mode": "leetcode"
  },
  "instruction": "You are given an integer `n` denoting the number of cities in a country. The cities are numbered from `0` to `n - 1`. You are also given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional** road connecting cities `ai` and `bi`. You need to assign each city with a unique integer value from `1` to `n` such that the **sum** of the values of the two cities connected by each road is maximized. Return the **maximum possible sum** of the importance of all roads after assigning the values optimally.",
  "solution_code": "def max_road_importance(n, roads):\n    \"\"\"\n    Assigns unique integer values to cities to maximize the sum of the values\n    of the two cities connected by each road. Returns the maximum possible sum.\n    \"\"\"\n    # Initialize adjacency list\n    adj_list = [[] for _ in range(n)]\n    for a, b in roads:\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n    \n    # Sort cities by their degree in descending order\n    cities = sorted(range(n), key=lambda x: len(adj_list[x]), reverse=True)\n    \n    # Assign city values\n    values = list(range(1, n + 1))\n    total_importance = 0\n    for i, city in enumerate(cities):\n        for neighbor in adj_list[city]:\n            total_importance += values[i] + values[neighbor]\n    \n    return total_importance",
  "test_code": "from solution import max_road_importance\n\ndef test_max_road_importance():\n    # Example 1\n    n = 5\n    roads = [[0, 1], [1, 2], [2, 3], [0, 2], [1, 3], [2, 4]]\n    assert max_road_importance(n, roads) == 43\n    \n    # Example 2\n    n = 4\n    roads = [[0, 1], [0, 3], [1, 2], [1, 3]]\n    assert max_road_importance(n, roads) == 26\n    \n    # Example 3\n    n = 3\n    roads = [[0, 1], [1, 2], [0, 2], [2, 1]]\n    assert max_road_importance(n, roads) == 18\n    \n    # Edge Case: Single City\n    n = 1\n    roads = []\n    assert max_road_importance(n, roads) == 1",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results0.jsonl"
}