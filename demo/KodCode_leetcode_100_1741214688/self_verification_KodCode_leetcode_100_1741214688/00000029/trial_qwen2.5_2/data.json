{
  "metadata": {
    "prompt_id": "00000029",
    "row_id": 29,
    "seed_ids": [
      "813",
      "1659",
      "2012"
    ],
    "mode": "leetcode"
  },
  "instruction": "You are given a binary string `s` and an integer `k`. A **substring** of `s` is considered **balanced** if the number of `0`s and `1`s in it are equal. You can perform the following operation any number of times: choose any index `i` in the string `s` and flip the character at `i` (i.e., change `'0'` to `'1'` and vice versa). Your task is to find the length of the **longest balanced substring** you can obtain by performing the above operation **at most** `k` times. Return the length of this longest balanced substring.\n\nFor example, if `s = \"1100011\"` and `k = 2`, you can flip the characters at indices `4` and `6` to get `\"1101111\"`, which contains a balanced substring of length `7`.",
  "solution_code": "def longest_balanced_substring(s, k):\n    \"\"\"\n    Returns the length of the longest balanced substring after flipping at most k characters.\n    \"\"\"\n    left, num_zeros, max_len = 0, 0, 0\n    for right in range(len(s)):\n        if s[right] == '0':\n            num_zeros += 1\n        while right - left + 1 - num_zeros > k:\n            if s[left] == '0':\n                num_zeros -= 1\n            left += 1\n        max_len = max(max_len, right - left + 1)\n    return max_len",
  "test_code": "def test_longest_balanced_substring():\n    assert longest_balanced_substring(\"1100011\", 2) == 7\n    assert longest_balanced_substring(\"1010100\", 1) == 6\n    assert longest_balanced_substring(\"000101010\", 2) == 8\n    assert longest_balanced_substring(\"0010\", 1) == 4\n    assert longest_balanced_substring(\"11010001010010110\", 5) == 13\n\n# Additional edge case\ndef test_empty_string():\n    assert longest_balanced_substring(\"\", 0) == 0\n\n# Case with all zeros\ndef test_all_zeros():\n    assert longest_balanced_substring(\"0000\", 1) == 4\n\n# Case with all ones\ndef test_all_ones():\n    assert longest_balanced_substring(\"1111\", 1) == 2\n\n# Case with a balanced string\ndef test_balanced_string():\n    assert longest_balanced_substring(\"11010101\", 0) == 2",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results2.jsonl"
}