{
  "metadata": {
    "prompt_id": "00000032",
    "row_id": 32,
    "seed_ids": [
      "1685",
      "499",
      "2501"
    ],
    "mode": "leetcode"
  },
  "instruction": "You are given an integer array `nums` sorted in **non-decreasing** order. Define a function `f(x)` for each element `x` in `nums` such that `f(x)` is the number of elements in `nums` that are strictly less than `x`. Build and return an integer array `result` with the same length as `nums` such that `result[i]` is equal to the summation of `f(nums[i])` for all `i` in the array. In other words, `result[i]` is equal to `sum(f(nums[i]))` where `0 <= j < nums.length` and `j != i` (0-indexed).",
  "solution_code": "def calculate_result(nums):\n    \"\"\"\n    Returns a result array where result[i] is the sum of f(nums[i]) for all i in the array.\n    \"\"\"\n    from bisect import bisect_left\n    \n    sorted_nums = sorted(set(nums))  # Get unique and sorted elements\n    index_map = {val: idx for idx, val in enumerate(sorted_nums)}\n    prefix_sum = [0]\n    for num in sorted_nums:\n        prefix_sum.append(prefix_sum[-1] + bisect_left(sorted_nums, num))\n    \n    result = []\n    for num in nums:\n        idx = index_map[num]\n        result.append(sum(prefix_sum[:idx]))\n    return result",
  "test_code": "import pytest\n\nfrom solution import calculate_result\n\ndef test_calculate_result():\n    assert calculate_result([1, 2, 3, 4, 5]) == [0, 1, 3, 6, 10]\n    assert calculate_result([1, 1, 2, 2, 2, 3]) == [0, 0, 3, 6, 8, 9]\n    assert calculate_result([10, 20, 30, 40, 50]) == [0, 0, 0, 0, 0]\n    assert calculate_result([50, 40, 30, 20, 10]) == [0, 0, 0, 0, 0]\n    assert calculate_result([1, 1, 1, 1, 1]) == [0, 0, 0, 0, 0]\n    assert calculate_result([5, 3, 4, 2, 1]) == [4, 3, 3, 2, 0]\n    assert calculate_result([2, 2, 2, 2, 2, 2]) == [0, 0, 0, 0, 0, 0]\n\ndef test_edge_cases():\n    assert calculate_result([1]) == [0]\n    assert calculate_result([]) == []",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}