{
  "metadata": {
    "prompt_id": "00000094",
    "row_id": 94,
    "seed_ids": [
      "2166",
      "1091",
      "2357"
    ],
    "mode": "leetcode"
  },
  "instruction": "Implement the `CircularArray` class that supports the following operations:\n\n- `CircularArray(int size)` Initializes the `CircularArray` with `size` elements, all set to zero.\n- `void set(int index, int val)` Sets the value at the given `index` to `val`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n- `int get(int index)` Returns the value at the given `index`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n- `void increment(int index, int val)` Increments the value at the given `index` by `val`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n\nAdditionally, provide a method:\n\n- `String toString()` Returns a string representation of the `CircularArray`, where each element is separated by a comma and the entire array is enclosed in square brackets.",
  "solution_code": "class CircularArray:\n    def __init__(self, size):\n        \"\"\"\n        Initializes the CircularArray with size elements, all set to zero.\n        \"\"\"\n        self.size = size\n        self.array = [0] * size\n\n    def set(self, index, val):\n        \"\"\"\n        Sets the value at the given index to val. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n        \"\"\"\n        self.array[index % self.size] = val\n\n    def get(self, index):\n        \"\"\"\n        Returns the value at the given index. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n        \"\"\"\n        return self.array[index % self.size]\n\n    def increment(self, index, val):\n        \"\"\"\n        Increments the value at the given index by val. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n        \"\"\"\n        self.set(index, self.get(index) + val)\n\n    def to_string(self):\n        \"\"\"\n        Returns a string representation of the CircularArray.\n        \"\"\"\n        return '[' + ','.join(map(str, self.array)) + ']'",
  "test_code": "def test_circular_array():\n    circ_arr = CircularArray(4)\n    assert circ_arr.to_string() == '[0, 0, 0, 0]'\n    circ_arr.set(0, 1)\n    assert circ_arr.to_string() == '[1, 0, 0, 0]'\n    circ_arr.set(3, 2)\n    assert circ_arr.to_string() == '[1, 0, 0, 2]'\n    circ_arr.increment(0, 3)\n    assert circ_arr.to_string() == '[4, 0, 0, 2]'\n    circ_arr.increment(4, 1)\n    assert circ_arr.to_string() == '[0, 1, 0, 2]'\n    circ_arr.increment(-2, 3)\n    assert circ_arr.to_string() == '[3, 1, 0, 2]'\n    assert circ_arr.get(0) == 3\n    assert circ_arr.get(2) == 0\n    assert circ_arr.get(-1) == 2\n    assert circ_arr.get(5) == 1\n\n# Run tests using pytest\ntest_circular_array()",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}