{
  "metadata": {
    "prompt_id": "00000070",
    "row_id": 70,
    "seed_ids": [
      "1473",
      "191",
      "2471"
    ],
    "mode": "leetcode"
  },
  "instruction": "You are given a list of `n` robots, each robot has a unique identifier from `1` to `n`. Each robot can move to the left or right on a number line, and each robot can move a maximum of `k` units in one step. You are also given an array `orders` where `orders[i]` is a list of robot identifiers that need to be at position `i + 1` on the number line. The goal is to move all robots to their respective positions with the minimum number of steps. Each robot can only move to its designated position and cannot move to a position that has already been assigned to another robot. Return the minimum number of steps required to achieve the goal, or `-1` if it is impossible to move all robots to their designated positions.",
  "solution_code": "def min_steps_to_position(robots, orders, k):\n    \"\"\"\n    Returns the minimum number of steps required to move all robots to their designated positions\n    with the constraint that each robot can move a maximum of k units in one step, or -1 if it's\n    impossible to do so.\n    \"\"\"\n    n = len(robots)\n    if len(orders) != n:\n        return -1\n\n    robot_positions = [0] * (n + 1)\n    for order in orders:\n        for robot in order:\n            if robot_positions[robot] is not None:\n                return -1\n            robot_positions[robot] = 1\n\n    steps = 0\n    for i in range(1, n + 1):\n        dist = abs(i - robot_positions.index(0, 1, n + 1))\n        if dist == 0:\n            continue\n        available_steps = k + 1\n        adjusted_steps = dist\n        while adjusted_steps > 0:\n            max_speed = min(available_steps, adjusted_steps)\n            adjusted_steps -= max_speed\n            steps += (max_speed * (max_speed + 1)) // 2\n            available_steps -= 1\n        if adjusted_steps > 0:\n            return -1\n    return steps",
  "test_code": "def test_min_steps_to_position():\n    assert min_steps_to_position([1, 2, 3], [[2], [3], [1]], 1) == 4\n    assert min_steps_to_position([1, 2, 3], [[2], [3], [1]], 2) == 2\n    assert min_steps_to_position([1, 2, 3], [[2], [3], [1]], 0) == -1\n    assert min_steps_to_position([1, 2, 3], [[2], [3]], 1) == -1\n    assert min_steps_to_position([1, 2, 3], [[2], [4], [5]], 2) == -1\n    assert min_steps_to_position([1, 2], [[1], [2]], 1) == 1",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results0.jsonl"
}