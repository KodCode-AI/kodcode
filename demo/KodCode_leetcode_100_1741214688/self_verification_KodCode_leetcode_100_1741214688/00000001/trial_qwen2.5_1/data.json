{
  "metadata": {
    "prompt_id": "00000001",
    "row_id": 1,
    "seed_ids": [
      "1910",
      "1844",
      "1535"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a string `s` consisting of lowercase English letters, and an integer `k`, you can perform the following operation on `s` `k` times: \n\n*   Choose any non-empty substring of `s` and sort its characters in **ascending** order.\n\nAfter performing the operations, return the **lexicographically largest** string `s` that can be obtained. A substring is a contiguous sequence of characters in a string, and a string is lexicographically larger than another if it comes later in a dictionary order.",
  "solution_code": "def max_by_sorting_substrings(s: str, k: int) -> str:\n    \"\"\"\n    Given a string s consisting of lowercase English letters, and an integer k,\n    perform up to k operations where each operation consists of choosing a non-empty\n    substring and sorting its characters in ascending order. Return the lexicographically\n    largest string that can be obtained after performing these operations.\n    \"\"\"\n    length = len(s)\n    for _ in range(k):\n        # Find the last position where a swap can be done to get the lexicographically\n        # largest string\n        max_pos = -1\n        for i in range(length - 1):\n            if s[i] < s[i + 1]:\n                max_pos = i + 1\n        # If no swap can be done, we are done\n        if max_pos == -1:\n            break\n        # Perform the operation on the identified substring\n        s = s[:max_pos] + ''.join(sorted(s[max_pos:]))\n    return s",
  "test_code": "from solution import max_by_sorting_substrings\n\ndef test_max_by_sorting_substrings():\n    assert max_by_sorting_substrings(\"abdc\", 2) == \"dbca\"\n    assert max_by_sorting_substrings(\"aabcd\", 2) == \"abcd\"\n    assert max_by_sorting_substrings(\"a\", 1) == \"a\"\n    assert max_by_sorting_substrings(\"bcab\", 2) == \"cabc\"\n    assert max_by_sorting_substrings(\"bdda\", 3) == \"ddba\"\n    assert max_by_sorting_substrings(\"abcde\", 4) == \"edcba\"\n\ndef test_max_by_sorting_substrings_edge_cases():\n    assert max_by_sorting_substrings(\"aaa\", 1) == \"aaa\"\n    assert max_by_sorting_substrings(\"zzz\", 2) == \"zzz\"\n    assert max_by_sorting_substrings(\"abc\", 0) == \"abc\"\n    assert max_by_sortting_substrings(\"abc\", 3) == \"cba\"  # Fixed typo here",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}