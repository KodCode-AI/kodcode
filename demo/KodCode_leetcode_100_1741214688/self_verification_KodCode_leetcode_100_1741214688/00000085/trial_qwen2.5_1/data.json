{
  "metadata": {
    "prompt_id": "00000085",
    "row_id": 85,
    "seed_ids": [
      "1273",
      "119",
      "855"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a string `s` consisting of lowercase English letters, a **substring** `t` is called **balanced** if the number of occurrences of each letter in `t` is the same. For example, the substring `\"ababa\"` is balanced because each letter appears exactly twice. \n\nDesign an algorithm to find the length of the longest **balanced** substring `t` in `s`. Return the length of `t`. If no such substring exists, return `0`.",
  "solution_code": "def longest_balanced_substring(s: str) -> int:\n    \"\"\"\n    Finds the length of the longest balanced substring in the given string s.\n    A balanced substring has an equal number of occurrences for each letter.\n    \"\"\"\n    max_length = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_balanced(substring):\n                max_length = max(max_length, len(substring))\n    return max_length\n\ndef is_balanced(substring: str) -> bool:\n    char_count = {}\n    for char in substring:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return all(value == char_count[char] for value in char_count.values())",
  "test_code": "def test_longest_balanced_substring():\n    assert longest_balanced_substring(\"abba\") == 2\n    assert longest_balanced_substring(\"aabb\") == 4\n    assert longest_balanced_substring(\"abcabc\") == 3\n    assert longest_balanced_substring(\"aaabbb\") == 2\n    assert longest_balanced_substring(\"abcd\") == 0\n    assert longest_balanced_substring(\"aabbcc\") == 6\n    assert longest_balanced_substring(\"adbcabcda\") == 5\n\ndef is_balanced(substring: str) -> bool:\n    char_count = {}\n    for char in substring:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return all(value == char_count[char] for value in char_count.values())",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}