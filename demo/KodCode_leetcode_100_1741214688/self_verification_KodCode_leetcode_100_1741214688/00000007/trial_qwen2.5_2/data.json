{
  "metadata": {
    "prompt_id": "00000007",
    "row_id": 7,
    "seed_ids": [
      "1847",
      "1865",
      "898"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given an integer array `nums`, you are tasked with designing a data structure that supports two types of queries efficiently:\n\n1. **Add** a positive integer to an element of a given index in the array `nums`.\n2. **Find** the maximum value in a given range of the array `nums`.\n\nImplement the `DynamicArray` class:\n\n*   `DynamicArray(int[] nums)` Initializes the `DynamicArray` object with the integer array `nums`.\n*   `void add(int index, int val)` Adds `val` to `nums[index]`, i.e., applies `nums[index] += val`.\n*   `int find(int left, int right)` Returns the maximum value in the subarray `nums[left...right]`.\n\nEnsure that the `find` operation is as efficient as possible, given the updates to the array.",
  "solution_code": "from typing import List\n\nclass DynamicArray:\n    def __init__(self, nums: List[int]):\n        self.nums = nums\n        self.max_vals = [0] * len(nums)\n\n    def add(self, index: int, val: int) -> None:\n        \"\"\"\n        Adds val to nums[index] and updates the max_vals array accordingly.\n        \"\"\"\n        self.nums[index] += val\n        if index == 0:\n            self.max_vals[index] = self.nums[index]\n        else:\n            self.max_vals[index] = max(self.max_vals[index - 1], self.nums[index])\n\n    def find(self, left: int, right: int) -> int:\n        \"\"\"\n        Returns the maximum value in the subarray nums[left...right].\n        \"\"\"\n        if left == 0:\n            return self.max_vals[right]\n        else:\n            return max(self.max_vals[right], self.nums[left:right+1])",
  "test_code": "import pytest\n\n@pytest.fixture\ndef dynamic_array():\n    return DynamicArray([1, 3, 5, 7, 9])\n\ndef test_add_and_find(dynamic_array):\n    dynamic_array.add(2, 2)\n    assert dynamic_array.find(1, 4) == 9\n\ndef test_initial(find fixture):\n    dynamic_array = find fixture\n    assert dynamic_array.find(0, 4) == 9\n\ndef test_add_at_start(dynamic_array):\n    dynamic_array.add(0, 4)\n    assert dynamic_array.find(0, 4) == 13\n\ndef test_add_in_middle(dynamic_array):\n    dynamic_array.add(2, -3)\n    assert dynamic_array.find(0, 4) == 7\n\ndef test_large_range(find fixture):\n    dynamic_array = find fixture\n    dynamic_array.add(0, 5)\n    dynamic_array.add(4, -5)\n    assert dynamic_array.find(0, 4) == 14\n\ndef test_single_element(find fixture):\n    dynamic_array = find fixture\n    dynamic_array.add(1, 3)\n    assert dynamic_array.find(1, 1) == 12",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results2.jsonl"
}