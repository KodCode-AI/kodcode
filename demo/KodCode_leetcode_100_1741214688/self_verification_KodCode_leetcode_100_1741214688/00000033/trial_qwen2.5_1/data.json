{
  "metadata": {
    "prompt_id": "00000033",
    "row_id": 33,
    "seed_ids": [
      "135",
      "2357",
      "1719"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a matrix `grid` of size `m x n` containing only `0`s and `1`s, where `1` represents land and `0` represents water, a **landlocked area** is a region of land completely surrounded by water, with no connection to the boundary of the grid. You are allowed to fill any number of `0`s (turning them into `1`s) to form additional land. The goal is to connect at least one landlocked area to the boundary to make it non-landlocked. Return the minimum number of `0`s you need to flip to achieve this. If it is impossible to make any landlocked area non-landlocked, return `-1`.\n\n**Example 1:**\n\nInput: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\n\nOutput: 2\n\nExplanation: We can flip two `0`s at positions (1, 1) and (2, 2) to make the landlocked area non-landlocked.\n\n**Example 2:**\n\nInput: grid = [[0,0,0],[0,1,1],[0,1,0]]\n\nOutput: -1\n\nExplanation: It is impossible to make any landlocked area non-landlocked.",
  "solution_code": "def min_landlock_flips(grid):\n    \"\"\"\n    Returns the minimum number of 0s that need to be flipped\n    to make at least one landlocked area non-landlocked.\n    If it's impossible, returns -1.\n    \"\"\"\n    if not grid or not grid[0]:\n        return -1\n\n    m, n = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = set()\n\n    def is_landlock(i, j):\n        if (i, j) in visited:\n            return False\n        visited.add((i, j))\n        for dx, dy in directions:\n            x, y = i + dx, j + dy\n            if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == 1:\n                return False\n            if is_landlock(x, y):\n                return True\n        return True\n\n    def count_zeros(i, j):\n        if (i, j) in visited:\n            return 0\n        visited.add((i, j))\n        count = int(grid[i][j] == 0)\n        for dx, dy in directions:\n            x, y = i + dx, j + dy\n            if 0 <= x < m and 0 <= y < n:\n                count += count_zeros(x, y)\n        return count\n\n    flips = float('inf')\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1 or (i, j) in visited:\n                continue\n            if is_landlock(i, j):\n                min_val = count_zeros(i, j)\n                flips = min(flips, min_val)\n\n    return flips if flips != float('inf') else -1",
  "test_code": "import pytest\n\ndef test_min_landlock_flips():\n    grid = [[0, 0, 0, 0], [1, 0, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]]\n    assert min_landlock_flips(grid) == 2\n\n    grid = [[0, 0, 0], [0, 1, 1], [0, 1, 0]]\n    assert min_landlock_flips(grid) == -1\n\n    grid = [[1, 1, 1, 1], [1, 0, 0, 1], [1, 1, 1, 1]]\n    assert min_landlock_flips(grid) == -1\n\n    grid = [[0, 0, 1], [0, 1, 0]]\n    assert min_landlock_flips(grid) == 1\n\n    grid = [[1, 0, 1], [0, 0, 0], [1, 0, 1]]\n    assert min_landlock_flips(grid) == 1\n\n    grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]]\n    assert min_landlock_flips(grid) == 2\n\n# To run these tests, you need to have the above solution function defined in your solution.py file.\n# Run the tests using pytest:\n# pytest -q <path_to_your_test_file>.py",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}