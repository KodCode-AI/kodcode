{
  "metadata": {
    "prompt_id": "00000028",
    "row_id": 28,
    "seed_ids": [
      "665",
      "1647",
      "892"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a binary string `s`, your task is to find the **minimum** number of swaps required to group all the `1`'s present in the string into a contiguous (consecutive) substring. In one swap, you can choose any two indices `i` and `j` (0-indexed) and swap the characters at these indices. Return the **minimum** number of swaps required to achieve this.",
  "solution_code": "def min_swaps_to_group_ones(s: str) -> int:\n    \"\"\"\n    Returns the minimum number of swaps required to group all '1's into a contiguous substring.\n    \"\"\"\n    ones_count = s.count('1')\n    max_ones_in_window = window_sum = 0\n    left = 0\n    \n    for right in range(len(s)):\n        window_sum += s[right] == '1'\n        \n        if right - left + 1 > ones_count:\n            window_sum -= s[left] == '1'\n            left += 1\n        \n        max_ones_in_window = max(max_ones_in_window, window_sum)\n    \n    return ones_count - max_ones_in_window",
  "test_code": "import pytest\nfrom solution import min_swaps_to_group_ones\n\ndef test_min_swaps_to_group_ones():\n    assert min_swaps_to_group_ones(\"11001\") == 1\n    assert min_swaps_to_group_ones(\"0011100\") == 2\n    assert min_swaps_to_group_ones(\"1111\") == 0\n    assert min_swaps_to_group_ones(\"01010101\") == 4\n    assert min_swaps_to_group_ones(\"00010001000\") == 3\n    assert min_swaps_to_group_ones(\"1001001001\") == 3",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results2.jsonl"
}