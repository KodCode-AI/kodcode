{
  "metadata": {
    "prompt_id": "00000012",
    "row_id": 12,
    "seed_ids": [
      "1476",
      "2214",
      "1720"
    ],
    "mode": "leetcode"
  },
  "instruction": "Design a function `maxProfitWithTransactionFee` that calculates the maximum profit you can achieve from trading a stock given an array of daily prices and a transaction fee. You can complete as many buy-sell transactions as you like, but you need to pay the transaction fee for each transaction. A transaction consists of buying and then selling one share of the stock. You cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n### Function Signature\n```python\ndef maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    pass\n```\n\n### Constraints\n- `1 <= prices.length <= 5 * 10^4`\n- `0 <= prices[i] <= 10^5`\n- `0 <= fee < 10^5`",
  "solution_code": "from typing import List\n\ndef maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    \"\"\"\n    Returns the maximum profit that can be achieved from trading a stock given daily prices and a transaction fee.\n    \"\"\"\n    n = len(prices)\n    if n < 2:\n        return 0\n    \n    # Initialize the states\n    # hold: the maximum profit when holding a stock\n    # not_hold: the maximum profit when not holding a stock\n    hold, not_hold = -prices[0], 0\n    \n    for i in range(1, n):\n        # Update the states\n        hold = max(hold, not_hold - prices[i])\n        not_hold = max(not_hold, hold + prices[i] - fee)\n    \n    return not_hold",
  "test_code": "from typing import List\nfrom solution import maxProfitWithTransactionFee\n\ndef test_maxProfitWithTransactionFee():\n    assert maxProfitWithTransactionFee([1, 3, 2, 8, 4, 9], 2) == 8\n    assert maxProfitWithTransactionFee([1, 3, 7, 5, 10, 3], 3) == 6\n    assert maxProfitWithTransactionFee([5, 2, 6, 3, 1, 4], 0) == 4\n    assert maxProfitWithTransactionFee([1], 2) == 0\n    assert maxProfitWithTransactionFee([1, 3, 2, 8, 4, 9], 0) == 10\n    assert maxProfitWithTransactionFee([1, 3, 7, 5, 10, 3], 2) == 5\n\n# Test with an empty prices list\nassert maxProfitWithTransactionFee([], 2) == 0\n\n# Test with a single element in prices\nassert maxProfitWithTransactionFee([100], 2) == 0\n\n# Test with a large number of prices\nlarge_prices = list(range(1, 50000))\nassert maxProfitWithTransactionFee(large_prices, 10) == 0  # No profit if the transaction fee is greater than the price difference",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results1.jsonl"
}