{
  "metadata": {
    "prompt_id": "00000012",
    "row_id": 12,
    "seed_ids": [
      "1476",
      "2214",
      "1720"
    ],
    "mode": "leetcode"
  },
  "instruction": "Design a function `maxProfitWithTransactionFee` that calculates the maximum profit you can achieve from trading a stock given an array of daily prices and a transaction fee. You can complete as many buy-sell transactions as you like, but you need to pay the transaction fee for each transaction. A transaction consists of buying and then selling one share of the stock. You cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n### Function Signature\n```python\ndef maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    pass\n```\n\n### Constraints\n- `1 <= prices.length <= 5 * 10^4`\n- `0 <= prices[i] <= 10^5`\n- `0 <= fee < 10^5`",
  "solution_code": "from typing import List\n\ndef maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    \"\"\"\n    Calculates the maximum profit from trading stocks given the prices and a transaction fee.\n    \n    :param prices: List of daily stock prices.\n    :param fee: Transaction fee for each transaction.\n    :return: Maximum profit possible.\n    \"\"\"\n    cash, hold = 0, -prices[0]  # cash: profit when not holding stock, hold: profit when holding stock\n    \n    for i in range(1, len(prices)):\n        cash, hold = max(cash, hold + prices[i] - fee), max(hold, cash - prices[i])\n    \n    return cash",
  "test_code": "def test_maxProfitWithTransactionFee():\n    assert maxProfitWithTransactionFee([1, 3, 2, 8, 4, 9], 2) == 8\n    assert maxProfitWithTransactionFee([1, 3, 7, 5, 10, 3], 3) == 6\n    assert maxProfitWithTransactionFee([1, 2, 3, 0, 2], 1) == 2\n    assert maxProfitWithTransactionFee([10], 0) == 0\n    assert maxProfitWithTransactionFee([5, 6, 1, 5], 2) == 3\n\ntest_maxProfitWithTransactionFee()",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results2.jsonl"
}