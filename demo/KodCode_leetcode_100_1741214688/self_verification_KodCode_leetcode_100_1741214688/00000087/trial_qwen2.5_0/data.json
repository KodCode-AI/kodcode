{
  "metadata": {
    "prompt_id": "00000087",
    "row_id": 87,
    "seed_ids": [
      "2477",
      "1000",
      "79"
    ],
    "mode": "leetcode"
  },
  "instruction": "Given a `m x n` grid of characters `board` and a word `word`, return `true` if `word` can be constructed from letters on the `board`. The word does not need to be constructed from letters adjacent in the same row or column, but it cannot use the same letter cell more than once. Each cell in the grid can only contribute one letter to the word. If the word can be formed, return `true`; otherwise, return `false`.",
  "solution_code": "def exist(board, word):\n    \"\"\"\n    Check if a word can be constructed from the given board of characters.\n    \"\"\"\n    if not board or not board[0]:\n        return False\n    m, n = len(board), len(board[0])\n    \n    def dfs(x, y, word):\n        if len(word) == 0:\n            return True\n        if x < 0 or x >= m or y < 0 or y >= n or board[x][y] != word[0]:\n            return False\n        tmp, board[x][y] = board[x][y], '#'  # Mark the cell as visited\n        found = dfs(x+1, y, word[1:]) or dfs(x-1, y, word[1:]) or dfs(x, y+1, word[1:]) or dfs(x, y-1, word[1:])\n        board[x][y] = tmp  # Revert the change for backtracking\n        return found\n    \n    for i in range(m):\n        for j in range(n):\n            if dfs(i, j, word):\n                return True\n    return False",
  "test_code": "from solution import exist\n\ndef test_exist_positive_case():\n    board = [\n        ['A','B','C','E'],\n        ['S','F','C','S'],\n        ['A','D','E','E']\n    ]\n    assert exist(board, \"ABCCED\") == True\n\ndef test_exist_with_visited_case():\n    board = [\n        ['A','B','C','E'],\n        ['S','F','C','S'],\n        ['A','D','E','E']\n    ]\n    assert exist(board, \"SEE\") == True\n\ndef test_exist_multiple_path_case():\n    board = [\n        ['A','B','C','E'],\n        ['S','F','C','S'],\n        ['A','D','E','E']\n    ]\n    assert exist(board, \"ABCB\") == False\n\ndef test_exist_different_board_shape():\n    board = [\n        ['A','B','C'],\n        ['S','F','C'],\n        ['A','D','E']\n    ]\n    assert exist(board, \"ABFCACDB\") == True\n\ndef test_exist_single_char_case():\n    board = [[\"A\"]]\n    assert exist(board, \"A\") == True\n\ndef test_exist_word_not_found():\n    board = [\n        ['A','B','C','E'],\n        ['S','F','C','S'],\n        ['A','D','E','E']\n    ]\n    assert exist(board, \"ABCG\") == False\n\ndef test_exist_empty_board():\n    board = []\n    assert exist(board, \"A\") == False",
  "file_source": "KodCode_questions2sv_leetcode_100_1741214688_sanitized_prepared_results0.jsonl"
}