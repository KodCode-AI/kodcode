{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Implement a class `CircularQueue` that supports the following operations:\n\n*   `CircularQueue(int k)` constructs the `CircularQueue` with a maximum size of `k`.\n*   `int Front()` retrieves the element at the front of the queue without removing it. Returns `-1` if the queue is empty.\n*   `int Rear()` retrieves the element at the rear of the queue without removing it. Returns `-1` if the queue is empty.\n*   `boolean enQueue(int value)` inserts the element `value` into the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is full).\n*   `boolean deQueue()` deletes an element from the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is empty).\n*   `boolean isEmpty()` returns `true` if the queue is currently empty, `false` otherwise.\n*   `boolean isFull()` returns `true` if the queue is currently full, `false` otherwise.\n\nEnsure that all operations are performed in **constant time** (O(1))."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass Node:\n    def __init__(self, value=None, next=None):\n        self.value = value\n        self.next = next\n\nclass CircularQueue:\n    def __init__(self, k):\n        self.max_size = k\n        self.size = 0\n        self.head = None\n        self.tail = None\n\n    def Front(self):\n        return -1 if self.head is None else self.head.value\n\n    def Rear(self):\n        return -1 if self.head is None else self.tail.value\n\n    def enQueue(self, value):\n        if self.size == self.max_size:\n            return False\n        new_node = Node(value)\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            self.tail.next = new_node\n            self.tail = new_node\n            self.tail.next = self.head\n        self.size += 1\n        return True\n\n    def deQueue(self):\n        if self.head is None:\n            return False\n        if self.head == self.tail:\n            self.head = None\n            self.tail = None\n        else:\n            self.head = self.head.next\n            self.tail.next = self.head\n        self.size -= 1\n        return True\n\n    def isEmpty(self):\n        return self.head is None\n\n    def isFull(self):\n        return self.size == self.max_size\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom circular_queue import CircularQueue\n\ndef test_circular_queue_ops():\n    q = CircularQueue(3)\n    assert q.enQueue(1) == True\n    assert q.enQueue(2) == True\n    assert q.enQueue(3) == True\n    assert q.enQueue(4) == False\n    assert q.Rear() == 3\n    assert q.Front() == 1\n    assert q.deQueue() == True\n    assert q.enQueue(4) == True\n    assert q.Front() == 2\n\ndef test_is_empty_and_is_full():\n    q = CircularQueue(1)\n    assert q.isFull() == False\n    assert q.isEmpty() == True\n    assert q.enQueue(1) == True\n    assert q.isFull() == True\n    assert q.isEmpty() == False\n    assert q.deQueue() == True\n    assert q.isFull() == False\n    assert q.isEmpty() == True\n\ndef test_deQueue_empty_queue():\n    q = CircularQueue(2)\n    assert q.deQueue() == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000000", "row_id": 0, "seed_ids": ["1797", "1403", "2583"], "mode": "leetcode", "instruction": "Implement a class `CircularQueue` that supports the following operations:\n\n*   `CircularQueue(int k)` constructs the `CircularQueue` with a maximum size of `k`.\n*   `int Front()` retrieves the element at the front of the queue without removing it. Returns `-1` if the queue is empty.\n*   `int Rear()` retrieves the element at the rear of the queue without removing it. Returns `-1` if the queue is empty.\n*   `boolean enQueue(int value)` inserts the element `value` into the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is full).\n*   `boolean deQueue()` deletes an element from the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is empty).\n*   `boolean isEmpty()` returns `true` if the queue is currently empty, `false` otherwise.\n*   `boolean isFull()` returns `true` if the queue is currently full, `false` otherwise.\n\nEnsure that all operations are performed in **constant time** (O(1))."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, and an integer `k`, you can perform the following operation on `s` `k` times: \n\n*   Choose any non-empty substring of `s` and sort its characters in **ascending** order.\n\nAfter performing the operations, return the **lexicographically largest** string `s` that can be obtained. A substring is a contiguous sequence of characters in a string, and a string is lexicographically larger than another if it comes later in a dictionary order."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef largest_string(s: str, k: int) -> str:\n    \"\"\"\n    Returns the lexicographically largest string obtainable by sorting substrings.\n    \"\"\"\n    n = len(s)\n    if k == 0:\n        return s\n    \n    # Sort the string in chunks, where each chunk size is as large as possible\n    # to maximize the lexicographic order\n    chunk_size = n // (k + 1)\n    for _ in range(k):\n        s = ''.join(sorted(s[i:i + chunk_size] + s[i + chunk_size:i + 2 * chunk_size]) for i in range(0, n - chunk_size + 1))\n    return s\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import largest_string\n\ndef test_largest_string_single_sort():\n    assert largest_string(\"1111111111222\", 1) == \"222111111111\"\n\ndef test_largest_string_empty_string():\n    assert largest_string(\"\", 1) == \"\"\n\ndef test_largest_string_k_zero():\n    assert largest_string(\"abc\", 0) == \"abc\"\n\ndef test_largest_string_large_k():\n    assert largest_string(\"1234\", 2) == \"4321\"\n\ndef test_largest_string_with_repetitions():\n    assert largest_string(\"zzzz\", 2) == \"zzzz\"\n\ndef test_largest_string_mixed_activity():\n    assert largest_string(\"aabcbbca\", 2) == \"aaabcbbca\"\n\ndef test_largest_string_trivial_case():\n    assert largest_string(\"a\", 1) == \"a\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000001", "row_id": 1, "seed_ids": ["1910", "1844", "1535"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, and an integer `k`, you can perform the following operation on `s` `k` times: \n\n*   Choose any non-empty substring of `s` and sort its characters in **ascending** order.\n\nAfter performing the operations, return the **lexicographically largest** string `s` that can be obtained. A substring is a contiguous sequence of characters in a string, and a string is lexicographically larger than another if it comes later in a dictionary order."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` consisting of lowercase English letters. A **substring** of `s` is considered **beautiful** if it contains an even number of distinct letters and the sum of the ASCII values of all characters in the substring is divisible by 3. Return the number of **beautiful substrings** in `s`.\n\nFor example, in the string `\"abcabb\"`, `\"a\"`, `\"bb\"`, and `\"abb\"` are beautiful substrings."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_beautiful_substrings(s: str) -> int:\n    \"\"\"\n    Returns the number of beautiful substrings in the given string.\n    A substring is beautiful if it has an even number of distinct letters and the sum of ASCII values is divisible by 3.\n    \"\"\"\n    n = len(s)\n    beautiful_count = 0\n    \n    # Iterate over all possible substrings\n    for start in range(n):\n        char_count = [0] * 26\n        ascii_sum = 0\n        distinct_count = 0\n        for end in range(start, n):\n            index = ord(s[end]) - ord('a')\n            char_count[index] += 1\n            if char_count[index] == 1: \n                distinct_count += 1\n                ascii_sum += ord(s[end])\n            elif char_count[index] == 2: \n                ascii_sum -= ord(s[end])\n            if distinct_count % 2 == 0 and ascii_sum % 3 == 0:\n                beautiful_count += 1\n                \n    return beautiful_count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_beautiful_substrings\n\ndef test_count_beautiful_substrings():\n    assert count_beautiful_substrings(\"abcabb\") == 5\n    assert count_beautiful_substrings(\"zzzz\") == 2\n    assert count_beautiful_substrings(\"aabbcc\") == 6\n    assert count_beautiful_substrings(\"abc\") == 0\n    assert count_beautiful_substrings(\"aaa\") == 0\n    assert count_beautiful_substrings(\"aabbaa\") == 6\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000002", "row_id": 2, "seed_ids": ["2012", "839", "756"], "mode": "leetcode", "instruction": "You are given a string `s` consisting of lowercase English letters. A **substring** of `s` is considered **beautiful** if it contains an even number of distinct letters and the sum of the ASCII values of all characters in the substring is divisible by 3. Return the number of **beautiful substrings** in `s`.\n\nFor example, in the string `\"abcabb\"`, `\"a\"`, `\"bb\"`, and `\"abb\"` are beautiful substrings."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times: choose any two adjacent characters in `s` and swap them if the first character has a higher ASCII value than the second character. After performing any number of operations, return the lexicographically smallest string that can be obtained. Note that the ASCII values of lowercase English letters range from 97 to 122."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef smallest_string(s):\n    \"\"\"\n    Returns the lexicographically smallest string that can be obtained by swapping adjacent characters\n    in the given string 's' any number of times according to the specified rule.\n    \"\"\"\n    stack = []\n    for char in s:\n        # Keep popping from stack until the current character is smaller than the character at the top\n        # of the stack. This ensures the string remains lexicographically smallest.\n        while stack and stack[-1] > char:\n            stack.pop()\n        stack.append(char)\n    return ''.join(stack)\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import smallest_string\n\ndef test_smallest_string_positive():\n    assert smallest_string(\"cba\") == \"acb\"\n    assert smallest_string(\"baaca\") == \"aaabc\"\n\ndef test_smallest_string_single_char():\n    assert smallest_string(\"a\") == \"a\"\n\ndef test_smallest_string_large_input():\n    long_string = \"z\"*10000  # 10000 'z's\n    assert smallest_string(long_string) == \"z\"*10000\n\ndef test_smallest_string_example1():\n    assert smallest_string(\"ccaabaaca\") == \"aacaaabca\"\n\ndef test_smallest_string_mixed_ascii():\n    assert smallest_string(\"xyz\") == \"xyz\"  # Already in the smallest lexicographical order\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000003", "row_id": 3, "seed_ids": ["2233", "2203", "2168"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times: choose any two adjacent characters in `s` and swap them if the first character has a higher ASCII value than the second character. After performing any number of operations, return the lexicographically smallest string that can be obtained. Note that the ASCII values of lowercase English letters range from 97 to 122."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, a **substring** of `s` is called a **balanced substring** if the number of distinct characters in it is exactly `k`. For a given integer `k`, return the number of balanced substrings in `s`.\n\nExample:\n```python\ns = \"abcabc\", k = 2\nOutput: 3\nExplanation: The balanced substrings are \"ab\", \"bc\", and \"ab\".\n```\n\nExample:\n```python\ns = \"aaabbbccc\", k = 3\nOutput: 1\nExplanation: The only balanced substring is \"aaabbbccc\".\n```"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_balanced_substrings(s, k):\n    \"\"\"\n    Returns the number of balanced substrings in s where the number of distinct\n    characters is exactly k.\n    \"\"\"\n    i, j = 0, 0\n    count, distinct_chars = 0, {}\n    while j < len(s):\n        distinct_chars[s[j]] = distinct_chars.get(s[j], 0) + 1\n        if len(distinct_chars) <= k:\n            count += (j - i + 1)\n            j += 1\n        else:\n            while len(distinct_chars) > k:\n                distinct_chars[s[i]] -= 1\n                if distinct_chars[s[i]] == 0:\n                    del distinct_chars[s[i]]\n                i += 1\n            j += 1\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_count_balanced_substrings():\n    assert count_balanced_substrings(\"abcabc\", 2) == 3\n    assert count_balanced_substrings(\"aaabbbccc\", 3) == 1\n    assert count_balanced_substrings(\"aabac\", 2) == 3\n    assert count_balanced_substrings(\"aabbcc\", 3) == 6\n    assert count_balanced_substrings(\"xyz\", 3) == 1\n    assert count_balanced_substrings(\"xyzz\", 4) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000004", "row_id": 4, "seed_ids": ["765", "2513", "1915"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, a **substring** of `s` is called a **balanced substring** if the number of distinct characters in it is exactly `k`. For a given integer `k`, return the number of balanced substrings in `s`.\n\nExample:\n```python\ns = \"abcabc\", k = 2\nOutput: 3\nExplanation: The balanced substrings are \"ab\", \"bc\", and \"ab\".\n```\n\nExample:\n```python\ns = \"aaabbbccc\", k = 3\nOutput: 1\nExplanation: The only balanced substring is \"aaabbbccc\".\n```"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary tree where each node contains a single digit from `0` to `9`. A **path** in the tree is defined as any sequence of nodes from some starting node to any leaf node. Each root-to-leaf path in the tree represents a number. For example, the path `1 -> 2 -> 3` represents the number `123`.\n\nYou need to find the sum of all root-to-leaf numbers in the tree. A **leaf** node is a node with no children. The result should be returned as an integer, and test cases are generated so that the answer will fit in a **32-bit** integer."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\ndef sum_numbers(root):\n    \"\"\"\n    Returns the sum of all root-to-leaf numbers in the binary tree.\n    \"\"\"\n    return _sum_numbers(root, 0)\n    \ndef _sum_numbers(node, current_number):\n    if not node:\n        return 0\n    current_number = current_number * 10 + node.val\n    if not node.left and not node.right:  # It's a leaf node\n        return current_number\n    return _sum_numbers(node.left, current_number) + _sum_numbers(node.right, current_number)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\n# Mock TreeNode class\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef create_tree(*values):\n    nodes = [TreeNode(v) if v is not None else None for v in values]\n    for i in range(len(nodes) // 2):\n        if nodes[i] is not None:\n            nodes[i].left = nodes[2 * i + 1] if 2 * i + 1 < len(nodes) else None\n            nodes[i].right = nodes[2 * i + 2] if 2 * i + 2 < len(nodes) else None\n    return nodes[0]\n\ndef sum_numbers(root):\n    \"\"\"\n    Returns the sum of all root-to-leaf numbers in the binary tree.\n    \"\"\"\n    return _sum_numbers(root, 0)\n\ndef _sum_numbers(node, current_number):\n    if not node:\n        return 0\n    current_number = current_number * 10 + node.val\n    if not node.left and not node.right:  # It's a leaf node\n        return current_number\n    return _sum_numbers(node.left, current_number) + _sum_numbers(node.right, current_number)\n\ndef test_sum_numbers():\n    assert sum_numbers(create_tree(1, 2, 3)) == 25  # 1->2 and 1->3, 25 = 12 + 13\n    assert sum_numbers(create_tree(4, 9, 0, 5, 1)) == 408  # 4->9->5 and 4->9->0->1, 408 = 495 + 4901\n\ndef test_single_node():\n    assert sum_numbers(create_tree(1)) == 1  # The tree consists of a single node 1\n\ndef test_empty_tree():\n    assert sum_numbers(None) == 0  # An empty tree\n\ndef test_no_leaf_nodes():\n    assert sum_numbers(create_tree(1, 2)) == 12  # 1 and 2, but no path to a leaf node, so only 12\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000005", "row_id": 5, "seed_ids": ["2338", "1653", "129"], "mode": "leetcode", "instruction": "You are given a binary tree where each node contains a single digit from `0` to `9`. A **path** in the tree is defined as any sequence of nodes from some starting node to any leaf node. Each root-to-leaf path in the tree represents a number. For example, the path `1 -> 2 -> 3` represents the number `123`.\n\nYou need to find the sum of all root-to-leaf numbers in the tree. A **leaf** node is a node with no children. The result should be returned as an integer, and test cases are generated so that the answer will fit in a **32-bit** integer."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you are allowed to perform the following operation any number of times: pick any substring `s[i...j]` and replace it with the same substring in reverse order. For example, `s = \"abcde\"` can be transformed into `\"dcbae\"` by replacing the substring `s[1...4]` with `\"dcba\"`. \n\nDetermine the lexicographically smallest string that can be obtained by performing the above operation any number of times. Return the resulting string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef minimal_string(s):\n    \"\"\"\n    Returns the lexicographically smallest string that can be obtained by\n    performing the allowed operation on the input string `s`.\n    \"\"\"\n    # The idea is to move all the 'a's to the front as much as possible.\n    # This ensures that the string is as lexicographically small as possible.\n    # Search for the first occurrence of 'a' after any occurrence of a non-'a' character.\n    min_char = 'a'\n    first_index = float('inf')\n    for i in range(len(s)):\n        if s[i] < min_char:\n            min_char = s[i]\n            first_index = i\n        elif s[i] == min_char and i < first_index:\n            first_index = i\n    # If 'a' is not the smallest character, search for the first occurrence of the smallest character.\n    if min_char != 'a':\n        for i in range(len(s)):\n            if s[i] == min_char:\n                first_index = i\n                break\n    \n    # Reconstruct the string to start with the smallest character as many times as possible.\n    left_part = s[:first_index+1]\n    # If the string starts with 'a', the result is the string of 'a's and the remaining string.\n    if min_char == 'a':\n        right_part = s[first_index+1:]\n    else:\n        # Otherwise, the result is the smallest character and the smallest strings recursively.\n        right_part = min_char + minimal_string(s[first_index+1:])\n    \n    return left_part + right_part\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import minimal_string\n\ndef test_minimal_string_single_char():\n    assert minimal_string(\"a\") == \"a\"\n\ndef test_minimal_string_all_a():\n    assert minimal_string(\"aaa\") == \"aaa\"\n    assert minimal_string(\"aaaa\") == \"aaaa\"\n\ndef test_minimal_string_mixed():\n    assert minimal_string(\"abca\") == \"aaabc\"\n    assert minimal_string(\"cbaa\") == \"aaaab\"\n    assert minimal_string(\"aaab\") == \"aaabb\"\n    assert minimal_string(\"cdaba\") == \"aaabcd\"\n\ndef test_minimal_string_with_z():\n    assert minimal_string(\"azbca\") == \"aaabc\"\n    assert minimal_string(\"zbcad\") == \"aaabc\"\n    assert minimal_string(\"cadzb\") == \"aaabc\"\n    assert minimal_string(\"zzbca\") == \"aaabc\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000006", "row_id": 6, "seed_ids": ["790", "311", "1320"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you are allowed to perform the following operation any number of times: pick any substring `s[i...j]` and replace it with the same substring in reverse order. For example, `s = \"abcde\"` can be transformed into `\"dcbae\"` by replacing the substring `s[1...4]` with `\"dcba\"`. \n\nDetermine the lexicographically smallest string that can be obtained by performing the above operation any number of times. Return the resulting string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an integer array `nums`, you are tasked with designing a data structure that supports two types of queries efficiently:\n\n1. **Add** a positive integer to an element of a given index in the array `nums`.\n2. **Find** the maximum value in a given range of the array `nums`.\n\nImplement the `DynamicArray` class:\n\n*   `DynamicArray(int[] nums)` Initializes the `DynamicArray` object with the integer array `nums`.\n*   `void add(int index, int val)` Adds `val` to `nums[index]`, i.e., applies `nums[index] += val`.\n*   `int find(int left, int right)` Returns the maximum value in the subarray `nums[left...right]`.\n\nEnsure that the `find` operation is as efficient as possible, given the updates to the array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\n\nclass DynamicArray:\n    def __init__(self, nums: List[int]):\n        self.nums = nums\n        self.max_vals = [0] * len(nums)\n\n    def add(self, index: int, val: int) -> None:\n        \"\"\"\n        Adds val to nums[index] and updates the max_vals array accordingly.\n        \"\"\"\n        self.nums[index] += val\n        if index == 0:\n            self.max_vals[index] = self.nums[index]\n        else:\n            self.max_vals[index] = max(self.max_vals[index - 1], self.nums[index])\n\n    def find(self, left: int, right: int) -> int:\n        \"\"\"\n        Returns the maximum value in the subarray nums[left...right].\n        \"\"\"\n        if left == 0:\n            return self.max_vals[right]\n        else:\n            return max(self.max_vals[right], self.nums[left:right+1])\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\n@pytest.fixture\ndef dynamic_array():\n    return DynamicArray([1, 3, 5, 7, 9])\n\ndef test_add_and_find(dynamic_array):\n    dynamic_array.add(2, 2)\n    assert dynamic_array.find(1, 4) == 9\n\ndef test_initial(find fixture):\n    dynamic_array = find fixture\n    assert dynamic_array.find(0, 4) == 9\n\ndef test_add_at_start(dynamic_array):\n    dynamic_array.add(0, 4)\n    assert dynamic_array.find(0, 4) == 13\n\ndef test_add_in_middle(dynamic_array):\n    dynamic_array.add(2, -3)\n    assert dynamic_array.find(0, 4) == 7\n\ndef test_large_range(find fixture):\n    dynamic_array = find fixture\n    dynamic_array.add(0, 5)\n    dynamic_array.add(4, -5)\n    assert dynamic_array.find(0, 4) == 14\n\ndef test_single_element(find fixture):\n    dynamic_array = find fixture\n    dynamic_array.add(1, 3)\n    assert dynamic_array.find(1, 1) == 12\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000007", "row_id": 7, "seed_ids": ["1847", "1865", "898"], "mode": "leetcode", "instruction": "Given an integer array `nums`, you are tasked with designing a data structure that supports two types of queries efficiently:\n\n1. **Add** a positive integer to an element of a given index in the array `nums`.\n2. **Find** the maximum value in a given range of the array `nums`.\n\nImplement the `DynamicArray` class:\n\n*   `DynamicArray(int[] nums)` Initializes the `DynamicArray` object with the integer array `nums`.\n*   `void add(int index, int val)` Adds `val` to `nums[index]`, i.e., applies `nums[index] += val`.\n*   `int find(int left, int right)` Returns the maximum value in the subarray `nums[left...right]`.\n\nEnsure that the `find` operation is as efficient as possible, given the updates to the array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of strings `words` and a string `target`, you need to find the minimum number of adjacent swaps required to arrange the strings in `words` such that they form the `target` string. Each string in `words` can only be used once, and the order of the strings in `words` must match the order of the strings in `target`. A swap is defined as exchanging the positions of two adjacent strings in the list. Please return the minimum number of swaps required to achieve the `target` string. If it is not possible to arrange the strings in `words` to form the `target` string, return `-1`.\n\nFor example, given `words = [\"abc\",\"def\",\"ghi\"]` and `target = \"defabcghi\"`, the minimum number of swaps required is `2`. First, swap \"abc\" and \"def\", then swap \"def\" and \"ghi\". Therefore, the answer is `2`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_swaps_to_target(words, target):\n    \"\"\"\n    Returns the minimum number of adjacent swaps required to arrange the strings in words\n    to form the target string. If it is not possible to form the target, returns -1.\n    \"\"\"\n    word_to_index = {word: idx for idx, word in enumerate(words)}\n    target_words = target.split()\n    words_pointer = 0\n    swaps = 0\n    \n    for target_word in target_words:\n        if target_word not in word_to_index:\n            return -1\n        index = word_to_index[target_word]\n        while index > words_pointer:\n            words_pointer += 1\n            swaps += 1\n        words_pointer = index + 1\n    \n    return swaps\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import min_swaps_to_target\n\ndef test_min_swaps_to_target():\n    assert min_swaps_to_target([\"abc\",\"def\",\"ghi\"], \"defabcghi\") == 2\n    assert min_swaps_to_target([\"foo\",\"bar\",\"baz\"], \"barbazfoo\") == 3\n    assert min_swaps_to_target([\"hello\",\"world\",\"hello\"], \"helloworldhello\") == -1  # Duplicate of \"hello\" and \"world\" in source and target creates an error\n    assert min_swaps_to_target([\"a\",\"b\",\"c\"], \"cba\") == -1\n    assert min_swaps_to_target([\"one\",\"two\",\"three\"], \"threeonetwo\") == 2\n    assert min_swaps_to_target([\"cat\",\"dog\",\"mouse\"], \"catdogmouse\") == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000008", "row_id": 8, "seed_ids": ["1516", "417", "2266"], "mode": "leetcode", "instruction": "Given a list of strings `words` and a string `target`, you need to find the minimum number of adjacent swaps required to arrange the strings in `words` such that they form the `target` string. Each string in `words` can only be used once, and the order of the strings in `words` must match the order of the strings in `target`. A swap is defined as exchanging the positions of two adjacent strings in the list. Please return the minimum number of swaps required to achieve the `target` string. If it is not possible to arrange the strings in `words` to form the `target` string, return `-1`.\n\nFor example, given `words = [\"abc\",\"def\",\"ghi\"]` and `target = \"defabcghi\"`, the minimum number of swaps required is `2`. First, swap \"abc\" and \"def\", then swap \"def\" and \"ghi\". Therefore, the answer is `2`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` consisting of lowercase English letters and an integer `k`. A **substring** of `s` is considered **balanced** if the frequency of each letter in the substring is at most `k`. Return the **maximum length** of a balanced substring of `s`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_length_balanced_substring(s: str, k: int) -> int:\n    \"\"\"\n    Returns the maximum length of a balanced substring of `s`. A substring is balanced if the frequency of each letter is at most `k`.\n    \"\"\"\n    start = 0\n    max_len = 0\n    freq = {}\n\n    for end in range(len(s)):\n        freq[s[end]] = freq.get(s[end], 0) + 1\n\n        while min(freq.values()) > k:\n            freq[s[start]] -= 1\n            if freq[s[start]] == 0:\n                del freq[s[start]]\n            start += 1\n\n        max_len = max(max_len, end - start + 1)\n\n    return max_len\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_max_length_balanced_substring():\n    assert max_length_balanced_substring(\"aabbc\", 2) == 5\n    assert max_length_balanced_substring(\"abcabc\", 3) == 5\n    assert max_length_balanced_substring(\"cbccbcc<dim\", 2) == 5\n    assert max_length_balanced_substring(\"aaabb\", 2) == 3\n    assert max_length_balanced_substring(\"cccc\", 1) == 4\n    assert max_length_balanced_substring(\"cccaaa\", 3) == 6\n    assert max_length_balanced_substring(\"abababab\", 2) == 4\n    assert max_length_balanced_substring(\"abababab\", 5) == 8\n\ntest_max_length_balanced_substring()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000009", "row_id": 9, "seed_ids": ["1530", "1550", "2103"], "mode": "leetcode", "instruction": "You are given a string `s` consisting of lowercase English letters and an integer `k`. A **substring** of `s` is considered **balanced** if the frequency of each letter in the substring is at most `k`. Return the **maximum length** of a balanced substring of `s`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a data structure to manage a collection of intervals with the following operations:\n\n- `addInterval(start, end)`: Add a new interval `[start, end]` to the collection.\n- `mergeOverlappingIntervals()`: Merge all overlapping intervals in the collection and return the merged intervals.\n- `removeInterval(start, end)`: Remove the interval `[start, end]` from the collection if it exists.\n- `getIntervals()`: Return the current collection of intervals.\n\nImplement the `IntervalManager` class:\n\n- `IntervalManager()`: Initializes the interval manager.\n- `void addInterval(int start, int end)`: Adds a new interval `[start, end]` to the collection. Ensure no duplicate intervals are added.\n- `List<int[]> mergeOverlappingIntervals()`: Merges all overlapping intervals in the collection and returns the merged intervals as a list of `[start, end]` pairs.\n- `void removeInterval(int start, int end)`: Removes the interval `[start, end]` from the collection if it exists.\n- `List<int[]> getIntervals()`: Returns the current collection of intervals as a list of `[start, end]` pairs.\n\n**Note**: Intervals are represented as `[start, end]` where `start` and `end` are inclusive. The intervals are sorted by their start time."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\n\nclass IntervalManager:\n    def __init__(self):\n        self.intervals = []\n        \n    def addInterval(self, start: int, end: int) -> None:\n        # Ensure no duplicate intervals are added\n        for interval in self.intervals:\n            if interval[0] == start and interval[1] == end:\n                return\n        self.intervals.append([start, end])\n        self.intervals = self.mergeOverlappingIntervals()\n        \n    def mergeOverlappingIntervals(self) -> List[int[]]:\n        # Sort intervals based on start time\n        self.intervals.sort(key=lambda x: x[0])\n        merged = []\n        for interval in self.intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        return merged\n    \n    def removeInterval(self, start: int, end: int) -> None:\n        self.intervals = [interval for interval in self.intervals if interval[0] != start or interval[1] != end]\n        \n    def getIntervals(self) -> List[int[]]:\n        return self.intervals\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_interval_manager():\n    manager = IntervalManager()\n    manager.addInterval(1, 3)\n    manager.addInterval(2, 6)\n    manager.addInterval(8, 10)\n    manager.addInterval(15, 18)\n    assert manager.getIntervals() == [[1, 6], [8, 10], [15, 18]]\n    \n    manager.removeInterval(1, 4)\n    assert manager.getIntervals() == [[5, 6], [8, 10], [15, 18]]\n    \n    manager.removeInterval(15, 17)\n    assert manager.getIntervals() == [[5, 6], [8, 10]]\n    \n    manager.addInterval(10, 12)\n    assert manager.getIntervals() == [[5, 6], [8, 12]]\n    \n    manager.mergeOverlappingIntervals()\n    assert manager.getIntervals() == [[5, 12]]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000010", "row_id": 10, "seed_ids": ["689", "2075", "1670"], "mode": "leetcode", "instruction": "Design a data structure to manage a collection of intervals with the following operations:\n\n- `addInterval(start, end)`: Add a new interval `[start, end]` to the collection.\n- `mergeOverlappingIntervals()`: Merge all overlapping intervals in the collection and return the merged intervals.\n- `removeInterval(start, end)`: Remove the interval `[start, end]` from the collection if it exists.\n- `getIntervals()`: Return the current collection of intervals.\n\nImplement the `IntervalManager` class:\n\n- `IntervalManager()`: Initializes the interval manager.\n- `void addInterval(int start, int end)`: Adds a new interval `[start, end]` to the collection. Ensure no duplicate intervals are added.\n- `List<int[]> mergeOverlappingIntervals()`: Merges all overlapping intervals in the collection and returns the merged intervals as a list of `[start, end]` pairs.\n- `void removeInterval(int start, int end)`: Removes the interval `[start, end]` from the collection if it exists.\n- `List<int[]> getIntervals()`: Returns the current collection of intervals as a list of `[start, end]` pairs.\n\n**Note**: Intervals are represented as `[start, end]` where `start` and `end` are inclusive. The intervals are sorted by their start time."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a matrix `grid` of size `m x n` containing non-negative integers, and a target value `target`, you need to determine if there exists a path from the top-left corner to the bottom-right corner such that the sum of the values along the path is exactly `target`. You can only move rightward or downward at any point in time. If such a path exists, return `true`; otherwise, return `false`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef has_path_with_target(grid, target):\n    \"\"\"\n    Determines if there exists a path from the top-left corner to the bottom-right corner\n    such that the sum of the values along the path is exactly target.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    dp = [[False] * n for _ in range(m)]\n    dp[0][0] = grid[0][0] == target\n    \n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] and grid[i][0] == target - grid[i-1][0]\n    \n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] and grid[0][j] == target - grid[0][j-1]\n    \n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = (dp[i-1][j] and grid[i][j] == target - grid[i-1][j]) or \\\n                       (dp[i][j-1] and grid[i][j] == target - grid[i][j-1])\n    \n    return dp[-1][-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_has_path_with_target():\n    grid = [[1, 3, 2], [1, 5, 1], [4, 2, 1]]\n    target = 9\n    assert has_path_with_target(grid, target) == True\n\ndef test_has_path_with_target_2():\n    grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    target = 2\n    assert has_path_with_target(grid, target) == False\n\ndef test_has_path_with_target_3():\n    grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    target = 10\n    assert has_path_with_target(grid, target) == True\n\ndef test_has_path_with_target_4():\n    grid = [[7], [3], [1]]\n    target = 10\n    assert has_path_with_target(grid, target) == True\n\ndef test_has_path_with_target_5():\n    grid = [[7, 3, 5], [1, 8, 4], [8, 2, 1]]\n    target = 11\n    assert has_path_with_target(grid, target) == False\n\ndef test_has_path_with_target_6():\n    grid = [[0], [0], [0]]\n    target = 0\n    assert has_path_with_target(grid, target) == True\n\ndef test_has_path_with_target_7():\n    grid = [[0, 0], [0, 0]]\n    target = 2\n    assert has_path_with_target(grid, target) == True\n\ndef test_has_path_with_target_8():\n    grid = [[0, 0], [0, 1]]\n    target = 2\n    assert has_path_with_target(grid, target) == True\n\ndef test_has_path_with_target_9():\n    grid = [[0, 0], [0, 1]]\n    target = 3\n    assert has_path_with_target(grid, target) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000011", "row_id": 11, "seed_ids": ["1427", "1300", "174"], "mode": "leetcode", "instruction": "Given a matrix `grid` of size `m x n` containing non-negative integers, and a target value `target`, you need to determine if there exists a path from the top-left corner to the bottom-right corner such that the sum of the values along the path is exactly `target`. You can only move rightward or downward at any point in time. If such a path exists, return `true`; otherwise, return `false`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a function `maxProfitWithTransactionFee` that calculates the maximum profit you can achieve from trading a stock given an array of daily prices and a transaction fee. You can complete as many buy-sell transactions as you like, but you need to pay the transaction fee for each transaction. A transaction consists of buying and then selling one share of the stock. You cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n### Function Signature\n```python\ndef maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    pass\n```\n\n### Constraints\n- `1 <= prices.length <= 5 * 10^4`\n- `0 <= prices[i] <= 10^5`\n- `0 <= fee < 10^5`"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\n\ndef maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    \"\"\"\n    Calculates the maximum profit from trading stocks given the prices and a transaction fee.\n    \n    :param prices: List of daily stock prices.\n    :param fee: Transaction fee for each transaction.\n    :return: Maximum profit possible.\n    \"\"\"\n    cash, hold = 0, -prices[0]  # cash: profit when not holding stock, hold: profit when holding stock\n    \n    for i in range(1, len(prices)):\n        cash, hold = max(cash, hold + prices[i] - fee), max(hold, cash - prices[i])\n    \n    return cash\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_maxProfitWithTransactionFee():\n    assert maxProfitWithTransactionFee([1, 3, 2, 8, 4, 9], 2) == 8\n    assert maxProfitWithTransactionFee([1, 3, 7, 5, 10, 3], 3) == 6\n    assert maxProfitWithTransactionFee([1, 2, 3, 0, 2], 1) == 2\n    assert maxProfitWithTransactionFee([10], 0) == 0\n    assert maxProfitWithTransactionFee([5, 6, 1, 5], 2) == 3\n\ntest_maxProfitWithTransactionFee()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000012", "row_id": 12, "seed_ids": ["1476", "2214", "1720"], "mode": "leetcode", "instruction": "Design a function `maxProfitWithTransactionFee` that calculates the maximum profit you can achieve from trading a stock given an array of daily prices and a transaction fee. You can complete as many buy-sell transactions as you like, but you need to pay the transaction fee for each transaction. A transaction consists of buying and then selling one share of the stock. You cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n### Function Signature\n```python\ndef maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    pass\n```\n\n### Constraints\n- `1 <= prices.length <= 5 * 10^4`\n- `0 <= prices[i] <= 10^5`\n- `0 <= fee < 10^5`"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary tree, return the sum of all left leaves. A leaf is a node with no children, and a left leaf is a leaf that is the left child of its parent. If there are no left leaves, return 0."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef sum_left_leaves(root):\n    \"\"\"\n    Returns the sum of all left leaves in a binary tree.\n    \"\"\"\n    def dfs(node, is_left):\n        if not node:\n            return 0\n        if not node.left and not node.right and is_left:\n            return node.val\n        return dfs(node.left, True) + dfs(node.right, False)\n    \n    return dfs(root, False)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom typing import List\n\ndef create_tree(nodes: List[TreeNode or None], i: int) -> TreeNode or None:\n    if i >= len(nodes) or not nodes[i]:\n        return None\n    result = TreeNode(nodes[i])\n    result.left = create_tree(nodes, 2 * i + 1)\n    result.right = create_tree(nodes, 2 * i + 2)\n    return result\n\ndef to_list(node: TreeNode) -> List[TreeNode or None]:\n    if not node:\n        return []\n    result = [node.val]\n    result += to_list(node.left) + to_list(node.right)\n    return result\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef test_sum_left_leaves():\n    assert sum_left_leaves(create_tree([3,9,20,None,None,15,7], 0)) == 24\n    assert sum_left_leaves(create_tree([1,2,3,4], 0)) == 6\n    assert sum_left_leaves(create_tree([1,2,3,None,5], 0)) == 5\n    assert sum_left_leaves(create_tree([], 0)) == 0\n\ndef test_sum_left_leaves_edge_cases():\n    assert sum_left_leaves(create_tree([1], 0)) == 0\n    assert sum_left_leaves(create_tree([1,2], 0)) == 2\n    assert sum_left_leaves(create_tree([1,None,2], 0)) == 0\n    assert sum_left_leaves(create_tree([1,None,3,4], 0)) == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000013", "row_id": 13, "seed_ids": ["82", "2008", "1690"], "mode": "leetcode", "instruction": "Given a binary tree, return the sum of all left leaves. A leaf is a node with no children, and a left leaf is a leaf that is the left child of its parent. If there are no left leaves, return 0."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given the root of a binary tree, return the sum of values of all nodes that have an odd-valued parent. If there are no such nodes, return 0. A parent node is considered odd if its value is an odd number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import deque\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef sum_of_odd_parent_nodes(root):\n    \"\"\"\n    Returns the sum of values of all nodes that have an odd-valued parent.\n    \"\"\"\n    if not root:\n        return 0\n    \n    queue = deque([(root, None)])  # (node, parent)\n    total_sum = 0\n    \n    while queue:\n        node, parent = queue.popleft()\n        \n        if parent and parent.val % 2 != 0:\n            total_sum += node.val\n        \n        if node.left:\n            queue.append((node.left, node))\n        if node.right:\n            queue.append((node.right, node))\n    \n    return total_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sum_of_odd_parent_nodes, TreeNode\n\ndef create_tree(*vals):\n    if not vals:\n        return None\n    nodes = [TreeNode(val) if val is not None else None for val in vals]\n    for i, node in enumerate(nodes):\n        if node:\n            parent_idx = (i - 1) // 2\n            if 2 * parent_idx + 1 <= i:\n                node.left = nodes[2 * parent_idx + 1]\n            if 2 * parent_idx + 2 <= i:\n                node.right = nodes[2 * parent_idx + 2]\n    return nodes[0]\n\ndef test_sum_of_odd_parent_nodes():\n    # Example 1\n    root = create_tree(6, 7, 8, 2, 7, 1, 3, None, None, None, 5, 4)\n    assert sum_of_odd_parent_nodes(root) == 18\n    \n    # Example 2\n    root = create_tree(15, 7)\n    assert sum_of_odd_parent_nodes(root) == 0\n    \n    # Example 3\n    root = create_tree(8, None, 10, None, 2, None, 1, None, None, None, 6)\n    assert sum_of_odd_parent_nodes(root) == 12\n\n    # Additional test case with no odd parent nodes\n    root = create_tree(2, 3, 4)\n    assert sum_of_odd_parent_nodes(root) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000014", "row_id": 14, "seed_ids": ["2607", "1880", "1315"], "mode": "leetcode", "instruction": "Given the root of a binary tree, return the sum of values of all nodes that have an odd-valued parent. If there are no such nodes, return 0. A parent node is considered odd if its value is an odd number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given two strings `text1` and `text2`, both consisting of lowercase English letters. Your task is to find the length of the longest **common subsequence** (LCS) between the two strings. Additionally, you are provided with a **mask** string `mask`, where each character is either `'0'` or `'1'`. You need to modify the LCS such that each character in the LCS is replaced by the corresponding character in `mask` if the corresponding position in `mask` is `'1'`, and kept as is if the corresponding position in `mask` is `'0'`. Return the modified LCS as a string.\n\n**Note**: A **common subsequence** is a sequence that can be derived from both strings by deleting some characters without changing the order of the remaining characters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_common_subsequence(text1, text2, mask):\n    \"\"\"\n    Returns the modified longest common subsequence between text1 and text2,\n    where each character in the LCS is replaced by the corresponding character\n    in mask if the corresponding position in mask is '1'.\n    \"\"\"\n    m, n = len(text1), len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if text1[i - 1] == text2[j - 1] and mask[i - 1] == '1':\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # Reconstruct the LCS\n    result = []\n    i, j = m, n\n    while i > 0 and j > 0:\n        if text1[i - 1] == text2[j - 1] and mask[i - 1] == '1':\n            result.append(text1[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    return ''.join(result[::-1])\n\n# Example usage:\nresult = longest_common_subsequence(\"abcde\", \"ace\", \"10111\")\nprint(result)  # Output: \"ace\"\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import longest_common_subsequence\n\ndef test_lcs_with_mask():\n    assert longest_common_subsequence(\"abcde\", \"ace\", \"10111\") == \"ace\"\n    assert longest_common_subsequence(\"abcdef\", \"acdf\", \"010011\") == \"cdf\"\n    assert longest_common_subsequence(\"programming\", \"gaming\", \"0001001110\") == \"gmingm\"\n    assert longest_common_subsequence(\"abcdefghijklmnopqrstuvwxyz\", \"bcdefghijklmnopqrstuvwxyza\", \"1111111111111111111111100000\") == \"bcdefghijklmnopqrstuvwxyza\"\n    assert longest_common_subsequence(\"xyz\", \"xyz\", \"000\") == \"xyz\"\n    assert longest_common_subsequence(\"\", \"abc\", \"111\") == \"\"\n    assert longest_common_subsequence(\"abc\", \"\", \"000\") == \"\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000015", "row_id": 15, "seed_ids": ["2500", "1736", "1898"], "mode": "leetcode", "instruction": "You are given two strings `text1` and `text2`, both consisting of lowercase English letters. Your task is to find the length of the longest **common subsequence** (LCS) between the two strings. Additionally, you are provided with a **mask** string `mask`, where each character is either `'0'` or `'1'`. You need to modify the LCS such that each character in the LCS is replaced by the corresponding character in `mask` if the corresponding position in `mask` is `'1'`, and kept as is if the corresponding position in `mask` is `'0'`. Return the modified LCS as a string.\n\n**Note**: A **common subsequence** is a sequence that can be derived from both strings by deleting some characters without changing the order of the remaining characters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a grid of size `m x n` where each cell can either be `0` (land) or `1` (water). You can change any number of `0`s to `1`s to form one or more islands. An island is a maximal 4-directionally connected group of `1`s. You want to maximize the number of islands in the grid. What is the maximum number of islands you can form?"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef maxNumberOfIslands(grid):\n    \"\"\"\n    Returns the maximum number of islands that can be formed.\n    \"\"\"\n    if not grid:\n        return 0\n\n    rows, cols = len(grid), len(grid[0])\n    visited = set()\n\n    def dfs(r, c):\n        if (\n            not (0 <= r < rows and 0 <= c < cols)\n            or grid[r][c] == \"0\"\n            or (r, c) in visited\n        ):\n            return 0\n        visited.add((r, c))\n        dfs(r + 1, c)\n        dfs(r - 1, c)\n        dfs(r, c + 1)\n        dfs(r, c - 1)\n        return 1\n\n    return sum(dfs(r, c) for r in range(rows) for c in range(cols) if grid[r][c] == \"1\")\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import maxNumberOfIslands\n\ndef test_maxNumberOfIslands_empty_grid():\n    assert maxNumberOfIslands([]) == 0\n\ndef test_maxNumberOfIslands_one_island():\n    grid = [\n        [\"1\", \"1\", \"0\", \"0\", \"0\"],\n        [\"1\", \"1\", \"0\", \"0\", \"0\"],\n        [\"0\", \"0\", \"1\", \"0\", \"0\"],\n        [\"0\", \"0\", \"0\", \"1\", \"1\"]\n    ]\n    assert maxNumberOfIslands(grid) == 3\n\ndef test_maxNumberOfIslands_no_islands():\n    grid = [\n        [\"0\", \"0\", \"0\", \"0\", \"0\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\"]\n    ]\n    assert maxNumberOfIslands(grid) == 0\n\ndef test_maxNumberOfIslands_all_islands():\n    grid = [\n        [\"1\", \"0\", \"1\", \"0\", \"1\"],\n        [\"0\", \"1\", \"0\", \"1\", \"0\"],\n        [\"1\", \"0\", \"1\", \"0\", \"1\"],\n        [\"0\", \"1\", \"0\", \"1\", \"0\"]\n    ]\n    assert maxNumberOfIslands(grid) == 4\n\ndef test_maxNumberOfIslands_complex_grid():\n    grid = [\n        [\"1\", \"1\", \"0\", \"0\", \"0\"],\n        [\"1\", \"1\", \"0\", \"0\", \"0\"],\n        [\"0\", \"0\", \"1\", \"1\", \"0\"],\n        [\"0\", \"0\", \"1\", \"1\", \"0\"],\n        [\"0\", \"0\", \"0\", \"0\", \"1\"]\n    ]\n    assert maxNumberOfIslands(grid) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000016", "row_id": 16, "seed_ids": ["1168", "1462", "1727"], "mode": "leetcode", "instruction": "You are given a grid of size `m x n` where each cell can either be `0` (land) or `1` (water). You can change any number of `0`s to `1`s to form one or more islands. An island is a maximal 4-directionally connected group of `1`s. You want to maximize the number of islands in the grid. What is the maximum number of islands you can form?"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an array of integers `nums` and an integer `k`, return the maximum number of consecutive 1's in the array if you can flip at most `k` 0's to 1's. The array length is at most 100,000, and `k` is between 0 and the length of the array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_consecutive_ones(nums, k):\n    \"\"\"\n    Returns the maximum number of consecutive 1's in the array if you can flip at most k 0's to 1's.\n    \"\"\"\n    max_ones = 0\n    zero_count = 0\n    start = 0\n\n    for end in range(len(nums)):\n        if nums[end] == 0:\n            zero_count += 1\n\n        while zero_count > k:\n            if nums[start] == 0:\n                zero_count -= 1\n            start += 1\n\n        max_ones = max(max_ones, end - start + 1)\n\n    return max_ones\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_max_consecutive_ones():\n    assert max_consecutive_ones([1,1,1,0,0,0,1,1,1,1,0], 2) == 6\n    assert max_consecutive_ones([0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], 3) == 10\n    assert max_consecutive_ones([0,0,0,1], 0) == 1\n    assert max_consecutive_ones([1,0,1,1,0,0,0,1,1,1,1,1,0,0,1,1], 2) == 12\n    assert max_consecutive_ones([0,0,0,0], 1) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000017", "row_id": 17, "seed_ids": ["35", "1979", "1431"], "mode": "leetcode", "instruction": "Given an array of integers `nums` and an integer `k`, return the maximum number of consecutive 1's in the array if you can flip at most `k` 0's to 1's. The array length is at most 100,000, and `k` is between 0 and the length of the array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a **0-indexed** integer array `nums` of length `n`. You are allowed to perform the following operation on the array any number of times:\n\n- Choose an index `i` such that `0 <= i < n` and set `nums[i]` to `0`.\n\nYou are also given a **0-indexed** array `costs` of the same length, where `costs[i]` represents the cost of setting `nums[i]` to `0`. \n\nYour goal is to make all elements in `nums` equal to `0` with the minimum possible cost. \n\nReturn _the minimum cost to achieve this_."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef minimum_cost(nums, costs):\n    \"\"\"\n    Returns the minimum cost to set all elements in nums to 0.\n    \"\"\"\n    total_cost = 0\n    min_cost = min(costs)  # Find the minimum cost in the costs list\n    \n    for i in range(len(nums)):\n        if nums[i] != 0:\n            total_cost += min_cost  # Use the minimum cost to set nums[i] to 0\n    \n    return total_cost\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_minimum_cost():\n    assert minimum_cost([1,2,3], [10,15,20]) == 10\n    assert minimum_cost([3,1,1,1], [10,1,1,1]) == 12\n    assert minimum_cost([3,1,2], [4,2,1]) == 4\n\ndef test_minimum_cost_with_zeros():\n    assert minimum_cost([0,0,0], [1,2,3]) == 0\n    assert minimum_cost([0,0,0], [100,100,100]) == 0\n\ndef test_minimum_cost_all_elements():\n    assert minimum_cost([1,1,1,1], [2,2,2,2]) == 8\n    assert minimum_cost([1,1,1,1,1], [1,2,3,4,5]) == 5\n\ndef test_minimum_cost_example():\n    assert minimum_cost([2,2,3,1,1,0], [10,10,10,10,10,10]) == 20\n    assert minimum_cost([1,2,3], [0,0,0]) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000018", "row_id": 18, "seed_ids": ["2482", "2440", "1887"], "mode": "leetcode", "instruction": "You are given a **0-indexed** integer array `nums` of length `n`. You are allowed to perform the following operation on the array any number of times:\n\n- Choose an index `i` such that `0 <= i < n` and set `nums[i]` to `0`.\n\nYou are also given a **0-indexed** array `costs` of the same length, where `costs[i]` represents the cost of setting `nums[i]` to `0`. \n\nYour goal is to make all elements in `nums` equal to `0` with the minimum possible cost. \n\nReturn _the minimum cost to achieve this_."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically smallest substring that can be formed by rearranging any number of characters within the string. A substring is defined as a contiguous sequence of characters within a string.\n\nReturn the lexicographically smallest substring found. If the string is empty or consists of a single character, return the string itself."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_smallest_substring(s: str) -> str:\n    \"\"\"\n    Returns the lexicographically smallest substring of the given string.\n    \"\"\"\n    if len(s) <= 1:\n        return s\n    \n    # Convert the string into a list to easily sort it\n    char_list = sorted(s)\n    # The smallest substring will be the first few characters of the sorted list\n    min_char = char_list[0]\n    \n    # Find the starting index of the smallest character in the original string\n    start_index = s.index(min_char)\n    \n    # Try to find the smallest substring starting from the identified character\n    smallest_substring = min_char\n    for i in range(start_index, len(s)):\n        if s[i] < smallest_substring:\n            smallest_substring = s[i]\n            smallest_start = i\n            smallest_end = i + 1\n        elif s[i] == smallest_substring:\n            # If current character is the same as the smallest, extend the substring\n            smallest_end += 1\n    \n    return s[smallest_start:smallest_end]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_find_smallest_substring_empty_string():\n    assert find_smallest_substring(\"\") == \"\"\n\ndef test_find_smallest_substring_single_character():\n    assert find_smallest_substring(\"a\") == \"a\"\n\ndef test_find_smallest_substring_simple():\n    assert find_smallest_substring(\"baa\") == \"aab\"\n\ndef test_find_smallest_substring_repeated_characters():\n    assert find_smallest_substring(\"bbbaaaba\") == \"aaaaab\"\n\ndef test_find_smallest_substring_with_lexicographical_check():\n    assert find_smallest_substring(\"abc\") == \"abc\"\n    assert find_smallest_substring(\"dcba\") == \"abcd\"\n    assert find_smallest_substring(\"ababc\") == \"aabbc\"\n    assert find_smallest_substring(\"leetcode\") == \"cdeo\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000019", "row_id": 19, "seed_ids": ["2432", "2215", "554"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically smallest substring that can be formed by rearranging any number of characters within the string. A substring is defined as a contiguous sequence of characters within a string.\n\nReturn the lexicographically smallest substring found. If the string is empty or consists of a single character, return the string itself."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` (a string consisting only of '0's and '1's), you are allowed to perform the following operation any number of times: choose any two adjacent characters and flip them (i.e., change '0' to '1' and '1' to '0'). Your goal is to make the string as long as possible such that it does not contain the substring \"010\". Return the maximum length of the string you can achieve.\n\n**Example:**\n\n```python\nInput: s = \"110\"\nOutput: 3\nExplanation: We can flip the last two characters to get \"111\", which does not contain \"010\" as a substring.\n```\n\n**Constraints:**\n\n- `1 <= s.length <= 1000`\n- `s` consists only of '0's and '1's."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_length(s):\n    \"\"\"\n    Returns the maximum length of a binary string s after performing the specified operation\n    such that the string does not contain the substring \"010\".\n    \"\"\"\n    dp = [[[0, 0, 0] for _ in range(len(s) + 1)] for _ in range(len(s) + 1)]\n    for i in range(len(s), -1, -1):\n        for j in range(len(s), -1, -1):\n            if i == len(s):\n                if j == len(s):\n                    dp[i][j][0] = 0\n                    dp[i][j][1] = 0\n                    dp[i][j][2] = 0\n                elif s[i] == '0':\n                    dp[i][j][1] = 1 + dp[i + 1][j][1] + dp[i + 1][j][2]\n                    dp[i][j][2] = dp[i + 1][j][2]\n                else:\n                    dp[i][j][1] = 1 + dp[i + 1][j][1]\n                    dp[i][j][2] = 1 + dp[i + 1][j][2]\n            elif j == len(s):\n                if s[i] == '0':\n                    dp[i][j][1] = 1 + dp[i][j + 1][1] + dp[i][j + 1][0]\n                    dp[i][j][2] = 1 + dp[i][j + 1][0] + dp[i][j + 1][2]\n                else:\n                    dp[i][j][0] = 1 + dp[i][j + 1][0] + dp[i][j + 1][1]\n                    dp[i][j][1] = 1 + dp[i][j + 1][1]\n                    dp[i][j][2] = 1 + dp[i][j + 1][2]\n            else:\n                if s[i] == '0':\n                    dp[i][j][1] = 1 + dp[i + 1][j][1] + dp[i + 1][j][2]\n                    dp[i][j][2] = dp[i + 1][j][2]\n                else:\n                    dp[i][j][1] = 1 + dp[i + 1][j][1]\n                    dp[i][j][2] = 1 + dp[i + 1][j][2]\n    return max(dp[0][0])\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_max_length_simple_case():\n    assert max_length(\"110\") == 3\n\ndef test_max_length_all_zeros():\n    assert max_length(\"000\") == 3\n\ndef test_max_length_all_ones():\n    assert max_length(\"111\") == 3\n\ndef test_max_length_complex_case():\n    assert max_length(\"1001010\") == 5\n\ndef test_max_length_single_character():\n    assert max_length(\"1\") == 1\n\ndef test_max_length_with_initial_0():\n    assert max_length(\"01100110\") == 8\n\ndef test_max_length_with_alternating_01():\n    assert max_length(\"01010101\") == 4\n\ndef test_max_length_empty_string():\n    assert max_length(\"\") == 0\n\ndef test_max_length_long_string():\n    assert max_length(\"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\") == 32\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000020", "row_id": 20, "seed_ids": ["803", "1422", "1678"], "mode": "leetcode", "instruction": "Given a binary string `s` (a string consisting only of '0's and '1's), you are allowed to perform the following operation any number of times: choose any two adjacent characters and flip them (i.e., change '0' to '1' and '1' to '0'). Your goal is to make the string as long as possible such that it does not contain the substring \"010\". Return the maximum length of the string you can achieve.\n\n**Example:**\n\n```python\nInput: s = \"110\"\nOutput: 3\nExplanation: We can flip the last two characters to get \"111\", which does not contain \"010\" as a substring.\n```\n\n**Constraints:**\n\n- `1 <= s.length <= 1000`\n- `s` consists only of '0's and '1's."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary search tree (BST) and an integer `k`, write a function to find the `k`th smallest element in the tree. Ensure your solution does not modify the tree."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass TreeNode:\n    \"\"\"Definition for a binary tree node.\"\"\"\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef kthSmallest(root: TreeNode, k: int) -> int:\n    \"\"\"\n    Find the kth smallest element in a binary search tree without modifying the tree.\n    \"\"\"\n    def inorder(node: TreeNode):\n        if not node:\n            return []\n        return inorder(node.left) + [node.val] + inorder(node.right)\n    \n    return inorder(root)[k - 1]\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef create_bst(*args):\n    \"\"\"Helper function to create a BST from given arguments.\"\"\"\n    nodes = {val: TreeNode(val) for val in args}\n    for i, (val, left, right) in enumerate(zip(args, [args[i + 1] for i in range(len(args) - 1)], [None if i + 2 >= len(args) else args[i + 2] for i in range(len(args) - 1)])):\n        nodes[val].left = nodes[left] if left is not None else None\n        nodes[val].right = nodes[right] if right is not None else None\n    return nodes[args[0]]\n\ndef test_kthSmallest():\n    root = create_bst(3, 1, 4, 0, 2)\n    assert kthSmallest(root, 1) == 0\n    assert kthSmallest(root, 2) == 1\n    assert kthSmallest(root, 3) == 2\n    assert kthSmallest(root, 4) == 3\n    assert kthSmallest(root, 5) == 4\n\ndef test_kthSmallest_large_tree():\n    root = create_bst(5, 3, 7, 2, 4, None, 8, 1, None, None, None, None, 6, None, 9)\n    assert kthSmallest(root, 1) == 1\n    assert kthSmallest(root, 8) == 7\n    assert kthSmallest(root, 9) == 9\n\ndef test_kthSmallest_empty_tree():\n    assert kthSmallest(None, 1) is None\n\ndef test_kthSmallest_single_node_tree():\n    root = create_bst(5)\n    assert kthSmallest(root, 1) == 5\n\ndef test_kthSmallest_out_of_bounds():\n    root = create_bst(5)\n    assert kthSmallest(root, 2) is None\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000021", "row_id": 21, "seed_ids": ["61", "79", "623"], "mode": "leetcode", "instruction": "Given a binary search tree (BST) and an integer `k`, write a function to find the `k`th smallest element in the tree. Ensure your solution does not modify the tree."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, return the **length** of the longest **palindromic** substring in `s`. A **palindromic** string is a string that reads the same backward as forward."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_palindromic_substring(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest palindromic substring in the given string s.\n    \"\"\"\n    if len(s) == 0:\n        return 0\n    \n    start, end = 0, 0\n    for i in range(len(s)):\n        len1 = expand_around_center(s, i, i)\n        len2 = expand_around_center(s, i, i + 1)\n        max_len = max(len1, len2)\n        if max_len > end - start:\n            start = i - (max_len - 1) // 2\n            end = i + max_len // 2\n    \n    return end - start + 1\n\ndef expand_around_center(s: str, left: int, right: int) -> int:\n    while left >= 0 and right < len(s) and s[left] == s[right]:\n        left -= 1\n        right += 1\n    return right - left - 1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import longest_palindromic_substring, expand_around_center\n\ndef test_longest_palindromic_substring():\n    assert longest_palindromic_substring(\"babad\") == 3\n    assert longest_palindromic_substring(\"cbbd\") == 2\n    assert longest_palindromic_substring(\"a\") == 1\n    assert longest_palindromic_substring(\"\") == 0\n    assert longest_palindromic_substring(\"racecar\") == 7\n\ndef test_expand_around_center():\n    assert expand_around_center(\"babad\", 1, 1) == 3\n    assert expand_around_center(\"babad\", 0, 0) == 1\n    assert expand_around_center(\"babad\", 2, 2) == 3\n    assert expand_around_center(\"babad\", 3, 3) == 1\n    assert expand_around_center(\"babad\", 4, 4) == 1\n    assert expand_around_center(\"cbbd\", 1, 2) == 2\n    assert expand_around_center(\"cbbd\", 0, 1) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000022", "row_id": 22, "seed_ids": ["201", "513", "1941"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, return the **length** of the longest **palindromic** substring in `s`. A **palindromic** string is a string that reads the same backward as forward."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary search tree (BST) and a node value `target`, return the value of the closest leaf node to the target. A leaf node is a node with no children. The distance between two nodes is defined as the number of edges on the path connecting them. If there are multiple leaf nodes equally close to the target, return the value of any one of them."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef findClosestLeaf(root: TreeNode, target: int) -> int:\n    \"\"\"\n    Finds the value of the closest leaf node to the target in a binary search tree.\n    \"\"\"\n    from collections import deque\n    \n    def dfs(node):\n        if not node:\n            return None\n        if node.val == target:\n            return node, 0\n        left_result, left_dist = dfs(node.left)\n        right_result, right_dist = dfs(node.right)\n        if left_result:\n            return left_result, left_dist + 1\n        if right_result:\n            return right_result, right_dist + 1\n        return None, None\n    \n    closest_leaf, _ = dfs(root)\n    if closest_leaf:\n        closest_leaf_queue = deque([closest_leaf])\n        while closest_leaf_queue:\n            current = closest_leaf_queue.popleft()\n            if not current.left and not current.right:\n                return current.val\n            if current.left:\n                closest_leaf_queue.append(current.left)\n            if current.right:\n                closest_leaf_queue.append(current.right)\n    return -1  # If target is not found\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\nfrom solution import TreeNode, findClosestLeaf\n\n@pytest.fixture\ndef binary_search_tree():\n    \"\"\"\n    Fixture to create a simple binary search tree for testing.\n    \"\"\"\n    node10 = TreeNode(10)\n    node5 = TreeNode(5)\n    node15 = TreeNode(15)\n    node3 = TreeNode(3)\n    node7 = TreeNode(7)\n    node14 = TreeNode(14)\n    node20 = TreeNode(20)\n    \n    node15.left = node14\n    node15.right = node20\n    node10.left = node5\n    node10.right = node15\n    node5.left = node3\n    node5.right = node7\n    node7.left = node14\n    \n    return node10\n\ndef test_find_closest_leaf_root_node(binary_search_tree):\n    assert findClosestLeaf(binary_search_tree, 10) == 7\n\ndef test_find_closest_leaf_leaf_node(binary_search_tree):\n    assert findClosestLeaf(binary_search_tree, 3) == 3\n\ndef test_find_closest_leaf_target_in_between(binary_search_tree):\n    assert findClosestLeaf(binary_search_tree, 11) in [7, 14]  # Both nodes are at the same distance\n\ndef test_find_closest_leaf_target_not_found():\n    with pytest.raises(AssertionError):\n        findClosestLeaf(None, 10)\n\ndef test_find_closest_leaf_distance_from_leaf(binary_search_tree):\n    assert findClosestLeaf(binary_search_tree, 14) in [7, 15]  # Both nodes are at the same distance\n\ndef test_find_closest_leaf_multi_edges(binary_search_tree):\n    node8 = TreeNode(8, left=TreeNode(4, left=TreeNode(1, left=TreeNode(0))), right=TreeNode(9, right=TreeNode(10)))\n    assert findClosestLeaf(node8, 0) == 1\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000023", "row_id": 23, "seed_ids": ["2529", "155", "1650"], "mode": "leetcode", "instruction": "Given a binary search tree (BST) and a node value `target`, return the value of the closest leaf node to the target. A leaf node is a node with no children. The distance between two nodes is defined as the number of edges on the path connecting them. If there are multiple leaf nodes equally close to the target, return the value of any one of them."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary search tree (BST) and an integer `k`. Your task is to find the `k`-th smallest element in the BST. The BST is not necessarily balanced. Return the value of the `k`-th smallest element.\n\nFor example, given the BST with the following structure:\n\n```\n    5\n   / \\\n  3   6\n / \\\n2   4\n```\n\nIf `k = 3`, the output should be `3` because the elements in ascending order are `[2, 3, 4, 5, 6]`, and the 3rd smallest element is `3`.\n\nReturn the value of the `k`-th smallest element in the BST."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef kthSmallest(root, k):\n    \"\"\"\n    Returns the k-th smallest element in a binary search tree.\n    \"\"\"\n    def inorder_traversal(node):\n        return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right) if node else []\n    \n    return inorder_traversal(root)[k-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import TreeNode, kthSmallest\n\ndef test_kthSmallest_case1():\n    # Construct the example tree\n    node5 = TreeNode(5)\n    node3 = TreeNode(3)\n    node6 = TreeNode(6)\n    node2 = TreeNode(2)\n    node4 = TreeNode(4)\n    \n    node5.left = node3\n    node5.right = node6\n    node3.left = node2\n    node3.right = node4\n    \n    assert kthSmallest(node5, 3) == 3\n\ndef test_kthSmallest_case2():\n    node1 = TreeNode(1)\n    assert kthSmallest(node1, 1) == 1\n\ndef test_kthSmallest_case3():\n    node4 = TreeNode(4)\n    node1 = TreeNode(1)\n    node2 = TreeNode(2)\n    node3 = TreeNode(3)\n    node4.left = node2\n    node4.right = node5\n    node2.left = node1\n    node2.right = node3\n    \n    assert kthSmallest(node4, 1) == 1\n    assert kthSmallest(node4, 3) == 3\n\ndef test_kthSmallest_case4():\n    node1 = TreeNode(1)\n    node2 = TreeNode(2)\n    node3 = TreeNode(3)\n    node2.left = node1\n    node2.right = node3\n    \n    assert kthSmallest(node2, 2) == 2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000024", "row_id": 24, "seed_ids": ["1019", "1177", "203"], "mode": "leetcode", "instruction": "You are given a binary search tree (BST) and an integer `k`. Your task is to find the `k`-th smallest element in the BST. The BST is not necessarily balanced. Return the value of the `k`-th smallest element.\n\nFor example, given the BST with the following structure:\n\n```\n    5\n   / \\\n  3   6\n / \\\n2   4\n```\n\nIf `k = 3`, the output should be `3` because the elements in ascending order are `[2, 3, 4, 5, 6]`, and the 3rd smallest element is `3`.\n\nReturn the value of the `k`-th smallest element in the BST."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an array of integers `nums` and a positive integer `k`, return the maximum sum of a non-empty subarray of size `k` that contains at least one negative number. If there is no such subarray, return 0. A subarray is a contiguous part of an array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_subarray_sum(nums, k):\n    \"\"\"\n    Return the maximum sum of a non-empty subarray of size k that contains at least one negative number.\n    If no such subarray exists, return 0.\n    \"\"\"\n    n = len(nums)\n    if n < k or k <= 0:\n        return 0\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    has_negative = False\n    \n    for i in range(n):\n        current_sum += nums[i]\n        if nums[i] < 0:\n            has_negative = True\n        \n        if i >= k - 1:\n            if has_negative:\n                max_sum = max(max_sum, current_sum)\n            current_sum -= nums[i - k + 1]\n            if nums[i - k + 1] < 0:\n                has_negative = False\n    \n    return max(max_sum, 0) if max_sum != float('-inf') else 0\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_subarray_sum\n\ndef test_max_subarray_sum_positive():\n    assert max_subarray_sum([1, 2, 3, -4, 5], 2) == 6\n\ndef test_max_subarray_sum_negative():\n    assert max_subarray_sum([-1, -2, -3, 4, 5], 3) == -6\n\ndef test_max_subarray_sum_no_negative():\n    assert max_subarray_sum([1, 2, 3], 2) == 0\n\ndef test_max_subarray_sum_single_element():\n    assert max_subarray_sum([1], 1) == 1\n\ndef test_max_subarray_sum_k_larger_than_nums():\n    assert max_subarray_sum([1, 2, 3], 4) == 0\n\ndef test_max_subarray_sum_all_negative():\n    assert max_subarray_sum([-5, -3, -10, -1], 2) == -6\n\ndef test_max_subarray_sum_mixed():\n    assert max_subarray_sum([10, -5, 20, -10, -30, 50], 3) == 55\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000025", "row_id": 25, "seed_ids": ["438", "2134", "1288"], "mode": "leetcode", "instruction": "Given an array of integers `nums` and a positive integer `k`, return the maximum sum of a non-empty subarray of size `k` that contains at least one negative number. If there is no such subarray, return 0. A subarray is a contiguous part of an array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an array `nums` consisting of positive integers. A **triangle** is valid if the sum of its two shorter sides is greater than the length of the longest side. Return the number of **unique** triangles that can be formed from the elements of `nums`. Since the answer may be very large, return it **modulo** `109 + 7`. Two triangles are considered **unique** if at least one of their sides has different lengths."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_good_triangles(nums):\n    \"\"\"\n    Returns the number of unique triangles that can be formed from the elements of nums.\n    The result is modulo 10^9 + 7.\n    \"\"\"\n    MOD = 10**9 + 7\n    nums.sort()\n    n = len(nums)\n    count = 0\n\n    for i in range(n - 2):\n        k = i + 2\n        for j in range(i + 1, n - 1):\n            while k < n and nums[i] + nums[j] > nums[k]:\n                k += 1\n            count += k - j - 1\n            count %= MOD\n\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_good_triangles\n\ndef test_count_good_triangles():\n    assert count_good_triangles([2, 1, 3]) == 1\n    assert count_good_triangles([5, 8, 6, 1, 4]) == 2\n    assert count_good_triangles([1, 1, 1, 1]) == 0\n    assert count_good_triangles([10, 20, 30]) == 0\n    assert count_good_triangles([1, 2, 2, 3, 4]) == 3\n\ndef test_modulo_large():\n    assert count_good_triangles([10, 0, 8, 6, 14, 12, 16, 18, 20, 22, 24, 26]) == 22\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000026", "row_id": 26, "seed_ids": ["2031", "335", "1814"], "mode": "leetcode", "instruction": "You are given an array `nums` consisting of positive integers. A **triangle** is valid if the sum of its two shorter sides is greater than the length of the longest side. Return the number of **unique** triangles that can be formed from the elements of `nums`. Since the answer may be very large, return it **modulo** `109 + 7`. Two triangles are considered **unique** if at least one of their sides has different lengths."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of strings `words` and a string `target`, return the number of strings in `words` that contain the `target` as a substring. A substring is a contiguous sequence of characters within a string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_substrings(words, target):\n    \"\"\"\n    Returns the number of strings in words that contain the target as a substring.\n    \"\"\"\n    return sum(target in word for word in words)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_count_substrings():\n    assert count_substrings([\"code\", \"decode\", \"coding\"], \"code\") == 2\n    assert count_substrings([\"hello\", \"world\", \"python\"], \"o\") == 3\n    assert count_substrings([\"ababa\", \"aba\", \"a\", \"b\", \"ba\"], \"aba\") == 2\n    assert count_substrings([\"test\", \"exam\", \"sample\"], \"xyz\") == 0\n    assert count_substrings([\"one\", \"two\", \"three\", \"four\"], \" \") == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000027", "row_id": 27, "seed_ids": ["263", "735", "172"], "mode": "leetcode", "instruction": "Given a list of strings `words` and a string `target`, return the number of strings in `words` that contain the `target` as a substring. A substring is a contiguous sequence of characters within a string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s`, your task is to find the **minimum** number of swaps required to group all the `1`'s present in the string into a contiguous (consecutive) substring. In one swap, you can choose any two indices `i` and `j` (0-indexed) and swap the characters at these indices. Return the **minimum** number of swaps required to achieve this."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_swaps_to_group_ones(s: str) -> int:\n    \"\"\"\n    Returns the minimum number of swaps required to group all '1's into a contiguous substring.\n    \"\"\"\n    ones_count = s.count('1')\n    max_ones_in_window = window_sum = 0\n    left = 0\n    \n    for right in range(len(s)):\n        window_sum += s[right] == '1'\n        \n        if right - left + 1 > ones_count:\n            window_sum -= s[left] == '1'\n            left += 1\n        \n        max_ones_in_window = max(max_ones_in_window, window_sum)\n    \n    return ones_count - max_ones_in_window\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import min_swaps_to_group_ones\n\ndef test_min_swaps_to_group_ones():\n    assert min_swaps_to_group_ones(\"11001\") == 1\n    assert min_swaps_to_group_ones(\"0011100\") == 2\n    assert min_swaps_to_group_ones(\"1111\") == 0\n    assert min_swaps_to_group_ones(\"01010101\") == 4\n    assert min_swaps_to_group_ones(\"00010001000\") == 3\n    assert min_swaps_to_group_ones(\"1001001001\") == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000028", "row_id": 28, "seed_ids": ["665", "1647", "892"], "mode": "leetcode", "instruction": "Given a binary string `s`, your task is to find the **minimum** number of swaps required to group all the `1`'s present in the string into a contiguous (consecutive) substring. In one swap, you can choose any two indices `i` and `j` (0-indexed) and swap the characters at these indices. Return the **minimum** number of swaps required to achieve this."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary string `s` and an integer `k`. A **substring** of `s` is considered **balanced** if the number of `0`s and `1`s in it are equal. You can perform the following operation any number of times: choose any index `i` in the string `s` and flip the character at `i` (i.e., change `'0'` to `'1'` and vice versa). Your task is to find the length of the **longest balanced substring** you can obtain by performing the above operation **at most** `k` times. Return the length of this longest balanced substring.\n\nFor example, if `s = \"1100011\"` and `k = 2`, you can flip the characters at indices `4` and `6` to get `\"1101111\"`, which contains a balanced substring of length `7`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_balanced_substring(s, k):\n    \"\"\"\n    Returns the length of the longest balanced substring after flipping at most k characters.\n    \"\"\"\n    left, num_zeros, max_len = 0, 0, 0\n    for right in range(len(s)):\n        if s[right] == '0':\n            num_zeros += 1\n        while right - left + 1 - num_zeros > k:\n            if s[left] == '0':\n                num_zeros -= 1\n            left += 1\n        max_len = max(max_len, right - left + 1)\n    return max_len\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef test_longest_balanced_substring():\n    assert longest_balanced_substring(\"1100011\", 2) == 7\n    assert longest_balanced_substring(\"1010100\", 1) == 6\n    assert longest_balanced_substring(\"000101010\", 2) == 8\n    assert longest_balanced_substring(\"0010\", 1) == 4\n    assert longest_balanced_substring(\"11010001010010110\", 5) == 13\n\n# Additional edge case\ndef test_empty_string():\n    assert longest_balanced_substring(\"\", 0) == 0\n\n# Case with all zeros\ndef test_all_zeros():\n    assert longest_balanced_substring(\"0000\", 1) == 4\n\n# Case with all ones\ndef test_all_ones():\n    assert longest_balanced_substring(\"1111\", 1) == 2\n\n# Case with a balanced string\ndef test_balanced_string():\n    assert longest_balanced_substring(\"11010101\", 0) == 2\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000029", "row_id": 29, "seed_ids": ["813", "1659", "2012"], "mode": "leetcode", "instruction": "You are given a binary string `s` and an integer `k`. A **substring** of `s` is considered **balanced** if the number of `0`s and `1`s in it are equal. You can perform the following operation any number of times: choose any index `i` in the string `s` and flip the character at `i` (i.e., change `'0'` to `'1'` and vice versa). Your task is to find the length of the **longest balanced substring** you can obtain by performing the above operation **at most** `k` times. Return the length of this longest balanced substring.\n\nFor example, if `s = \"1100011\"` and `k = 2`, you can flip the characters at indices `4` and `6` to get `\"1101111\"`, which contains a balanced substring of length `7`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `text`, you want to use the characters of `text` to form as many instances of the word **\"racecar \"** as possible.  You can use each character in `text` **at most once**. Return the maximum number of instances that can be formed."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import Counter\n\ndef max_racecar_instances(text: str) -> int:\n    \"\"\"\n    Returns the maximum number of \"racecar\" instances that can be formed using characters from text.\n    \"\"\"\n    target_counter = Counter(\"racecar\")\n    text_counter = Counter(text)\n    \n    return min(text_counter[char] // target_counter[char] for char in target_counter if char in text_counter)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_racecar_instances\nfrom collections import Counter\n\ndef test_max_racecar_instances():\n    assert max_racecar_instances(\"racecar\") == 1\n    assert max_racecar_instances(\"racecaracecar\") == 2\n    assert max_racecar_instances(\"racceara\") == 1\n    assert max_racecar_instances(\"rrrraaaacecaarr\") == 2\n    assert max_racecar_instances(\"a\") == 0\n    assert max_racecar_instances(\"racecars\") == 0  # 's' is not in the target\n    assert max_racecar_instances(\"rcrcaaeerr\") == 1\n    assert max_racecar_instances(\"racecarracecar\") == 2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000030", "row_id": 30, "seed_ids": ["1189", "227", "1099"], "mode": "leetcode", "instruction": "Given a string `text`, you want to use the characters of `text` to form as many instances of the word **\"racecar \"** as possible.  You can use each character in `text` **at most once**. Return the maximum number of instances that can be formed."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically largest substring that is a palindrome. A palindrome is a string that reads the same backward as forward. If there are multiple palindromic substrings of the same length, return the one that is lexicographically largest. A substring is any contiguous sequence of characters within a string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_largest_palindrome(s: str) -> str:\n    \"\"\"\n    Returns the lexicographically largest palindromic substring in s.\n    \"\"\"\n    if not s:\n        return \"\"\n    \n    max_palindrome = \"\"\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if substring == substring[::-1] and len(substring) > len(max_palindrome):\n                max_palindrome = substring\n                \n    return max_palindrome\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_largest_palindrome\n\ndef test_find_largest_palindrome_single_char():\n    assert find_largest_palindrome(\"a\") == \"a\"\n\ndef test_find_largest_palindrome_even_length():\n    assert find_largest_palindrome(\"abba\") == \"abba\"\n\ndef test_find_largest_palindrome_odd_length():\n    assert find_largest_palindrome(\"abbac\") == \"abbac\"\n\ndef test_find_largest_palindrome_no_palindrome():\n    assert find_largest_palindrome(\"random\") == \"\"\n\ndef test_find_largest_palindrome_mixed_example():\n    assert find_largest_palindrome(\"babad\") == \"bab\"\n    assert find_largest_palindrome(\"cbbd\") == \"bb\"\n    assert find_largest_palindrome(\"a\") == \"a\"\n    assert find_largest_palindrome(\"ac\") == \"c\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000031", "row_id": 31, "seed_ids": ["1361", "485", "1629"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically largest substring that is a palindrome. A palindrome is a string that reads the same backward as forward. If there are multiple palindromic substrings of the same length, return the one that is lexicographically largest. A substring is any contiguous sequence of characters within a string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an integer array `nums` sorted in **non-decreasing** order. Define a function `f(x)` for each element `x` in `nums` such that `f(x)` is the number of elements in `nums` that are strictly less than `x`. Build and return an integer array `result` with the same length as `nums` such that `result[i]` is equal to the summation of `f(nums[i])` for all `i` in the array. In other words, `result[i]` is equal to `sum(f(nums[i]))` where `0 <= j < nums.length` and `j != i` (0-indexed)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_smaller(nums):\n    \"\"\"\n    Given an integer array nums sorted in non-decreasing order, this function\n    returns the result array where each element is the sum of 'f(nums[j])' for\n    all j != i, where f(x) is the number of elements strictly less than x in nums.\n    \"\"\"\n    # Create a copy of nums to track original indices\n    indexed_nums = sorted(enumerate(nums), key=lambda x: x[1])\n    result = [0] * len(nums)\n    from sortedcontainers import SortedList\n    sl = SortedList()\n    \n    for index, num in indexed_nums:\n        # Get the count of elements strictly less than nums[index]\n        count = sl.bisect_left(num)\n        # Update the sum of f(nums[i]) for current index\n        result[index] = sum(count for count in sl if count < num)\n        # Add the current number to the sorted list\n        sl.add(num)\n    \n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_smaller\n\ndef test_count_smaller():\n    assert count_smaller([6, 5, 4, 8]) == [2, 1, 1, 3]\n    assert count_smaller([2, 0, 1]) == [1, 0, 0]\n    assert count_smaller([10, 10, 10, 0, 0]) == [0, 0, 0, 1, 2]\n    assert count_smaller([1]) == [0]\n    assert count_smaller([3, 2, 1, 0, 4, 5]) == [1, 1, 1, 0, 3, 4]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000032", "row_id": 32, "seed_ids": ["1685", "499", "2501"], "mode": "leetcode", "instruction": "You are given an integer array `nums` sorted in **non-decreasing** order. Define a function `f(x)` for each element `x` in `nums` such that `f(x)` is the number of elements in `nums` that are strictly less than `x`. Build and return an integer array `result` with the same length as `nums` such that `result[i]` is equal to the summation of `f(nums[i])` for all `i` in the array. In other words, `result[i]` is equal to `sum(f(nums[i]))` where `0 <= j < nums.length` and `j != i` (0-indexed)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a matrix `grid` of size `m x n` containing only `0`s and `1`s, where `1` represents land and `0` represents water, a **landlocked area** is a region of land completely surrounded by water, with no connection to the boundary of the grid. You are allowed to fill any number of `0`s (turning them into `1`s) to form additional land. The goal is to connect at least one landlocked area to the boundary to make it non-landlocked. Return the minimum number of `0`s you need to flip to achieve this. If it is impossible to make any landlocked area non-landlocked, return `-1`.\n\n**Example 1:**\n\nInput: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\n\nOutput: 2\n\nExplanation: We can flip two `0`s at positions (1, 1) and (2, 2) to make the landlocked area non-landlocked.\n\n**Example 2:**\n\nInput: grid = [[0,0,0],[0,1,1],[0,1,0]]\n\nOutput: -1\n\nExplanation: It is impossible to make any landlocked area non-landlocked."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_flips_to_connect(grid):\n    \"\"\"\n    Returns the minimum number of 0s to flip to connect at least one landlocked area to the boundary.\n    If it's impossible, returns -1.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y):\n        if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == 0:\n            return\n        grid[x][y] = 0  # Mark as visited by turning it to water\n        # Explore all four directions\n        dfs(x + 1, y)\n        dfs(x - 1, y)\n        dfs(x, y + 1)\n        dfs(x, y - 1)\n    \n    for i in range(1, m - 1):\n        for j in range(1, n - 1):\n            if grid[i][j] == 1:\n                visited = set()\n                dfs(i, j)\n                # Check all four boundaries to see if we can connect a landlocked area\n                for k in range(n):\n                    if grid[0][k] == 0 or grid[m - 1][k] == 0:\n                        return 1\n                    if (0, k) not in visited and grid[0][k] == 1:\n                        return 2\n                    if (m - 1, k) not in visited and grid[m - 1][k] == 1:\n                        return 2\n                for k in range(m):\n                    if grid[k][0] == 0 or grid[k][n - 1] == 0:\n                        return 1\n                    if (k, 0) not in visited and grid[k][0] == 1:\n                        return 2\n                    if (k, n - 1) not in visited and grid[k][n - 1] == 1:\n                        return 2\n                return -1\n    return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import min_flips_to_connect\n\ndef test_min_flips_to_connect():\n    assert min_flips_to_connect([[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]) == 2\n    assert min_flips_to_connect([[0,0,0],[0,1,1],[0,1,0]]) == -1\n    assert min_flips_to_connect([[1,0,0,1],[1,1,1,1],[0,0,0,0],[1,1,0,0]]) == 0\n    assert min_flips_to_connect([[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,0,0,1],[1,1,1,1,1]]) == 1\n    assert min_flips_to_connect([[0,1,0,1,0],[1,0,1,0,1],[0,1,0,1,0],[1,0,1,0,1]]) == 2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000033", "row_id": 33, "seed_ids": ["135", "2357", "1719"], "mode": "leetcode", "instruction": "Given a matrix `grid` of size `m x n` containing only `0`s and `1`s, where `1` represents land and `0` represents water, a **landlocked area** is a region of land completely surrounded by water, with no connection to the boundary of the grid. You are allowed to fill any number of `0`s (turning them into `1`s) to form additional land. The goal is to connect at least one landlocked area to the boundary to make it non-landlocked. Return the minimum number of `0`s you need to flip to achieve this. If it is impossible to make any landlocked area non-landlocked, return `-1`.\n\n**Example 1:**\n\nInput: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\n\nOutput: 2\n\nExplanation: We can flip two `0`s at positions (1, 1) and (2, 2) to make the landlocked area non-landlocked.\n\n**Example 2:**\n\nInput: grid = [[0,0,0],[0,1,1],[0,1,0]]\n\nOutput: -1\n\nExplanation: It is impossible to make any landlocked area non-landlocked."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s`, return the number of distinct **subsequences** of `s` that are palindromic. Since the answer may be very large, return it **modulo** `10^9 + 7`. Note: A string is considered a **subsequence** of another string if it can be derived by deleting some or no characters from the other string without changing the order of the remaining characters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_palindromic_subsequences(s: str) -> int:\n    \"\"\"\n    Returns the number of distinct palindromic subsequences in the given string s.\n    The result is returned modulo 10^9 + 7.\n    \"\"\"\n    mod = 10**9 + 7\n    n = len(s)\n    dp = [[[0 for _ in range(n)] for _ in range(n)] for _ in range(4)]\n    for i in range(n):\n        dp[0][i][i] = 1  # Single character is a palindrome.\n        \n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if s[start] == s[end]:\n                for j in range(1, 4):\n                    dp[j][start][end] = (dp[j-1][start+1][end-1] * 2) % mod\n                    if start + 1 <= end - 1:\n                        dp[j][start][end] += dp[j][start+1][end-1]\n                    if start + 2 <= end:\n                        dp[j][start][end] += dp[j][start+2][end]\n            else:\n                for j in range(1, 4):\n                    dp[j][start][end] = (dp[j-1][start+1][end] + dp[j-1][start][end-1]) % mod\n\n    return (dp[3][0][n-1] - 2 + mod) % mod  # Subtract the count of palindromic subsequences that are not distinct.\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_palindromic_subsequences\n\ndef test_count_palindromic_subsequences():\n    assert count_palindromic_subsequences(\"abc\") == 3\n    assert count_palindromic_subsequences(\"aaa\") == 6\n    assert count_palindromic_subsequences(\"aab\") == 7\n    assert count_palindromic_subsequences(\"odbcocdo\") == 25\n    assert count_palindromic_subsequences(\"a\") == 1\n    assert count_palindromic_subsequences(\"bb\") == 3\n\ndef test_large_string():\n    s = \"abcdefghijklmnopqrstuvwxyz\" * 1000\n    assert 0 < count_palindromic_subsequences(s) <= 10**9 + 7\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000034", "row_id": 34, "seed_ids": ["2484", "291", "249"], "mode": "leetcode", "instruction": "Given a string `s`, return the number of distinct **subsequences** of `s` that are palindromic. Since the answer may be very large, return it **modulo** `10^9 + 7`. Note: A string is considered a **subsequence** of another string if it can be derived by deleting some or no characters from the other string without changing the order of the remaining characters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an integer array `nums` of length `n`, you are asked to perform the following operation exactly `k` times: choose an index `i` (0-indexed) from the array and increment `nums[i]` by 1. After performing these operations, find the maximum possible **GCD** (Greatest Common Divisor) of the array `nums`.\n\nReturn the maximum GCD you can achieve."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\nfrom math import gcd\nfrom functools import reduce\n\ndef maxGCD(nums: List[int], k: int) -> int:\n    \"\"\"\n    Increments an element in nums exactly k times to maximize the GCD of the array.\n    \"\"\"\n    # The optimal strategy is to maximize the GCD by making all elements the same\n    # Since we can increment any element any number of times, we can aim to make all elements equal.\n    # After k increments, we can achieve a maximum GCD by choosing the smallest element as the target value.\n    # Incrementing the smallest elements will ensure the GCD is maximized.\n    current_gcd = 0\n    min_num = min(nums)\n    for _ in range(k):\n        # Since we are incrementing the smallest number, the GCD is likely to increase\n        # Keeping track of the GCD as we increment the smallest element\n        current_gcd = gcd(current_gcd, min_num)\n        min_num += 1\n    return current_gcd\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom typing import List\n\ndef test_maxGCD():\n    assert maxGCD([2, 3, 5, 7], 1) == 1\n    assert maxGCD([6, 9, 3, 15], 3) == 3\n    assert maxGCD([30, 60, 120, 60], 10) == 60\n    assert maxGCD([5, 7, 11], 2) == 1\n    assert maxGCD([10, 10, 10], 1) == 10\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000035", "row_id": 35, "seed_ids": ["987", "1753", "11"], "mode": "leetcode", "instruction": "Given an integer array `nums` of length `n`, you are asked to perform the following operation exactly `k` times: choose an index `i` (0-indexed) from the array and increment `nums[i]` by 1. After performing these operations, find the maximum possible **GCD** (Greatest Common Divisor) of the array `nums`.\n\nReturn the maximum GCD you can achieve."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` (a string consisting only of '0's and '1's), you need to perform a series of operations to make the string alternating. An alternating string is one where no two adjacent characters are the same. You can perform the following operation any number of times: choose any index `i` (1-indexed) and flip the character at `s[i]` (change '0' to '1' or '1' to '0'). \n\nReturn the minimum number of operations required to make the string alternating. If it is impossible to make the string alternating, return `-1`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_flips_to_alternate(s: str) -> int:\n    \"\"\"\n    Returns the minimum number of operations required to make the binary string 's' alternating.\n    \"\"\"\n    len_s = len(s)\n    \n    # Count the number of flips to make the string start with '0' and with '1'\n    flips_starting_with_0 = flips_starting_with_1 = 0\n    \n    for i, char in enumerate(s):\n        expected_char = '0' if i % 2 == 0 else '1'\n        if char != expected_char:\n            flips_starting_with_0 += 1\n    \n    expected_char = '1' if len_s % 2 == 0 else '0'\n    for i, char in enumerate(s):\n        if char != expected_char:\n            flips_starting_with_1 += 1\n    \n    # Since we count the flips for starting with '1', subtract them from the total length to get the flips for starting with '0'\n    result = min(flips_starting_with_0, len_s - flips_starting_with_1)\n    \n    # Check if the string is already alternating\n    if len_s == result:\n        return result\n    \n    return -1 if result == len_s else result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_flips_to_alternate():\n    assert min_flips_to_alternate(\"00110\") == 2, \"Test case 1 failed\"\n    assert min_flips_to_alternate(\"10\") == 1, \"Test case 2 failed\"\n    assert min_flips_to_alternate(\"1111\") == -1, \"Test case 3 failed\"\n    assert min_flips_to_alternate(\"0101010\") == 0, \"Test case 4 failed\"\n    assert min_flips_to_alternate(\"111000\") == 3, \"Test case 5 failed\"\n    assert min_flips_to_alternate(\"00011110\") == 4, \"Test case 6 failed\"\n    print(\"All test cases passed!\")\n\n# Call the test function to run all the tests\ntest_min_flips_to_alternate()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000036", "row_id": 36, "seed_ids": ["994", "746", "1397"], "mode": "leetcode", "instruction": "Given a binary string `s` (a string consisting only of '0's and '1's), you need to perform a series of operations to make the string alternating. An alternating string is one where no two adjacent characters are the same. You can perform the following operation any number of times: choose any index `i` (1-indexed) and flip the character at `s[i]` (change '0' to '1' or '1' to '0'). \n\nReturn the minimum number of operations required to make the string alternating. If it is impossible to make the string alternating, return `-1`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of `n` intervals `intervals`, where each interval is represented as `[start, end]`, find the minimum number of intervals you need to remove so that the remaining intervals do not overlap. An interval `A` overlaps with another interval `B` if `A` and `B` have at least one common point. Return the minimum number of intervals to remove."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_intervals_to_remove(intervals):\n    \"\"\"\n    Finds the minimum number of intervals to remove so that no two remaining intervals overlap.\n    \"\"\"\n    if not intervals:\n        return 0\n    \n    # Sort intervals based on their end times\n    intervals.sort(key=lambda x: x[1])\n    \n    end = intervals[0][1]\n    count = 1  # We will keep at least one interval before removing any\n    \n    for i in range(1, len(intervals)):\n        if intervals[i][0] >= end:\n            end = intervals[i][1]\n            count += 1\n            \n    return len(intervals) - count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_intervals_to_remove():\n    assert min_intervals_to_remove([[1,2], [2,3], [3,4], [1,3]]) == 1, \"Test case 1 failed\"\n    assert min_intervals_to_remove([[1,2], [1,2], [1,2]]) == 2, \"Test case 2 failed\"\n    assert min_intervals_to_remove([[1,2], [2,3]]) == 0, \"Test case 3 failed\"\n    assert min_intervals_to_remove([[1,10], [2,3], [4,5], [6,7], [8,9],[1,1],[2,2]]) == 5, \"Test case 4 failed\"\n    assert min_intervals_to_remove([]) == 0, \"Test case 5 failed\"\n\nif __name__ == \"__main__\":\n    import pytest\n    pytest.main([__file__])\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000037", "row_id": 37, "seed_ids": ["1284", "2165", "1413"], "mode": "leetcode", "instruction": "Given a list of `n` intervals `intervals`, where each interval is represented as `[start, end]`, find the minimum number of intervals you need to remove so that the remaining intervals do not overlap. An interval `A` overlaps with another interval `B` if `A` and `B` have at least one common point. Return the minimum number of intervals to remove."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase letters only, return the _length of the **longest** substring that can be obtained by replacing at most one character in `s` with any other character, such that the resulting substring is an alphabetical continuous string._\n\nFor example, in the string `\"abcbdefg\"`, you can replace the `c` with `a` to get `\"aabdefg\"`, which is an alphabetical continuous string of length 7."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_alphabetical_substring(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring that can be obtained by\n    replacing at most one character in s with any other character such that\n    the resulting substring is an alphabetical continuous string.\n    \"\"\"\n    start, max_len, last_char, consecutives = 0, 1, chr(ord(s[0]) - 1), 0\n\n    for end in range(1, len(s)):\n        if ord(s[end]) == ord(last_char) + 1:\n            consecutives += 1\n        else:\n            consecutives = 1\n        last_char = s[end]\n\n        if consecutives > 1:\n            start = max(start, s.rfind(chr(ord(last_char) - 1), 0, end - consecutives + 1) + 1)\n\n        max_len = max(max_len, end - start + 1)\n\n    return max_len\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import longest_alphabetical_substring\n\ndef test_longest_alphabetical_substring():\n    assert longest_alphabetical_substring(\"abcbdefg\") == 7\n    assert longest_alphabetical_substring(\"abcde\") == 5\n    assert longest_alphabetical_substring(\"a\") == 1\n    assert longest_alphabetical_substring(\"azbcdefg\") == 5\n    assert longest_alphabetical_substring(\"aabbccddeeff\") == 2\n    assert longest_alphabetical_substring(\"zab\") == 3\n    assert longest_alphabetical_substring(\"zzzzzzz\") == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000038", "row_id": 38, "seed_ids": ["2414", "2220", "1929"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase letters only, return the _length of the **longest** substring that can be obtained by replacing at most one character in `s` with any other character, such that the resulting substring is an alphabetical continuous string._\n\nFor example, in the string `\"abcbdefg\"`, you can replace the `c` with `a` to get `\"aabdefg\"`, which is an alphabetical continuous string of length 7."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary search tree (BST) and a range `[low, high]`, return the sum of values of all nodes with a value in the given range. A binary search tree is a tree in which all nodes follow the property that the left subtree of a node contains only nodes with values less than the node's value, and the right subtree of a node contains only nodes with values greater than the node's value."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef rangeSumBST(root, low, high):\n    \"\"\"\n    Calculate the sum of values of all nodes with values within the range [low, high] in a BST.\n    \"\"\"\n    def dfs(node):\n        if not node:\n            return 0\n        if node.val < low:\n            return dfs(node.right)\n        elif node.val > high:\n            return dfs(node.left)\n        else:\n            return node.val + dfs(node.right) + dfs(node.left)\n    \n    return dfs(root)\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\nfrom typing import Optional\n\n# Sample binary search tree nodes setup\ndef setup_tree():\n    \"\"\"\n    Helper function to setup a simple binary search tree.\n    Structure:\n        10\n       /  \\\n      5    15\n     / \\   / \\\n    3   7 13  18\n    \"\"\"\n    root = TreeNode(10)\n    root.left = TreeNode(5, TreeNode(3), TreeNode(7))\n    root.right = TreeNode(15, TreeNode(13), TreeNode(18))\n    return root\n\ndef test_range_sum_bst_within_range():\n    root = setup_tree()\n    assert rangeSumBST(root, 7, 15) == 32  # Sum of 7, 10, 13, 15\n\ndef test_range_sum_bst_below_low():\n    root = setup_tree()\n    assert rangeSumBST(root, 16, 20) == 0  # No nodes within that range\n\ndef test_range_sum_bst_above_high():\n    root = setup_tree()\n    assert rangeSumBST(root, 2, 4) == 0  # No nodes within that range\n\ndef test_range_sum_bst_single_node_low_to_high():\n    root = TreeNode(10)\n    assert rangeSumBST(root, 10, 10) == 10  # Only the root node is in the range\n\ndef test_range_sum_bst_single_leaf():\n    root = TreeNode(10, TreeNode(5), None)\n    assert rangeSumBST(root, 5, 15) == 5  # Only the left child node is in the range\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000039", "row_id": 39, "seed_ids": ["434", "1061", "141"], "mode": "leetcode", "instruction": "Given a binary search tree (BST) and a range `[low, high]`, return the sum of values of all nodes with a value in the given range. A binary search tree is a tree in which all nodes follow the property that the left subtree of a node contains only nodes with values less than the node's value, and the right subtree of a node contains only nodes with values greater than the node's value."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a class `CustomQueue` that supports the following operations:\n\n- `CustomQueue(int capacity)` Initializes the queue with a given capacity.\n- `void enqueue(int value)` Adds a value to the end of the queue if there is still space. Returns `false` if the queue is full.\n- `int dequeue()` Removes and returns the value at the front of the queue. Returns `-1` if the queue is empty.\n- `bool isFull()` Returns `true` if the queue is full, otherwise returns `false`.\n- `bool isEmpty()` Returns `true` if the queue is empty, otherwise returns `false`.\n\nImplement the `CustomQueue` class such that all operations are performed in constant time, i.e., O(1). Additionally, provide a method `getQueue()` that returns the current elements in the queue as a list, maintaining the order of elements as they were added."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass CustomQueue:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.queue = [None] * capacity\n        self.head = 0\n        self.tail = 0\n        self.size = 0\n\n    def enqueue(self, value: int) -> bool:\n        if self.size == self.capacity:\n            return False\n        self.queue[self.tail] = value\n        self.tail = (self.tail + 1) % self.capacity\n        self.size += 1\n        return True\n\n    def dequeue(self) -> int:\n        if self.size == 0:\n            return -1\n        item = self.queue[self.head]\n        self.head = (self.head + 1) % self.capacity\n        self.size -= 1\n        return item\n\n    def isFull(self) -> bool:\n        return self.size == self.capacity\n\n    def isEmpty(self) -> bool:\n        return self.size == 0\n\n    def getQueue(self) -> list:\n        if self.head <= self.tail:\n            return self.queue[self.head:self.tail]\n        return self.queue[self.head:] + self.queue[:self.tail]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_custom_queue():\n    q = CustomQueue(3)\n    assert q.enqueue(1) == True\n    assert q.enqueue(2) == True\n    assert q.enqueue(3) == True\n    assert q.enqueue(4) == False  # Queue is full\n    assert q.isFull() == True\n    assert q.isEmpty() == False\n    assert q.dequeue() == 1\n    assert q.dequeue() == 2\n    assert q.dequeue() == 3\n    assert q.isFull() == False\n    assert q.isEmpty() == False\n    assert q.enqueue(4) == True\n    assert q.enqueue(5) == True\n    assert q.enqueue(6) == False  # Queue is full\n    assert q.getQueue() == [4, 5]\n\ndef test_empty_queue():\n    q = CustomQueue(1)\n    assert q.enqueue(1) == True\n    assert q.isEmpty() == False\n    assert q.dequeue() == 1\n    assert q.isEmpty() == True\n    assert q.isFull() == False\n\ndef test_dequeue_empty():\n    q = CustomQueue(3)\n    assert q.dequeue() == -1\n\ndef test_get_queue():\n    q = CustomQueue(5)\n    assert q.getQueue() == []\n    q.enqueue(1)\n    q.enqueue(2)\n    assert q.getQueue() == [1, 2]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000040", "row_id": 40, "seed_ids": ["1656", "733", "352"], "mode": "leetcode", "instruction": "Design a class `CustomQueue` that supports the following operations:\n\n- `CustomQueue(int capacity)` Initializes the queue with a given capacity.\n- `void enqueue(int value)` Adds a value to the end of the queue if there is still space. Returns `false` if the queue is full.\n- `int dequeue()` Removes and returns the value at the front of the queue. Returns `-1` if the queue is empty.\n- `bool isFull()` Returns `true` if the queue is full, otherwise returns `false`.\n- `bool isEmpty()` Returns `true` if the queue is empty, otherwise returns `false`.\n\nImplement the `CustomQueue` class such that all operations are performed in constant time, i.e., O(1). Additionally, provide a method `getQueue()` that returns the current elements in the queue as a list, maintaining the order of elements as they were added."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an `m x n` binary matrix `grid` representing a map where `0` indicates water and `1` indicates land. A **land bridge** is a path of adjacent `1`s (horizontally or vertically) that connects the leftmost column to the rightmost column. You have a limited number of `k` 0s that can be flipped to 1s to create additional land bridges. Find the minimum number of land bridges needed to connect the leftmost and rightmost columns of the grid, or return `-1` if it is impossible to do so with the given `k` 0s."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_land_bridges(grid, k):\n    \"\"\"\n    Returns the minimum number of land bridges needed to connect the leftmost\n    and rightmost columns of the grid, or -1 if it's impossible with the given k.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    queue = []\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    visited = [[False] * n for _ in range(m)]\n    \n    # Enqueue all land cells in the leftmost column.\n    for i in range(m):\n        if grid[i][0] == 1:\n            queue.append((i, 0))\n            visited[i][0] = True\n    \n    # Perform BFS to find connected components.\n    while queue:\n        x, y = queue.pop(0)\n        if y == n - 1:\n            # If current cell is in the rightmost column, return the number of 0s flipped.\n            return 0 if k >= 0 else -1\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:\n                if grid[nx][ny] == 1:\n                    queue.append((nx, ny))\n                    visited[nx][ny] = True\n                elif k > 0:\n                    queue.append((nx, ny))\n                    visited[nx][ny] = True\n                    k -= 1\n    \n    # Check if rightmost column is reachable.\n    if any(grid[i][n-1] == 1 for i in range(m)):\n        return 1\n    return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_land_bridges():\n    assert min_land_bridges([[0,0,0,0,0,0,0,0]], 1) == 1\n    assert min_land_bridges([[1,0,0,0,0,1,1,1],[0,0,1,1,1,1,0,0],[0,0,1,0,0,1,0,0]], 2) == 1\n    assert min_land_bridges([[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]], 0) == 5\n    assert min_land_bridges([[1,0],[0,0],[0,1]], 1) == -1\n    assert min_land_bridges([[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]], 2) == -1\n\ntest_min_land_bridges()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000041", "row_id": 41, "seed_ids": ["1642", "1217", "994"], "mode": "leetcode", "instruction": "You are given an `m x n` binary matrix `grid` representing a map where `0` indicates water and `1` indicates land. A **land bridge** is a path of adjacent `1`s (horizontally or vertically) that connects the leftmost column to the rightmost column. You have a limited number of `k` 0s that can be flipped to 1s to create additional land bridges. Find the minimum number of land bridges needed to connect the leftmost and rightmost columns of the grid, or return `-1` if it is impossible to do so with the given `k` 0s."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given two binary strings `a` and `b`, return _the sum of `a` and `b` when interpreted as binary numbers._ The length of each string is in the range `[1, 1000]` and consists only of `'0'` or `'1'`. Both `a` and `b` can represent very large numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef add_binary(a: str, b: str) -> str:\n    \"\"\"\n    Given two binary strings a and b, return the sum of a and b when interpreted as binary numbers.\n    \"\"\"\n    return bin(int(a, 2) + int(b, 2))[2:]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_add_binary():\n    assert add_binary(\"11\", \"1\") == \"100\"\n    assert add_binary(\"1010\", \"1011\") == \"10101\"\n    assert add_binary(\"0\", \"0\") == \"0\"\n    assert add_binary(\"1\", \"0\") == \"1\"\n    assert add_binary(\"1111\", \"1111\") == \"11110\"\n    assert add_binary(\"1111\", \"0001\") == \"10000\"\n    assert add_binary(\"1101\", \"1011\") == \"11000\"\n    assert add_binary(\"10101\", \"11111\") == \"110010\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000042", "row_id": 42, "seed_ids": ["1567", "1072", "617"], "mode": "leetcode", "instruction": "Given two binary strings `a` and `b`, return _the sum of `a` and `b` when interpreted as binary numbers._ The length of each string is in the range `[1, 1000]` and consists only of `'0'` or `'1'`. Both `a` and `b` can represent very large numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given two integer arrays `speed` and `efficiency` both of length `n`, and an integer `k`, you are to select a subset of engineers to form a team. Each engineer is represented by their `speed` and `efficiency`. Your goal is to maximize the **product** of the team's **average speed** and the minimum efficiency among the selected engineers. The team must consist of at least `2` engineers. Return the maximum possible product. Since the answer can be a large number, return it modulo `10^9 + 7`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\nfrom functools import lru_cache\nimport math\n\ndef max_product(speed: List[int], efficiency: List[int], k: int) -> int:\n    \"\"\"\n    Returns the maximum product of the team's average speed and the minimum efficiency.\n    \"\"\"\n    engineers = sorted(zip(efficiency, speed), reverse=True)\n    mod = 10**9 + 7\n    n = len(speed)\n    \n    def avg_speed(arr: List[int]) -> float:\n        return sum(arr) / len(arr)\n    \n    @lru_cache(None)\n    def dp(i: int, min_eff: int, k: int) -> int:\n        if k == 0 or i == n:\n            if k == 0:\n                return 0\n            else:\n                return min_eff * avg_speed(speed[:i])\n        take = 0 if min_eff > engineers[i][0] else dp(i + 1, min(min_eff, engineers[i][0]), k - 1) + engineers[i][1]\n        not_take = dp(i + 1, min_eff, k)\n        return max(take, not_take)\n    \n    return dp(0, math.inf, k) % mod\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_product\n\ndef test_max_product():\n    assert max_product([10, 20, 30, 40], [5, 25, 30, 15], 2) == 266\n    assert max_product([7, 3, 1], [1, 2, 3], 2) == 12\n    assert max_product([4, 2, 4, 5, 6], [2, 1, 3, 3, 5], 3) == 18\n    assert max_product([1, 2, 3], [2, 1, 3], 3) == 3\n    assert max_product([10, 10], [5, 5], 2) == 0\n\ndef test_dp_cache():\n    assert max_product([5, 6, 2, 7], [2, 1, 6, 10], 3) == 48\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000043", "row_id": 43, "seed_ids": ["2389", "2505", "1383"], "mode": "leetcode", "instruction": "Given two integer arrays `speed` and `efficiency` both of length `n`, and an integer `k`, you are to select a subset of engineers to form a team. Each engineer is represented by their `speed` and `efficiency`. Your goal is to maximize the **product** of the team's **average speed** and the minimum efficiency among the selected engineers. The team must consist of at least `2` engineers. Return the maximum possible product. Since the answer can be a large number, return it modulo `10^9 + 7`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of `n` flights, each represented as a triplet `(i, j, k)` where `i` is the starting city, `j` is the destination city, and `k` is the cost of the flight. The cities are labeled from `0` to `n-1`. You are also given a list of `m` reservations, each represented as a pair `(i, j)` indicating that a reservation is made from city `i` to city `j`. A reservation is valid if there exists a direct flight between the two cities. \n\nReturn the total cost of the cheapest valid itinerary that visits every city exactly once, or `-1` if no such itinerary exists. You may start and end at any city, and you may revisit cities and use the same flight multiple times. \n\nIf there are multiple valid itineraries with the same total cost, return the one with the lexicographically smallest itinerary. An itinerary is lexicographically smaller if the sequence of city labels is lexicographically smaller."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict\nfrom heapq import heappush, heappop\n\ndef find_cheapest_itinerary(flights, reservations):\n    \"\"\"\n    Finds the cheapest valid itinerary visiting every city exactly once. If no such itinerary exists, returns -1.\n    \"\"\"\n    graph = defaultdict(list)\n    for i, j, k in flights:\n        graph[i].append((j, k))\n    \n    start = None\n    reservation_map = defaultdict(list)\n    for i, j in reservations:\n        reservation_map[i].append(j)\n    \n    def dfs(city, visited, path, cost, cities):\n        nonlocal cheapest_cost, cheapest_path\n        \n        if len(visited) == len(cities):\n            if cost < cheapest_cost or (cost == cheapest_cost and ''.join(map(str, path)) < ''.join(map(str, cheapest_path))):\n                cheapest_cost, cheapest_path = cost, path.copy()\n            return\n        \n        for next_city, flight_cost in graph[city]:\n            if next_city in visited:\n                continue\n            if next_city not in reservation_map[city] and next_city not in visited:\n                continue\n            visited.add(next_city)\n            path.append(next_city)\n            dfs(next_city, visited, path, cost + flight_cost, cities)\n            path.pop()\n            visited.remove(next_city)\n    \n    cities = list(reservation_map.keys())\n    cheapest_cost, cheapest_path = float('inf'), []\n    for city in cities:\n        visited = set([city])\n        path = [city]\n        dfs(city, visited, path, 0, cities)\n    \n    return cheapest_cost if cheapest_cost != float('inf') else -1\n\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom solution import find_cheapest_itinerary\n\ndef test_find_cheapest_itinerary():\n    assert find_cheapest_itinerary([(\"SFO\", \"ATL\", 100), (\"ATL\", \"SFO\", 100), (\"ATL\", \"NHM\", 450), (\"NHM\", \"ATL\", 450), (\"NHM\", \"EWR\", 800)], [(\"SFO\", \"ATL\"), (\"ATL\", \"SFO\")]) == 650\n    assert find_cheapest_itinerary([(\"SFO\", \"ATL\", 100), (\"ATL\", \"SFO\", 100), (\"ATL\", \"NHM\", 450), (\"NHM\", \"ATL\", 450), (\"NHM\", \"EWR\", 800)], [(\"SFO\", \"ATL\"), (\"ATL\", \"NHM\")]) == 1300\n    assert find_cheapest_itinerary([(\"SFO\", \"ATL\", 100), (\"ATL\", \"NHM\", 450), (\"NHM\", \"EWR\", 800), (\"EWR\", \"SFO\", 500), (\"ATL\", \"SFO\", 100)], [(\"SFO\", \"ATL\")]) == 650\n    assert find_cheapest_itinerary([(\"SFO\", \"ATL\", 100), (\"ATL\", \"NHM\", 450), (\"NHM\", \"EWR\", 800), (\"EWR\", \"SFO\", 500), (\"ATL\", \"SFO\", 100)], [(\"SFO\", \"ATL\")], \"SFO\") == -1  # No valid itinerary\n    assert find_cheapest_itinerary([(\"SFO\", \"ATL\", 100), (\"ATL\", \"NHM\", 450), (\"NHM\", \"EWR\", 800)], [(\"SFO\", \"ATL\"), (\"ATL\", \"NHM\"), (\"NHM\", \"EWR\")]) == 1800\n\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000044", "row_id": 44, "seed_ids": ["847", "1820", "963"], "mode": "leetcode", "instruction": "You are given a list of `n` flights, each represented as a triplet `(i, j, k)` where `i` is the starting city, `j` is the destination city, and `k` is the cost of the flight. The cities are labeled from `0` to `n-1`. You are also given a list of `m` reservations, each represented as a pair `(i, j)` indicating that a reservation is made from city `i` to city `j`. A reservation is valid if there exists a direct flight between the two cities. \n\nReturn the total cost of the cheapest valid itinerary that visits every city exactly once, or `-1` if no such itinerary exists. You may start and end at any city, and you may revisit cities and use the same flight multiple times. \n\nIf there are multiple valid itineraries with the same total cost, return the one with the lexicographically smallest itinerary. An itinerary is lexicographically smaller if the sequence of city labels is lexicographically smaller."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary tree, return the vertical order traversal of its nodes' values. Vertical order traversal means starting from the root, traverse the tree column by column from left to right. If two nodes are in the same row and column, order them from left to right based on their values. The tree is represented using a list of `TreeNode` objects, where each `TreeNode` has an integer value, and left and right pointers to its children. If a node is `null`, it should be represented as `None` in the list. For example, the tree\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\ncan be represented as `[3, [9], [20, 15, 7]]`. Return the vertical order traversal as a list of lists, where each sublist represents a vertical level."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict, deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef vertical_order(root):\n    \"\"\"\n    Returns the vertical order traversal of the tree nodes' values.\n    \"\"\"\n    if not root:\n        return []\n    \n    column_table = defaultdict(list)\n    queue = deque([(root, 0)])  # (node, column_index)\n    \n    while queue:\n        node, column_index = queue.popleft()\n        column_table[column_index].append(node.val)\n        \n        if node.left:\n            queue.append((node.left, column_index - 1))\n        if node.right:\n            queue.append((node.right, column_index + 1))\n    \n    # Sort column keys and then return the nodes in the order of columns\n    return [column_table[k] for k in sorted(column_table)]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import TreeNode, vertical_order\n\ndef test_vertical_order_example():\n    root = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7)))\n    expected = [[9], [3, 15], [20], [7]]\n    assert vertical_order(root) == expected\n\ndef test_vertical_order_single_node():\n    root = TreeNode(1)\n    expected = [[1]]\n    assert vertical_order(root) == expected\n\ndef test_vertical_order_empty_tree():\n    assert vertical_order(None) == []\n\ndef test_vertical_order.empty_space_in_tree():\n    root = TreeNode(1, TreeNode(2, None, TreeNode(4)), TreeNode(3))\n    expected = [[2], [1, 3], [4]]\n    assert vertical_order(root) == expected\n\ndef test_vertical_order_multiple_levels():\n    root = TreeNode(1, TreeNode(2, TreeNode(4)), TreeNode(3, None, TreeNode(5)))\n    expected = [[4], [2], [1, 3, 5]]\n    assert vertical_order(root) == expected\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000045", "row_id": 45, "seed_ids": ["223", "1228", "1528"], "mode": "leetcode", "instruction": "Given a binary tree, return the vertical order traversal of its nodes' values. Vertical order traversal means starting from the root, traverse the tree column by column from left to right. If two nodes are in the same row and column, order them from left to right based on their values. The tree is represented using a list of `TreeNode` objects, where each `TreeNode` has an integer value, and left and right pointers to its children. If a node is `null`, it should be represented as `None` in the list. For example, the tree\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\ncan be represented as `[3, [9], [20, 15, 7]]`. Return the vertical order traversal as a list of lists, where each sublist represents a vertical level."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary tree where each node has a unique value. The tree is represented as a list of lists, where each sublist represents a level of the tree. Each element in a sublist is either `None` (indicating a null node) or an integer representing the value of a node. For example:\n\n```python\n[\n    [1],\n    [2, 3],\n    [4, 5, 6, 7]\n]\n```\n\nThis represents a tree with the following structure:\n\n```\n    1\n   / \\\n  2   3\n / \\ / \\\n4  5 6  7\n```\n\nYou are also given a list of **queries** where each query is a 2D integer array `queries[i] = [startValuei, destValuei]`. For each query, you need to find the lowest common ancestor (LCA) of the nodes with values `startValuei` and `destValuei`. The LCA of two nodes is defined as the lowest node that has both nodes in its subtree. If either node does not exist in the tree, return `-1`.\n\nReturn an integer array `answer` where `answer[i]` is the result of the `i-th` query.\n\nFor example, given the tree above and the queries:\n\n```python\nqueries = [[4, 7], [3, 5]]\n```\n\nThe answers would be `[2, 2]`, since the LCA of 4 and 7 is 2, and the LCA of 3 and 5 is also 2."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict\n\ndef build_tree(node_values):\n    \"\"\"\n    Builds a tree from the given node_values, where each node has a unique value.\n    :param node_values: List of lists representing the tree.\n    :return: A dictionary where the key is the node value, and the value is the Node object.\n    \"\"\"\n    # Assuming the tree is binary for simplicity, each node has at most two children\n    tree = defaultdict(list)\n    nodes = {value: i for i, value in enumerate(node_values[0]) if value is not None}\n    root = nodes[1]\n\n    for level in node_values[1:]:\n        parent_i = 0\n        for value in level:\n            if value is not None:\n                parent = node_values[parent_i][0] if parent_i in nodes else None\n                child = nodes[value] if value in nodes else None\n                tree[parent].append(child)\n                tree[child].append(parent)\n            parent_i += 1\n\n    return tree, root\n\ndef find_path_from_root(tree, root, value):\n    \"\"\"\n    Finds the path from the root to the node with the given value.\n    :param tree: The tree structure.\n    :param root: The root node value.\n    :param value: The target node value.\n    :return: A list of node values from root to the target node, or None if the node is not found.\n    \"\"\"\n    stack = [(root, [root])]\n    while stack:\n        node, path = stack.pop()\n        if node == value:\n            return path\n        for child in tree[node]:\n            if child in path:\n                continue\n            stack.append((child, path + [child]))\n    return None\n\ndef lowest_common_ancestor(tree, path1, path2):\n    \"\"\"\n    Finds the LCA of two paths.\n    :param tree: The tree structure.\n    :param path1: Path from root to the first node.\n    :param path2: Path from root to the second node.\n    :return: The LCA node value, or -1 if either node does not exist in the tree.\n    \"\"\"\n    for i in range(min(len(path1), len(path2))):\n        if path1[i] != path2[i]:\n            return path1[i-1]\n    return path1[len(path1) - 1] if len(path1) > len(path2) else path2[len(path2) - 1]\n\ndef findLCA(query, node_values):\n    \"\"\"\n    Finds the LCA for each query.\n    :param query: A list of queries.\n    :param node_values: List of lists representing the tree.\n    :return: A list of LCA node values for each query.\n    \"\"\"\n    tree, root = build_tree(node_values)\n    results = []\n    for start, dest in query:\n        if start in tree and dest in tree:\n            path_start = find_path_from_root(tree, root, start)\n            path_dest = find_path_from_root(tree, root, dest)\n            results.append(lowest_common_ancestor(tree, path_start, path_dest))\n        else:\n            results.append(-1)\n    return results\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_findLCA():\n    node_values = [\n        [1],\n        [2, 3],\n        [4, 5, 6, 7]\n    ]\n    queries = [[4, 7], [3, 5]]\n    expected = [2, 2]\n    assert findLCA(queries, node_values) == expected\n\n    node_values = [\n        [1],\n        [2, 3],\n        [4, 5, 6, 7]\n    ]\n    queries = [[8, 9], [3, 4]]\n    expected = [-1, -1]\n    assert findLCA(queries, node_values) == expected\n\n    node_values = [\n        [1]\n    ]\n    queries = [[1, 1]]\n    expected = [1]\n    assert findLCA(queries, node_values) == expected\n\n    node_values = [\n        [1, 2],\n        [3, None, 4, 5]\n    ]\n    queries = [[1, 5], [4, 3]]\n    expected = [1, -1]\n    assert findLCA(queries, node_values) == expected\n\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000046", "row_id": 46, "seed_ids": ["2055", "565", "2581"], "mode": "leetcode", "instruction": "You are given a binary tree where each node has a unique value. The tree is represented as a list of lists, where each sublist represents a level of the tree. Each element in a sublist is either `None` (indicating a null node) or an integer representing the value of a node. For example:\n\n```python\n[\n    [1],\n    [2, 3],\n    [4, 5, 6, 7]\n]\n```\n\nThis represents a tree with the following structure:\n\n```\n    1\n   / \\\n  2   3\n / \\ / \\\n4  5 6  7\n```\n\nYou are also given a list of **queries** where each query is a 2D integer array `queries[i] = [startValuei, destValuei]`. For each query, you need to find the lowest common ancestor (LCA) of the nodes with values `startValuei` and `destValuei`. The LCA of two nodes is defined as the lowest node that has both nodes in its subtree. If either node does not exist in the tree, return `-1`.\n\nReturn an integer array `answer` where `answer[i]` is the result of the `i-th` query.\n\nFor example, given the tree above and the queries:\n\n```python\nqueries = [[4, 7], [3, 5]]\n```\n\nThe answers would be `[2, 2]`, since the LCA of 4 and 7 is 2, and the LCA of 3 and 5 is also 2."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a class `MyStack` to implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `pop`, `top`, and `empty`). Implement the `MyStack` class:\n\n*   `void push(int x)` Pushes element x to the top of the stack.\n*   `int pop()` Removes the element from the top of the stack and returns it.\n*   `int top()` Returns the element at the top of the stack.\n*   `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.\n\n**Notes:** \n\n*   You must use **only** standard operations of a queue, which means only `enqueue`, `deque`, `size`, and `is empty` operations are valid.\n*   Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import deque\n\nclass MyStack:\n    \"\"\"\n    Implements a stack using two queues.\n    \"\"\"\n    def __init__(self):\n        self.queue1 = deque()\n        self.queue2 = deque()\n    \n    def push(self, x: int) -> None:\n        \"\"\"\n        Pushes element x to the top of the stack.\n        \"\"\"\n        # Always enqueue to queue2\n        self.queue2.append(x)\n        # Swap the queues\n        self.queue1, self.queue2 = self.queue2, self.queue1\n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element from the top of the stack and returns it.\n        \"\"\"\n        # Ensure queue1 has at least one element\n        if self.empty():\n            raise IndexError(\"pop from an empty stack\")\n        # Pop from queue1 which now represents the top of the stack.\n        return self.queue1.popleft()\n\n    def top(self) -> int:\n        \"\"\"\n        Returns the element at the top of the stack.\n        \"\"\"\n        if self.empty():\n            raise IndexError(\"top from an empty stack\")\n        # Return the first element of queue1 which is the top of the stack.\n        return self.queue1[0]\n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns true if the stack is empty, false otherwise.\n        \"\"\"\n        return not self.queue1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_my_stack():\n    stack = MyStack()\n\n    # Test push\n    stack.push(1)\n    stack.push(2)\n    assert stack.top() == 2  # top() should return 2\n    assert stack.pop() == 2  # pop() should return 2\n\n    # Test multiple operations\n    stack.push(3)\n    assert stack.top() == 3  # top() should return 3\n    assert stack.pop() == 3  # pop() should return 3\n    assert stack.pop() == 1  # pop() should return 1\n\n    # Test empty stack\n    assert stack.empty() == True  # empty() should return True\n\n    # Test after all operations\n    stack.push(4)\n    assert stack.top() == 4  # top() should return 4\n    assert stack.pop() == 4  # pop() should return 4\n    assert stack.empty() == True  # empty() should return True\n\n    # Test empty stack again\n    stack.push(5)\n    assert stack.top() == 5  # top() should return 5\n    assert stack.pop() == 5  # pop() should return 5\n    assert stack.empty() == True  # empty() should return True\n\n    # Test pop from empty stack\n    stack.push(6)\n    assert stack.top() == 6  # top() should return 6\n    assert stack.pop() == 6  # pop() should return 6\n    try:\n        stack.pop()  # This should raise an error\n    except IndexError:\n        pass\n    else:\n        assert False, \"Expected IndexError for pop from an empty stack\"\n\n    try:\n        stack.top()  # This should raise an error\n    except IndexError:\n        pass\n    else:\n        assert False, \"Expected IndexError for top from an empty stack\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000047", "row_id": 47, "seed_ids": ["952", "222", "232"], "mode": "leetcode", "instruction": "Design a class `MyStack` to implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `pop`, `top`, and `empty`). Implement the `MyStack` class:\n\n*   `void push(int x)` Pushes element x to the top of the stack.\n*   `int pop()` Removes the element from the top of the stack and returns it.\n*   `int top()` Returns the element at the top of the stack.\n*   `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.\n\n**Notes:** \n\n*   You must use **only** standard operations of a queue, which means only `enqueue`, `deque`, `size`, and `is empty` operations are valid.\n*   Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of `n` jobs where each job is represented by a tuple `(start, end, cpuTime)`, determine the minimum time required to complete all jobs. Each job must be processed in the given order, and the jobs can only be processed one at a time. A job can start immediately after the previous job ends. The goal is to find the total time taken to complete all jobs, including the time spent on the jobs themselves and any waiting time.\n\nFor example, given the jobs `[(1, 3, 2), (2, 5, 3), (7, 9, 1)]`, the total time to complete all jobs is `10` (2 + 3 + 5).\n\nImplement the function `minCompletionTime(jobs)` that takes a list of jobs and returns the minimum completion time."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef minCompletionTime(jobs):\n    \"\"\"\n    Calculates the minimum time required to complete all jobs.\n    \"\"\"\n    total_time = 0\n    current_time = 0\n    for start, end, cpu_time in jobs:\n        current_time = max(current_time, start) + cpu_time\n        total_time = current_time\n    return total_time\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_minCompletionTime():\n    assert minCompletionTime([(1, 3, 2), (2, 5, 3), (7, 9, 1)]) == 10\n    assert minCompletionTime([(1, 2, 1), (3, 5, 2), (4, 6, 2)]) == 7\n    assert minCompletionTime([(1, 5, 1), (2, 3, 2)]) == 6\n    assert minCompletionTime([(1, 2, 4), (3, 5, 3), (6, 8, 5)]) == 13\n    assert minCompletionTime([(1, 10, 1), (2, 20, 2), (3, 30, 3)]) == 62\n\ntest_minCompletionTime()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000048", "row_id": 48, "seed_ids": ["1433", "353", "265"], "mode": "leetcode", "instruction": "Given a list of `n` jobs where each job is represented by a tuple `(start, end, cpuTime)`, determine the minimum time required to complete all jobs. Each job must be processed in the given order, and the jobs can only be processed one at a time. A job can start immediately after the previous job ends. The goal is to find the total time taken to complete all jobs, including the time spent on the jobs themselves and any waiting time.\n\nFor example, given the jobs `[(1, 3, 2), (2, 5, 3), (7, 9, 1)]`, the total time to complete all jobs is `10` (2 + 3 + 5).\n\nImplement the function `minCompletionTime(jobs)` that takes a list of jobs and returns the minimum completion time."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an integer array `nums` and a target integer `target`, find the **shortest contiguous subarray** in `nums` such that the sum of the elements in the subarray is equal to or greater than `target`. If no such subarray exists, return `0`. A **contiguous subarray** is a subarray with at least two elements, and the **sum** of its elements is the sum of the corresponding elements in `nums`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef shortest_subarray_with_at_least_sum(nums, target):\n    \"\"\"\n    Finds the shortest contiguous subarray in `nums` such that the sum of the elements in the subarray is \n    equal to or greater than `target`. If no such subarray exists, returns 0.\n    \"\"\"\n    n = len(nums)\n    start, end = 0, 0\n    current_sum = 0\n    min_length = float('inf')\n    \n    while end < n:\n        while current_sum < target and end < n:\n            current_sum += nums[end]\n            end += 1\n        \n        while current_sum >= target and start < n:\n            min_length = min(min_length, end - start)\n            current_sum -= nums[start]\n            start += 1\n    \n    return min_length if min_length != float('inf') else 0\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_shortest_subarray_with_at_least_sum():\n    assert shortest_subarray_with_at_least_sum([2, 3, 1, 2, 4, 3], 7) == 2\n    assert shortest_subarray_with_at_least_sum([1, 4, 4], 4) == 1\n    assert shortest_subarray_with_at_least_sum([1, 1, 1, 1, 1, 1, 1, 1], 11) == 0\n    assert shortest_subarray_with_at_least_sum([1, 2, 3, 4, 5], 15) == 5\n    assert shortest_subarray_with_at_least_sum([5, 6, 7, 8, 9], 40) == 5\n\n# Test for a case where no subarray meets the criteria\ndef test_no_subarray_meets_criteria():\n    assert shortest_subarray_with_at_least_sum([2, 3, 1, 2], 10) == 0\n\n# Additional test cases\ndef test_mixed_values():\n    assert shortest_subarray_with_at_least_sum([1, 2, 3, -4, 5], 5) == 3\n    assert shortest_subarray_with_at_least_sum([2, 2, 2, 2, 2], 5) == 2\n\ndef test_single_element_non_matches():\n    assert shortest_subarray_with_at_least_sum([10], 15) == 0\n    assert shortest_subarray_with_at_least_sum([1], 10) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000049", "row_id": 49, "seed_ids": ["1848", "1455", "1601"], "mode": "leetcode", "instruction": "Given an integer array `nums` and a target integer `target`, find the **shortest contiguous subarray** in `nums` such that the sum of the elements in the subarray is equal to or greater than `target`. If no such subarray exists, return `0`. A **contiguous subarray** is a subarray with at least two elements, and the **sum** of its elements is the sum of the corresponding elements in `nums`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an integer `n`, you are asked to find the number of ways to represent `n` as a sum of consecutive positive integers. For example, `5` can be represented as `2 + 3`, which is one way. Return the total number of ways to represent `n` in this manner.\n\nNote: Consecutive positive integers are those where each integer is one more than the previous one, such as `1, 2, 3, ...`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_consecutive_sums(n):\n    \"\"\"\n    Returns the number of ways to represent n as a sum of consecutive positive integers.\n    \"\"\"\n    count = 0\n    k = 1\n    while (k * (k - 1)) // 2 < n:\n        if (n - (k * (k - 1)) // 2) % k == 0:\n            count += 1\n        k += 1\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_consecutive_sums\n\ndef test_count_consecutive_sums_single():\n    assert count_consecutive_sums(5) == 2  # 2 + 3, 5\n\ndef test_count_consecutive_sums_multiple_ways():\n    assert count_consecutive_sums(9) == 3  # 4 + 5, 2 + 3 + 4, 9\n\ndef test_count_consecutive_sums_no_ways():\n    assert count_consecutive_sums(16) == 1  # 8 + 8\n\ndef test_count_consecutive_sums_edge_case():\n    assert count_consecutive_sums(2) == 0  # No way to represent 2 as sum of consecutive positive integers\n\ndef test_count_consecutive_sums_large_number():\n    assert count_consecutive_sums(100) == 6  # Multiple ways to represent 100 as sum of consecutive positive integers\n```"}], "metadata": {"prompt_id": "00000050", "row_id": 50, "seed_ids": ["1057", "1399", "157"], "mode": "leetcode", "instruction": "Given an integer `n`, you are asked to find the number of ways to represent `n` as a sum of consecutive positive integers. For example, `5` can be represented as `2 + 3`, which is one way. Return the total number of ways to represent `n` in this manner.\n\nNote: Consecutive positive integers are those where each integer is one more than the previous one, such as `1, 2, 3, ...`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a class `CustomComparator` that implements a custom sorting algorithm for an array of integers. The sorting algorithm should sort the array in ascending order based on the following rules:\n\n1. Elements at even indices should be sorted in ascending order.\n2. Elements at odd indices should be sorted in descending order.\n\nYour task is to implement the `CustomComparator` class with the following methods:\n\n- `CustomComparator(int[] arr)`: Constructor that initializes the array to be sorted.\n- `void sort()`: Sorts the array according to the rules mentioned above.\n- `int[] getResult()`: Returns the sorted array.\n\nAdditionally, provide a `main` method to test your implementation with a sample array and print the sorted array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass CustomComparator:\n    def __init__(self, arr):\n        \"\"\"\n        Constructor that initializes the array to be sorted.\n        \"\"\"\n        self.arr = arr\n\n    def sort(self):\n        \"\"\"\n        Sorts the array according to the rules mentioned.\n        \"\"\"\n        even_indices = sorted(self.arr[::2])\n        odd_indices = sorted(self.arr[1::2], reverse=True)\n        self.arr = [even if i % 2 == 0 else odd for i, (even, odd) in enumerate(zip(even_indices, odd_indices + self.arr[-1:] * (len(self.arr) % 2)))]\n\n    def get_result(self):\n        \"\"\"\n        Returns the sorted array.\n        \"\"\"\n        return self.arr\n\n\ndef main():\n    arr = [4, 1, 3, 2, 6, 5]\n    comparator = CustomComparator(arr)\n    comparator.sort()\n    print(comparator.get_result())\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_custom_comparator():\n    def helper(arr):\n        comparator = CustomComparator(arr)\n        comparator.sort()\n        even_indices = sorted(arr[::2])\n        odd_indices = sorted(arr[1::2], reverse=True)\n        expected = [even if i % 2 == 0 else odd for i, (even, odd) in enumerate(zip(even_indices, odd_indices + arr[-1:] * (len(arr) % 2)))]\n        assert comparator.get_result() == expected\n\n    helper([4, 1, 3, 2, 6, 5])\n    helper([10, 15, 2, 5, 8, 7, 6, 4])\n    helper([3, 1, 4, 1, 5, 9, 2, 6])\n    helper([11, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n    helper([])\n    helper([1])\n\nimport pytest\n\nif __name__ == \"__main__\":\n    pytest.main()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000051", "row_id": 51, "seed_ids": ["2515", "264", "1656"], "mode": "leetcode", "instruction": "Design a class `CustomComparator` that implements a custom sorting algorithm for an array of integers. The sorting algorithm should sort the array in ascending order based on the following rules:\n\n1. Elements at even indices should be sorted in ascending order.\n2. Elements at odd indices should be sorted in descending order.\n\nYour task is to implement the `CustomComparator` class with the following methods:\n\n- `CustomComparator(int[] arr)`: Constructor that initializes the array to be sorted.\n- `void sort()`: Sorts the array according to the rules mentioned above.\n- `int[] getResult()`: Returns the sorted array.\n\nAdditionally, provide a `main` method to test your implementation with a sample array and print the sorted array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` of length `n`, and a positive integer `k`, you are allowed to perform the following operation **any number of times**: choose any index `i` (0-indexed) and flip the value of `s[i]` (i.e., change `s[i]` from `0` to `1` or from `1` to `0`). A **substring** of `s` is said to be **balanced** if the number of `1`s in the substring is equal to the number of `0`s. \n\nAfter performing the above operations, return the **maximum** possible length of a **balanced** substring of `s`. A balanced substring must have an equal number of `0`s and `1`s. If no such balanced substring can be formed, return `0`.\n\nFor example, if `s = \"00110011\"` and `k = 1`, you can flip the second `0` to `1` to form the balanced substring `\"01110011\"`, which has a length of `6`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_balanced_substring_length(s: str, k: int) -> int:\n    \"\"\"\n    Returns the maximum possible length of a balanced substring of s\n    after flipping at most k characters. A balanced substring has an\n    equal number of '0's and '1's.\n    \"\"\"\n    max_length = 0\n    # Convert the string into -1 for '0' and 1 for '1' to track balance.\n    s = [1 if char == '1' else -1 for char in s]\n    sum_prefix, len_prefix = 0, 0\n    # Record the first occurrence of each prefix sum.\n    seen = {0: -1}\n    for i, num in enumerate(s):\n        sum_prefix += num\n        # Record the first occurrence of this prefix sum.\n        if sum_prefix not in seen:\n            seen[sum_prefix] = i\n        # If the current length minus the length at the first occurrence\n        # of the current prefix sum is <= k, it means we can balance.\n        if sum_prefix in seen and (i - seen[sum_prefix] <= k + 1):\n            max_length = max(max_length, i - seen[sum_prefix])\n        # If the prefix sum + k can form a balanced substring, update max_length.\n        if sum_prefix + k in seen and (i - seen[sum_prefix + k] <= k + 1):\n            max_length = max(max_length, i - seen[sum_prefix + k])\n    return max_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_max_balanced_substring_length():\n    assert max_balanced_substring_length(\"00110011\", 1) == 6\n    assert max_balanced_substring_length(\"00110011101111\", 4) == 12\n    assert max_balanced_substring_length(\"00000\", 3) == 2\n    assert max_balanced_substring_length(\"111111\", 2) == 4\n    assert max_balanced_substring_length(\"11000\", 0) == 0\n    assert max_balanced_substring_length(\"00110011\", 0) == 4\n    assert max_balanced_substring_length(\"11110000\", 1) == 6\n    assert max_balanced_substring_length(\"01010101\", 2) == 8\n\ndef test_single_character():\n    assert max_balanced_substring_length(\"1\", 1) == 2\n\ndef test_all_zeros_with_flips():\n    assert max_balanced_substring_length(\"0000\", 3) == 6\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000052", "row_id": 52, "seed_ids": ["1252", "828", "2560"], "mode": "leetcode", "instruction": "Given a binary string `s` of length `n`, and a positive integer `k`, you are allowed to perform the following operation **any number of times**: choose any index `i` (0-indexed) and flip the value of `s[i]` (i.e., change `s[i]` from `0` to `1` or from `1` to `0`). A **substring** of `s` is said to be **balanced** if the number of `1`s in the substring is equal to the number of `0`s. \n\nAfter performing the above operations, return the **maximum** possible length of a **balanced** substring of `s`. A balanced substring must have an equal number of `0`s and `1`s. If no such balanced substring can be formed, return `0`.\n\nFor example, if `s = \"00110011\"` and `k = 1`, you can flip the second `0` to `1` to form the balanced substring `\"01110011\"`, which has a length of `6`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a rectangular grid of size `m x n`, you are initially positioned at the top-left cell `(0, 0)`. You are allowed to move either down or right at any point in time. Each cell in the grid contains a unique integer. Design a function that returns the lexicographically smallest path of length `k` from the starting cell to the bottom-right cell `(m-1, n-1)`. A path is defined as a sequence of `k` cells from the grid, starting from `(0, 0)` and ending at `(m-1, n-1)`. The path must follow the movement rules (only down or right) and the cells must be distinct. The cells in the path are considered in the order they are visited. The lexicographically smallest path is the one where the sequence of cell values, when concatenated, forms the smallest possible number. For example, if the path is `[5, 7, 8]`, the value is `578`. If the path is `[1, 3, 2]`, the value is `132`. If two paths have the same sequence of cell values, the lexicographically smaller one is the one with the smaller first element."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_smallest_path(grid, k):\n    \"\"\"\n    Returns the lexicographically smallest path of length k from the top-left to the bottom-right cell.\n    \n    :param grid: List[List[int]] - The grid of unique integers.\n    :param k: int - The length of the path.\n    :return: List[int] - The lexicographically smallest path.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    from itertools import combinations\n    \n    def is_valid_path(path):\n        x, y = 0, 0\n        for step in path:\n            dx, dy = step // n, step % n\n            if x + dx >= m or y + dy >= n or (x + dx, y + dy) == (0, 0):\n                return False\n            x, y = x + dx, y + dy\n        return True\n    \n    def paths_from(x, y, length):\n        if length == 1:\n            return [(x, y)]\n        \n        all_paths = set()\n        for dx, dy in [(1, 0), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n:\n                for sub_path in paths_from(nx, ny, length - 1):\n                    if (nx, ny) == (0, 0) or sub_path[-1] != (0, 0):\n                        all_paths.add((*sub_path, (nx, ny)))\n        \n        return list(all_paths)\n    \n    candidates = paths_from(0, 0, k - 1)\n    smallest_path = None\n    \n    for path in candidates:\n        if is_valid_path(path) and (smallest_path is None or path < smallest_path):\n            smallest_path = path + ((m - 1, n - 1),)\n    \n    return [grid[x][y] for x, y in smallest_path]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_simple_case():\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    k = 3\n    assert find_smallest_path(grid, k) == [1, 2, 3]\n\ndef test_more_complex():\n    grid = [[5, 9, 3], [4, 1, 6], [7, 8, 2]]\n    k = 4\n    assert find_smallest_path(grid, k) == [1, 3, 2, 6]\n\ndef test_large_k():\n    grid = [[10], [11], [12]]\n    k = 3\n    assert find_smallest_path(grid, k) == [10, 11, 12]\n\ndef test (*(([\"[1, 2, 3], [4, 5, 6], [7, 8, 9]\", 3], ['[1, 2, 3], [4, 5, 6], [7, 8, 9]\", 3])),\n           ([\"[5, 9, 3], [4, 1, 6], [7, 8, 2]\", 4], ['[1, 3, 2, 6]'), ([\"[10], [11], [12]\", 3], ['[10, 11, 12]')))\n\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000053", "row_id": 53, "seed_ids": ["866", "2194", "2503"], "mode": "leetcode", "instruction": "Given a rectangular grid of size `m x n`, you are initially positioned at the top-left cell `(0, 0)`. You are allowed to move either down or right at any point in time. Each cell in the grid contains a unique integer. Design a function that returns the lexicographically smallest path of length `k` from the starting cell to the bottom-right cell `(m-1, n-1)`. A path is defined as a sequence of `k` cells from the grid, starting from `(0, 0)` and ending at `(m-1, n-1)`. The path must follow the movement rules (only down or right) and the cells must be distinct. The cells in the path are considered in the order they are visited. The lexicographically smallest path is the one where the sequence of cell values, when concatenated, forms the smallest possible number. For example, if the path is `[5, 7, 8]`, the value is `578`. If the path is `[1, 3, 2]`, the value is `132`. If two paths have the same sequence of cell values, the lexicographically smaller one is the one with the smaller first element."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given two strings `s` and `t` of equal length. Each string consists of lowercase English letters. A **swap** is defined as exchanging the positions of two characters within a string. Your task is to determine the minimum number of swaps required to make the string `s` an anagram of string `t`. An anagram of a string is another string that contains the same characters, only the order of characters can be different.\n\nFor example, if `s = \"abc\"` and `t = \"bca\"`, you can make `s` an anagram of `t` by swapping `s[0]` and `s[1]`, resulting in `s = \"bca\"`. Return the minimum number of swaps needed to achieve this.\n\nConstraints:\n- `1 <= s.length == t.length <= 100`\n- `s` and `t` consist of lowercase English letters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_swaps_to_anagram(s: str, t: str) -> int:\n    \"\"\"\n    Returns the minimum number of swaps required to make string s an anagram of string t.\n    \"\"\"\n    from collections import Counter\n    s_counter, t_counter = Counter(s), Counter(t)\n    if s_counter != t_counter:\n        return -1  # Early return if s cannot be an anagram of t\n    mismatches = [char for char in s if s.count(char) != t.count(char)]\n    swaps = 0\n    while len(mismatches) > 0:\n        for char in mismatches:\n            if s.count(char) > t.count(char):\n                mismatches.extend([other_char for other_char in t if other_char != char and s.count(other_char) >= t.count(other_char) * 2])\n            s.remove(char)\n            t.remove(char)\n            swaps += 1\n            if len(set(s) & set(t)) == len(t) and len(set(s) - set(t)) == 0:\n                return swaps\n    return swaps\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import min_swaps_to_anagram\n\ndef test_min_swaps_to_anagram():\n    assert min_swaps_to_anagram(\"abc\", \"bca\") == 1\n    assert min_swaps_to_anagram(\"abcd\", \"dacb\") == 3\n    assert min_swaps_to_anagram(\"abcd\", \"dbca\") == 2\n    assert min_swaps_to_anagram(\"aaaa\", \"aaaa\") == 0\n    assert min_swaps_to_anagram(\"abc\", \"def\") == -1  # s cannot be an anagram of t\n\ndef test_min_swaps_to_anagram_edge_cases():\n    assert min_swaps_to_anagram(\"a\", \"a\") == 0\n    assert min_swaps_to_anagram(\"ab\", \"ba\") == 1\n    assert min_swaps_to_anagram(\"abc\", \"abc\") == 0\n    assert min_swaps_to_anagram(\"aabbcc\", \"aabbcc\") == 0\n\ndef test_min_swaps_to_anagram_complex_cases():\n    assert min_swaps_to_anagram(\"aabbcc\", \"cabbac\") == 3\n    assert min_swaps_to_anagram(\"analysis\", \"sitablyna\") == 5\n    assert min_swaps_to_anagram(\"standard\", \"tandstorm\") == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000054", "row_id": 54, "seed_ids": ["1519", "2137", "1638"], "mode": "leetcode", "instruction": "You are given two strings `s` and `t` of equal length. Each string consists of lowercase English letters. A **swap** is defined as exchanging the positions of two characters within a string. Your task is to determine the minimum number of swaps required to make the string `s` an anagram of string `t`. An anagram of a string is another string that contains the same characters, only the order of characters can be different.\n\nFor example, if `s = \"abc\"` and `t = \"bca\"`, you can make `s` an anagram of `t` by swapping `s[0]` and `s[1]`, resulting in `s = \"bca\"`. Return the minimum number of swaps needed to achieve this.\n\nConstraints:\n- `1 <= s.length == t.length <= 100`\n- `s` and `t` consist of lowercase English letters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times:\n\n- Pick any two adjacent characters in `s` and replace them with a single character that is the **lexicographically smallest** character among them. For example, `ab` can be replaced with `a`, and `bb` can be replaced with `b`.\n\nReturn _the lexicographically smallest string that can be obtained by applying the above operation any number of times._\n\nExample:\n```python\nInput: s = \"cbaaaabc\"\nOutput: \"aaaabca\"\nExplanation:\nFirst, replace \"cba\" to get \"aabaaabc\".\nThen, replace \"aabaaabc\" to get \"aaaabca\".\n```"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef smallest_string(s):\n    \"\"\"\n    Returns the lexicographically smallest string that can be obtained by replacing\n    any two adjacent characters with their lexicographically smallest character.\n    \"\"\"\n    stack = []\n    for char in s:\n        # Keep popping the stack until it's empty or the top of the stack is smaller than the current character\n        while stack and stack[-1] > char:\n            stack.pop()\n        stack.append(char)\n    return ''.join(stack)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_smallest_string():\n    assert smallest_string(\"cbaaaabc\") == \"aaaabca\"\n    assert smallest_string(\"bbb\") == \"b\"\n    assert smallest_string(\"abcde\") == \"abcde\"\n    assert smallest_string(\"zyxwvutsrq\") == \"q\"\n    assert smallest_string(\"a\") == \"a\"\n    assert smallest_string(\"aab\") == \"a\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000055", "row_id": 55, "seed_ids": ["96", "427", "2347"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times:\n\n- Pick any two adjacent characters in `s` and replace them with a single character that is the **lexicographically smallest** character among them. For example, `ab` can be replaced with `a`, and `bb` can be replaced with `b`.\n\nReturn _the lexicographically smallest string that can be obtained by applying the above operation any number of times._\n\nExample:\n```python\nInput: s = \"cbaaaabc\"\nOutput: \"aaaabca\"\nExplanation:\nFirst, replace \"cba\" to get \"aabaaabc\".\nThen, replace \"aabaaabc\" to get \"aaaabca\".\n```"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an unsorted array of integers `nums`, return the maximum number of **distinct** elements in any **continuous subarray** of size `k`. A **continuous subarray** is defined as a subarray that contains `k` consecutive elements from the original array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict\n\ndef max_distinct_elements(nums, k):\n    \"\"\"\n    Return the maximum number of distinct elements in any continuous subarray of size k.\n    \"\"\"\n    element_count = defaultdict(int)\n    max_distinct = 0\n    distinct_count = 0\n\n    start = 0\n    for end in range(len(nums)):\n        element_count[nums[end]] += 1\n        if element_count[nums[end]] == 1:\n            distinct_count += 1\n\n        if end >= k - 1:\n            max_distinct = max(max_distinct, distinct_count)\n            if element_count[nums[start]] == 1:\n                distinct_count -= 1\n            element_count[nums[start]] -= 1\n            start += 1\n\n    return max_distinct\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_distinct_elements\n\ndef test_max_distinct_elements():\n    assert max_distinct_elements([1,2,3,2,2,1,3], 3) == 3\n    assert max_distinct_elements([1,2,1,2,1,3,3], 3) == 2\n    assert max_distinct_elements([1,2,1,3,4,3,1,2], 4) == 3\n    assert max_distinct_elements([1,1,2,2,3,3,4,4,5,5], 5) == 5\n    assert max_distinct_elements([1,2,1,2,1,2,1], 2) == 2\n    assert max_distinct_elements([1,1,1,1,1,1,1], 2) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000056", "row_id": 56, "seed_ids": ["230", "1433", "674"], "mode": "leetcode", "instruction": "Given an unsorted array of integers `nums`, return the maximum number of **distinct** elements in any **continuous subarray** of size `k`. A **continuous subarray** is defined as a subarray that contains `k` consecutive elements from the original array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` consisting of lowercase English letters. You are also given an integer `k`. You can perform the following operation on the string any number of times:\n\n- Pick any substring of length `k` from `s` and reverse it.\n\nYour task is to determine the lexicographically smallest string that can be obtained after performing the above operation any number of times. Return the resulting string.\n\nExample:\n- If `s = \"cbaebabacd\"` and `k = 3`, you can reverse the substring `\"bac\"` to get `\"cbabcabad\"`. Reversing `\"bac\"` again gives `\"cbabcabad\"` which is the lexicographically smallest string possible. So, the answer is `\"abcabad\"`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef lexicographically_smallest_string(s: str, k: int) -> str:\n    \"\"\"\n    Returns the lexicographically smallest string that can be obtained by reversing any substring of length k.\n    \"\"\"\n    n = len(s)\n    if k >= n:\n        return ''.join(sorted(s))\n    \n    # Precompute the first character and the lexicographically smallest character\n    # that follows each position in the string.\n    first_chars = [s[0]] * n\n    smallest_after = [s[0]] * n\n    for i in range(1, n):\n        first_chars[i] = min(first_chars[i-1], s[i])\n        smallest_after[i] = min(smallest_after[i-1], s[i] if i < k else s[i-k])\n\n    result = list(s)\n\n    i = n - k\n    while i >= 0:\n        if s[i] > smallest_after[i]:\n            # Find the lexicographically smallest character in the range [i, i+k-1] that is strictly greater than the current character\n            j = i\n            while j < i + k and s[j] <= s[i]:\n                j += 1\n            # Swap the found character to position i\n            result[i], result[j] = result[j], result[i]\n            # Reverse the substring to get the smallest lexicographical order\n            result[i+1:i+k+1] = reversed(result[i+1:i+k+1])\n        elif s[i] > first_chars[i]:\n            # Swap the current character with the smallest character in the range [i, i+k-1] that is strictly greater than the first character of the range\n            j = i\n            while j < i + k and s[j] == s[i]:\n                j += 1\n            # Only swap if a different character is found\n            if j < i + k and s[j] > first_chars[i]:\n                result[i], result[j] = result[j], result[i]\n                break\n        i -= 1\n\n    return ''.join(result)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_lexicographically_smallest_string():\n    assert lexicographically_smallest_string(\"cbaebabacd\", 3) == \"abcabad\"\n    assert lexicographically_smallest_string(\"edcba\", 3) == \"cbaed\"\n    assert lexicographically_smallest_string(\"aaa\", 1) == \"aaa\"\n    assert lexicographically_smallest_string(\"baaca\", 3) == \"aaabc\"\n    assert lexicographically_smallest_string(\"abab\", 2) == \"aaba\"\n\ndef test_edge_cases():\n    assert lexicographically_smallest_string(\"a\", 1) == \"a\"\n    assert lexicographically_smallest_string(\"aa\", 2) == \"aa\"\n    assert lexicographically_smallest_string(\"z\", 1) == \"z\"\n    assert lexicographically_smallest_string(\"zg\", 2) == \"gz\"\n    assert lexicographically_smallest_string(\"zzzzz\", 5) == \"zzzzz\"\n\ndef test_non_decreasing_k():\n    assert lexicographically_smallest_string(\"abc\", 1) == \"abc\"\n    assert lexicographically_smallest_string(\"abc\", 2) == \"acb\"\n    assert lexicographically_smallest_string(\"abc\", 3) == \"abc\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000057", "row_id": 57, "seed_ids": ["2285", "637", "848"], "mode": "leetcode", "instruction": "You are given a string `s` consisting of lowercase English letters. You are also given an integer `k`. You can perform the following operation on the string any number of times:\n\n- Pick any substring of length `k` from `s` and reverse it.\n\nYour task is to determine the lexicographically smallest string that can be obtained after performing the above operation any number of times. Return the resulting string.\n\nExample:\n- If `s = \"cbaebabacd\"` and `k = 3`, you can reverse the substring `\"bac\"` to get `\"cbabcabad\"`. Reversing `\"bac\"` again gives `\"cbabcabad\"` which is the lexicographically smallest string possible. So, the answer is `\"abcabad\"`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a **0-indexed** string `s` and an integer `k`, reverse the segment of `s` that starts at index `0` and ends at the index of the **k-th** occurrence of the character `a` (**inclusive**). If the character `a` does not occur `k` times in `s`, do nothing. \n\n*   For example, if `s = \"abcdeaa \"` and `k = 3`, then you should reverse the segment that starts at `0` and ends at `3` (**inclusive**). The resulting string will be `\"aebcd \"`.\n\nReturn the resulting string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef reverse_segment(s: str, k: int, target_char: str = 'a') -> str:\n    \"\"\"\n    Reverses the segment of the string s starting from index 0 up to the k-th occurrence\n    of the target character (inclusive). If the character does not occur k times, returns the original string.\n    \"\"\"\n    count = 0\n    for i, char in enumerate(s):\n        if char == target_char:\n            count += 1\n            if count == k:\n                end_index = i\n                break\n    else:  # If the loop did not break, we didn't find the k-th occurrence of the character\n        return s\n    \n    return s[:i+1][::-1] + s[i+1:] if i + 1 < len(s) else s[:i+1][::-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import reverse_segment\n\ndef test_reverse_segment():\n    assert reverse_segment(\"abcdeaa\", 3) == \"aebcd\"\n    assert reverse_segment(\"abcd\", 2) == \"abcd\"  # 'a' is only found once, so no change\n    assert reverse_segment(\"aabcde\", 2) == \"aaebcd\"  # 'a' is found twice, but in reverse order\n    assert reverse_segment(\"abcdaa\", 4) == \"aabcd\"  # 'a' is found four times, but the segment includes the second 'a'\n    assert reverse_segment(\"aaaaaa\", 1) == \"a\"  # 'a' is found many times, but the segment is only 1 character\n    assert reverse_segment(\"abcdefg\", 0) == \"abcdefg\"  # No 'a' at index 0, so no change\n    assert reverse_segment(\"\", 0) == \"\"  # Empty string, no changes\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000058", "row_id": 58, "seed_ids": ["558", "2000", "1674"], "mode": "leetcode", "instruction": "Given a **0-indexed** string `s` and an integer `k`, reverse the segment of `s` that starts at index `0` and ends at the index of the **k-th** occurrence of the character `a` (**inclusive**). If the character `a` does not occur `k` times in `s`, do nothing. \n\n*   For example, if `s = \"abcdeaa \"` and `k = 3`, then you should reverse the segment that starts at `0` and ends at `3` (**inclusive**). The resulting string will be `\"aebcd \"`.\n\nReturn the resulting string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given two arrays of integers, `nums1` and `nums2`, both of the same length, you are allowed to rearrange the elements of `nums1`. Your task is to find the maximum possible sum of the absolute differences between corresponding elements of `nums1` and `nums2`. In other words, you want to maximize the expression `\u03a3 |nums1[i] - nums2[i]|` for `0 <= i < length(nums1)`. Return this maximum possible sum.\n\nFor example, if `nums1 = [1, 2, 3, 4]` and `nums2 = [2, 1, 4, 3]`, one possible rearrangement of `nums1` could be `[4, 3, 2, 1]`, which would give a sum of `|4-2| + |3-1| + |2-4| + |1-3| = 10`. Find the optimal rearrangement of `nums1` to achieve the highest possible sum."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_absolute_sum(nums1, nums2):\n    \"\"\"\n    Returns the maximum possible sum of the absolute differences between corresponding elements of nums1 and nums2.\n    \"\"\"\n    # The optimal strategy is to sort nums1 and nums2 in reverse and forward order respectively before summing their differences.\n    sorted_nums1 = sorted(nums1)\n    sorted_nums2 = sorted(nums2, reverse=True)\n    return sum(abs(a - b) for a, b in zip(sorted_nums1, sorted_nums2))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_absolute_sum\n\ndef test_max_absolute_sum():\n    assert max_absolute_sum([1, 2, 3, 4], [2, 1, 4, 3]) == 10\n    assert max_absolute_sum([1, 2, 4, 5], [2, 1, 4, 4]) == 10\n    assert max_absolute_sum([1, 1, 1, 1], [4, 4, 4, 4]) == 12\n    assert max_absolute_sum([1], [1]) == 0\n    assert max_absolute_sum([1, 7], [4, 3]) == 8\n    assert max_absolute_sum([6, 12, 8, 10, 2, 5], [7, 1, 4, 8, 2, 9]) == 26\n\n# Test with different random inputs\nimport random\ndef test_random():\n    for _ in range(10):\n        nums1 = [random.randint(1, 100) for _ in range(10)]\n        nums2 = [random.randint(1, 100) for _ in range(10)]\n        assert max_absolute_sum(nums1, nums2) == max_absolute_sum(sorted(nums1, reverse=True), sorted(nums2))\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000059", "row_id": 59, "seed_ids": ["1181", "1859", "1874"], "mode": "leetcode", "instruction": "Given two arrays of integers, `nums1` and `nums2`, both of the same length, you are allowed to rearrange the elements of `nums1`. Your task is to find the maximum possible sum of the absolute differences between corresponding elements of `nums1` and `nums2`. In other words, you want to maximize the expression `\u03a3 |nums1[i] - nums2[i]|` for `0 <= i < length(nums1)`. Return this maximum possible sum.\n\nFor example, if `nums1 = [1, 2, 3, 4]` and `nums2 = [2, 1, 4, 3]`, one possible rearrangement of `nums1` could be `[4, 3, 2, 1]`, which would give a sum of `|4-2| + |3-1| + |2-4| + |1-3| = 10`. Find the optimal rearrangement of `nums1` to achieve the highest possible sum."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of `n` tasks, each with a unique identifier from `1` to `n`. The tasks are to be scheduled on a single machine that processes them sequentially. Each task takes a certain amount of time to complete, which is given by an array `times` of length `n` where `times[i]` is the time required to complete the `i+1`-th task. The machine can skip any task once, but only before it starts processing that task. Once a task is skipped, it cannot be processed. Given `times` and an integer `k` (where `0 <= k <= n`), find the minimum possible time required to complete all tasks if you can skip up to `k` tasks. Return the minimum time."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef minimum_time_to_complete(tasks, k):\n    \"\"\"\n    Return the minimum time to complete all tasks with up to k skips.\n    \"\"\"\n    n = len(tasks)\n    times = sorted(tasks, reverse=True)\n    \n    if k >= n - 1:\n        return sum(tasks)\n    \n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + times[i]\n    \n    def is_possible(mid):\n        nonlocal times\n        if sum(times) - mid <= k:\n            return True\n        \n        for i in range(n):\n            if (prefix_sum[i] - mid) + (sum(times[i + 1:]) - (prefix_sum[-1] - prefix_sum[i + 1])) >= k + 1:\n                return True\n        return False\n    \n    low, high = 0, sum(tasks)\n    while low < high:\n        mid = (low + high) >> 1\n        if is_possible(mid):\n            high = mid\n        else:\n            low = mid + 1\n    return low\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_minimum_time_to_complete():\n    assert minimum_time_to_complete([1, 2, 3, 4], 2) == 6\n    assert minimum_time_to_complete([9, 2, 2, 2, 2, 2, 7], 5) == 15\n    assert minimum_time_to_complete([1, 1, 1], 1) == 2\n    assert minimum_time_to_complete([10], 0) == 10\n    assert minimum_time_to_complete([2, 6, 3, 1, 2, 5], 3) == 10\n\nif __name__ == \"__main__\":\n    pytest.main()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000060", "row_id": 60, "seed_ids": ["2335", "805", "558"], "mode": "leetcode", "instruction": "You are given a list of `n` tasks, each with a unique identifier from `1` to `n`. The tasks are to be scheduled on a single machine that processes them sequentially. Each task takes a certain amount of time to complete, which is given by an array `times` of length `n` where `times[i]` is the time required to complete the `i+1`-th task. The machine can skip any task once, but only before it starts processing that task. Once a task is skipped, it cannot be processed. Given `times` and an integer `k` (where `0 <= k <= n`), find the minimum possible time required to complete all tasks if you can skip up to `k` tasks. Return the minimum time."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary string `s` consisting only of `0`s and `1`s. A **substring** of `s` is called **good** if it does not contain more than one `0`. You are also given an integer `k`. Your task is to find the **maximum** number of **good** substrings that can be obtained by rearranging the characters of `s` and then splitting the string into at most `k` non-empty substrings. Return the maximum number of good substrings you can obtain.\n\nFor example, if `s = \"1001010011\"` and `k = 3`, one possible way to split `s` into good substrings is `\"10010\"`, `\"100\"`, and `\"11\"`, which gives a total of 3 good substrings."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_good_substrings(s: str, k: int) -> int:\n    \"\"\"\n    Returns the maximum number of good substrings that can be obtained by rearranging\n    the characters of s and then splitting the string into at most k non-empty substrings.\n    \"\"\"\n    n = len(s)\n    counts = [0] * (n + 1)\n    for i in range(n):\n        counts[i + 1] = counts[i] + (1 if s[i] == '0' else 0)\n    \n    max_good = 0\n    for i in range(min(n, k) + 1):\n        if counts[i] > 1:\n            break\n        mask = (1 << i) - 1\n        for j in range(i, n, i + 1):\n            if i == 0 or (counts[j + 1] - counts[j - i] > 1):\n                mask |= (1 << (j - i + 1))\n        max_good = max(max_good, bin(mask).count('1'))\n    return max_good\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_max_good_substrings():\n    assert max_good_substrings(\"1001010011\", 3) == 3\n    assert max_good_substrings(\"1000\", 1) == 2\n    assert max_good_substrings(\"100010001000\", 3) == 6\n    assert max_good_substrings(\"1111\", 2) == 3\n    assert max_good_substrings(\"101010\", 4) == 4\n    assert max_good_substrings(\"101010\", 2) == 3\n    assert max_good_substrings(\"1111111\", 2) == 2\n    assert max_good_substrings(\"0000\", 3) == 3\n\npytest.main([\"-v\", __file__])\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000061", "row_id": 61, "seed_ids": ["294", "2562", "1881"], "mode": "leetcode", "instruction": "You are given a binary string `s` consisting only of `0`s and `1`s. A **substring** of `s` is called **good** if it does not contain more than one `0`. You are also given an integer `k`. Your task is to find the **maximum** number of **good** substrings that can be obtained by rearranging the characters of `s` and then splitting the string into at most `k` non-empty substrings. Return the maximum number of good substrings you can obtain.\n\nFor example, if `s = \"1001010011\"` and `k = 3`, one possible way to split `s` into good substrings is `\"10010\"`, `\"100\"`, and `\"11\"`, which gives a total of 3 good substrings."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times:\n\n- Choose any two indices `i` and `j` (0-indexed) where `0 <= i < j < s.length` and `s[i] = 'a'` and `s[j] = 'z'`. Reverse the substring `s[i+1..j-1]`.\n\nYour task is to determine the minimum number of operations required to transform the string `s` into a string where all characters are the same. If it is impossible to achieve such a string, return `-1`.\n\nFor example, given the string `s = \"azbzczbzcz\"`, you can perform the following operations:\n1. Choose `i = 0` and `j = 1` to get `s = \"aabzczbzcz\"`.\n2. Choose `i = 2` and `j = 3` to get `s = \"aaazbzczcz\"`.\n3. Choose `i = 4` and `j = 5` to get `s = \"aaaaaaazcz\"`.\n4. Choose `i = 6` and `j = 7` to get `s = \"aaaaaaaazz\"`.\n5. Choose `i = 8` and `j = 9` to get `s = \"aaaaaaaaaz\"`.\n\nReturn `5` as the answer."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_operations(s):\n    \"\"\"\n    Returns the minimum number of operations required to make all characters in s the same, or -1 if impossible.\n    \"\"\"\n    if 'a' not in s:\n        return 0 if s[0] == 'z' else -1\n    if 'z' not in s:\n        return 0\n    \n    min_ops = float('inf')\n    start = s.find('a')\n    end = s.rfind('z')\n    \n    while start >= 0 and end > start:\n        substring = s[start+1:end]\n        diff = max(0, (substring.count('a') - substring.count('z')))\n        min_ops = min(min_ops, diff)\n        start = s.find('a', start + 1)\n        end = s.rfind('z', 0, end - 1)\n    \n    if min_ops == float('inf'):\n        return -1\n    return min_ops\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_operations():\n    assert min_operations(\"azbzczbzcz\") == 5\n    assert min_operations(\"zzzazzzazz\") == 5\n    assert min_operations(\"zzzzz\") == 0\n    assert min_operations(\"aaaaa\") == 0\n    assert min_operations(\"aaazaaaz\") == 1\n    assert min_operations(\"zzzzzzzzaa\") == -1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000062", "row_id": 62, "seed_ids": ["1442", "522", "2612"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times:\n\n- Choose any two indices `i` and `j` (0-indexed) where `0 <= i < j < s.length` and `s[i] = 'a'` and `s[j] = 'z'`. Reverse the substring `s[i+1..j-1]`.\n\nYour task is to determine the minimum number of operations required to transform the string `s` into a string where all characters are the same. If it is impossible to achieve such a string, return `-1`.\n\nFor example, given the string `s = \"azbzczbzcz\"`, you can perform the following operations:\n1. Choose `i = 0` and `j = 1` to get `s = \"aabzczbzcz\"`.\n2. Choose `i = 2` and `j = 3` to get `s = \"aaazbzczcz\"`.\n3. Choose `i = 4` and `j = 5` to get `s = \"aaaaaaazcz\"`.\n4. Choose `i = 6` and `j = 7` to get `s = \"aaaaaaaazz\"`.\n5. Choose `i = 8` and `j = 9` to get `s = \"aaaaaaaaaz\"`.\n\nReturn `5` as the answer."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` and an integer `k`, return the minimum number of operations required to make exactly `k` characters in the string '1'. In one operation, you can choose any substring of the string and flip all the characters in it (i.e., change '0' to '1' and '1' to '0'). Two strings are considered to be **similar** if they have the same number of '1's. The test cases are generated such that the binary string `s` can always be made to have exactly `k` '1's."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_operations_to_k_ones(s: str, k: int) -> int:\n    \"\"\"\n    Returns the minimum number of operations required to make exactly k characters in the string '1'.\n    \"\"\"\n    n = len(s)\n    left_ones = s.count('1', 0, k)\n    min_ops = left_ones\n\n    for right in range(k, n):\n        left_ones += s[right] == '1'\n        left_ones -= s[right - k] == '1'\n        min_ops = min(min_ops, left_ones)\n    \n    return min_ops\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_operations_to_k_ones():\n    assert min_operations_to_k_ones(\"0001000\", 2) == 1\n    assert min_operations_to_k_ones(\"10001000\", 2) == 2\n    assert min_operations_to_k_ones(\"0000000\", 0) == 0\n    assert min_operations_to_k_ones(\"111111\", 6) == 0\n    assert min_operations_to_k_ones(\"001100110011\", 3) == 3\n    assert min_operations_to_k_ones(\"001100110011\", 4) == 2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000063", "row_id": 63, "seed_ids": ["2449", "1456", "1711"], "mode": "leetcode", "instruction": "Given a binary string `s` and an integer `k`, return the minimum number of operations required to make exactly `k` characters in the string '1'. In one operation, you can choose any substring of the string and flip all the characters in it (i.e., change '0' to '1' and '1' to '0'). Two strings are considered to be **similar** if they have the same number of '1's. The test cases are generated such that the binary string `s` can always be made to have exactly `k` '1's."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary search tree (BST) and a node value `target`, return `true` if the `target` is found in the BST, and `false` otherwise. You may assume that each node in the BST has **uniquely** valued children. Additionally, provide a method to insert a new node with a given value into the BST while maintaining its properties."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_in_bst(root: TreeNode, target: int) -> bool:\n    \"\"\"\n    Searches for the target value in the BST and returns True if found, False otherwise.\n    \"\"\"\n    if root is None:\n        return False\n    if root.val == target:\n        return True\n    elif root.val < target:\n        return find_in_bst(root.right, target)\n    else:\n        return find_in_bst(root.left, target)\n\ndef insert_in_bst(root: TreeNode, val: int) -> TreeNode:\n    \"\"\"\n    Inserts a new node with given value into the BST.\n    \"\"\"\n    if root is None:\n        return TreeNode(val)\n    if val < root.val:\n        root.left = insert_in_bst(root.left, val)\n    else:\n        root.right = insert_in_bst(root.right, val)\n    return root\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import TreeNode, find_in_bst, insert_in_bst\n\ndef test_find_in_bst():\n    # Create a simple BST\n    root = TreeNode(8, TreeNode(3, TreeNode(1), TreeNode(6, None, TreeNode(7))), TreeNode(10, None, TreeNode(14)))\n    assert find_in_bst(root, 3) == True\n    assert find_in_bst(root, 10) == True\n    assert find_in_bst(root, 5) == False\n\ndef test_insert_in_bst():\n    # Create a simple tree and insert nodes\n    root = TreeNode(8)\n    insert_in_bst(root, 3)\n    insert_in_bst(root, 10)\n    assert find_in_bst(root, 3) == True\n    assert find_in_bst(root, 10) == True\n\ndef test_insertion_multiple_nodes():\n    root = TreeNode(8)\n    insert_in_bst(root, 3)\n    insert_in_bst(root, 10)\n    insert_in_bst(root, 1)\n    assert find_in_bst(root, 3) == True\n    assert find_in_bst(root, 10) == True\n    assert find_in_bst(root, 1) == True\n    assert find_in_bst(root, 14) == False  # Before insertion\n    insert_in_bst(root, 14)\n    assert find_in_bst(root, 14) == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000064", "row_id": 64, "seed_ids": ["1470", "1431", "114"], "mode": "leetcode", "instruction": "Given a binary search tree (BST) and a node value `target`, return `true` if the `target` is found in the BST, and `false` otherwise. You may assume that each node in the BST has **uniquely** valued children. Additionally, provide a method to insert a new node with a given value into the BST while maintaining its properties."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an array `nums` consisting of integers from `1` to `n` inclusive, where `n` is the length of the array. The array is initially sorted in ascending order. However, exactly one element is missing from the array, and the array is not necessarily contiguous. Your task is to find the missing element and return it. \n\nFor example, if the array is `[1, 2, 4, 5, 6]`, the missing element is `3`, and you should return `3`. If the array is `[1, 3, 4, 5]`, the missing element is `2`, and you should return `2`.\n\nReturn the missing element in the array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_missing_element(nums):\n    \"\"\"\n    Finds the missing element in a sorted array of integers from 1 to n inclusive.\n    \"\"\"\n    expected_sum = (len(nums) + 1) * (len(nums) + 2) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_missing_element\n\ndef test_find_missing_element():\n    assert find_missing_element([1, 2, 4, 5, 6]) == 3\n    assert find_missing_element([1, 3, 4, 5]) == 2\n    assert find_missing_element([2, 3, 4, 5, 6]) == 1\n    assert find_missing_element([1, 2, 3, 4, 5, 6, 8]) == 7\n    assert find_missing_element([1]) == 2\n    assert find_missing_element([2]) == 1\n    assert find_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 10]) == 9\n    assert find_missing_element([1, 2, 3, 4, 6, 7, 8, 9, 10]) == 5\n    assert find_missing_element([1, 3, 4, 5, 6, 7, 8, 9]) == 2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000065", "row_id": 65, "seed_ids": ["824", "1329", "1955"], "mode": "leetcode", "instruction": "You are given an array `nums` consisting of integers from `1` to `n` inclusive, where `n` is the length of the array. The array is initially sorted in ascending order. However, exactly one element is missing from the array, and the array is not necessarily contiguous. Your task is to find the missing element and return it. \n\nFor example, if the array is `[1, 2, 4, 5, 6]`, the missing element is `3`, and you should return `3`. If the array is `[1, 3, 4, 5]`, the missing element is `2`, and you should return `2`.\n\nReturn the missing element in the array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a **binary search tree (BST)**, return the number of **valid** sequences of **node values** such that for every node, the value of that node is **strictly greater** than the sum of the values of all nodes that come before it and **strictly less** than the sum of the values of all nodes that come after it. In other words, a valid sequence is one where each node's value is the sum of a contiguous subsequence of its in-order traversal values. For example, in the tree:\n\n```\n    5\n   / \\\n  3   7\n / \\\n2   4\n```\n\nThe sequence `[2, 3, 4, 5, 7]` is valid because each node's value is greater than the sum of all previous nodes and less than the sum of all subsequent nodes. Note that the sequence must strictly follow the in-order traversal of the tree."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\n\ndef count_valid_sequences(root: 'TreeNode') -> int:\n    \"\"\"\n    Returns the number of valid sequences of node values in a BST.\n    \"\"\"\n    def dfs(node):\n        if not node:\n            return [0, 1]\n        left = dfs(node.left)\n        right = dfs(node.right)\n        \n        # Calculate the sum of left and right children's values\n        left_sum = node.val + left[0]\n        right_sum = node.val + right[0]\n        \n        # Count valid sequences for the current node\n        if left[1] != 0 and right[1] != 0:\n            count = 1\n            for x in range(left[1]):\n                if left[0][x] < left_sum and right_sum < right[0][x]:\n                    count += 1\n            return [left_sum, count]\n        elif left[1] != 0:\n            count = sum(1 for x in left[0] if x < left_sum)\n            return [left_sum, count]\n        elif right[1] != 0:\n            count = sum(1 for x in right[0] if right_sum < x)\n            return [right_sum, count]\n        else:\n            return [node.val, 1]\n\n    return dfs(root)[1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom typing import *\nfrom solution import TreeNode, count_valid_sequences\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef test_count_valid_sequences_simple():\n    root = TreeNode(5, TreeNode(3, TreeNode(2), TreeNode(4)), TreeNode(7))\n    assert count_valid_sequences(root) == 2\n\ndef test_count_valid_sequences_empty_tree():\n    assert count_valid_sequences(None) == 0\n\ndef test_count_valid_sequences_single_node():\n    root = TreeNode(5)\n    assert count_valid_sequences(root) == 1\n\ndef test_count_valid_sequences_root_restricted():\n    root = TreeNode(10, TreeNode(5, TreeNode(2), TreeNode(8)), TreeNode(15, TreeNode(13), TreeNode(22)))\n    assert count_valid_sequences(root) == 3\n\ndef test_count_valid_sequences_large_sequence():\n    root = TreeNode(5, TreeNode(3, TreeNode(2), TreeNode(4)), TreeNode(10, TreeNode(8, TreeNode(6), TreeNode(9)), TreeNode(12)))\n    assert count_valid_sequences(root) == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000066", "row_id": 66, "seed_ids": ["929", "376", "663"], "mode": "leetcode", "instruction": "Given a **binary search tree (BST)**, return the number of **valid** sequences of **node values** such that for every node, the value of that node is **strictly greater** than the sum of the values of all nodes that come before it and **strictly less** than the sum of the values of all nodes that come after it. In other words, a valid sequence is one where each node's value is the sum of a contiguous subsequence of its in-order traversal values. For example, in the tree:\n\n```\n    5\n   / \\\n  3   7\n / \\\n2   4\n```\n\nThe sequence `[2, 3, 4, 5, 7]` is valid because each node's value is greater than the sum of all previous nodes and less than the sum of all subsequent nodes. Note that the sequence must strictly follow the in-order traversal of the tree."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an integer array `nums` and an integer `k`. The _value_ of this array is defined as the sum of `|nums[i] - nums[i + 1]|` for all `0 <= i < nums.length - 1`. You are allowed to select any subarray of the given array and shift its elements cyclically (i.e., rotate the subarray elements to the left or right) any number of times. You can perform this operation **only once**. Find the maximum possible value of the final array after performing the operation."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_value_after_shift(nums, k):\n    \"\"\"\n    Returns the maximum possible value of the final array after performing a single\n    shift operation on any subarray.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + abs(nums[i] - nums[(i + 1) % n])\n    \n    min_diff = float('inf')\n    max_diff = float('-inf')\n    total_sum = 0\n    \n    for i in range(n):\n        left = prefix_sum[(i + 1) % n]\n        right = prefix_sum[(i + k + 1) % n] - prefix_sum[(i + 1) % n]\n        \n        current_diff = left + right\n        min_diff = min(min_diff, current_diff)\n        max_diff = max(max_diff, current_diff)\n        total_sum += abs(nums[i] - nums[(i + 1) % n])\n    \n    if k == n:\n        return total_sum\n    return total_sum - min_diff + max_diff\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_max_value_after_shift():\n    assert max_value_after_shift([2, 3, 1, 4, 0], 3) == 10\n    assert max_value_after_shift([10, 1], 0) == 18\n    assert max_value_after_shift([2, 2, 2], 1) == 2\n    assert max_value_after_shift([1, 10, 100], 2) == 207\n    assert max_value_after_shift([1], 10) == 0\n    assert max_value_after_shift([1, 1, 1], 1) == 2\n    assert max_value_after_shift([1, 1, 1], 2) == 2\n    assert max_value_after_shift([1, 1, 1, 1, 1, 1], 3) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000067", "row_id": 67, "seed_ids": ["1814", "2135", "1330"], "mode": "leetcode", "instruction": "You are given an integer array `nums` and an integer `k`. The _value_ of this array is defined as the sum of `|nums[i] - nums[i + 1]|` for all `0 <= i < nums.length - 1`. You are allowed to select any subarray of the given array and shift its elements cyclically (i.e., rotate the subarray elements to the left or right) any number of times. You can perform this operation **only once**. Find the maximum possible value of the final array after performing the operation."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary tree, your task is to find the minimum **balance factor** of all its nodes. A node's balance factor is defined as the difference between the heights of its left and right subtrees, and the balance factor of the entire tree is the minimum balance factor of all its nodes. If the tree is empty, the balance factor is considered to be 0. Additionally, if a node does not have a left or right subtree, its balance factor is the height of the existing subtree. Return the minimum balance factor of the tree.\n\nFor example, consider the following tree:\n\n```\n    1\n   / \\\n  2   3\n /\n4\n```\n\nThe balance factors of the nodes are as follows:\n- Node 1: |2 - 1| = 1\n- Node 2: |1 - 0| = 1\n- Node 3: |0 - 0| = 0\n- Node 4: 1 (since it only has a left subtree)\n\nThe minimum balance factor is 0.\n\n**Note**: A node's height is defined as the number of edges on the longest path from the node to a leaf. A leaf node has a height of 0."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef height(node):\n    \"\"\"\n    Returns the height of the given tree node.\n    \"\"\"\n    if node is None:\n        return -1\n    return 1 + max(height(node.left), height(node.right))\n\ndef balance_factor(node):\n    \"\"\"\n    Returns the balance factor of the given node.\n    \"\"\"\n    if node is None:\n        return 0\n    left_height = height(node.left)\n    right_height = height(node.right)\n    return abs(left_height - right_height)\n\ndef find_min_balance_factor(root):\n    \"\"\"\n    Traverses the tree to find the minimum balance factor of all nodes.\n    \"\"\"\n    min_bal = 0\n    stack = [root]\n    visited = set()\n    while stack:\n        cur_node = stack.pop()\n        if cur_node not in visited:\n            visited.add(cur_node)\n            min_bal = min(min_bal, balance_factor(cur_node))\n            if cur_node.left:\n                stack.append(cur_node.left)\n            if cur_node.right:\n                stack.append(cur_node.right)\n    return min_bal\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef create_tree(*values):\n    \"\"\"\n    Helper function to create a binary tree from a list of values.\n    \"\"\"\n    nodes = [TreeNode(val) if val is not None else None for val in values]\n    for idx, node in enumerate(nodes):\n        if 2 * idx + 1 < len(nodes):\n            node.left = nodes[2 * idx + 1]\n        if 2 * idx + 2 < len(nodes):\n            node.right = nodes[2 * idx + 2]\n    return nodes[0]\n\ndef test_find_min_balance_factor_empty_tree():\n    assert find_min_balance_factor(None) == 0\n\ndef test_find_min_balance_factor_balanced_tree():\n    root = create_tree(1, 2, 3, 4)\n    assert find_min_balance_factor(root) == 0\n\ndef test_find_min_balance_factor_unbalanced_tree():\n    root = create_tree(1, 2, 3, None, 4)\n    assert find_min_balance_factor(root) == 0\n\ndef test_find_min_balance_factor_complex_tree():\n    root = create_tree(1, 2, 3, 4, 5)\n    assert find_min_balance_factor(root) == 1\n\ndef test_find_min_balance_factor_single_node():\n    root = create_tree(1)\n    assert find_min_balance_factor(root) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000068", "row_id": 68, "seed_ids": ["2547", "1334", "133"], "mode": "leetcode", "instruction": "Given a binary tree, your task is to find the minimum **balance factor** of all its nodes. A node's balance factor is defined as the difference between the heights of its left and right subtrees, and the balance factor of the entire tree is the minimum balance factor of all its nodes. If the tree is empty, the balance factor is considered to be 0. Additionally, if a node does not have a left or right subtree, its balance factor is the height of the existing subtree. Return the minimum balance factor of the tree.\n\nFor example, consider the following tree:\n\n```\n    1\n   / \\\n  2   3\n /\n4\n```\n\nThe balance factors of the nodes are as follows:\n- Node 1: |2 - 1| = 1\n- Node 2: |1 - 0| = 1\n- Node 3: |0 - 0| = 0\n- Node 4: 1 (since it only has a left subtree)\n\nThe minimum balance factor is 0.\n\n**Note**: A node's height is defined as the number of edges on the longest path from the node to a leaf. A leaf node has a height of 0."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you are tasked with determining whether the string can be rearranged such that every even-indexed character is a vowel and every odd-indexed character is a consonant. Return `true` if such an arrangement is possible, otherwise return `false`. Note that the string length is at least 2 and at most 100."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef can_arrange_string(s: str) -> bool:\n    \"\"\"\n    Determines if the string can be rearranged such that every even-indexed character is a vowel and every odd-indexed character is a consonant.\n    Returns true if such an arrangement is possible, otherwise false.\n    \"\"\"\n    vowels = set('aeiou')\n    even_vowels = set()\n    odd_consonants = set('bcdfghjklmnpqrstvwxyz')\n    odd_consonant_count = 0\n    \n    for i, char in enumerate(s):\n        if i % 2 == 0:\n            if char not in vowels:\n                return False\n            even_vowels.add(char)\n        else:\n            if char in vowels:\n                return False\n            if char in odd_consonants:\n                odd_consonant_count += 1\n            else:\n                return False\n    # Check if there are enough unique consonants to pair with the unique vowels\n    return len(even_vowels) <= odd_consonant_count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import can_arrange_string\n\ndef test_can_arrange_string():\n    assert can_arrange_string(\"aabb\") == True\n    assert can_arrange_string(\"aaabc\") == False\n    assert can_arrange_string(\"aa\") == False\n    assert can_arrange_string(\"cdd\") == True\n    assert can_arrange_string(\"be\") == False\n    assert can_arrange_string(\"aabbc\") == True\n    assert can_arrange_string(\"ace\") == True\n    assert can_arrange_string(\"bda\") == True\n    assert can_arrange_string(\"aabbccddee\") == True\n    assert can_arrange_string(\"abc\") == True\n    assert can_arrange_string(\"aaaccc\") == False\n\ndef test_odd_consonants():\n    assert can_arrange_string(\"a\") == False  # String length must be at least 2\n    assert can_arrange_string(\"aa\") == False  # At least one consonant is needed for odd positions\n\ndef test_vowel_parity():\n    assert can_arrange_string(\"ad\") == True\n    assert can_arrange_string(\"ae\") == False\n    assert can_arrange_string(\"aeiou\") == False\n\ndef test_consonant_parity():\n    assert can_arrange_string(\"bc\") == True\n    assert can_arrange_string(\"bdc\") == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000069", "row_id": 69, "seed_ids": ["306", "202", "1024"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you are tasked with determining whether the string can be rearranged such that every even-indexed character is a vowel and every odd-indexed character is a consonant. Return `true` if such an arrangement is possible, otherwise return `false`. Note that the string length is at least 2 and at most 100."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of `n` robots, each robot has a unique identifier from `1` to `n`. Each robot can move to the left or right on a number line, and each robot can move a maximum of `k` units in one step. You are also given an array `orders` where `orders[i]` is a list of robot identifiers that need to be at position `i + 1` on the number line. The goal is to move all robots to their respective positions with the minimum number of steps. Each robot can only move to its designated position and cannot move to a position that has already been assigned to another robot. Return the minimum number of steps required to achieve the goal, or `-1` if it is impossible to move all robots to their designated positions."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_steps_to_positions(robots, orders, k):\n    \"\"\"\n    Calculate the minimum number of steps to move all robots to their designated positions.\n    If it's impossible, return -1.\n    \"\"\"\n    # Count how many robots need to go to each position\n    position_count = [0] * (len(orders) + 1)\n    for r in robots:\n        if r in orders:\n            position_count[orders.index(r)] += 1\n    \n    # Calculate the steps from each robot's current position to its target position\n    # and check if the total steps can be covered within the given limit\n    current_positions = list(range(1, len(position_count) + 1))\n    steps_needed = [abs(current_positions[i] - position_count[i]) for i in range(len(position_count))]\n    \n    # Sort both lists to process the farthest moves first\n    positions, steps = zip(*sorted(zip(current_positions, steps_needed), key=lambda x: x[1], reverse=True))\n    max_steps = sum(steps)\n    \n    if max_steps > k * len(robots):\n        return -1\n    \n    # Check if we can move every robot in time\n    remaining_steps = k * len(robots)\n    for p, s in zip(positions, steps):\n        if s > k:\n            return -1\n        remaining_steps -= s\n        if remaining_steps < 0:\n            return -1\n    \n    return max_steps\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_steps_to_positions():\n    assert min_steps_to_positions([2, 2, 3, 3], [2, 3], 2) == 4\n    assert min_steps_to_positions([2, 2, 2], [2, 2, 2], 2) == -1\n    assert min_steps_to_positions([1, 1, 2, 3], [1, 2, 3], 3) == 2\n    assert min_steps_to_positions([4], [1], 1) == -1\n    assert min_steps_to_positions([1, 2, 3], [1, 2, 3], 3) == 0\n\nif __name__ == \"__main__\":\n    import pytest\n    pytest.main([__file__])\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000070", "row_id": 70, "seed_ids": ["1473", "191", "2471"], "mode": "leetcode", "instruction": "You are given a list of `n` robots, each robot has a unique identifier from `1` to `n`. Each robot can move to the left or right on a number line, and each robot can move a maximum of `k` units in one step. You are also given an array `orders` where `orders[i]` is a list of robot identifiers that need to be at position `i + 1` on the number line. The goal is to move all robots to their respective positions with the minimum number of steps. Each robot can only move to its designated position and cannot move to a position that has already been assigned to another robot. Return the minimum number of steps required to achieve the goal, or `-1` if it is impossible to move all robots to their designated positions."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an integer `n` denoting the number of cities in a country. The cities are numbered from `0` to `n - 1`. You are also given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional** road connecting cities `ai` and `bi`. You need to assign each city with a unique integer value from `1` to `n` such that the **sum** of the values of the two cities connected by each road is maximized. Return the **maximum possible sum** of the importance of all roads after assigning the values optimally."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef assign_values(n, roads):\n    \"\"\"\n    Assigns each city a unique value from 1 to n to maximize the sum of the values\n    of the two cities connected by each road. Returns the maximum possible sum.\n    \"\"\"\n    # Create a graph representation\n    graph = [[] for _ in range(n)]\n    for a, b in roads:\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    def dfs(city, values, visited):\n        visited[city] = True\n        value = n - len(graph[city])\n        for neighbor in graph[city]:\n            if not visited[neighbor]:\n                value += dfs(neighbor, values, visited)\n        values.append(value)\n        return value\n    \n    # Perform DFS to assign values\n    values = []\n    for i in range(n):\n        if not values:\n            dfs(i, values, [False] * n)\n    \n    # Sort values in descending order\n    values.sort(reverse=True)\n    \n    # Calculate the result\n    max_sum = 0\n    for i in range(n):\n        max_sum += (n + 1 - i) * values[i]\n    \n    return max_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import assign_values\n\ndef test_simple_case():\n    assert assign_values(4, [[0, 1], [1, 2], [2, 0], [1, 3]]) == 8\n\ndef test_random_case():\n    assert assign_values(5, [[0, 1], [1, 2], [2, 0], [1, 3], [3, 4], [4, 1]]) == 13\n\ndef test_single_city():\n    assert assign_values(1, []) == 1\n\ndef test_two_cities():\n    assert assign_values(2, [[0, 1]]) == 3\n\ndef test_three_cities():\n    assert assign_values(3, [[0, 1], [1, 2], [2, 0]]) == 6\n\ndef test_four_cities():\n    assert assign_values(4, [[0, 1], [1, 2], [2, 0], [1, 3], [3, 0], [2, 3]]) == 12\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000071", "row_id": 71, "seed_ids": ["2285", "2064", "1344"], "mode": "leetcode", "instruction": "You are given an integer `n` denoting the number of cities in a country. The cities are numbered from `0` to `n - 1`. You are also given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional** road connecting cities `ai` and `bi`. You need to assign each city with a unique integer value from `1` to `n` such that the **sum** of the values of the two cities connected by each road is maximized. Return the **maximum possible sum** of the importance of all roads after assigning the values optimally."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` without leading zeros, return the number of ways to split `s` into three non-empty substrings such that the bitwise XOR of the first two substrings is equal to the bitwise XOR of the last two substrings. The substrings are formed by consecutive binary digits in `s`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_good_splits(binary_string: str) -> int:\n    \"\"\"\n    Counts the number of ways to split the binary string into three non-empty substrings\n    such that the bitwise XOR of the first two substrings is equal to the bitwise XOR of the last two substrings.\n    \"\"\"\n    prefix_xor = [0]\n    for char in binary_string:\n        prefix_xor.append(prefix_xor[-1] ^ int(char))\n    \n    count = 0\n    n = len(binary_string)\n    for i in range(1, n-1):\n        if prefix_xor[i] == prefix_xor[-1] - prefix_xor[i+1]:\n            count += 1\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_count_good_splits():\n    assert count_good_splits(\"1010\") == 2\n    assert count_good_splits(\"001101\") == 1\n    assert count_good_splits(\"111\") == 0\n    assert count_good_splits(\"000\") == 0\n    assert count_good_splits(\"110101\") == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000072", "row_id": 72, "seed_ids": ["717", "1546", "243"], "mode": "leetcode", "instruction": "Given a binary string `s` without leading zeros, return the number of ways to split `s` into three non-empty substrings such that the bitwise XOR of the first two substrings is equal to the bitwise XOR of the last two substrings. The substrings are formed by consecutive binary digits in `s`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an **infinite** 2D grid representing a map, where each cell can either be land (`1`) or water (`0`), a **snake** is defined as a sequence of adjacent land cells. The length of a snake is the number of cells it spans. You start at the top-left corner of the grid at cell `[0, 0]`. On each move, you can travel to an adjacent cell (up, down, left, or right) but you cannot revisit any cell. The goal is to find the maximum length of a snake starting from `[0, 0]` and moving to the **right**most possible cell in the grid, which is beyond the current boundary. You are given the grid as a 2D array where `1` represents land and `0` represents water. Return the length of the longest snake."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef explore_snake(grid, x, y, visited):\n    \"\"\"\n    Recursively explore the snake and mark visited cells.\n    \"\"\"\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Right, Down, Left, Up\n    length = 1  # Starting from the current cell\n    max_length = 0\n\n    for dx, dy in directions:\n        new_x, new_y = x + dx, y + dy\n        if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) and grid[new_x][new_y] == 1 and (new_x, new_y) not in visited:\n            visited.add((new_x, new_y))\n            length += explore_snake(grid, new_x, new_y, visited)\n            max_length = max(max_length, length)\n            visited.remove((new_x, new_y))\n\n    return max_length\n\ndef longest_snake(grid):\n    \"\"\"\n    Returns the length of the longest snake starting from (0, 0) and moving rightmost.\n    \"\"\"\n    if grid[0][0] == 0:\n        return 0  # Starting point is water, no snake to explore\n    visited = {(0, 0)}\n    return explore_snake(grid, 0, 0, visited)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import longest_snake\n\ndef test_longest_snake_example1():\n    grid = [\n        [0, 1, 1, 1, 0],\n        [0, 1, 0, 0, 0],\n        [0, 0, 1, 0, 1],\n        [1, 1, 0, 0, 1]\n    ]\n    assert longest_snake(grid) == 6\n\ndef test_longest_snake_example2():\n    grid = [\n        [1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1]\n    ]\n    assert longest_snake(grid) == 5\n\ndef test_longest_snake_example3():\n    grid = [\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 1, 0, 1],\n        [1, 1, 0, 0, 0]\n    ]\n    assert longest_snake(grid) == 0\n    # Starting point is water, so no snake is formed\n\ndef test_longest_snake_example4():\n    grid = [\n        [1, 0, 0, 1, 1],\n        [1, 1, 0, 0, 0],\n        [0, 0, 1, 1, 0],\n        [0, 0, 1, 1, 0]\n    ]\n    assert longest_snake(grid) == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000073", "row_id": 73, "seed_ids": ["1197", "1025", "1161"], "mode": "leetcode", "instruction": "Given an **infinite** 2D grid representing a map, where each cell can either be land (`1`) or water (`0`), a **snake** is defined as a sequence of adjacent land cells. The length of a snake is the number of cells it spans. You start at the top-left corner of the grid at cell `[0, 0]`. On each move, you can travel to an adjacent cell (up, down, left, or right) but you cannot revisit any cell. The goal is to find the maximum length of a snake starting from `[0, 0]` and moving to the **right**most possible cell in the grid, which is beyond the current boundary. You are given the grid as a 2D array where `1` represents land and `0` represents water. Return the length of the longest snake."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` consisting of lowercase English letters. You need to determine the lexicographically smallest palindrome by swapping any two adjacent characters in the string at most once. Return the resulting palindrome string. If it's not possible to form a palindrome by swapping at most one pair of adjacent characters, return the original string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef form_smallest_palindrome(s: str) -> str:\n    \"\"\"\n    Returns the lexicographically smallest palindrome by swapping at most one pair of adjacent characters.\n    If it's not possible, returns the original string.\n    \"\"\"\n    s_list = list(s)\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            for j in range(i + 1, n - i):\n                if s[j] == s[n - 1 - i]:\n                    s_list[i], s_list[j] = s_list[j], s_list[i]\n                    return ''.join(s_list)\n            return s\n    return ''.join(s_list)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_form_smallest_palindrome():\n    assert form_smallest_palindrome(\"egcfe\") == \"efcfe\"\n    assert form_smallest_palindrome(\"abcd\") == \"abba\"\n    assert form_smallest_palindrome(\"seven\") == \"seven\"\n    assert form_smallest_palindrome(\"aabbcc\") == \"abcbbc\"\n    assert form_smallest_palindrome(\"bbabcb\") == \"babcbb\"\n    assert form_smallest_palindrome(\"bcb\") == \"bcb\"\n    assert form_smallest_palindrome(\"aa\") == \"aa\"\n    assert form_smallest_palindrome(\"xyz\") == \"xyz\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000074", "row_id": 74, "seed_ids": ["1721", "2418", "1704"], "mode": "leetcode", "instruction": "You are given a string `s` consisting of lowercase English letters. You need to determine the lexicographically smallest palindrome by swapping any two adjacent characters in the string at most once. Return the resulting palindrome string. If it's not possible to form a palindrome by swapping at most one pair of adjacent characters, return the original string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times: choose a non-empty substring `s[i... j]` (i.e., `s[i]` is the first character and `s[j]` is the last character) and reverse it. The goal is to make the string `s` **lexicographically** **smallest** possible. Return the smallest string `s` you can obtain after performing this operation any number of times."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef make_smallest_string(s: str) -> str:\n    \"\"\"\n    Returns the lexicographically smallest string s after reversing some substrings.\n    \"\"\"\n    s = list(s)\n    for i in range(len(s)):\n        start = i\n        while start > 0 and s[start] < s[start - 1]:\n            s[start], s[start - 1] = s[start - 1], s[start]\n            start -= 1\n    return ''.join(s)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_make_smallest_string():\n    assert make_smallest_string(\"cba\") == \"abc\"\n    assert make_smallest_string(\"a\") == \"a\"\n    assert make_smallest_string(\"baa\") == \"aab\"\n    assert make_smallest_string(\"bdda\") == \"abcd\"\n    assert make_smallest_string(\"abcd\") == \"abcd\"\n    assert make_smallest_string(\"dacb\") == \"abdc\"\n    assert make_smallest_string(\"bdcaba\") == \"abcdba\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000075", "row_id": 75, "seed_ids": ["1053", "2375", "2254"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times: choose a non-empty substring `s[i... j]` (i.e., `s[i]` is the first character and `s[j]` is the last character) and reverse it. The goal is to make the string `s` **lexicographically** **smallest** possible. Return the smallest string `s` you can obtain after performing this operation any number of times."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a positive integer `n`, return the number of integers `x` in the range `[1, n]` (inclusive) such that the sum of the digits of `x` is a **prime number**. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_prime(num):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef digit_sum(n):\n    \"\"\"Calculate the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef count_prime_digit_sums(n):\n    \"\"\"\n    Returns the count of numbers in the range [1, n] whose digits sum to a prime number.\n    \"\"\"\n    prime_sum_count = 0\n    for x in range(1, n + 1):\n        if is_prime(digit_sum(x)):\n            prime_sum_count += 1\n    return prime_sum_count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_prime_digit_sums, is_prime, digit_sum\n\ndef test_is_prime():\n    assert is_prime(2) is True\n    assert is_prime(3) is True\n    assert is_prime(4) is False\n    assert is_prime(11) is True\n    assert is_prime(12) is False\n\ndef test_digit_sum():\n    assert digit_sum(123) == 6\n    assert digit_sum(456) == 15\n    assert digit_sum(789) == 24\n    assert digit_sum(100) == 1\n\ndef test_count_prime_digit_sums():\n    assert count_prime_digit_sums(10) == 2  # 2, 3\n    assert count_prime_digit_sums(20) == 4  # 2, 3, 5, 7\n    assert count_prime_digit_sums(30) == 5  # 2, 3, 5, 7, 11\n    assert count_prime_digit_sums(100) == 25\n\n# Additional edge cases\nassert count_prime_digit_sums(1) == 1  # Only 2\nassert count_prime_digit_sums(2) == 2  # 2, 3\nassert count_prime_digit_sums(3) == 3  # 2, 3\nassert count_prime_digit_sums(0) == 0  # No numbers to check\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000076", "row_id": 76, "seed_ids": ["2180", "1025", "668"], "mode": "leetcode", "instruction": "Given a positive integer `n`, return the number of integers `x` in the range `[1, n]` (inclusive) such that the sum of the digits of `x` is a **prime number**. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary tree with `n` nodes labeled from `0` to `n-1`, where each node has a value associated with it, represented by an array `values`, and a 2D array `edges` that defines the tree's structure, you are tasked with finding the node that, when removed, results in the maximum number of connected components in the tree, where the values of the nodes in each component are coprime. If there are multiple nodes that result in the same maximum number of components, return the one with the smallest label.\n\nFormally, you need to:\n\n- Remove one node from the tree and determine the number of connected components that are formed.\n- Each component must consist of nodes whose values are coprime.\n- Return the label of the node that maximizes the number of such components. If there are multiple such nodes, return the one with the smallest label. If no such node exists, return `-1`.\n\nExample:\n```python\nvalues = [2, 3, 6, 9, 10]\nedges = [[0, 1], [1, 2], [1, 3], [3, 4]]\n```\nIn this example, removing node `1` results in two connected components where all nodes in each component are coprime: `[2]` and `[6, 9, 10]`. Thus, the answer is `1`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict\nfrom math import gcd\nfrom typing import List\n\ndef max_coprime_components(values: List[int], edges: List[List[int]]) -> int:\n    \"\"\"\n    Finds the node whose removal leads to the maximum number of coprime components.\n    \"\"\"\n    n = len(values)\n    tree = defaultdict(list)\n    for u, v in edges:\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    # Helper function to find the resulting components.\n    def dfs(node: int, parent: int) -> List[List[int]]:\n        result = [[node]]\n        for child in tree[node]:\n            if child != parent:\n                for comp in dfs(child, node):\n                    if any(gcd(values[node], values[x]) != 1 for x in comp):\n                        # If the values are not coprime, only add the current node\n                        result.append([node])\n                    else:\n                        # Otherwise, merge the component with the current node\n                        result[-1].extend(comp)\n        return result\n    \n    max_components = 0\n    result_node = -1\n    \n    for node in range(n):\n        components = dfs(node, -1)\n        count = len(components)\n        if count > max_components or (count == max_components and node < result_node):\n            max_components, result_node = count, node\n    \n    return result_node\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_max_coprime_components():\n    values = [2, 3, 6, 9, 10]\n    edges = [[0, 1], [1, 2], [1, 3], [3, 4]]\n    assert max_coprime_components(values, edges) == 1\n\n    values = [4, 6, 15, 35]\n    edges = [[0, 1], [0, 2], [1, 3]]\n    assert max_coprime_components(values, edges) == 2\n\n    values = [2, 2, 2, 2]\n    edges = [[0, 1], [0, 2], [0, 3]]\n    assert max_coprime_components(values, edges) == -1\n\n    values = [2, 3, 5]\n    edges = [[0, 1], [0, 2]]\n    assert max_coprime_components(values, edges) == -1\n\ntest_max_coprime_components()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000077", "row_id": 77, "seed_ids": ["1766", "2042", "2588"], "mode": "leetcode", "instruction": "Given a binary tree with `n` nodes labeled from `0` to `n-1`, where each node has a value associated with it, represented by an array `values`, and a 2D array `edges` that defines the tree's structure, you are tasked with finding the node that, when removed, results in the maximum number of connected components in the tree, where the values of the nodes in each component are coprime. If there are multiple nodes that result in the same maximum number of components, return the one with the smallest label.\n\nFormally, you need to:\n\n- Remove one node from the tree and determine the number of connected components that are formed.\n- Each component must consist of nodes whose values are coprime.\n- Return the label of the node that maximizes the number of such components. If there are multiple such nodes, return the one with the smallest label. If no such node exists, return `-1`.\n\nExample:\n```python\nvalues = [2, 3, 6, 9, 10]\nedges = [[0, 1], [1, 2], [1, 3], [3, 4]]\n```\nIn this example, removing node `1` results in two connected components where all nodes in each component are coprime: `[2]` and `[6, 9, 10]`. Thus, the answer is `1`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary string `s`. A **substring** of `s` is called **good** if it does not contain any leading zeros and has an even length. Your task is to count the number of **good substrings** in `s`.\n\nFor example, given the string `s = \"1001010\"`, the good substrings are `\"10\"`, `\"010\"`, and `\"010\"`. Therefore, the answer is `3`.\n\nWrite a function `countGoodSubstrings(s: str) -> int` that returns the number of good substrings in the binary string `s`.\n\n**Constraints**:\n- `1 <= len(s) <= 1000`\n- `s` consists only of `0`s and `1`s."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_good_substrings(s: str) -> int:\n    \"\"\"\n    Counts the number of 'good' substrings in the given binary string 's'.\n    A 'good' substring has no leading zeros and has an even length.\n    \"\"\"\n    count = 0\n    n = len(s)\n    for i in range(n):\n        # Ensure substring starts with 1\n        if s[i] == '1':\n            for j in range(i + 1, n, 2):\n                if j + 1 < n and s[j+1] == '1':\n                    count += 1\n                else:\n                    break\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_count_good_substrings():\n    assert count_good_substrings(\"1001010\") == 3\n    assert count_good_substrings(\"1100011\") == 4\n    assert count_good_substrings(\"0000\") == 0\n    assert count_good_substrings(\"1111\") == 1\n    assert count_good_substrings(\"10101010\") == 8\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000078", "row_id": 78, "seed_ids": ["808", "1671", "1317"], "mode": "leetcode", "instruction": "You are given a binary string `s`. A **substring** of `s` is called **good** if it does not contain any leading zeros and has an even length. Your task is to count the number of **good substrings** in `s`.\n\nFor example, given the string `s = \"1001010\"`, the good substrings are `\"10\"`, `\"010\"`, and `\"010\"`. Therefore, the answer is `3`.\n\nWrite a function `countGoodSubstrings(s: str) -> int` that returns the number of good substrings in the binary string `s`.\n\n**Constraints**:\n- `1 <= len(s) <= 1000`\n- `s` consists only of `0`s and `1`s."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a class `RangeFreqQuery` that supports efficient frequency queries on a given array `arr`. The goal is to implement a method that can quickly determine the frequency of any element within a specified range of the array. Specifically, implement the `RangeFreqQuery` class:\n\n- `RangeFreqQuery(int[] arr)`: Initializes the class with the given array `arr`.\n- `int query(int left, int right, int value)`: Returns the frequency of the value `value` in the subarray `arr[left...right]`.\n\nFor example, given the array `arr = [1, 2, 2, 3, 3, 3, 4]`, the query `query(0, 6, 3)` should return `3` since the value `3` appears three times in the subarray `arr[0...6]`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict\n\nclass RangeFreqQuery:\n    def __init__(self, arr):\n        \"\"\"\n        Initializes the class with the given array `arr`.\n        \"\"\"\n        self.freq_map = defaultdict(list)\n        for index, value in enumerate(arr):\n            self.freq_map[value].append(index)\n\n    def query(self, left, right, value):\n        \"\"\"\n        Returns the frequency of the value `value` in the subarray `arr[left...right]`.\n        \"\"\"\n        indices = self.freq_map[value]\n        if not indices:\n            return 0\n        left_index = self.bisect_left(indices, left)\n        right_index = self.bisect_right(indices, right)\n        return right_index - left_index\n\n    def bisect_left(self, arr, target):\n        \"\"\"\n        Returns the leftmost index to insert `target` in `arr` to maintain sorted order.\n        \"\"\"\n        lo, hi = 0, len(arr)\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if arr[mid] < target:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo\n\n    def bisect_right(self, arr, target):\n        \"\"\"\n        Returns the rightmost index to insert `target` in `arr` to maintain sorted order.\n        \"\"\"\n        lo, hi = 0, len(arr)\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if target < arr[mid]:\n                hi = mid\n            else:\n                lo = mid + 1\n        return lo\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_range_freq_query():\n    arr = [1, 2, 2, 3, 3, 3, 4]\n    freq_query = RangeFreqQuery(arr)\n\n    assert freq_query.query(0, 6, 3) == 3\n    assert freq_query.query(2, 5, 2) == 2\n    assert freq_query.query(0, 6, 1) == 1\n\n    # Additional tests\n    assert freq_query.query(3, 6, 3) == 2\n    assert freq_query.query(0, 2, 2) == 2\n    assert freq_query.query(4, 6, 4) == 1\n\ntest_range_freq_query()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000079", "row_id": 79, "seed_ids": ["1157", "751", "2288"], "mode": "leetcode", "instruction": "Design a class `RangeFreqQuery` that supports efficient frequency queries on a given array `arr`. The goal is to implement a method that can quickly determine the frequency of any element within a specified range of the array. Specifically, implement the `RangeFreqQuery` class:\n\n- `RangeFreqQuery(int[] arr)`: Initializes the class with the given array `arr`.\n- `int query(int left, int right, int value)`: Returns the frequency of the value `value` in the subarray `arr[left...right]`.\n\nFor example, given the array `arr = [1, 2, 2, 3, 3, 3, 4]`, the query `query(0, 6, 3)` should return `3` since the value `3` appears three times in the subarray `arr[0...6]`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a data structure to find the `k` closest points to a given target point `(tx, ty)` on a 2D plane. The points are represented as an array of coordinates, where each coordinate is an array of two integers `[x, y]`. Implement the `KClosestPoints` class:\n\n*   `KClosestPoints(int k)` Initializes the object with `k`.\n*   `void addPoint(int x, int y)` Adds the point `(x, y)` to the data structure.\n*   `List<List<Integer>> getKClosestPoints()` Returns the `k` closest points to the target point `(tx, ty)` sorted by their Manhattan distance to the target. The Manhattan distance between two points `(x1, y1)` and `(x2, y2)` is given by `abs(x1 - x2) + abs(y1 - y2)`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport heapq\nfrom typing import List\n\nclass KClosestPoints:\n    def __init__(self, k: int):\n        self.k = k\n        self.points = []\n\n    def addPoint(self, x: int, y: int) -> None:\n        point = (abs(x - tx) + abs(y - ty), x, y)\n        heapq.heappush(self.points, point)\n\n    def getKClosestPoints(self) -> List[List[int]]:\n        k_closest = []\n        for _ in range(self.k):\n            _, x, y = heapq.heappop(self.points)\n            k_closest.append([x, y])\n        k_closest.sort()\n        return k_closest\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport heapq\nfrom solution import KClosestPoints\nfrom typing import List\n\ndef manhattan_distance(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef test_k_closest_points():\n    tx, ty = 3, 3\n    kcp = KClosestPoints(3)\n    kcp.addPoint(1, 2)\n    kcp.addPoint(2, 1)\n    kcp.addPoint(3, 4)\n    kcp.addPoint(4, 5)\n    result = kcp.getKClosestPoints()\n    expected = [[2, 1], [3, 4], [1, 2]]\n    assert manhattan_distance((2, 1), (3, 3)) == manhattan_distance(expected[0], (3, 3))\n    assert manhattan_distance((3, 4), (3, 3)) == manhattan_distance(expected[1], (3, 3))\n    assert manhattan_distance((1, 2), (3, 3)) == manhattan_distance(expected[2], (3, 3))\n\n    kcp = KClosestPoints(2)\n    kcp.addPoint(1, 1)\n    kcp.addPoint(2, 2)\n    kcp.addPoint(3, 3)\n    kcp.addPoint(4, 4)\n    result = kcp.getKClosestPoints()\n    expected = [[1, 1], [2, 2]]\n    assert manhattan_distance((1, 1), (3, 3)) == manhattan_distance(expected[0], (3, 3))\n    assert manhattan_distance((2, 2), (3, 3)) == manhattan_distance(expected[1], (3, 3))\n\ntest_k_closest_points()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000080", "row_id": 80, "seed_ids": ["16", "1443", "211"], "mode": "leetcode", "instruction": "Design a data structure to find the `k` closest points to a given target point `(tx, ty)` on a 2D plane. The points are represented as an array of coordinates, where each coordinate is an array of two integers `[x, y]`. Implement the `KClosestPoints` class:\n\n*   `KClosestPoints(int k)` Initializes the object with `k`.\n*   `void addPoint(int x, int y)` Adds the point `(x, y)` to the data structure.\n*   `List<List<Integer>> getKClosestPoints()` Returns the `k` closest points to the target point `(tx, ty)` sorted by their Manhattan distance to the target. The Manhattan distance between two points `(x1, y1)` and `(x2, y2)` is given by `abs(x1 - x2) + abs(y1 - y2)`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s`, return the longest substring of `s` that contains at least one occurrence of every character in the string `s`. If there are multiple substrings of the same length, return the substring that appears earliest in `s`. If no such substring exists, return an empty string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_substring_with_all_chars(s: str) -> str:\n    \"\"\"\n    Returns the longest substring of s that contains at least one occurrence of every character in s.\n    If there are multiple such substrings of the same length, the earliest one is returned.\n    If no such substring exists, returns an empty string.\n    \"\"\"\n    if not s:\n        return \"\"\n\n    char_to_last_index = {}\n    start = 0\n    min_start = 0\n    max_length = 0\n\n    for end in range(len(s)):\n        char = s[end]\n        if char in char_to_last_index:\n            start = max(start, char_to_last_index[char] + 1)\n        char_to_last_index[char] = end\n\n        if end - start + 1 > max_length:\n            max_length = end - start + 1\n            min_start = start\n\n    return s[min_start:min_start + max_length] if max_length > 0 else \"\"\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_longest_substring_with_all_chars():\n    assert longest_substring_with_all_chars(\"xyyzyzyx\") == \"zyz\"\n    assert longest_substring_with_all_chars(\"a\") == \"\"\n    assert longest_substring_with_all_chars(\"abcabcbb\") == \"abc\"\n    assert longest_substring_with_all_chars(\"abacdefabacdef\") == \"abacdef\"\n    assert longest_substring_with_all_chars(\"aaabbcbbbab\") == \"bbcb\"\n\ndef test_longest_substring_with_empty_string():\n    assert longest_substring_with_all_chars(\"\") == \"\"\n\ndef test_longest_substring_with_multiple_substrings():\n    assert longest_substring_with_all_chars(\"bbaacdbabb\") == \"acdbab\"\n    assert longest_substring_with_all_chars(\"aaacccbbb\") == \"acccb\"\n\ndef test_longest_substring_with_repeated_characters():\n    assert longest_substring_with_all_chars(\"zzabzz\") == \"zab\"\n\ndef test_longest_substring_with_same_characters():\n    assert longest_substring_with_all_chars(\"abba\") == \"bba\"\n    assert longest_substring_with_all_chars(\"aabb\") == \"aabb\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000081", "row_id": 81, "seed_ids": ["1763", "5", "1094"], "mode": "leetcode", "instruction": "Given a string `s`, return the longest substring of `s` that contains at least one occurrence of every character in the string `s`. If there are multiple substrings of the same length, return the substring that appears earliest in `s`. If no such substring exists, return an empty string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters and an integer `k`, you can perform the following operation at most `k` times:\n\n- Choose any index `i` and swap `s[i]` with `s[i + 1]` (0-indexed).\n\nAfter performing the operations, the string `s` should be a palindrome. Return the lexicographically smallest palindrome that can be obtained under these constraints. If it's not possible to form a palindrome, return an empty string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef can_swap(s):\n    \"\"\"\n    Check if the string can be transformed into a palindrome by swapping adjacent characters.\n    \"\"\"\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] != s[right]:\n            return True\n        left += 1\n        right -= 1\n    return False\n\ndef form_smallest_palindrome(s, k):\n    \"\"\"\n    Return the lexicographically smallest palindrome that can be obtained by swapping at most k characters,\n    or an empty string if it's not possible.\n    \"\"\"\n    if can_swap(s) and k >= 0:\n        return s\n    \n    for i in range(len(s)):\n        for j in range(i + 1, min(i + 1 + k, len(s))):\n            # Try to form a palindrome by swapping\n            new_str = list(s)\n            new_str[i], new_str[j] = new_str[j], new_str[i]\n            if new_str[:i + 1] == new_str[i + 1:i + 2 + (len(s) - i - 1) * 2:2]:\n                return ''.join(new_str)\n    \n    return \"\"\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import form_smallest_palindrome\n\ndef test_form_smallest_palindrome():\n    assert form_smallest_palindrome(\"aabbcc\", 3) == \"abcabc\"\n    assert form_smallest_palindrome(\"abccba\", 2) == \"abccba\"\n    assert form_smallest_palindrome(\"abcdef\", 2) == \"abdcfe\"\n    assert form_smallest_palindrome(\"abcde\", 0) == \"\"\n    assert form_smallest_palindrome(\"abccba\", 1) == \"abccba\"\n    assert form_smallest_palindrome(\"aebcbda\", 3) == \"aabccba\"\n    assert form_smallest_palindrome(\"aebcbda\", 4) == \"aabbcda\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000082", "row_id": 82, "seed_ids": ["1560", "2196", "1556"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters and an integer `k`, you can perform the following operation at most `k` times:\n\n- Choose any index `i` and swap `s[i]` with `s[i + 1]` (0-indexed).\n\nAfter performing the operations, the string `s` should be a palindrome. Return the lexicographically smallest palindrome that can be obtained under these constraints. If it's not possible to form a palindrome, return an empty string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of `n` unique integers `nums` and an integer `k`, return the `k` smallest **absolute differences** between any two distinct elements in the list. More formally, you need to find the `k` smallest values of `|a - b|` for all pairs `(a, b)` where `a` and `b` are distinct elements in `nums`. Ensure that the elements in the output are unique and sorted in ascending order. If there are fewer than `k` unique differences, return all of them. Note that the absolute difference between two integers `a` and `b` is defined as `|a - b|`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_k_smallest_diff(nums, k):\n    \"\"\"\n    Returns the k smallest absolute differences between any two distinct elements in the list.\n    \"\"\"\n    nums.sort()\n    differences = set()\n    \n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            differences.add(abs(nums[i] - nums[j]))\n    \n    return sorted(list(differences)[:k])\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_find_k_smallest_diff():\n    assert find_k_smallest_diff([1, 3, 1], 1) == [2]\n    assert find_k_smallest_diff([1, 1, 1, 1], 1) == [0]\n    assert find_k_smallest_diff([1, 2, 3, 4, 5], 4) == [1, 2, 3, 4]\n    assert find_k_smallest_diff([4, 6, 1, 2, 3, 5], 3) == [1, 1, 2]\n\n# Testing with randomness to ensure the solution is robust\nimport random\nrandom_nums = random.sample(range(100), 10)\nk = 5\nassert find_k_smallest_diff(random_nums, k) == sorted(set([abs(a - b) for a in random_nums for b in random_nums if a != b]))[:k]\n\n# Testing with negative numbers\nassert find_k_smallest_diff([-1, -2, -3, -4, -5], 4) == [1, 2, 3, 4]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000083", "row_id": 83, "seed_ids": ["29", "2133", "1172"], "mode": "leetcode", "instruction": "Given a list of `n` unique integers `nums` and an integer `k`, return the `k` smallest **absolute differences** between any two distinct elements in the list. More formally, you need to find the `k` smallest values of `|a - b|` for all pairs `(a, b)` where `a` and `b` are distinct elements in `nums`. Ensure that the elements in the output are unique and sorted in ascending order. If there are fewer than `k` unique differences, return all of them. Note that the absolute difference between two integers `a` and `b` is defined as `|a - b|`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of integers representing the heights of buildings on a city street. Each building's height is given by a positive integer. A group of buildings is considered **monotonic** if the heights either strictly increase or strictly decrease when moving from left to right. \n\nYour task is to find the maximum number of buildings that can be included in a monotonic group within the given list of building heights. \n\n**Note**: A group of buildings can consist of a single building, and adjacent buildings in the group must have consecutive heights (i.e., the height difference between any two adjacent buildings in the group is exactly 1).\n\nReturn the maximum size of such a monotonic group.\n\nExample 1:\n```\nInput: heights = [5, 4, 3, 2, 1, 2, 3, 4, 5]\nOutput: 5\nExplanation: The longest monotonic group is [5, 4, 3, 2, 1] or [1, 2, 3, 4, 5].\n```\n\nExample 2:\n```\nInput: heights = [1, 3, 5, 4, 2, 4, 6]\nOutput: 4\nExplanation: The longest monotonic group is [1, 3, 5] or [2, 4, 6].\n```\n\nConstraints:\n- `1 <= heights.length <= 10^5`\n- `1 <= heights[i] <= 10^9`"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_monotonic_group_size(heights):\n    \"\"\"\n    Returns the maximum size of a monotonic group of buildings.\n    \"\"\"\n    max_size = 1  # At least one building can be a group.\n    current_size = 1  # Start with the first building in the group.\n    \n    # Iterate through the heights to find the longest monotonic sequence.\n    for i in range(1, len(heights)):\n        if heights[i] == heights[i-1] + 1 or heights[i] == heights[i-1] - 1:\n            current_size += 1\n            max_size = max(max_size, current_size)\n        else:\n            current_size = 1  # Reset the count if the sequence is broken.\n    \n    return max_size\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_max_monotonic_group_size():\n    assert max_monotonic_group_size([5, 4, 3, 2, 1, 2, 3, 4, 5]) == 5\n    assert max_monotonic_group_size([1, 3, 5, 4, 2, 4, 6]) == 4\n    assert max_monotonic_group_size([1, 2, 3, 4, 5, 6]) == 6\n    assert max_monotonic_group_size([6, 5, 4, 3, 2, 1]) == 6\n    assert max_monotonic_group_size([1, 3, 2, 2, 3, 4, 5]) == 3\n    assert max_monotonic_group_size([1]) == 1\n    assert max_monotonic_group_size([1, 2, 3, 2, 1]) == 3\n\npytest.main(['-v', __file__])\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000084", "row_id": 84, "seed_ids": ["1506", "2281", "1923"], "mode": "leetcode", "instruction": "You are given a list of integers representing the heights of buildings on a city street. Each building's height is given by a positive integer. A group of buildings is considered **monotonic** if the heights either strictly increase or strictly decrease when moving from left to right. \n\nYour task is to find the maximum number of buildings that can be included in a monotonic group within the given list of building heights. \n\n**Note**: A group of buildings can consist of a single building, and adjacent buildings in the group must have consecutive heights (i.e., the height difference between any two adjacent buildings in the group is exactly 1).\n\nReturn the maximum size of such a monotonic group.\n\nExample 1:\n```\nInput: heights = [5, 4, 3, 2, 1, 2, 3, 4, 5]\nOutput: 5\nExplanation: The longest monotonic group is [5, 4, 3, 2, 1] or [1, 2, 3, 4, 5].\n```\n\nExample 2:\n```\nInput: heights = [1, 3, 5, 4, 2, 4, 6]\nOutput: 4\nExplanation: The longest monotonic group is [1, 3, 5] or [2, 4, 6].\n```\n\nConstraints:\n- `1 <= heights.length <= 10^5`\n- `1 <= heights[i] <= 10^9`"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, a **substring** `t` is called **balanced** if the number of occurrences of each letter in `t` is the same. For example, the substring `\"ababa\"` is balanced because each letter appears exactly twice. \n\nDesign an algorithm to find the length of the longest **balanced** substring `t` in `s`. Return the length of `t`. If no such substring exists, return `0`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_balanced_substring(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest balanced substring in the given string s.\n    A balanced substring has the same number of occurrences for each character.\n    \"\"\"\n    max_len = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if all(substring.count(char) == substring.count(next(iter(substring))) for char in set(substring)):\n                max_len = max(max_len, len(substring))\n    return max_len\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_longest_balanced_substring():\n    assert longest_balanced_substring(\"abcbabc\u201d) == 4\n    assert longest_balanced_substring(\"aaabbbcc\") == 6\n    assert longest_balanced_substring(\"abcd\") == 0\n    assert longest_balanced_substring(\"aabbcc\") == 6\n    assert longest_balanced_substring(\"xxyyzzzz\") == 4\n    assert longest_balanced_substring(\"aabbcccdd\") == 4\n    assert longest_balanced_substring(\"bbaaac\") == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000085", "row_id": 85, "seed_ids": ["1273", "119", "855"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, a **substring** `t` is called **balanced** if the number of occurrences of each letter in `t` is the same. For example, the substring `\"ababa\"` is balanced because each letter appears exactly twice. \n\nDesign an algorithm to find the length of the longest **balanced** substring `t` in `s`. Return the length of `t`. If no such substring exists, return `0`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` consisting of lowercase English letters. You can perform the following operation at most once: choose two distinct indices `i` and `j` where `s[i]` is a vowel ('a', 'e', 'i', 'o', 'u'), and replace `s[i]` with `s[j]` and vice versa. A string is considered **beautiful** if it meets the following criteria:\n1. The string is a palindrome.\n2. The string contains exactly three distinct characters.\n\nReturn `true` if you can make the string `s` beautiful, and `false` otherwise."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef can_beautiful_string(s: str) -> bool:\n    \"\"\"\n    Determines if string s can be made beautiful by swapping at most one vowel character.\n    A string is considered beautiful if it is a palindrome and contains exactly three distinct characters.\n    \"\"\"\n    vowels = set('aeiou')\n    distinct_chars = set(s)\n    vowel_count = sum(1 for char in s if char in vowels)\n    \n    if len(distinct_chars) > 3:\n        return False\n    \n    if len(distinct_chars) == 3 and s != s[::-1]:\n        return False\n    \n    if len(distinct_chars) == 2:\n        return s == s[::-1]\n    \n    if len(distinct_chars) == 1:\n        return len(s) == s.count(next(iter(distinct_chars))) and s == s[::-1]\n    \n    # Exactly three distinct characters and palindrome\n    if len(distinct_chars) == 3 and s == s[::-1]:\n        # Check if any two characters can be swapped to form a palindrome\n        for char in vowels:\n            if char in distinct_chars:\n                temp_chars = list(distinct_chars)\n                temp_chars.remove(char)\n                for other_char in temp_chars:\n                    # Swap and check if palindrome\n                    if (s.replace(other_char, char, 1) + s.replace(other_char, char, 1)[1:] == \n                        s.replace(other_char, char, 1) + s.replace(other_char, char, 1)[0]):\n                        return True\n    return False\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import can_beautiful_string\n\ndef test_can_beautiful_string():\n    assert can_beautiful_string(\"a\") == True\n    assert can_beautiful_string(\"aa\") == False\n    assert can_beautiful_string(\"aba\") == False\n    assert can_beautiful_string(\"abca\") == True\n    assert can_beautiful_string(\"abc\") == False\n    assert can_beautiful_string(\"abcba\") == True\n    assert can_beautiful_string(\"aaaa\") == True\n    assert can_beautiful_string(\"aabaa\") == True\n    assert can_beautiful_string(\"adnea\") == True\n    assert can_beautiful_string(\"aeiaa\") == False\n    assert can_beautiful_string(\"auvia\") == True\n    assert can_beautiful_string(\"\ud264\") == True  # Non-English character test, should act as any other character\n    assert can_beautiful_string(\"pii\") == False\n    assert can_beautiful_string(\"aaab\") == False\n    assert can_beautiful_string(\"aaaaa\") == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000086", "row_id": 86, "seed_ids": ["670", "36", "1039"], "mode": "leetcode", "instruction": "You are given a string `s` consisting of lowercase English letters. You can perform the following operation at most once: choose two distinct indices `i` and `j` where `s[i]` is a vowel ('a', 'e', 'i', 'o', 'u'), and replace `s[i]` with `s[j]` and vice versa. A string is considered **beautiful** if it meets the following criteria:\n1. The string is a palindrome.\n2. The string contains exactly three distinct characters.\n\nReturn `true` if you can make the string `s` beautiful, and `false` otherwise."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a `m x n` grid of characters `board` and a word `word`, return `true` if `word` can be constructed from letters on the `board`. The word does not need to be constructed from letters adjacent in the same row or column, but it cannot use the same letter cell more than once. Each cell in the grid can only contribute one letter to the word. If the word can be formed, return `true`; otherwise, return `false`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef exist(board, word):\n    \"\"\"\n    Check if the word can be constructed from the board.\n    \"\"\"\n    rows, cols = len(board), len(board[0])\n    \n    def dfs(r, c, i):\n        if i == len(word):\n            return True\n        if r < 0 or c < 0 or r >= rows or c >= cols or board[r][c] != word[i]:\n            return False\n        board[r][c] = \"#\"  # Mark as visited\n        res = (dfs(r+1, c, i+1) or\n               dfs(r-1, c, i+1) or\n               dfs(r, c+1, i+1) or\n               dfs(r, c-1, i+1))\n        board[r][c] = word[i]  # Restore the cell\n        return res\n    \n    for r in range(rows):\n        for c in range(cols):\n            if dfs(r, c, 0):\n                return True\n    return False\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import exist\n\ndef test_exist_simple_word():\n    board = [\n        ['A','B','C','E'],\n        ['S','F','C','S'],\n        ['A','D','E','E']\n    ]\n    assert exist(board, \"ABCCED\") == True\n\ndef test_exist_complex_word():\n    board = [\n        ['A','B','C','E'],\n        ['S','F','C','S'],\n        ['A','D','E','E']\n    ]\n    assert exist(board, \"SEE\") == True\n\ndef test_exist_not_existing_word():\n    board = [\n        ['A','B','C','E'],\n        ['S','F','C','S'],\n        ['A','D','E','E']\n    ]\n    assert exist(board, \"ABCB\") == False\n\ndef test_exist_single_char_word():\n    board = [\n        ['A','B','C','E'],\n        ['S','F','C','S'],\n        ['A','D','E','E']\n    ]\n    assert exist(board, \"A\") == True\n\ndef test_exist_empty_word():\n    assert exist([], \"\") == True\n\ndef test_exist_single_row_board():\n    board = [\n        ['A','B','C','E']\n    ]\n    assert exist(board, \"ABCCED\") == True\n\ndef test_exist_single_column_board():\n    board = [\n        ['A'],\n        ['B'],\n        ['C'],\n        ['D'],\n        ['E']\n    ]\n    assert exist(board, \"ABCDE\") == True\n\ndef test_exist_single_element_board():\n    board = [\n        ['A']\n    ]\n    assert exist(board, \"A\") == True\n\ndef test_exist_large_board():\n    board = [\n        ['A','B','C','E'],\n        ['S','F','C','S'],\n        ['A','D','E','E'],\n        ['S','F','C','S'],\n        ['A','B','D','E']\n    ]\n    assert exist(board, \"ABCB\") == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000087", "row_id": 87, "seed_ids": ["2477", "1000", "79"], "mode": "leetcode", "instruction": "Given a `m x n` grid of characters `board` and a word `word`, return `true` if `word` can be constructed from letters on the `board`. The word does not need to be constructed from letters adjacent in the same row or column, but it cannot use the same letter cell more than once. Each cell in the grid can only contribute one letter to the word. If the word can be formed, return `true`; otherwise, return `false`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]`. Design a data structure to efficiently manage these intervals and answer the following operations:\n\n1. `addInterval(start, end)`: Add a new interval `[start, end]` to the data structure. Ensure that the new interval does not overlap with any existing interval.\n2. `removeInterval(start, end)`: Remove an existing interval `[start, end]` from the data structure if it exists.\n3. `mergeIntervals()`: Merge all overlapping intervals in the data structure and return the merged intervals as a list.\n4. `queryInterval(start, end)`: Check if there is any interval in the data structure that overlaps with the given interval `[start, end]`.\n\nImplement the `IntervalManager` class:\n\n*   `IntervalManager()`: Initializes the data structure with an empty list of intervals.\n*   `void addInterval(start, end)`: Adds a new interval `[start, end]` to the data structure.\n*   `void removeInterval(start, end)`: Removes an interval `[start, end]` from the data structure if it exists.\n*   `List<int[]> mergeIntervals()`: Merges all overlapping intervals and returns the merged intervals as a list.\n*   `boolean queryInterval(start, end)`: Checks if there is any interval in the data structure that overlaps with the given interval `[start, end]`.\n\nEnsure that the intervals are stored in a way that allows for efficient operations, and the intervals stored in the data structure are sorted by their start times."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\n\nclass IntervalManager:\n    def __init__(self):\n        self.intervals = []\n    \n    def addInterval(self, start: int, end: int) -> None:\n        # This function will add a new interval if it does not overlap with any existing interval\n        new_interval = [start, end]\n        # Insert the new interval in a sorted manner\n        idx = 0\n        while idx < len(self.intervals) and new_interval[0] > self.intervals[idx][1]:\n            idx += 1\n        if idx < len(self.intervals) and new_interval[0] < self.intervals[idx][1]:\n            # New interval overlaps with existing one, do not add\n            return\n        elif idx > 0 and self.intervals[idx-1][1] >= new_interval[0]:\n            # New interval overlaps with the interval just before the insertion point, merge them\n            self.intervals[idx-1][1] = max(self.intervals[idx-1][1], end)\n            if idx < len(self.intervals) and self.intervals[idx][0] <= self.intervals[idx-1][1]:\n                # Merge with the next interval as well if applicable\n                self.intervals[idx-1][1] = max(self.intervals[idx-1][1], self.intervals[idx][1])\n                self.intervals.pop(idx)\n        else:\n            # No overlap found, insert the new interval\n            self.intervals.insert(idx, new_interval)\n    \n    def removeInterval(self, start: int, end: int) -> None:\n        # This function will remove an existing interval if it exists\n        self.intervals = [interval for interval in self.intervals if interval[1] < start or interval[0] > end]\n    \n    def mergeIntervals(self) -> List[int]:\n        # Merge all overlapping intervals\n        if not self.intervals:\n            return []\n        \n        merged = [self.intervals[0]]\n        for interval in self.intervals[1:]:\n            if interval[0] <= merged[-1][1]:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n            else:\n                merged.append(interval)\n        \n        return merged\n    \n    def queryInterval(self, start: int, end: int) -> bool:\n        # Query if there is any interval that overlaps with the given interval\n        for interval in self.intervals:\n            if interval[0] <= end and interval[1] >= start:\n                return True\n        return False\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_interval_manager():\n    manager = IntervalManager()\n\n    # Add intervals\n    manager.addInterval(1, 2)\n    manager.addInterval(3, 4)\n    manager.addInterval(5, 7)\n    assert manager.queryInterval(2, 3) == True\n    assert manager.queryInterval(1, 1) == True\n    assert manager.queryInterval(4, 4) == True\n    assert manager.queryInterval(7, 8) == True\n    assert manager.queryInterval(0, 0) == False\n\n    # Remove interval\n    manager.removeInterval(3, 4)\n    assert manager.queryInterval(2, 3) == False\n    assert manager.queryInterval(3, 3) == False\n\n    # Merge intervals\n    assert manager.mergeIntervals() == [[1, 2], [5, 7]]\n\n    # Add interval that overlaps but does not merge\n    manager.addInterval(3, 10)\n    assert manager.mergeIntervals() == [[1, 2], [3, 10], [5, 7]]\n\n    # Add and merge adjacent intervals\n    manager.addInterval(2, 3)\n    assert manager.mergeIntervals() == [[1, 3], [5, 7], [10, 10]]\n\n    # Add and merge over multiple intervals\n    manager.addInterval(8, 8)\n    manager.addInterval(9, 9)\n    assert manager.mergeIntervals() == [[1, 3], [5, 7], [8, 10]]\n\n    # Complex queries and interval manipulation\n    manager.addInterval(0, 10)\n    assert manager.queryInterval(0, 0) == True\n    assert manager.queryInterval(0, 1) == True\n    assert manager.queryInterval(6, 10) == True\n    assert manager.queryInterval(12, 15) == False\n   (manager.removeInterval(12, 15) not in manager.intervals)\n\ntest_interval_manager()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000088", "row_id": 88, "seed_ids": ["497", "933", "1271"], "mode": "leetcode", "instruction": "You are given a list of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]`. Design a data structure to efficiently manage these intervals and answer the following operations:\n\n1. `addInterval(start, end)`: Add a new interval `[start, end]` to the data structure. Ensure that the new interval does not overlap with any existing interval.\n2. `removeInterval(start, end)`: Remove an existing interval `[start, end]` from the data structure if it exists.\n3. `mergeIntervals()`: Merge all overlapping intervals in the data structure and return the merged intervals as a list.\n4. `queryInterval(start, end)`: Check if there is any interval in the data structure that overlaps with the given interval `[start, end]`.\n\nImplement the `IntervalManager` class:\n\n*   `IntervalManager()`: Initializes the data structure with an empty list of intervals.\n*   `void addInterval(start, end)`: Adds a new interval `[start, end]` to the data structure.\n*   `void removeInterval(start, end)`: Removes an interval `[start, end]` from the data structure if it exists.\n*   `List<int[]> mergeIntervals()`: Merges all overlapping intervals and returns the merged intervals as a list.\n*   `boolean queryInterval(start, end)`: Checks if there is any interval in the data structure that overlaps with the given interval `[start, end]`.\n\nEnsure that the intervals are stored in a way that allows for efficient operations, and the intervals stored in the data structure are sorted by their start times."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given two strings `s` and `t`, both of length `n`, and an integer `k`, you can perform the following operation on `s` any number of times: choose `k` indices in `s` and rotate the substring of `s` starting at each of those indices by one position to the right (the last character moves to the front). A rotation is represented by a pair `[i, k]` where `i` is the starting index and `k` is the number of positions to rotate. Determine the lexicographically smallest string `s` that can be obtained after performing these operations, and also find the minimum number of operations required to achieve this."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef rotate_substring(s, index, k):\n    \"\"\"\n    Rotates the substring starting at index by k positions to the right.\n    If k is positive, it moves characters to the right; if negative, to the left.\n    \"\"\"\n    k = k % len(s)\n    return s[index:index+k] + s[index+k:index] + s[:index] if k > 0 else s[index+k:] + s[index:index+k]\n\ndef find_smallest_string(s, k):\n    \"\"\"\n    Finds the lexicographically smallest string s and the minimum number of operations required.\n    \"\"\"\n    n = len(s)\n    if k >= n - 1:\n        return s, 0\n    \n    smallest = s\n    min_operations = float('inf')\n    \n    for i in range(n):\n        current = s\n        operations = 0\n        for j in range(n):\n            min_index = j\n            for r in range(1, k+1):\n                rotated = rotate_substring(current, j, r)\n                if rotated < current:\n                    current = rotated\n                    operations += 1\n                    min_index = j\n                    break\n            if min_index == j:\n                break\n        if current < smallest:\n            smallest = current\n            min_operations = operations\n        s = smallest\n    \n    return smallest, min_operations\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_smallest_string\n\ndef test_find_smallest_string():\n    assert find_smallest_string(\"daily\", 1) == (\"adily\", 1)\n    assert find_smallest_string(\"onlinesubmission\", 2) == (\"bimonlinesusmission\", 2)\n    assert find_smallest_string(\"acbbcabbba\", 3) == (\"aaabbbcccb\", 3)\n    assert find_smallest_string(\"abcdxyz\", 2) == (\"abcdxyz\", 0)\n    assert find_smallest_string(\"zzzzzzzzab\", 1) == (\"aabzzzzzzz\", 8)\n\ndef test_min_operations():\n    assert find_smallest_string(\"daily\", 1)[1] == 1\n    assert find_smallest_string(\"onlinesubmission\", 2)[1] == 2\n    assert find_smallest_string(\"acbbcabbba\", 3)[1] == 3\n    assert find_smallest_string(\"abcdxyz\", 2)[1] == 0\n    assert find_smallest_string(\"zzzzzzzzab\", 1)[1] == 8\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000089", "row_id": 89, "seed_ids": ["1202", "982", "2531"], "mode": "leetcode", "instruction": "Given two strings `s` and `t`, both of length `n`, and an integer `k`, you can perform the following operation on `s` any number of times: choose `k` indices in `s` and rotate the substring of `s` starting at each of those indices by one position to the right (the last character moves to the front). A rotation is represented by a pair `[i, k]` where `i` is the starting index and `k` is the number of positions to rotate. Determine the lexicographically smallest string `s` that can be obtained after performing these operations, and also find the minimum number of operations required to achieve this."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, a **substring** `t` of `s` is called **balanced** if the number of vowels (`a`, `e`, `i`, `o`, `u`) in `t` is equal to the number of consonants. Return the number of **balanced** substrings in `s`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_balanced_substrings(s: str) -> int:\n    \"\"\"\n    Returns the number of balanced substrings in the given string `s`.\n    A balanced substring has an equal number of vowels and consonants.\n    \"\"\"\n    counts = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n    max_balanced_substrings = 0\n    current_vowels = 0\n    current_consonants = 0\n\n    for char in s:\n        if char in counts:\n            current_vowels += 1\n            counts[char] += 1\n        else:\n            current_consonants += 1\n        \n        if current_vowels == current_consonants:\n            max_balanced_substrings += 1\n            current_vowels, current_consonants = 0, 0\n\n    return max_balanced_substrings\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_balanced_substrings\n\ndef test_count_balanced_substrings():\n    assert count_balanced_substrings('a') == 0\n    assert count_balanced_substrings('aabcbaabc') == 4\n    assert count_balanced_substrings('aa') == 1\n    assert count_balanced_substrings('beeeecessary') == 3\n    assert count_balanced_substrings('aebbcdeeeecba') == 6\n    assert count_balanced_substrings('abcd') == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000090", "row_id": 90, "seed_ids": ["2320", "2021", "647"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, a **substring** `t` of `s` is called **balanced** if the number of vowels (`a`, `e`, `i`, `o`, `u`) in `t` is equal to the number of consonants. Return the number of **balanced** substrings in `s`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` (a string consisting only of `'0's` and `'1's`), you can perform the following operation any number of times: choose any **non-empty subsequence** of `s` and toggle all its characters (i.e., change all `'0's` to `'1's` and all `'1's` to `'0's`). Determine if it is possible to make the string `s` **palindromic** (the same string read from left to right and from right to left) using these operations. Return `true` if it is possible, otherwise return `false`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef can_make_palindrome(s: str) -> bool:\n    \"\"\"\n    Determines if it is possible to make the binary string s palindromic\n    by toggling characters in any non-empty subsequence any number of times.\n    \"\"\"\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] != s[right]:\n            # Check if we can make the substring from left to right equal by toggling\n            if s[left + 1:right + 1] == s[left:right][::-1] or s[left:right + 1][::-1] == s[left + 1:right + 1]:\n                return True\n        left += 1\n        right -= 1\n    return True\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_can_make_palindrome():\n    assert can_make_palindrome(\"000110111\") == True  # Can make \"000000000\"\n    assert can_make_palindrome(\"010\") == False  # Fixed example\n    assert can_make_palindrome(\"1010\") == True  # Can make \"1010\" to \"1111\" or \"0000\"\n    assert can_make_palindrome(\"01101\") == True  # Can make \"01101\" to \"01010\"\n    assert can_make_palindrome(\"11001100\") == True  # Can make \"11001100\" to \"11111111\" or \"00000000\"\n    assert can_make_palindrome(\"00110011\") == False  # Cannot make palindromic\n    assert can_make_palindrome(\"1\") == True  # Single character is always palindromic\n    assert can_make_palindrome(\"01\") == True  # Two characters, can be toggled to \"10\"\n    assert can_make_palindrome(\"0011\") == True  # Can make \"0011\" to \"0000\" or \"1111\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000091", "row_id": 91, "seed_ids": ["1460", "1379", "32"], "mode": "leetcode", "instruction": "Given a binary string `s` (a string consisting only of `'0's` and `'1's`), you can perform the following operation any number of times: choose any **non-empty subsequence** of `s` and toggle all its characters (i.e., change all `'0's` to `'1's` and all `'1's` to `'0's`). Determine if it is possible to make the string `s` **palindromic** (the same string read from left to right and from right to left) using these operations. Return `true` if it is possible, otherwise return `false`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a 2D grid representing a map of islands and water. The grid contains the following characters:\n- `'W'` for water (you cannot move through water).\n- `'L'` for land (you can move through land).\n- `'S'` for start (your starting position, guaranteed to be on land).\n\nYou can move up, down, left, or right from any land cell to an adjacent land cell. The goal is to find the shortest path from the start position to any border cell (a cell on the edge of the grid) that is also land. You cannot move diagonally. If there is no such path, return `-1`.\n\nReturn the number of steps in the shortest path, or `-1` if no such path exists."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import deque\n\ndef shortest_border_path(grid):\n    \"\"\"\n    Returns the shortest path from 'S' to any border land cell, or -1 if no such path exists.\n    \"\"\"\n    if not grid or not grid[0]:\n        return -1\n    \n    rows, cols = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = set()\n    \n    start = None\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 'S':\n                start = (r, c)\n            elif grid[r][c] == 'W':\n                grid[r][c] = '#'\n    \n    queue = deque([(start, 0)])\n    visited.add(start)\n    \n    while queue:\n        (r, c), steps = queue.popleft()\n        if r in [0, rows-1] or c in [0, cols-1]:\n            return steps\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] != '#' and (nr, nc) not in visited:\n                visited.add((nr, nc))\n                queue.append(((nr, nc), steps + 1))\n                \n    return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_shortest_border_path():\n    grid1 = ['S#L', 'LLL', 'LWL']\n    assert shortest_border_path(grid1) == 1\n\n    grid2 = ['W', 'L', 'L', 'L']\n    assert shortest_border_path(grid2) == -1\n\n    grid3 = ['L', 'L', 'L', 'S']\n    assert shortest_border_path(grid3) == 0\n\n    grid4 = ['SWL', 'LWL', 'LWL']\n    assert shortest_border_path(grid4) == 1\n\n    grid5 = ['LWL', 'SLL', 'WLW', 'WWW']\n    assert shortest_border_path(grid5) == 2\n\n    grid6 = ['W']\n    assert shortest_border_path(grid6) == -1\n\n    grid7 = ['S']\n    assert shortest_border_path(grid7) == 0\n\n    grid8 = ['L', 'S', 'L', 'L', 'L', 'L']\n    assert shortest_border_path(grid8) == 1\n\n    grid9 = ['L', 'L', 'L', 'L', 'L', 'S']\n    assert shortest_border_path(grid9) == 0\n\n    grid10 = ['L', 'S', 'L', 'L', 'L', 'L']\n    assert shortest_border_path(grid10) == 1\n\n    grid11 = ['L', 'L', 'L', 'L', 'L', 'L', 'S']\n    assert shortest_border_path(grid11) == 0\n\n    grid12 = ['L', 'S', 'L', 'L']\n    assert shortest_border_path(grid12) == 1\n\n    grid13 = ['S', 'L', 'L', 'L']\n    assert shortest_border_path(grid13) == 0\n\n    grid14 = ['L', 'L', 'L', 'S']\n    assert shortest_border_path(grid14) == 1\n\n    grid15 = ['S', 'S', 'S', 'S']\n    assert shortest_border_path(grid15) == -1\n\n    grid16 = ['L', 'L', 'L', 'L', 'L', 'L', 'S', 'L', 'L', 'L']\n    assert shortest_border_path(grid16) == 3\n\n    grid17 = ['L', 'L', 'L', 'L', 'L', 'L', 'S', 'L', 'L', 'L', 'L']\n    assert shortest_border_path(grid17) == 2\n\n    grid18 = ['S', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L']\n    assert shortest_border_path(grid18) == 0\n\n    grid19 = ['L', 'L', 'L', 'S', 'L', 'L', 'L', 'L', 'L', 'L']\n    assert shortest_border_path(grid19) == 1\n\n    grid20 = ['L', 'L', 'L', 'L', 'L', 'L', 'S', 'L', 'L', 'L', 'L', 'L']\n    assert shortest_border_path(grid20) == 3\n\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000092", "row_id": 92, "seed_ids": ["1298", "2511", "1926"], "mode": "leetcode", "instruction": "You are given a 2D grid representing a map of islands and water. The grid contains the following characters:\n- `'W'` for water (you cannot move through water).\n- `'L'` for land (you can move through land).\n- `'S'` for start (your starting position, guaranteed to be on land).\n\nYou can move up, down, left, or right from any land cell to an adjacent land cell. The goal is to find the shortest path from the start position to any border cell (a cell on the edge of the grid) that is also land. You cannot move diagonally. If there is no such path, return `-1`.\n\nReturn the number of steps in the shortest path, or `-1` if no such path exists."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an array of integers `nums`, find the length of the longest **consecutive sequence** that can be formed by rearranging the elements of the array. A **consecutive sequence** is a sequence where each element is exactly one more than the previous element. If no such sequence exists, return 0.\n\nFor example, given `nums = [100, 4, 200, 1, 3, 2]`, the longest consecutive sequence that can be formed is `[1, 2, 3, 4]`, so the function should return 4."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_consecutive(nums):\n    \"\"\"\n    Finds the length of the longest consecutive sequence that can be formed by rearranging the elements of the array.\n    \"\"\"\n    num_set = set(nums)\n    longest_streak = 0\n\n    for num in num_set:\n        # Check if it's the start of a sequence\n        if num - 1 not in num_set:\n            current_num = num\n            current_streak = 1\n\n            # Count consecutive numbers\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_streak += 1\n\n            longest_streak = max(longest_streak, current_streak)\n\n    return longest_streak\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import longest_consecutive\n\ndef test_longest_consecutive_empty_list():\n    assert longest_consecutive([]) == 0\n\ndef test_longest_consecutive_no_sequence():\n    assert longest_consecutive([204, 205, 206, 208, 209]) == 0\n\ndef test_longest_consecutive_single_sequence():\n    assert longest_consecutive([100, 4, 200, 1, 3, 2]) == 4\n    assert longest_consecutive([103, 104, 105, 102]) == 3\n\ndef test_longest_consecutive_multiple_sequences():\n    assert longest_consecutive([1, 9, 3, 10, 4, 20, 2]) == 4\n    assert longest_consecutive([101, 102, 104, 106, 6, 7, 8, 9, 103, 105]) == 5\n\ndef test_longest_consecutive_all_same_number():\n    assert longest_consecutive([5, 5, 5, 5]) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000093", "row_id": 93, "seed_ids": ["1935", "2053", "376"], "mode": "leetcode", "instruction": "Given an array of integers `nums`, find the length of the longest **consecutive sequence** that can be formed by rearranging the elements of the array. A **consecutive sequence** is a sequence where each element is exactly one more than the previous element. If no such sequence exists, return 0.\n\nFor example, given `nums = [100, 4, 200, 1, 3, 2]`, the longest consecutive sequence that can be formed is `[1, 2, 3, 4]`, so the function should return 4."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Implement the `CircularArray` class that supports the following operations:\n\n- `CircularArray(int size)` Initializes the `CircularArray` with `size` elements, all set to zero.\n- `void set(int index, int val)` Sets the value at the given `index` to `val`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n- `int get(int index)` Returns the value at the given `index`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n- `void increment(int index, int val)` Increments the value at the given `index` by `val`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n\nAdditionally, provide a method:\n\n- `String toString()` Returns a string representation of the `CircularArray`, where each element is separated by a comma and the entire array is enclosed in square brackets."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass CircularArray:\n    def __init__(self, size: int):\n        \"\"\"\n        Initializes the CircularArray with `size` elements, all set to zero.\n        \"\"\"\n        self.size = size\n        self.array = [0] * size\n\n    def set(self, index: int, val: int):\n        \"\"\"\n        Sets the value at the given `index` to `val`. If the index is out of bounds, it should wrap around.\n        \"\"\"\n        self.array[index % self.size] = val\n\n    def get(self, index: int) -> int:\n        \"\"\"\n        Returns the value at the given `index`. If the index is out of bounds, it should wrap around.\n        \"\"\"\n        return self.array[index % self.size]\n\n    def increment(self, index: int, val: int):\n        \"\"\"\n        Increments the value at the given `index` by `val`. If the index is out of bounds, it should wrap around.\n        \"\"\"\n        self.array[index % self.size] += val\n\n    def to_string(self) -> str:\n        \"\"\"\n        Returns a string representation of the CircularArray.\n        \"\"\"\n        return \"[\" + \",\".join(map(str, self.array)) + \"]\"\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_circular_array_initialization():\n    ca = CircularArray(4)\n    assert ca.to_string() == '[0, 0, 0, 0]'\n\ndef test_set_and_get():\n    ca = CircularArray(4)\n    ca.set(1, 10)\n    ca.set(3, 20)\n    assert ca.get(1) == 10\n    assert ca.get(3) == 20\n\ndef test_wrap_around_set():\n    ca = CircularArray(4)\n    ca.set(3, 10)\n    ca.set(4, 20)\n    assert ca.to_string() == '[0, 0, 0, 20]'\n\ndef test_wrap_around_get():\n    ca = CircularArray(4)\n    ca.set(0, 10)\n    ca.set(3, 20)\n    assert ca.get(3) == 20\n    assert ca.get(4) == 10\n\ndef test_increment():\n    ca = CircularArray(4)\n    ca.set(1, 10)\n    ca.increment(1, 5)\n    assert ca.get(1) == 15\n\ndef test_to_string():\n    ca = CircularArray(4)\n    ca.set(1, 10)\n    ca.set(2, 20)\n    ca.set(3, 30)\n    assert ca.to_string() == '[0, 10, 20, 30]'\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000094", "row_id": 94, "seed_ids": ["2166", "1091", "2357"], "mode": "leetcode", "instruction": "Implement the `CircularArray` class that supports the following operations:\n\n- `CircularArray(int size)` Initializes the `CircularArray` with `size` elements, all set to zero.\n- `void set(int index, int val)` Sets the value at the given `index` to `val`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n- `int get(int index)` Returns the value at the given `index`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n- `void increment(int index, int val)` Increments the value at the given `index` by `val`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n\nAdditionally, provide a method:\n\n- `String toString()` Returns a string representation of the `CircularArray`, where each element is separated by a comma and the entire array is enclosed in square brackets."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a **binary tree** with `n` nodes, where each node has a unique value from `1` to `n`, determine if the tree can be **partitioned** into two subsets such that the sum of values in each subset is equal. Return `true` if such a partition exists, otherwise return `false`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef can_partition_bst(root: TreeNode) -> bool:\n    \"\"\"\n    Determine if a BST can be partitioned into two subsets with equal sum.\n    \"\"\"\n    def sum_of_bst(root: TreeNode) -> int:\n        if not root:\n            return 0\n        return root.val + sum_of_bst(root.left) + sum_of_bst(root.right)\n    \n    total_sum = sum_of_bst(root)\n    if total_sum % 2 != 0:\n        return False\n    \n    target = total_sum // 2\n    visited = set()\n\n    def dfs(node: TreeNode, current_sum: int) -> bool:\n        if not node:\n            return False\n        if current_sum == target and node not in visited:\n            return True\n        visited.add(node)\n        return dfs(node.left, current_sum + node.val) or dfs(node.right, current_sum + node.val)\n    \n    return dfs(root, 0)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import TreeNode, can_partition_bst\n\ndef test_can_partition_bst():\n    # Constructing a simple BST\n    #       1\n    #        \\\n    #         2\n    #        /\n    #       3\n    root = TreeNode(1)\n    root.right = TreeNode(2)\n    root.right.left = TreeNode(3)\n\n    assert not can_partition_bst(root)\n\n    # Constructing a balanced BST\n    #       1\n    #      / \\\n    #     2   3\n    #    / \\ / \\\n    #   4  5 6  7\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    assert can_partition_bst(root)\n\n# Constructing a BST where the sum of the values cannot be partitioned into two equal subsets\n#       1\n#        \\\n#         2\n#        /\n#       4\n#      /\n#     8\n    root = TreeNode(1)\n    root.right = TreeNode(2)\n    root.right.left = TreeNode(4)\n    root.right.left.left = TreeNode(8)\n\n    assert not can_partition_bst(root)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000095", "row_id": 95, "seed_ids": ["1710", "1557", "587"], "mode": "leetcode", "instruction": "Given a **binary tree** with `n` nodes, where each node has a unique value from `1` to `n`, determine if the tree can be **partitioned** into two subsets such that the sum of values in each subset is equal. Return `true` if such a partition exists, otherwise return `false`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of `n` unique integers, determine if there exists a pair of integers in the list whose sum is equal to a given target integer `k`. If such a pair exists, return the indices of the two integers (0-indexed) in any order. If no such pair exists, return an empty list. Note that the same integer cannot be used twice."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_pair_with_sum(nums, k):\n    \"\"\"\n    Returns a list containing the indices of the two integers whose sum equals k.\n    If no such pair exists, returns an empty list.\n    \"\"\"\n    num_to_index = {}\n    for i, num in enumerate(nums):\n        complement = k - num\n        if complement in num_to_index:\n            return [num_to_index[complement], i]\n        num_to_index[num] = i\n    return []\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_find_pair_with_sum():\n    assert find_pair_with_sum([2, 7, 11, 15], 9) == [0, 1]\n    assert find_pair_with_index([3, 2, 4], 6) == [1, 2]\n    assert find_pair_with_index([3, 3], 6) == [0, 1]\n    assert find_pair_with_index([1, 2, 3, 4, 5], 10) == []\n    assert find_pair_with_sum([], 10) == []\n\ndef find_pair_with_index(nums, k):\n    return find_pair_with_sum(nums, k)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000096", "row_id": 96, "seed_ids": ["2485", "2345", "796"], "mode": "leetcode", "instruction": "Given a list of `n` unique integers, determine if there exists a pair of integers in the list whose sum is equal to a given target integer `k`. If such a pair exists, return the indices of the two integers (0-indexed) in any order. If no such pair exists, return an empty list. Note that the same integer cannot be used twice."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a matrix `matrix` of size `m x n` containing integers, design an algorithm to find the sum of the maximum element in each row. For example, if the matrix is:\n\n```\n[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n```\n\nThe output should be the sum of the maximum elements in each row, which is `3 + 6 + 9 = 18`.\n\nWrite a function `sumOfMaxElements(matrix: List[List[int]]) -> int` that returns the sum of the maximum elements in each row of the given matrix.\n\n### Example\n\n#### Input\n```\nmatrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n```\n\n#### Output\n```\n18\n```\n\n### Constraints\n\n- `1 <= m, n <= 100`\n- `-1000 <= matrix[i][j] <= 1000`"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\n\ndef sumOfMaxElements(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Returns the sum of the maximum elements in each row of the given matrix.\n    \"\"\"\n    return sum(max(row) for row in matrix)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sumOfMaxElements\n\ndef test_sumOfMaxElements():\n    assert sumOfMaxElements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 18\n    assert sumOfMaxElements([[10, -2, 3], [3, 5, 7], [-1, -5, -10]]) == 15\n    assert sumOfMaxElements([[0]]) == 0\n    assert sumOfMaxElements([[5, 5, 5], [5, 5, 5]]) == 10\n    assert sumOfMaxElements([[1000, -1000, 1000], [-1000, 1000, -1000]]) == 2000\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000097", "row_id": 97, "seed_ids": ["896", "1337", "928"], "mode": "leetcode", "instruction": "Given a matrix `matrix` of size `m x n` containing integers, design an algorithm to find the sum of the maximum element in each row. For example, if the matrix is:\n\n```\n[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n```\n\nThe output should be the sum of the maximum elements in each row, which is `3 + 6 + 9 = 18`.\n\nWrite a function `sumOfMaxElements(matrix: List[List[int]]) -> int` that returns the sum of the maximum elements in each row of the given matrix.\n\n### Example\n\n#### Input\n```\nmatrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n```\n\n#### Output\n```\n18\n```\n\n### Constraints\n\n- `1 <= m, n <= 100`\n- `-1000 <= matrix[i][j] <= 1000`"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a complete binary tree represented by an array `tree`, where `tree[i]` represents the value of the node at index `i`, and each parent node's value is the bitwise OR of its two children. You are given the root index `0` and a target value `target`. Your task is to insert a new node with value `target` into the array representation of the tree while maintaining the complete binary tree property, and return the new root index of the modified array.\n\nImplement the `CBTArrayInserter` class with the following methods:\n*   `CBTArrayInserter(int[] tree)`: Initializes the data structure with the given array `tree` representing the complete binary tree.\n*   `int insert(int target)`: Inserts a new node with value `target` into the tree and returns the new root index of the modified array.\n*   `int get_root()`: Returns the root index of the current state of the tree."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass CBTArrayInserter:\n    def __init__(self, tree):\n        self.tree = tree\n        self.size = len(tree)\n\n    def insert(self, target):\n        self.size += 1\n        index = self.size - 1\n        self.tree.append(target)\n        while index > 0:\n            parent = (index - 1) // 2\n            if self.tree[parent] != self.tree[index] | self.tree[parent]:\n                self.tree[parent] |= self.tree[index]\n                index = parent\n            else:\n                break\n        return 0\n\n    def get_root(self):\n        return 0\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_insert_and_get_root():\n    # Test Case 1\n    inserter = CBTArrayInserter([1, 2, 3])\n    assert inserter.insert(5) == 0\n    assert inserter.tree == [1, 2, 3, 5]  # 5 should be inserted at the last index while maintaining the property\n\n    # Test Case 2\n    inserter = CBTArrayInserter([1, 2, 4, 0])\n    assert inserter.insert(3) == 0\n    assert inserter.tree == [1, 2, 4, 0, 3]  # 3 should be inserted at the last index while maintaining the property\n\n    # Test Case 3\n    inserter = CBTArrayInserter([1, 2, 3, 5, 6])\n    assert inserter.insert(7) == 0\n    assert inserter.tree == [1, 2, 3, 5, 6, 7]  # 7 should be inserted at the last index while maintaining the property\n\n    # Test Case 4: Inserting a target equal to the root value\n    inserter = CBTArrayInserter([1, 2, 3, 4, 5])\n    assert inserter.insert(4) == 0\n    assert inserter.tree == [1, 2, 3, 5, 5, 4]  # Target 4 is already the root, should not change the tree structure\n\n    # Test Case 5: Inserting at the last level\n    inserter = CBTArrayInserter([1, 2, 3])\n    assert inserter.insert(0) == 0\n    assert inserter.tree == [1, 2, 3, 0]  # Target 0 should be inserted at the last index while maintaining the property\n\n# Note: The `get_root` method always returns 0 as per the implementation. We can add a test-case if the method's behavior changes.\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000098", "row_id": 98, "seed_ids": ["318", "1265", "919"], "mode": "leetcode", "instruction": "Given a complete binary tree represented by an array `tree`, where `tree[i]` represents the value of the node at index `i`, and each parent node's value is the bitwise OR of its two children. You are given the root index `0` and a target value `target`. Your task is to insert a new node with value `target` into the array representation of the tree while maintaining the complete binary tree property, and return the new root index of the modified array.\n\nImplement the `CBTArrayInserter` class with the following methods:\n*   `CBTArrayInserter(int[] tree)`: Initializes the data structure with the given array `tree` representing the complete binary tree.\n*   `int insert(int target)`: Inserts a new node with value `target` into the tree and returns the new root index of the modified array.\n*   `int get_root()`: Returns the root index of the current state of the tree."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary matrix `grid` of size `m x n`, flip the image horizontally, then invert all the values: change `0` to `1` and `1` to `0`. Return the resulting matrix. A flip horizontally means that for each row, the values are reversed, and inverting the values means that all `0`s are changed to `1`s and all `1`s are changed to `0`s."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef flip_and_invert_image(grid):\n    \"\"\"\n    Flips the given binary matrix horizontally, then inverts all the values.\n    :param grid: List[List[int]] - The input binary matrix.\n    :return: List[List[int]] - The flipped and inverted matrix.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    result = []\n    for row in grid:\n        flipped_row = row[::-1]  # Flip the row horizontally\n        inverted_row = [1 - val for val in flipped_row]  # Invert the values\n        result.append(inverted_row)\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef test_flip_and_invert_image():\n    assert flip_and_invert_image([[1,1,0],[1,0,1],[0,0,0]]) == [[1,0,0],[0,1,0],[1,1,1]]\n    assert flip_and_invert_image([[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]) == [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n\ndef test_single_row():\n    assert flip_and_invert_image([[1]]) == [[0]]\n\ndef test_empty_matrix():\n    assert flip_and_invert_image([]) == []\n\ndef test_all_zeros():\n    assert flip_and_invert_image([[0,0,0],[0,0,0]]) == [[1,1,1],[1,1,1]]\n\ndef test_all_ones():\n    assert flip_and_invert_image([[1,1,1],[1,1,1]]) == [[0,0,0],[0,0,0]]\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000099", "row_id": 99, "seed_ids": ["673", "1120", "2428"], "mode": "leetcode", "instruction": "Given a binary matrix `grid` of size `m x n`, flip the image horizontally, then invert all the values: change `0` to `1` and `1` to `0`. Return the resulting matrix. A flip horizontally means that for each row, the values are reversed, and inverting the values means that all `0`s are changed to `1`s and all `1`s are changed to `0`s."}}
