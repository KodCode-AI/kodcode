{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Implement a class `CircularQueue` that supports the following operations:\n\n*   `CircularQueue(int k)` constructs the `CircularQueue` with a maximum size of `k`.\n*   `int Front()` retrieves the element at the front of the queue without removing it. Returns `-1` if the queue is empty.\n*   `int Rear()` retrieves the element at the rear of the queue without removing it. Returns `-1` if the queue is empty.\n*   `boolean enQueue(int value)` inserts the element `value` into the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is full).\n*   `boolean deQueue()` deletes an element from the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is empty).\n*   `boolean isEmpty()` returns `true` if the queue is currently empty, `false` otherwise.\n*   `boolean isFull()` returns `true` if the queue is currently full, `false` otherwise.\n\nEnsure that all operations are performed in **constant time** (O(1))."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass CircularQueue:\n    def __init__(self, k: int):\n        self.max_size = k\n        self.front = 0\n        self.rear = -1\n        self.current_size = 0\n        self.queue = [-1] * k\n\n    def Front(self) -> int:\n        return self.queue[self.front] if self.current_size else -1\n\n    def Rear(self) -> int:\n        return self.queue[self.rear] if self.current_size else -1\n\n    def enQueue(self, value: int) -> bool:\n        if self.isFull():\n            return False\n        self.rear = (self.rear + 1) % self.max_size\n        self.queue[self.rear] = value\n        self.current_size += 1\n        return True\n\n    def deQueue(self) -> bool:\n        if self.isEmpty():\n            return False\n        self.queue[self.front] = -1\n        self.front = (self.front + 1) % self.max_size\n        self.current_size -= 1\n        if self.current_size == 0:\n            self.rear = -1\n        return True\n\n    def isEmpty(self) -> bool:\n        return self.current_size == 0\n\n    def isFull(self) -> bool:\n        return self.current_size == self.max_size\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_circular_queue():\n    circular_queue = CircularQueue(3)\n    assert circular_queue.enQueue(1) == True\n    assert circular_queue.enQueue(2) == True\n    assert circular_queue.enQueue(3) == True\n    assert circular_queue.Front() == 1\n    assert circular_queue.deQueue() == True\n    assert circular_queue.Rear() == 2\n    assert circular_queue.enQueue(4) == True\n    assert circular_queue.Front() == 2\n\n    circular_queue2 = CircularQueue(2)\n    assert circular_queue2.enQueue(1) == True\n    assert circular_queue2.enQueue(2) == True\n    assert circular_queue2.enQueue(3) == False  # Should return false as the queue is full\n    assert circular_queue2.deQueue() == True\n    assert circular_queue2.enQueue(3) == True\n    assert circular_queue2.Rear() == 3\n\n    circular_queue3 = CircularQueue(1)\n    assert circular_queue3.enQueue(1) == True\n    assert circular_queue3.deQueue() == True\n    assert circular_queue3.isEmpty() == True\n    assert circular_queue3.Front() == -1\n    assert circular_queue3.deQueue() == False  # Should return false as the queue is empty\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000000", "row_id": 0, "seed_ids": ["1797", "1403", "2583"], "mode": "leetcode", "instruction": "Implement a class `CircularQueue` that supports the following operations:\n\n*   `CircularQueue(int k)` constructs the `CircularQueue` with a maximum size of `k`.\n*   `int Front()` retrieves the element at the front of the queue without removing it. Returns `-1` if the queue is empty.\n*   `int Rear()` retrieves the element at the rear of the queue without removing it. Returns `-1` if the queue is empty.\n*   `boolean enQueue(int value)` inserts the element `value` into the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is full).\n*   `boolean deQueue()` deletes an element from the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is empty).\n*   `boolean isEmpty()` returns `true` if the queue is currently empty, `false` otherwise.\n*   `boolean isFull()` returns `true` if the queue is currently full, `false` otherwise.\n\nEnsure that all operations are performed in **constant time** (O(1))."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, and an integer `k`, you can perform the following operation on `s` `k` times: \n\n*   Choose any non-empty substring of `s` and sort its characters in **ascending** order.\n\nAfter performing the operations, return the **lexicographically largest** string `s` that can be obtained. A substring is a contiguous sequence of characters in a string, and a string is lexicographically larger than another if it comes later in a dictionary order."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef largest_string(s: str, k: int) -> str:\n    \"\"\"\n    Returns the lexicographically largest string that can be obtained by performing\n    the specified operations on s, k times.\n    \"\"\"\n    n = len(s)\n    if k == 0 or n == 0:\n        return s\n\n    # If k is greater than or equal to half the length of the string, we can sort\n    # the entire string in descending order to get the maximum lexicographic string\n    if k >= (n + 1) // 2:\n        return ''.join(sorted(s, reverse=True))\n\n    # Otherwise, we need to simulate the operations\n    for _ in range(k):\n        max_slice = \"\"\n        max_char = s[0]\n        for i in range(1, n):\n            if s[i] >= max_char:\n                max_char = s[i]\n                max_slice = s[i:]\n                break\n        if max_slice:\n            s = max_slice + s[s.index(max_slice) + len(max_slice):]\n        else:\n            break\n\n    return s\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import largest_string\n\ndef test_largest_string_no_operations():\n    assert largest_string(\"abc\", 0) == \"abc\"\n\ndef test_largest_string_k_equal_to_string_length():\n    assert largest_string(\"abc\", 3) == \"cba\"\n\ndef test_largest_string_k_half_string_length():\n    assert largest_string(\"abc\", 1) == \"cba\"\n\ndef test_largest_string_k_greater_than_string_length_half():\n    assert largest_string(\"abc\", 2) == \"cba\"\n\ndef test_largest_string_with_operations():\n    assert largest_string(\"edcba\", 3) == \"eabcd\"\n\ndef test_largest_string_with_operations_empty_string():\n    assert largest_string(\"\", 2) == \"\"\n\ndef test_largest_string_with_operations_initially_sorted_string():\n    assert largest_string(\"abcdef\", 2) == \"abcdef\"\n\ndef test_largest_string_with_operations_complex_string():\n    assert largest_string(\"acbzae\", 2) == \"aeabcz\"\n\ndef test_largest_string_with_operations_complex_string_after_first_operation():\n    assert largest_string(\"aeabcz\", 1) == \"aceabz\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000001", "row_id": 1, "seed_ids": ["1910", "1844", "1535"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, and an integer `k`, you can perform the following operation on `s` `k` times: \n\n*   Choose any non-empty substring of `s` and sort its characters in **ascending** order.\n\nAfter performing the operations, return the **lexicographically largest** string `s` that can be obtained. A substring is a contiguous sequence of characters in a string, and a string is lexicographically larger than another if it comes later in a dictionary order."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` consisting of lowercase English letters. A **substring** of `s` is considered **beautiful** if it contains an even number of distinct letters and the sum of the ASCII values of all characters in the substring is divisible by 3. Return the number of **beautiful substrings** in `s`.\n\nFor example, in the string `\"abcabb\"`, `\"a\"`, `\"bb\"`, and `\"abb\"` are beautiful substrings."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef beautiful_substrings(s: str) -> int:\n    \"\"\"\n    Returns the number of beautiful substrings in the given string s.\n    A substring is considered beautiful if it has an even number of distinct characters\n    and the sum of ASCII values of all characters in the substring is divisible by 3.\n    \"\"\"\n    count = 0\n    n = len(s)\n    for i in range(n):\n        distinct_chars = set()\n        ascii_sum = 0\n        for j in range(i, n):\n            distinct_chars.add(s[j])\n            ascii_sum += ord(s[j])\n            if len(distinct_chars) % 2 == 0 and ascii_sum % 3 == 0:\n                count += 1\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_beautiful_substrings():\n    assert beautiful_substrings(\"abcabb\") == 6\n    assert beautiful_substrings(\"zzz\") == 3\n    assert beautiful_substrings(\"aaab\") == 2\n    assert beautiful_substrings(\"pqrstuv\") == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000002", "row_id": 2, "seed_ids": ["2012", "839", "756"], "mode": "leetcode", "instruction": "You are given a string `s` consisting of lowercase English letters. A **substring** of `s` is considered **beautiful** if it contains an even number of distinct letters and the sum of the ASCII values of all characters in the substring is divisible by 3. Return the number of **beautiful substrings** in `s`.\n\nFor example, in the string `\"abcabb\"`, `\"a\"`, `\"bb\"`, and `\"abb\"` are beautiful substrings."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times: choose any two adjacent characters in `s` and swap them if the first character has a higher ASCII value than the second character. After performing any number of operations, return the lexicographically smallest string that can be obtained. Note that the ASCII values of lowercase English letters range from 97 to 122."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef smallest_string(s):\n    \"\"\"\n    Returns the lexicographically smallest string after performing any number of adjacent character swaps\n    where the first character has a higher ASCII value than the second character.\n    \"\"\"\n    stack = []\n    for char in s:\n        while stack and stack[-1] > char:\n            stack.pop()\n        stack.append(char)\n    return ''.join(stack)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_smallest_string():\n    assert smallest_string(\"dcab\") == \"abcd\", \"Test case 1 failed\"\n    assert smallest_string(\"baaca\") == \"aaabc\", \"Test case 2 failed\"\n    assert smallest_string(\"abcd\") == \"abcd\", \"Test case 3 failed\"\n    assert smallest_string(\"cba\") == \"abc\", \"Test case 4 failed\"\n    assert smallest_string(\"a\") == \"a\", \"Test case 5 failed\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000003", "row_id": 3, "seed_ids": ["2233", "2203", "2168"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times: choose any two adjacent characters in `s` and swap them if the first character has a higher ASCII value than the second character. After performing any number of operations, return the lexicographically smallest string that can be obtained. Note that the ASCII values of lowercase English letters range from 97 to 122."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, a **substring** of `s` is called a **balanced substring** if the number of distinct characters in it is exactly `k`. For a given integer `k`, return the number of balanced substrings in `s`.\n\nExample:\n```python\ns = \"abcabc\", k = 2\nOutput: 3\nExplanation: The balanced substrings are \"ab\", \"bc\", and \"ab\".\n```\n\nExample:\n```python\ns = \"aaabbbccc\", k = 3\nOutput: 1\nExplanation: The only balanced substring is \"aaabbbccc\".\n```"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_balanced_substrings(s, k):\n    \"\"\"\n    Returns the number of substrings in s where the number of distinct characters is exactly k.\n    \"\"\"\n    count = 0\n    len_s = len(s)\n    for start in range(len_s):\n        distinct_chars = set()\n        for end in range(start, len_s):\n            distinct_chars.add(s[end])\n            if len(distinct_chars) == k:\n                count += 1\n            elif len(distinct_chars) > k:\n                break\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_balanced_substrings\n\ndef test_count_balanced_substrings():\n    assert count_balanced_substrings(\"abcabc\", 2) == 3\n    assert count_balanced_substrings(\"aaabbbccc\", 3) == 1\n    assert count_balanced_substrings(\"aabbcc\", 2) == 3\n    assert count_balanced_substrings(\"xyzz\", 2) == 1\n    assert count_balanced_substrings(\"zzzzz\", 2) == 0\n\nif __name__ == \"__main__\":\n    import pytest\n    pytest.main([__file__])\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000004", "row_id": 4, "seed_ids": ["765", "2513", "1915"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, a **substring** of `s` is called a **balanced substring** if the number of distinct characters in it is exactly `k`. For a given integer `k`, return the number of balanced substrings in `s`.\n\nExample:\n```python\ns = \"abcabc\", k = 2\nOutput: 3\nExplanation: The balanced substrings are \"ab\", \"bc\", and \"ab\".\n```\n\nExample:\n```python\ns = \"aaabbbccc\", k = 3\nOutput: 1\nExplanation: The only balanced substring is \"aaabbbccc\".\n```"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary tree where each node contains a single digit from `0` to `9`. A **path** in the tree is defined as any sequence of nodes from some starting node to any leaf node. Each root-to-leaf path in the tree represents a number. For example, the path `1 -> 2 -> 3` represents the number `123`.\n\nYou need to find the sum of all root-to-leaf numbers in the tree. A **leaf** node is a node with no children. The result should be returned as an integer, and test cases are generated so that the answer will fit in a **32-bit** integer."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef sumNumbers(root: TreeNode) -> int:\n    \"\"\"\n    Returns the sum of all root-to-leaf numbers in the tree.\n    \"\"\"\n    def dfs(node, current_number):\n        if not node:\n            return 0\n        current_number = current_number * 10 + node.val\n        if not node.left and not node.right:  # it's a leaf\n            return current_number\n        return dfs(node.left, current_number) + dfs(node.right, current_number)\n    \n    return dfs(root, 0)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sumNumbers, TreeNode\n\ndef setup_tree(lvl, idx):\n    if idx >= 2**lvl:  # Stop when reached impossible index\n        return None\n    node = TreeNode(idx % 10)\n    node.left = setup_tree(lvl, 2*idx + 1)\n    node.right = setup_tree(lvl, 2*idx + 2)\n    return node\n\ndef test_sumNumbers():\n    assert sumNumbers(None) == 0  # Empty tree\n    assert sumNumbers(TreeNode(1)) == 1  # Single node tree\n    assert sumNumbers(TreeNode(1, TreeNode(2), TreeNode(3))) == 25  # Binary tree: 12 + 13 = 25\n    assert sumNumbers(TreeNode(4, TreeNode(9, TreeNode(5), TreeNode(1)), TreeNode(0))) == 1026  # More complex binary tree: 495 + 491 + 40 = 1026\n    tree = setup_tree(4, 0)  # Full binary tree of level 4, replacing all leafs with their values\n    expected_sum = 0\n    for i in range(2**4):\n        expected_sum += int(str(i), 4) * 4**4  # Convert i to base 4 and shift left by 4 places\n    assert sumNumbers(tree) == expected_sum  # Check the sum of all root-to-leaf numbers in a full binary tree\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000005", "row_id": 5, "seed_ids": ["2338", "1653", "129"], "mode": "leetcode", "instruction": "You are given a binary tree where each node contains a single digit from `0` to `9`. A **path** in the tree is defined as any sequence of nodes from some starting node to any leaf node. Each root-to-leaf path in the tree represents a number. For example, the path `1 -> 2 -> 3` represents the number `123`.\n\nYou need to find the sum of all root-to-leaf numbers in the tree. A **leaf** node is a node with no children. The result should be returned as an integer, and test cases are generated so that the answer will fit in a **32-bit** integer."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you are allowed to perform the following operation any number of times: pick any substring `s[i...j]` and replace it with the same substring in reverse order. For example, `s = \"abcde\"` can be transformed into `\"dcbae\"` by replacing the substring `s[1...4]` with `\"dcba\"`. \n\nDetermine the lexicographically smallest string that can be obtained by performing the above operation any number of times. Return the resulting string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef smallest_string(s):\n    \"\"\"\n    Returns the lexicographically smallest string after performing the allowed operation any number of times.\n    \"\"\"\n    return ''.join(sorted(s))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import smallest_string\n\ndef test_smallest_string():\n    assert smallest_string(\"dcde\") == \"dcced\"\n    assert smallest_string(\"abc\") == \"abc\"\n    assert smallest_string(\"fedacx\") == \"afedcx\"\n    assert smallest_string(\"abcd\") == \"abcd\"\n    assert smallest_string(\"cba\") == \"abc\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000006", "row_id": 6, "seed_ids": ["790", "311", "1320"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you are allowed to perform the following operation any number of times: pick any substring `s[i...j]` and replace it with the same substring in reverse order. For example, `s = \"abcde\"` can be transformed into `\"dcbae\"` by replacing the substring `s[1...4]` with `\"dcba\"`. \n\nDetermine the lexicographically smallest string that can be obtained by performing the above operation any number of times. Return the resulting string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an integer array `nums`, you are tasked with designing a data structure that supports two types of queries efficiently:\n\n1. **Add** a positive integer to an element of a given index in the array `nums`.\n2. **Find** the maximum value in a given range of the array `nums`.\n\nImplement the `DynamicArray` class:\n\n*   `DynamicArray(int[] nums)` Initializes the `DynamicArray` object with the integer array `nums`.\n*   `void add(int index, int val)` Adds `val` to `nums[index]`, i.e., applies `nums[index] += val`.\n*   `int find(int left, int right)` Returns the maximum value in the subarray `nums[left...right]`.\n\nEnsure that the `find` operation is as efficient as possible, given the updates to the array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass DynamicArray:\n    def __init__(self, nums):\n        self.nums = nums\n        self.max_sum = [num for num in nums]\n\n    def add(self, index, val):\n        self.nums[index] += val\n        # Update the max_sum array\n        for i in range(index, len(self.nums)):\n            self.max_sum[i] = max(self.nums[i], (self.max_sum[i-1] if i > 0 else 0) + self.nums[i])\n\n    def find(self, left, right):\n        if left == 0:\n            return self.max_sum[right]\n        return max(self.max_sum[right] - self.max_sum[left-1], self.nums[left])\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef test_dynamic_array():\n    da = DynamicArray([1, 2, 3, 4, 5])\n    assert da.find(0, 4) == 5\n    da.add(2, 3)\n    assert da.find(0, 4) == 8\n    da.add(0, 5)\n    assert da.find(0, 4) == 10\n\ndef test_large_range():\n    da = DynamicArray([i for i in range(1000)])\n    da.add(999, 1000)\n    assert da.find(0, 999) == 1999\n\ndef test_empty_array():\n    da = DynamicArray([])\n    with pytest.raises(IndexError):\n        da.find(0, 0)\n\ndef test_single_element():\n    da = DynamicArray([1])\n    assert da.find(0, 0) == 1\n    da.add(0, 1)\n    assert da.find(0, 0) == 2\n\ndef test_one_add_operation():\n    da = DynamicArray([1, 2, 3])\n    da.add(1, 5)\n    assert da.find(0, 2) == 7\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000007", "row_id": 7, "seed_ids": ["1847", "1865", "898"], "mode": "leetcode", "instruction": "Given an integer array `nums`, you are tasked with designing a data structure that supports two types of queries efficiently:\n\n1. **Add** a positive integer to an element of a given index in the array `nums`.\n2. **Find** the maximum value in a given range of the array `nums`.\n\nImplement the `DynamicArray` class:\n\n*   `DynamicArray(int[] nums)` Initializes the `DynamicArray` object with the integer array `nums`.\n*   `void add(int index, int val)` Adds `val` to `nums[index]`, i.e., applies `nums[index] += val`.\n*   `int find(int left, int right)` Returns the maximum value in the subarray `nums[left...right]`.\n\nEnsure that the `find` operation is as efficient as possible, given the updates to the array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of strings `words` and a string `target`, you need to find the minimum number of adjacent swaps required to arrange the strings in `words` such that they form the `target` string. Each string in `words` can only be used once, and the order of the strings in `words` must match the order of the strings in `target`. A swap is defined as exchanging the positions of two adjacent strings in the list. Please return the minimum number of swaps required to achieve the `target` string. If it is not possible to arrange the strings in `words` to form the `target` string, return `-1`.\n\nFor example, given `words = [\"abc\",\"def\",\"ghi\"]` and `target = \"defabcghi\"`, the minimum number of swaps required is `2`. First, swap \"abc\" and \"def\", then swap \"def\" and \"ghi\". Therefore, the answer is `2`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_swaps_to_target(words, target):\n    \"\"\"\n    Returns the minimum number of adjacent swaps required to arrange\n    the strings in `words` to form the `target` string. If it's not possible, returns -1.\n    \"\"\"\n    from collections import defaultdict\n    \n    # Record positions of each character in the target string\n    target_positions = defaultdict(list)\n    for idx, char in enumerate(target):\n        target_positions[char].append(idx)\n    \n    # Find positions of the words in the target string\n    word_positions = []\n    for word in words:\n        pos = [target_positions[char].pop(0) for char in word]\n        word_positions.append(pos)\n    \n    # Calculate the minimum swaps if the relative order matches the target\n    min_swaps = 0\n    for pos in word_positions:\n        required_pos = [target_positions[char].pop(0) for char in words[words.index(pos[0])]]\n        min_swaps += sum(b - a for a, b in zip(pos, required_pos))\n    \n    # Check if it's possible to achieve the target order\n    if all(len(target_positions[char]) == 0 for char in set(target)):\n        return min_swaps // len(word_positions[0])\n    else:\n        return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_min_swaps_to_target():\n    assert min_swaps_to_target([\"abc\", \"def\", \"ghi\"], \"defabcghi\") == 2\n    assert min_swaps_to_target([\"a\",\"b\",\"c\"], \"aaabbbb\") == -1\n    assert min_swaps_to_target([\"cde\",\"abc\"], \"ceabdccba\") == 6\n    assert min_swaps_to_target([\"a\",\"a\",\"a\",\"a\"], \"aaaa\") == 0\n    assert min_swaps_to_target([\"a\",\"a\",\"a\",\"a\"], \"bbaaaa\") == 2\n    assert min_swaps_to_target([\"abc\",\"def\",\"ghi\"], \"defabc\") == -1\n\npytest.main()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000008", "row_id": 8, "seed_ids": ["1516", "417", "2266"], "mode": "leetcode", "instruction": "Given a list of strings `words` and a string `target`, you need to find the minimum number of adjacent swaps required to arrange the strings in `words` such that they form the `target` string. Each string in `words` can only be used once, and the order of the strings in `words` must match the order of the strings in `target`. A swap is defined as exchanging the positions of two adjacent strings in the list. Please return the minimum number of swaps required to achieve the `target` string. If it is not possible to arrange the strings in `words` to form the `target` string, return `-1`.\n\nFor example, given `words = [\"abc\",\"def\",\"ghi\"]` and `target = \"defabcghi\"`, the minimum number of swaps required is `2`. First, swap \"abc\" and \"def\", then swap \"def\" and \"ghi\". Therefore, the answer is `2`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` consisting of lowercase English letters and an integer `k`. A **substring** of `s` is considered **balanced** if the frequency of each letter in the substring is at most `k`. Return the **maximum length** of a balanced substring of `s`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_balanced_substring_length(s, k):\n    \"\"\"\n    Given a string s and an integer k, returns the length of the longest balanced\n    substring. A substring is balanced if the frequency of each letter is at most k.\n    \"\"\"\n    from collections import defaultdict\n    \n    char_count = defaultdict(int)\n    left = 0\n    max_length = 0\n    \n    for right in range(len(s)):\n        char_count[s[right]] += 1\n        \n        while min(char_count.values()) > k:\n            char_count[s[left]] -= 1\n            if char_count[s[left]] == 0:\n                del char_count[s[left]]\n            left += 1\n        \n        max_length = max(max_length, right - left + 1)\n    \n    return max_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_balanced_substring_length\n\ndef test_max_balanced_substring_length():\n    assert max_balanced_substring_length(\"aaabb\", 3) == 3\n    assert max_balanced_substring_length(\"ababbc\", 2) == 5\n    assert max_balanced_substring_length(\"cccc\", 3) == 3\n    assert max_balanced_substring_length(\"abcd\", 1) == 1\n    assert max_balanced_substring_length(\"abcd\", 4) == 4\n    assert max_balanced_substring_length(\"aabacbebebe\", 3) == 7\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000009", "row_id": 9, "seed_ids": ["1530", "1550", "2103"], "mode": "leetcode", "instruction": "You are given a string `s` consisting of lowercase English letters and an integer `k`. A **substring** of `s` is considered **balanced** if the frequency of each letter in the substring is at most `k`. Return the **maximum length** of a balanced substring of `s`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a data structure to manage a collection of intervals with the following operations:\n\n- `addInterval(start, end)`: Add a new interval `[start, end]` to the collection.\n- `mergeOverlappingIntervals()`: Merge all overlapping intervals in the collection and return the merged intervals.\n- `removeInterval(start, end)`: Remove the interval `[start, end]` from the collection if it exists.\n- `getIntervals()`: Return the current collection of intervals.\n\nImplement the `IntervalManager` class:\n\n- `IntervalManager()`: Initializes the interval manager.\n- `void addInterval(int start, int end)`: Adds a new interval `[start, end]` to the collection. Ensure no duplicate intervals are added.\n- `List<int[]> mergeOverlappingIntervals()`: Merges all overlapping intervals in the collection and returns the merged intervals as a list of `[start, end]` pairs.\n- `void removeInterval(int start, int end)`: Removes the interval `[start, end]` from the collection if it exists.\n- `List<int[]> getIntervals()`: Returns the current collection of intervals as a list of `[start, end]` pairs.\n\n**Note**: Intervals are represented as `[start, end]` where `start` and `end` are inclusive. The intervals are sorted by their start time."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\n\nclass IntervalManager:\n    def __init__(self):\n        self.intervals = []\n\n    def addInterval(self, start: int, end: int) -> None:\n        \"\"\"\n        Adds a new interval [start, end] to the collection if it does not already exist.\n        \"\"\"\n        for s, e in self.intervals:\n            if s <= start <= e or s <= end <= e or start <= s <= end or start <= e <= end:\n                return\n        self.intervals.append([start, end])\n        self.intervals.sort(key=lambda x: x[0])\n\n    def mergeOverlappingIntervals(self) -> List[int]:\n        \"\"\"\n        Merges all overlapping intervals in the collection and returns the merged intervals.\n        \"\"\"\n        merged = []\n        for interval in self.intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        self.intervals = merged\n        return self.intervals\n\n    def removeInterval(self, start: int, end: int) -> None:\n        \"\"\"\n        Removes the interval [start, end] from the collection if it exists.\n        \"\"\"\n        self.intervals = [i for i in self.intervals if i[0] > end or i[1] < start]\n        self.mergeOverlappingIntervals()\n\n    def getIntervals(self) -> List[int]:\n        \"\"\"\n        Returns the current collection of intervals.\n        \"\"\"\n        return self.intervals\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import IntervalManager\n\ndef test_interval_manager():\n    manager = IntervalManager()\n    manager.addInterval(1, 3)\n    manager.addInterval(6, 9)\n    assert manager.getIntervals() == [[1, 3], [6, 9]]\n\n    manager.addInterval(2, 5)\n    assert manager.getIntervals() == [[1, 5], [6, 9]]\n\n    manager.mergeOverlappingIntervals()\n    assert manager.getIntervals() == [[1, 5], [6, 9]]\n\n    manager.removeInterval(1, 5)\n    assert manager.getIntervals() == [[6, 9]]\n\n    manager.addInterval(15, 18)\n    manager.addInterval(10, 12)\n    assert manager.getIntervals() == [[6, 9], [10, 12], [15, 18]]\n\n    manager.removeInterval(10, 11)\n    assert manager.getIntervals() == [[6, 9], [11, 12], [15, 18]]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000010", "row_id": 10, "seed_ids": ["689", "2075", "1670"], "mode": "leetcode", "instruction": "Design a data structure to manage a collection of intervals with the following operations:\n\n- `addInterval(start, end)`: Add a new interval `[start, end]` to the collection.\n- `mergeOverlappingIntervals()`: Merge all overlapping intervals in the collection and return the merged intervals.\n- `removeInterval(start, end)`: Remove the interval `[start, end]` from the collection if it exists.\n- `getIntervals()`: Return the current collection of intervals.\n\nImplement the `IntervalManager` class:\n\n- `IntervalManager()`: Initializes the interval manager.\n- `void addInterval(int start, int end)`: Adds a new interval `[start, end]` to the collection. Ensure no duplicate intervals are added.\n- `List<int[]> mergeOverlappingIntervals()`: Merges all overlapping intervals in the collection and returns the merged intervals as a list of `[start, end]` pairs.\n- `void removeInterval(int start, int end)`: Removes the interval `[start, end]` from the collection if it exists.\n- `List<int[]> getIntervals()`: Returns the current collection of intervals as a list of `[start, end]` pairs.\n\n**Note**: Intervals are represented as `[start, end]` where `start` and `end` are inclusive. The intervals are sorted by their start time."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a matrix `grid` of size `m x n` containing non-negative integers, and a target value `target`, you need to determine if there exists a path from the top-left corner to the bottom-right corner such that the sum of the values along the path is exactly `target`. You can only move rightward or downward at any point in time. If such a path exists, return `true`; otherwise, return `false`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef has_valid_path(grid, target):\n    \"\"\"\n    Determine if there exists a path from the top-left corner to the bottom-right corner\n    such that the sum of the values along the path is exactly `target`.\n\n    :param grid: List[List[int]] - A 2D list of integers representing the grid.\n    :param target: int - The target sum.\n    :return: bool - True if such a path exists, False otherwise.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    memo = {}\n\n    def dfs(x, y, current_sum):\n        if x == m or y == n or current_sum > target:\n            return False\n        if x == m - 1 and y == n - 1:\n            return current_sum == target\n        if (x, y, current_sum) in memo:\n            return memo[(x, y, current_sum)]\n\n        memo[(x, y, current_sum)] = dfs(x + 1, y, current_sum + grid[x][y]) or dfs(x, y + 1, current_sum + grid[x][y])\n        return memo[(x, y, current_sum)]\n\n    return dfs(0, 0, grid[0][0])\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_has_valid_path():\n    assert has_valid_path([[1, 1, 1], [1, 0, 0], [1, 1, 1]], 5) == True\n    assert has_valid_path([[1, 1, 1], [1, 0, 0], [1, 1, 1]], 8) == False\n    assert has_valid_path([[1, 2, 3], [4, 5, 6]], 12) == True\n    assert has_valid_path([[1, 2, 3], [4, 5, 6]], 16) == False\n    assert has_valid_path([[1], [1]], 2) == True\n    assert has_valid_path([[1], [1]], 0) == False\n    assert has_valid_path([[1], [1]], 1) == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000011", "row_id": 11, "seed_ids": ["1427", "1300", "174"], "mode": "leetcode", "instruction": "Given a matrix `grid` of size `m x n` containing non-negative integers, and a target value `target`, you need to determine if there exists a path from the top-left corner to the bottom-right corner such that the sum of the values along the path is exactly `target`. You can only move rightward or downward at any point in time. If such a path exists, return `true`; otherwise, return `false`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a function `maxProfitWithTransactionFee` that calculates the maximum profit you can achieve from trading a stock given an array of daily prices and a transaction fee. You can complete as many buy-sell transactions as you like, but you need to pay the transaction fee for each transaction. A transaction consists of buying and then selling one share of the stock. You cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n### Function Signature\n```python\ndef maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    pass\n```\n\n### Constraints\n- `1 <= prices.length <= 5 * 10^4`\n- `0 <= prices[i] <= 10^5`\n- `0 <= fee < 10^5`"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef maxProfitWithTransactionFee(prices: list, fee: int) -> int:\n    \"\"\"\n    Calculate the maximum profit you can achieve from trading a stock with a transaction fee.\n    \"\"\"\n    n = len(prices)\n    if n < 2:\n        return 0\n    \n    # Initialize variables to keep track of the maximum profit when we hold and when we do not hold a stock\n    hold = -prices[0]  # Assume we buy the stock on the first day\n    not_hold = 0       # No stock in hand\n    \n    for i in range(1, n):\n        # If we decide to buy or keep the stock\n        hold = max(hold, not_hold - prices[i])\n        # If we decide to sell the stock\n        not_hold = max(not_hold, hold + prices[i] - fee)\n    \n    return not_hold\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_maxProfitWithTransactionFee():\n    assert maxProfitWithTransactionFee([1, 3, 2, 8, 4, 9], 2) == 8, \"Test case 1 failed\"\n    assert maxProfitWithTransactionFee([1, 3, 7, 5, 10, 3], 3) == 6, \"Test case 2 failed\"\n    assert maxProfitWithTransactionFee([1], 0) == 0, \"Test case 3 failed\"\n    assert maxProfitWithTransactionFee([1, 2, 3, 4, 5], 1) == 3, \"Test case 4 failed\"\n    assert maxProfitWithTransactionFee([7, 6, 4, 3, 1], 2) == 0, \"Test case 5 failed\"\n\nif __name__ == \"__main__\":\n    import pytest\n    pytest.main([__file__])\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000012", "row_id": 12, "seed_ids": ["1476", "2214", "1720"], "mode": "leetcode", "instruction": "Design a function `maxProfitWithTransactionFee` that calculates the maximum profit you can achieve from trading a stock given an array of daily prices and a transaction fee. You can complete as many buy-sell transactions as you like, but you need to pay the transaction fee for each transaction. A transaction consists of buying and then selling one share of the stock. You cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n### Function Signature\n```python\ndef maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    pass\n```\n\n### Constraints\n- `1 <= prices.length <= 5 * 10^4`\n- `0 <= prices[i] <= 10^5`\n- `0 <= fee < 10^5`"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary tree, return the sum of all left leaves. A leaf is a node with no children, and a left leaf is a leaf that is the left child of its parent. If there are no left leaves, return 0."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef sum_of_left_leaves(root):\n    \"\"\"\n    Return the sum of all left leaves in the binary tree.\n    \"\"\"\n    def dfs(node, is_left):\n        if not node:\n            return 0\n        if not node.left and not node.right and is_left:\n            return node.val\n        return dfs(node.left, True) + dfs(node.right, False)\n    \n    return dfs(root, False)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import TreeNode, sum_of_left_leaves\n\ndef test_sum_of_left_leaves_empty_tree():\n    assert sum_of_left_leaves(None) == 0\n\ndef test_sum_of_left_leaves_no_left_leaves():\n    root = TreeNode(1)\n    root.right = TreeNode(2)\n    assert sum_of_left_leaves(root) == 0\n\ndef test_sum_of_left_leaves_left_leaf_only():\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    assert sum_of_left_leaves(root) == 9\n\ndef test_sum_of_left_leaves_right_leaf():\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    assert sum_of_left_leaves(root) == 9\n\ndef test_sum_of_left_leaves_complex_tree():\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    root.right.left = TreeNode(15)\n    root.right.right = TreeNode(7)\n    root.left.left = TreeNode(4)\n    assert sum_of_left_leaves(root) == 13\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000013", "row_id": 13, "seed_ids": ["82", "2008", "1690"], "mode": "leetcode", "instruction": "Given a binary tree, return the sum of all left leaves. A leaf is a node with no children, and a left leaf is a leaf that is the left child of its parent. If there are no left leaves, return 0."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given the root of a binary tree, return the sum of values of all nodes that have an odd-valued parent. If there are no such nodes, return 0. A parent node is considered odd if its value is an odd number."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef sum_odd_parent_nodes(root: TreeNode) -> int:\n    \"\"\"\n    Returns the sum of values of all nodes that have an odd-valued parent.\n    If there are no such nodes, returns 0.\n    \"\"\"\n    def dfs(node: TreeNode, is_odd_parent: bool) -> int:\n        if not node:\n            return 0\n        if is_odd_parent:\n            return node.val + dfs(node.left, node.val % 2 != 0) + dfs(node.right, node.val % 2 != 0)\n        else:\n            return dfs(node.left, node.val % 2 != 0) + dfs(node.right, node.val % 2 != 0)\n    return dfs(root, root.val % 2 != 0)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import TreeNode, sum_odd_parent_nodes\n\ndef test_sum_odd_parent_nodes():\n    # Tree:        1\n    #              / \\\n    #             2   3\n    #            / \\   \\\n    #           4   5   6\n    node_4 = TreeNode(4)\n    node_5 = TreeNode(5)\n    node_6 = TreeNode(6)\n    node_2 = TreeNode(2, node_4, node_5)\n    node_3 = TreeNode(3, None, node_6)\n    root = TreeNode(1, node_2, node_3)\n    assert sum_odd_parent_nodes(root) == 12  # 4 + 5 + 3 (since 2 and 1 are odd, and 5, 3 are children of odd nodes)\n\ndef test_sum_odd_one_branch():\n    # Tree:        1\n    #              / \\\n    #             2   3\n    #            /     \\\n    #           4       5\n    node_4 = TreeNode(4)\n    node_5 = TreeNode(5)\n    node_2 = TreeNode(2, node_4, None)\n    node_3 = TreeNode(3, None, node_5)\n    root = TreeNode(1, node_2, node_3)\n    assert sum_odd_parent_nodes(root) == 6  # 4 (since 2 is odd, and 4 is child of odd node)\n\ndef test_sum_odd_multiple_branches():\n    # Tree:        1\n    #              / \\\n    #             2   3\n    #            / \\   \\\n    #           4   5   6\n    #          / \\\n    #         7   8\n    node_7 = TreeNode(7)\n    node_8 = TreeNode(8)\n    node_4 = TreeNode(4, node_7, node_8)\n    node_2 = TreeNode(2, node_4, None)\n    node_3 = TreeNode(3, None, node_6)\n    root = TreeNode(1, node_2, node_3)\n    assert sum_odd_parent_nodes(root) == 18  # 8 + 7 + 5 + 3 (since 2, 4, 1 are odd, and 7, 8, 5, 3 are children of odd nodes)\n\ndef test_sum_no_odd_node():\n    # Tree:        2\n    #              / \\\n    #             4   6\n    #            / \\\n    #           8   10\n    node_8 = TreeNode(8)\n    node_10 = TreeNode(10)\n    node_4 = TreeNode(4, node_8, node_10)\n    node_2 = TreeNode(2, node_4, None)\n    root = TreeNode(2, node_2, None)\n    assert sum_odd_parent_nodes(root) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000014", "row_id": 14, "seed_ids": ["2607", "1880", "1315"], "mode": "leetcode", "instruction": "Given the root of a binary tree, return the sum of values of all nodes that have an odd-valued parent. If there are no such nodes, return 0. A parent node is considered odd if its value is an odd number."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given two strings `text1` and `text2`, both consisting of lowercase English letters. Your task is to find the length of the longest **common subsequence** (LCS) between the two strings. Additionally, you are provided with a **mask** string `mask`, where each character is either `'0'` or `'1'`. You need to modify the LCS such that each character in the LCS is replaced by the corresponding character in `mask` if the corresponding position in `mask` is `'1'`, and kept as is if the corresponding position in `mask` is `'0'`. Return the modified LCS as a string.\n\n**Note**: A **common subsequence** is a sequence that can be derived from both strings by deleting some characters without changing the order of the remaining characters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_common_subsequence(text1: str, text2: str, mask: str) -> str:\n    \"\"\"\n    Finds the longest common subsequence (LCS) between text1 and text2 and then modifies it based on the mask.\n    \"\"\"\n    m, n = len(text1), len(text2)\n    dp = [[\"\" for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if text1[i - 1] == text2[j - 1] and mask[i - 1] == '1':\n                dp[i][j] = dp[i - 1][j - 1] + text1[i - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], key=len)\n    \n    return max(dp[-1], key=len)\n\n# Example usage:\n# text1 = \"abcde\"\n# text2 = \"ace\"\n# mask = \"10101\"\n# result = longest_common_subsequence(text1, text2, mask)  # result should be \"ace\"\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import longest_common_subsequence\n\ndef test_lcs_with_mask():\n    assert longest_common_subsequence(\"abcde\", \"ace\", \"10101\") == \"ace\"\n    assert longest_common_subsequence(\"abcdeg\", \"aceg\", \"010101\") == \"aceg\"\n    assert longest_common_subsequence(\"abcd\", \"abcd\", \"1111\") == \"abcd\"\n    assert longest_common_subsequence(\"abc\", \"def\", \"001\") == \"c\"\n    assert longest_common_subsequence(\"abcde\", \"ace\", \"00101\") == \"\"\n\ndef test_lcs_without_mask():\n    assert longest_common_subsequence(\"abcde\", \"ace\", \"00000\") == \"\"\n    assert longest_common_subsequence(\"abcde\", \"ace\", \"11111\") == \"ace\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000015", "row_id": 15, "seed_ids": ["2500", "1736", "1898"], "mode": "leetcode", "instruction": "You are given two strings `text1` and `text2`, both consisting of lowercase English letters. Your task is to find the length of the longest **common subsequence** (LCS) between the two strings. Additionally, you are provided with a **mask** string `mask`, where each character is either `'0'` or `'1'`. You need to modify the LCS such that each character in the LCS is replaced by the corresponding character in `mask` if the corresponding position in `mask` is `'1'`, and kept as is if the corresponding position in `mask` is `'0'`. Return the modified LCS as a string.\n\n**Note**: A **common subsequence** is a sequence that can be derived from both strings by deleting some characters without changing the order of the remaining characters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a grid of size `m x n` where each cell can either be `0` (land) or `1` (water). You can change any number of `0`s to `1`s to form one or more islands. An island is a maximal 4-directionally connected group of `1`s. You want to maximize the number of islands in the grid. What is the maximum number of islands you can form?"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef maxNumberOfIslands(grid):\n    \"\"\"\n    Returns the maximum number of islands that can be formed by changing the\n    0's to 1's in the grid.\n    \"\"\"\n    def fill(grid, i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != 0:\n            return\n        grid[i][j] = 2  # Mark as visited\n        fill(grid, i + 1, j)\n        fill(grid, i - 1, j)\n        fill(grid, i, j + 1)\n        fill(grid, i, j - 1)\n\n    max_islands = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                fill(grid, i, j)\n                max_islands += 1\n\n    return max_islands\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_maxNumberOfIslands():\n    grid = [[0,0],[1,1]]\n    assert maxNumberOfIslands(grid) == 1\n\ndef test_maxNumberOfIslands_with_islands():\n    grid = [[0,1],[1,0]]\n    assert maxNumberOfIslands(grid) == 2\n\ndef test_maxNumberOfIslands_single_island():\n    grid = [[1,1],[1,1]]\n    assert maxNumberOfIslands(grid) == 1\n\ndef test_maxNumberOfIslands_all_ones():\n    grid = [[1,1,1],[1,1,1],[1,1,1]]\n    assert maxNumberOfIslands(grid) == 1\n\ndef test_maxNumberOfIslands_no_islands():\n    grid = [[0,0,0],[0,0,0],[0,0,0]]\n    assert maxNumberOfIslands(grid) == 0\n\ndef test_maxNumberOfIslands_with_void():\n    grid = [[1,1,0],[0,0,0],[1,0,1]]\n    assert maxNumberOfIslands(grid) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000016", "row_id": 16, "seed_ids": ["1168", "1462", "1727"], "mode": "leetcode", "instruction": "You are given a grid of size `m x n` where each cell can either be `0` (land) or `1` (water). You can change any number of `0`s to `1`s to form one or more islands. An island is a maximal 4-directionally connected group of `1`s. You want to maximize the number of islands in the grid. What is the maximum number of islands you can form?"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an array of integers `nums` and an integer `k`, return the maximum number of consecutive 1's in the array if you can flip at most `k` 0's to 1's. The array length is at most 100,000, and `k` is between 0 and the length of the array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_consecutive_ones(nums, k):\n    \"\"\"\n    Return the maximum number of consecutive 1's in the array if you can flip at most k 0's to 1's.\n    \"\"\"\n    left, max_len, zeros = 0, 0, 0\n    for right in range(len(nums)):\n        if nums[right] == 0:\n            zeros += 1\n        while zeros > k:\n            if nums[left] == 0:\n                zeros -= 1\n            left += 1\n        max_len = max(max_len, right - left + 1)\n    return max_len\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_consecutive_ones\n\ndef test_max_consecutive_ones():\n    assert max_consecutive_ones([1,1,1,0,0,0,1,1,1,1,0], 2) == 6\n    assert max_consecutive_ones([1,0,0,1,1,0,1], 2) == 4\n    assert max_consecutive_ones([1,1,1,1], 2) == 4\n    assert max_consecutive_ones([0,0,1,1,0,0,1,1], 3) == 7\n    assert max_consecutive_ones([0,0,0,0], 0) == 0\n    assert max_consecutive_ones([1,1,1,1], 0) == 4\n    assert max_consecutive_ones([0,0,1,0,1,0,1,0], 2) == 6\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000017", "row_id": 17, "seed_ids": ["35", "1979", "1431"], "mode": "leetcode", "instruction": "Given an array of integers `nums` and an integer `k`, return the maximum number of consecutive 1's in the array if you can flip at most `k` 0's to 1's. The array length is at most 100,000, and `k` is between 0 and the length of the array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a **0-indexed** integer array `nums` of length `n`. You are allowed to perform the following operation on the array any number of times:\n\n- Choose an index `i` such that `0 <= i < n` and set `nums[i]` to `0`.\n\nYou are also given a **0-indexed** array `costs` of the same length, where `costs[i]` represents the cost of setting `nums[i]` to `0`. \n\nYour goal is to make all elements in `nums` equal to `0` with the minimum possible cost. \n\nReturn _the minimum cost to achieve this_."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_cost_to_set(nums, costs):\n    \"\"\"\n    Returns the minimum cost to set all elements in nums to 0.\n    \"\"\"\n    min_cost = float('inf')\n    for i in range(len(nums)):\n        current_cost = sum(costs[j] for j in range(len(nums)) if nums[j] == nums[i])\n        min_cost = min(min_cost, current_cost)\n    return min_cost\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_cost_to_set():\n    assert min_cost_to_set([1, 2, 3], [10, 15, 20]) == 10\n    assert min_cost_to_set([2, 2, 2, 2, 2], [4, 2, 8, 1, 3]) == 5\n    assert min_cost_to_set([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == 30\n    assert min_cost_to_set([5, 5, 5, 5], [1, 1, 1, 1]) == 4\n    assert min_cost_to_set([10, 20, 30, 40, 50], [5, 3, 6, 8, 2]) == 5\n\ndef test_min_cost_to_set_with_zeros():\n    assert min_cost_to_set([0, 0, 0, 0, 0], [1, 2, 3, 4, 5]) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000018", "row_id": 18, "seed_ids": ["2482", "2440", "1887"], "mode": "leetcode", "instruction": "You are given a **0-indexed** integer array `nums` of length `n`. You are allowed to perform the following operation on the array any number of times:\n\n- Choose an index `i` such that `0 <= i < n` and set `nums[i]` to `0`.\n\nYou are also given a **0-indexed** array `costs` of the same length, where `costs[i]` represents the cost of setting `nums[i]` to `0`. \n\nYour goal is to make all elements in `nums` equal to `0` with the minimum possible cost. \n\nReturn _the minimum cost to achieve this_."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically smallest substring that can be formed by rearranging any number of characters within the string. A substring is defined as a contiguous sequence of characters within a string.\n\nReturn the lexicographically smallest substring found. If the string is empty or consists of a single character, return the string itself."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef smallest_lexicographical_substring(s: str) -> str:\n    \"\"\"\n    Returns the lexicographically smallest substring that can be formed by rearranging any number of characters within the string.\n    \"\"\"\n    if len(s) <= 1:\n        return s\n    \n    sorted_chars = sorted(s)\n    min_char = sorted_chars[0]\n    min_substring = s[0]\n    \n    for i, char in enumerate(s):\n        if char == min_char and i > 0 and s[:i].endswith(min_char):\n            break\n        if char < min_char or (char == min_char and s[i+1:].startswith(min_char)):\n            min_char = char\n            min_substring = char\n    \n    # Handle the edge case where the smallest character forms the entire string\n    if min_substring == min_char * len(s):\n        return min_char\n    \n    return min_substring + ''.join(sorted(s[len(min_substring):]))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_smallest_lexicographical_substring():\n    assert smallest_lexicographical_substring(\"daily\") == \"a\"\n    assert smallest_lexicographical_substring(\"leetcode\") == \"e\"\n    assert smallest_lexicographical_substring(\"loodecte\") == \"e\"\n    assert smallest_lexicographical_substring(\"aaa\") == \"aaa\"\n    assert smallest_lexicographical_substring(\"zzzzzzzzz\") == \"z\"\n    assert smallest_lexicographical_substring(\"aab\") == \"aab\"\n    assert smallest_lexicographical_substring(\"a\") == \"a\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000019", "row_id": 19, "seed_ids": ["2432", "2215", "554"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically smallest substring that can be formed by rearranging any number of characters within the string. A substring is defined as a contiguous sequence of characters within a string.\n\nReturn the lexicographically smallest substring found. If the string is empty or consists of a single character, return the string itself."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` (a string consisting only of '0's and '1's), you are allowed to perform the following operation any number of times: choose any two adjacent characters and flip them (i.e., change '0' to '1' and '1' to '0'). Your goal is to make the string as long as possible such that it does not contain the substring \"010\". Return the maximum length of the string you can achieve.\n\n**Example:**\n\n```python\nInput: s = \"110\"\nOutput: 3\nExplanation: We can flip the last two characters to get \"111\", which does not contain \"010\" as a substring.\n```\n\n**Constraints:**\n\n- `1 <= s.length <= 1000`\n- `s` consists only of '0's and '1's."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_length_no_010(s: str) -> int:\n    \"\"\"\n    Returns the maximum length of the string s (consisting only of '0's and '1's) \n    such that it does not contain the substring \"010\" after performing any number \n    of adjacent flips.\n    \"\"\"\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    dp = [[0, 0] for _ in range(n+1)]\n    dp[0] = [0, 0]  # No flips, No 010\n    dp[1] = [1, 0 if s[0] == '1' else 1]  # One flip, No 010\n    \n    for i in range(2, n+1):\n        dp[i][0] = dp[i-1][0] + 1  # No flip, use the previous configuration\n        if s[i-1] == '0':\n            dp[i][1] = dp[i-1][0] + 1  # Flip, use the previous no 010\n        else:\n            dp[i][1] = dp[i-1][1] + 1  # No flip, use the previous flip\n        if i >= 3 and s[i-1] == '1' and s[i-2] == '0' and s[i-3] == '0':\n            dp[i][1] = max(dp[i][1], dp[i-3][0] + 1)  # Check for \"010\" pattern\n    \n    return max(dp[n])\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_max_length_no_010():\n    assert max_length_no_010(\"110\") == 3\n    assert max_length_no_010(\"000\") == 3\n    assert max_length_no_010(\"01010101010\") == 10\n    assert max_length_no_010(\"1000000\") == 7\n    assert max_length_no_010(\"0110000\") == 6\n    assert max_length_no_010(\"11111111111111111111111111\") == 20\n    assert max_length_no_010(\"10101010101010101010101010\") == 10\n    assert max_length_no_010(\"00110011001100110011\") == 18\n\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000020", "row_id": 20, "seed_ids": ["803", "1422", "1678"], "mode": "leetcode", "instruction": "Given a binary string `s` (a string consisting only of '0's and '1's), you are allowed to perform the following operation any number of times: choose any two adjacent characters and flip them (i.e., change '0' to '1' and '1' to '0'). Your goal is to make the string as long as possible such that it does not contain the substring \"010\". Return the maximum length of the string you can achieve.\n\n**Example:**\n\n```python\nInput: s = \"110\"\nOutput: 3\nExplanation: We can flip the last two characters to get \"111\", which does not contain \"010\" as a substring.\n```\n\n**Constraints:**\n\n- `1 <= s.length <= 1000`\n- `s` consists only of '0's and '1's."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary search tree (BST) and an integer `k`, write a function to find the `k`th smallest element in the tree. Ensure your solution does not modify the tree."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef kth_smallest(root: TreeNode, k: int) -> int:\n    \"\"\"\n    Returns the kth smallest element in the given binary search tree.\n    \"\"\"\n    def inorder_traversal(node: TreeNode):\n        return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right) if node else []\n    \n    return inorder_traversal(root)[k-1]\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\n# Test helper functions and classes\ndef create_bst_from_list(arr):\n    if not arr:\n        return None\n    nodes = [TreeNode(val) if val is not None else None for val in arr]\n    for i, node in enumerate(nodes):\n        if node:\n            node.left = nodes[2 * i + 1] if 2 * i + 1 < len(nodes) else None\n            node.right = nodes[2 * i + 2] if 2 * i + 2 < len(nodes) else None\n    return nodes[0]\n\n# Test cases\ndef test_kth_smallest_simple_tree():\n    root = create_bst_from_list([3, 1, 4, None, 2])\n    assert kth_smallest(root, 1) == 1\n    assert kth_smallest(root, 2) == 2\n    assert kth_smallest(root, 3) == 3\n    assert kth_smallest(root, 4) == 4\n\ndef test_kth_smallest_empty_tree():\n    root = create_bst_from_list([])\n    with pytest.raises(IndexError):\n        kth_smallest(root, 1)\n\ndef test_kth_smallest_large_tree():\n    root = create_bst_from_list([5, 3, 6, 2, 4, None, None, 1])\n    assert kth_smallest(root, 1) == 1\n    assert kth_smallest(root, 2) == 2\n    assert kth_smallest(root, 3) == 3\n    assert kth_smallest(root, 4) == 4\n    assert kth_smallest(root, 5) == 5\n    assert kth_smallest(root, 6) == 6\n\ndef test_kth_smallest_single_node():\n    root = create_bst_from_list([1])\n    assert kth_smallest(root, 1) == 1\n\n# Run the tests\ndef _run_tests():\n    pytest.main([__file__])\n\nif __name__ == \"__main__\":\n    _run_tests()\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000021", "row_id": 21, "seed_ids": ["61", "79", "623"], "mode": "leetcode", "instruction": "Given a binary search tree (BST) and an integer `k`, write a function to find the `k`th smallest element in the tree. Ensure your solution does not modify the tree."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, return the **length** of the longest **palindromic** substring in `s`. A **palindromic** string is a string that reads the same backward as forward."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_palindrome_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest palindromic substring in the given string s.\n    \"\"\"\n    if not s:\n        return 0\n\n    n = len(s)\n    dp = [[False] * n for _ in range(n)]\n    maxLength = 1\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = True\n\n    # Check for substrings of length 2\n    start = 0\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = True\n            maxLength = 2\n            start = i\n\n    # Check for lengths greater than 2\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j] and dp[i + 1][j - 1]:\n                dp[i][j] = True\n                if length > maxLength:\n                    maxLength = length\n                    start = i\n\n    return maxLength\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_longest_palindrome_length():\n    assert longest_palindrome_length(\"babad\") == 3\n    assert longest_palindrome_length(\"cbbd\") == 2\n    assert longest_palindrome_length(\"a\") == 1\n    assert longest_palindrome_length(\"ac\") == 1\n    assert longest_palindrome_length(\"\") == 0\n    assert longest_palindrome_length(\"ccc\") == 3\n    assert longest_palindrome_length(\"banana\") == 5\n    assert longest_palindrome_length(\"racecar\") == 7\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000022", "row_id": 22, "seed_ids": ["201", "513", "1941"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, return the **length** of the longest **palindromic** substring in `s`. A **palindromic** string is a string that reads the same backward as forward."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary search tree (BST) and a node value `target`, return the value of the closest leaf node to the target. A leaf node is a node with no children. The distance between two nodes is defined as the number of edges on the path connecting them. If there are multiple leaf nodes equally close to the target, return the value of any one of them."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef findClosestLeaf(root: TreeNode, target: int) -> int:\n    closest_leaf_val = None\n    min_distance = float('inf')\n    \n    def dfs(node):\n        nonlocal closest_leaf_val, min_distance\n        if not node:\n            return 0, False\n\n        left_distance, left_is_leaf = dfs(node.left)\n        right_distance, right_is_leaf = dfs(node.right)\n        \n        if left_is_leaf and right_is_leaf:\n            return min(left_distance, right_distance) + 1, False  # Node is an internal node\n        elif not left_is_leaf and not right_is_leaf:\n            return min(left_distance, right_distance) + 1, True\n        else:\n            distance = left_distance + right_distance + 1\n            if distance < min_distance:\n                min_distance = distance\n                closest_leaf_val = node.val\n            return min(left_distance, right_distance) + 1, False\n\n        return 0, False\n\n    dfs(root)\n    return closest_leaf_val\n```\n\nThis function performs a depth-first search (DFS) on the BST to find the closest leaf node to the target. It maintains the distance to the closest leaf node and updates it if a closer leaf is found. The function returns the value of the closest leaf node.\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nimport pytest\n\ndef create_tree(*vals):\n    nodes = [TreeNode(val=val) for val in vals]\n    for i in range(len(nodes)//2):\n        if 2*i+1 < len(nodes):\n            nodes[i].left = nodes[2*i+1]\n        if 2*i+2 < len(nodes):\n            nodes[i].right = nodes[2*i+2]\n    return nodes[0]\n\n@pytest.fixture\ndef setup_bst():\n    root = create_tree(1, 2, 3, 4, 5)\n    root.left.right = TreeNode(val=6)\n    root.right.left = TreeNode(val=7)\n    return root\n\ndef test_findClosestLeaf(setup_bst):\n    assert findClosestLeaf(setup_bst, 4) in [4, 3]  # 4 and 3 are both 1 step away\n\ndef test_findClosestLeaf_target_closest_setup_bst():\n    assert findClosestLeaf(create_tree(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 8) == 7  # 7 is 1 step away\n\ndef test_findClosestLeaf_multiple_clicked_leaves():\n    assert findClosestLeaf(create_tree(1, 2, 3), 3) == 3  # Node 3 is a leaf itself\n\ndef test_findClosestLeaf_empty_tree():\n    assert findClosestLeaf(None, 0) == None  # Should return None if tree is empty\n\ndef test_findClosestLeaf_root_is_target(setup_bst):\n    assert findClosestLeaf(setup_bst, 1) == 1  # 1 is a leaf itself\n```\n\nThe provided unit tests cover a variety of scenarios, including multiple leaf nodes, where the root node is the target, and where the tree is empty. The tests ensure that the function behaves as expected in different contexts.\n<|Test End|>"}], "metadata": {"prompt_id": "00000023", "row_id": 23, "seed_ids": ["2529", "155", "1650"], "mode": "leetcode", "instruction": "Given a binary search tree (BST) and a node value `target`, return the value of the closest leaf node to the target. A leaf node is a node with no children. The distance between two nodes is defined as the number of edges on the path connecting them. If there are multiple leaf nodes equally close to the target, return the value of any one of them."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary search tree (BST) and an integer `k`. Your task is to find the `k`-th smallest element in the BST. The BST is not necessarily balanced. Return the value of the `k`-th smallest element.\n\nFor example, given the BST with the following structure:\n\n```\n    5\n   / \\\n  3   6\n / \\\n2   4\n```\n\nIf `k = 3`, the output should be `3` because the elements in ascending order are `[2, 3, 4, 5, 6]`, and the 3rd smallest element is `3`.\n\nReturn the value of the `k`-th smallest element in the BST."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef kthSmallest(root, k):\n    \"\"\"\n    Returns the k-th smallest element in the BST.\n    \"\"\"\n    def inorder_traversal(node):\n        if node is None:\n            return []\n        return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right)\n    \n    elements = inorder_traversal(root)\n    return elements[k-1]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import TreeNode, kthSmallest\n\ndef create_bst():\n    \"\"\"\n    Helper function to create the BST for testing.\n    \"\"\"\n    five = TreeNode(5)\n    three = TreeNode(3)\n    six = TreeNode(6)\n    two = TreeNode(2)\n    four = TreeNode(4)\n    \n    five.left = three\n    five.right = six\n    three.left = two\n    three.right = four\n    \n    return five\n\ndef test_kth_smallest_positive():\n    root = create_bst()\n    assert kthSmallest(root, 3) == 3\n    \ndef test_kth_smallest_edge_cases():\n    root = TreeNode(1)\n    assert kthSmallest(root, 1) == 1\n    \n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    with pytest.raises(Exception):\n        kthSmallest(root, 2)  # This should raise an error as 2nd smallest does not exist\n\ndef test_kth_smallest_with_duplicates():\n    root = TreeNode(3)\n    root.left = TreeNode(1)\n    root.right = TreeNode(4)\n    root.left.right = TreeNode(2)\n    \n    assert kthSmallest(root, 2) == 2\n\ndef test_kth_smallest_in_order_traversal():\n    root = create_bst()\n    assert kthSmallest(root, 4) == 5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000024", "row_id": 24, "seed_ids": ["1019", "1177", "203"], "mode": "leetcode", "instruction": "You are given a binary search tree (BST) and an integer `k`. Your task is to find the `k`-th smallest element in the BST. The BST is not necessarily balanced. Return the value of the `k`-th smallest element.\n\nFor example, given the BST with the following structure:\n\n```\n    5\n   / \\\n  3   6\n / \\\n2   4\n```\n\nIf `k = 3`, the output should be `3` because the elements in ascending order are `[2, 3, 4, 5, 6]`, and the 3rd smallest element is `3`.\n\nReturn the value of the `k`-th smallest element in the BST."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an array of integers `nums` and a positive integer `k`, return the maximum sum of a non-empty subarray of size `k` that contains at least one negative number. If there is no such subarray, return 0. A subarray is a contiguous part of an array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_subarray_sum(nums, k):\n    \"\"\"\n    Returns the maximum sum of a non-empty subarray of size k that contains at least one negative number.\n    If there is no such subarray, returns 0.\n    \"\"\"\n    if len(nums) < k or k == 0:\n        return 0\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    negative_included = False\n    for i in range(len(nums)):\n        current_sum += nums[i]\n        if nums[i] < 0:\n            negative_included = True\n        if i >= k - 1:\n            if negative_included and current_sum > max_sum:\n                max_sum = current_sum\n            if nums[i - k + 1] < 0:\n                negative_included = False\n            current_sum -= nums[i - k + 1]\n    \n    return max_sum if max_sum != float('-inf') else 0\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_max_subarray_sum():\n    assert max_subarray_sum([1, -1, 1], 3) == 0, \"Test case 1 failed\"\n    assert max_subarray_sum([-1, -2, -3, 4, 2, 3, 1], 3) == 9, \"Test case 2 failed\"\n    assert max_subarray_sum([1, 2, 3, -1, 2, 3], 3) == 6, \"Test case 3 failed\"\n    assert max_subarray_sum([1, 2, 3, 4, 5], 1) == 5, \"Test case 4 failed\"\n    assert max_subarray_sum([1, 2, 3, 4, 5], 5) == 15, \"Test case 5 failed\"\n    assert max_subarray_sum([10, 20, 30, -45, 19, 25], 4) == 35, \"Test case 6 failed\"\n\ndef test_with_empty_or_shorter_than_k():\n    assert max_subarray_sum([10, 20, 30], 4) == 0, \"Test case 7 failed\"\n    assert max_subarray_sum([], 1) == 0, \"Test case 8 failed\"\n    assert max_subarray_sum([1, 2, 3, 4, 5, 6], 7) == 0, \"Test case 9 failed\"\n\ndef test_no_negative_numbers_return_zero():\n    assert max_subarray_sum([1, 2, 3, 4, 5], 1) == 5, \"Test case 10 failed\"\n    assert max_subarray_sum([1, 2, 3, 4, 5], 3) == 12, \"Test case 11 failed\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000025", "row_id": 25, "seed_ids": ["438", "2134", "1288"], "mode": "leetcode", "instruction": "Given an array of integers `nums` and a positive integer `k`, return the maximum sum of a non-empty subarray of size `k` that contains at least one negative number. If there is no such subarray, return 0. A subarray is a contiguous part of an array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an array `nums` consisting of positive integers. A **triangle** is valid if the sum of its two shorter sides is greater than the length of the longest side. Return the number of **unique** triangles that can be formed from the elements of `nums`. Since the answer may be very large, return it **modulo** `109 + 7`. Two triangles are considered **unique** if at least one of their sides has different lengths."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_valid_triangles(nums):\n    \"\"\"\n    Counts the number of unique valid triangles that can be formed from the elements of nums.\n    Since the answer may be very large, return it modulo 10^9 + 7.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    count = 0\n    for i in range(n-2):\n        k = i + 2\n        for j in range(i+1, n-1):\n            while k < n and nums[i] + nums[j] > nums[k]:\n                k += 1\n            count += max(0, k - j - 1)\n    return count % (10**9 + 7)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_count_valid_triangles():\n    assert count_valid_triangles([2, 2, 3, 4]) == 3\n    assert count_valid_triangles([4, 2, 3]) == 1\n    assert count_valid_triangles([3, 2, 3, 4]) == 5\n    assert count_valid_triangles([5, 4, 3, 1, 2]) == 7\n    assert count_valid_triangles([10, 21, 22, 100, 101, 200, 300]) == 0\n    assert count_valid_triangles([1, 2, 3, 4, 5, 10]) == 10\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000026", "row_id": 26, "seed_ids": ["2031", "335", "1814"], "mode": "leetcode", "instruction": "You are given an array `nums` consisting of positive integers. A **triangle** is valid if the sum of its two shorter sides is greater than the length of the longest side. Return the number of **unique** triangles that can be formed from the elements of `nums`. Since the answer may be very large, return it **modulo** `109 + 7`. Two triangles are considered **unique** if at least one of their sides has different lengths."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of strings `words` and a string `target`, return the number of strings in `words` that contain the `target` as a substring. A substring is a contiguous sequence of characters within a string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_substrings(words, target):\n    \"\"\"\n    Returns the number of strings in `words` that contain the `target` as a substring.\n    \"\"\"\n    return sum(target in word for word in words)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_count_substrings():\n    words1 = [\"aim\", \"at\", \"apple\", \"apricot\", \"orange\"]\n    target1 = \"ap\"\n    assert count_substrings(words1, target1) == 3\n\n    words2 = [\"hello\", \"world\", \"python\", \"programming\"]\n    target2 = \"py\"\n    assert count_substrings(words2, target2) == 1\n\n    words3 = [\"big\", \"small\", \"bigs\", \"smalls\"]\n    target3 = \"big\"\n    assert count_substrings(words3, target3) == 2\n\n    words4 = [\"challenge\", \"response\", \"react\", \"reactive\"]\n    target4 = \"res\"\n    assert count_substrings(words4, target4) == 2\n\n    words5 = [\"data\", \"science\", \"statistics\", \"probability\", \"bayesian\"]\n    target5 = \"sci\"\n    assert count_substrings(words5, target5) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000027", "row_id": 27, "seed_ids": ["263", "735", "172"], "mode": "leetcode", "instruction": "Given a list of strings `words` and a string `target`, return the number of strings in `words` that contain the `target` as a substring. A substring is a contiguous sequence of characters within a string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s`, your task is to find the **minimum** number of swaps required to group all the `1`'s present in the string into a contiguous (consecutive) substring. In one swap, you can choose any two indices `i` and `j` (0-indexed) and swap the characters at these indices. Return the **minimum** number of swaps required to achieve this."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_swaps_to_group_ones(s: str) -> int:\n    \"\"\"\n    Given a binary string s, returns the minimum number of swaps \n    needed to group all 1s into a contiguous substring.\n    \"\"\"\n    ones = [i for i, bit in enumerate(s) if bit == '1']\n    n_ones = len(ones)\n    if n_ones <= 1:\n        return 0\n\n    max_inclusive_ones = 1\n    for i in range(n_ones - 1):\n        max_inclusive_ones = max(max_inclusive_ones, ones[i + 1] - ones[i])\n\n    return (n_ones - max_inclusive_ones) // 2\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_swaps_to_group_ones():\n    assert min_swaps_to_group_ones(\"110\") == 1\n    assert min_swaps_to_group_ones(\"0011100\") == 1\n    assert min_swaps_to_group_ones(\"1000110001\") == 3\n    assert min_swaps_to_group_ones(\"1010101010\") == 0\n    assert min_swaps_to_group_ones(\"1110000111\") == 0\n    assert min_swaps_to_group_ones(\"0101010101\") == 5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000028", "row_id": 28, "seed_ids": ["665", "1647", "892"], "mode": "leetcode", "instruction": "Given a binary string `s`, your task is to find the **minimum** number of swaps required to group all the `1`'s present in the string into a contiguous (consecutive) substring. In one swap, you can choose any two indices `i` and `j` (0-indexed) and swap the characters at these indices. Return the **minimum** number of swaps required to achieve this."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary string `s` and an integer `k`. A **substring** of `s` is considered **balanced** if the number of `0`s and `1`s in it are equal. You can perform the following operation any number of times: choose any index `i` in the string `s` and flip the character at `i` (i.e., change `'0'` to `'1'` and vice versa). Your task is to find the length of the **longest balanced substring** you can obtain by performing the above operation **at most** `k` times. Return the length of this longest balanced substring.\n\nFor example, if `s = \"1100011\"` and `k = 2`, you can flip the characters at indices `4` and `6` to get `\"1101111\"`, which contains a balanced substring of length `7`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_balanced_substring(s: str, k: int) -> int:\n    \"\"\"\n    Finds the longest balanced substring that can be obtained by flipping at most k characters.\n    A balanced substring is one with equal numbers of '0's and '1's.\n    \"\"\"\n    max_length = 0\n    zero_count = one_count = 0\n    left = 0\n    \n    for right in range(len(s)):\n        if s[right] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        \n        # If the window is not balanced and more flips are needed\n        while zero_count > one_count + k and left <= right:\n            if s[left] == '0':\n                zero_count -= 1\n            else:\n                one_count -= 1\n            left += 1\n        \n        # Update the maximum length of balanced substring found so far\n        max_length = max(max_length, zero_count + one_count)\n    \n    return max_length * 2\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_longest_balanced_substring():\n    assert longest_balanced_substring(\"1001\", 1) == 4  # All characters can be changed to make the whole string balanced\n    assert longest_balanced_substring(\"1001\", 2) == 4  # Can change both '0's to '1's\n    assert longest_balanced_substring(\"0011\", 0) == 2  # No flips, longest balanced substring is \"00\" or \"11\"\n    assert longest_balanced_substring(\"1100011\", 2) == 7  # Can flip '0' at index 4 and '0' at index 6 to get \"1101111\"\n    assert longest_balanced_substring(\"0001111\", 2) == 6  # Can flip '1' at indices 3 and 4 to get \"0000000\"\n    assert longest_balanced_substring(\"1110111000\", 3) == 8  # Can flip '1' at indices 3, 4, and 5 to get \"1100111000\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000029", "row_id": 29, "seed_ids": ["813", "1659", "2012"], "mode": "leetcode", "instruction": "You are given a binary string `s` and an integer `k`. A **substring** of `s` is considered **balanced** if the number of `0`s and `1`s in it are equal. You can perform the following operation any number of times: choose any index `i` in the string `s` and flip the character at `i` (i.e., change `'0'` to `'1'` and vice versa). Your task is to find the length of the **longest balanced substring** you can obtain by performing the above operation **at most** `k` times. Return the length of this longest balanced substring.\n\nFor example, if `s = \"1100011\"` and `k = 2`, you can flip the characters at indices `4` and `6` to get `\"1101111\"`, which contains a balanced substring of length `7`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `text`, you want to use the characters of `text` to form as many instances of the word **\"racecar \"** as possible.  You can use each character in `text` **at most once**. Return the maximum number of instances that can be formed."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_racecar_instances(text):\n    \"\"\"\n    Returns the maximum number of \"racecar\" instances that can be formed from the given text.\n    \"\"\"\n    from collections import Counter\n    \n    required_chars = Counter(\"racecar\")\n    text_counter = Counter(text)\n    min_instances = float('inf')\n    \n    for char in required_chars:\n        if char in text_counter:\n            min_instances = min(min_instances, text_counter[char] // required_chars[char])\n        else:\n            return 0\n    \n    return min_instances\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_max_racecar_instances():\n    assert max_racecar_instances(\"rcetarac\") == 1\n    assert max_racecar_instances(\"raceccara\") == 1\n    assert max_racecar_instances(\"raccaerace\") == 2\n    assert max_racecar_instances(\"racedracecar\") == 1\n    assert max_racecar_instances(\"eaaacccecceracc\") == 2\n    assert max_racecar_instances(\"racecar\") == 1\n    assert max_racecar_instances(\"a\") == 0\n    assert max_racecar_instances(\"racecarsracecar\") == 1  # Only one complete \"racecar\" can be formed\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000030", "row_id": 30, "seed_ids": ["1189", "227", "1099"], "mode": "leetcode", "instruction": "Given a string `text`, you want to use the characters of `text` to form as many instances of the word **\"racecar \"** as possible.  You can use each character in `text` **at most once**. Return the maximum number of instances that can be formed."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically largest substring that is a palindrome. A palindrome is a string that reads the same backward as forward. If there are multiple palindromic substrings of the same length, return the one that is lexicographically largest. A substring is any contiguous sequence of characters within a string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_lexicographically_largest_palindrome(s):\n    \"\"\"\n    Given a string s, find the lexicographically largest palindromic substring.\n    \"\"\"\n    n = len(s)\n    if n == 0:\n        return \"\"\n    \n    # Initialize variables to store the result\n    start, end = 0, 0\n    \n    for i in range(n):\n        # Check for odd length palindromes\n        left, right = expand_around_center(s, i, i)\n        if right - left + 1 > end - start + 1:\n            start, end = left, right\n        \n        # Check for even length palindromes\n        left, right = expand_around_center(s, i, i + 1)\n        if right - left + 1 > end - start + 1:\n            start, end = left, right\n    \n    return s[start:end+1]\n\ndef expand_around_center(s, left, right):\n    \"\"\"\n    Helper function to expand around the center and find the longest palindrome.\n    \"\"\"\n    while left >= 0 and right < len(s) and s[left] == s[right]:\n        left -= 1\n        right += 1\n    return left + 1, right - 1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_find_lexicographically_largest_palindrome():\n    assert find_lexicographically_largest_palindrome(\"babad\") == \"bab\"\n    assert find_lexicographically_largest_palindrome(\"cbbd\") == \"bb\"\n    assert find_lexicographically_largest_palindrome(\"a\") == \"a\"\n    assert find_lexicographically_largest_palindrome(\"ac\") == \"a\"\n    assert find_lexicographically_largest_palindrome(\"racecar\") == \"racecar\"\n    assert find_lexicographically_largest_palindrome(\"banana\") == \"anana\"\n    assert find_lexicographically_largest_palindrome(\"abba\") == \"abba\"\n    assert find_lexicographically_largest_palindrome(\"abcde\") == \"e\"\n\ndef test_edge_cases():\n    assert find_lexicographically_largest_palindrome(\"\") == \"\"\n    assert find_lexicographically_largest_palindrome(\"a\") == \"a\"\n    assert find_lexicographically_largest_palindrome(\"aa\") == \"aa\"\n    assert find_lexicographically_largest_palindrome(\"aaa\") == \"aaa\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000031", "row_id": 31, "seed_ids": ["1361", "485", "1629"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically largest substring that is a palindrome. A palindrome is a string that reads the same backward as forward. If there are multiple palindromic substrings of the same length, return the one that is lexicographically largest. A substring is any contiguous sequence of characters within a string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an integer array `nums` sorted in **non-decreasing** order. Define a function `f(x)` for each element `x` in `nums` such that `f(x)` is the number of elements in `nums` that are strictly less than `x`. Build and return an integer array `result` with the same length as `nums` such that `result[i]` is equal to the summation of `f(nums[i])` for all `i` in the array. In other words, `result[i]` is equal to `sum(f(nums[i]))` where `0 <= j < nums.length` and `j != i` (0-indexed)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef f(x, nums):\n    \"\"\"\n    Returns the number of elements in nums that are strictly less than x.\n    \"\"\"\n    return len([num for num in nums if num < x])\n\ndef result_array(nums):\n    \"\"\"\n    For each element in nums, compute the number of elements strictly less than it,\n    then sum these values across all elements in the array.\n    \"\"\"\n    n = len(nums)\n    result = [0] * n\n    for i in range(n):\n        result[i] = sum(f(nums[i], nums[:i]) + f(nums[i], nums[i+1:]))\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import result_array\n\ndef test_result_array_empty():\n    assert result_array([]) == []\n\ndef test_result_array_single_element():\n    assert result_array([1]) == [0]\n\ndef test_result_array_constant_elements():\n    assert result_array([1, 1, 1]) == [0, 0, 0]\n\ndef test_result_array_increasing_elements():\n    assert result_array([1, 2, 3, 4]) == [0, 1, 3, 6]\n\ndef test_result_array_decreasing_elements():\n    assert result_array([4, 3, 2, 1]) == [6, 3, 1, 0]\n\ndef test_result_array_mixed_elements():\n    assert result_array([2, 3, 1, 4, 5]) == [0, 1, 0, 3, 6]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000032", "row_id": 32, "seed_ids": ["1685", "499", "2501"], "mode": "leetcode", "instruction": "You are given an integer array `nums` sorted in **non-decreasing** order. Define a function `f(x)` for each element `x` in `nums` such that `f(x)` is the number of elements in `nums` that are strictly less than `x`. Build and return an integer array `result` with the same length as `nums` such that `result[i]` is equal to the summation of `f(nums[i])` for all `i` in the array. In other words, `result[i]` is equal to `sum(f(nums[i]))` where `0 <= j < nums.length` and `j != i` (0-indexed)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a matrix `grid` of size `m x n` containing only `0`s and `1`s, where `1` represents land and `0` represents water, a **landlocked area** is a region of land completely surrounded by water, with no connection to the boundary of the grid. You are allowed to fill any number of `0`s (turning them into `1`s) to form additional land. The goal is to connect at least one landlocked area to the boundary to make it non-landlocked. Return the minimum number of `0`s you need to flip to achieve this. If it is impossible to make any landlocked area non-landlocked, return `-1`.\n\n**Example 1:**\n\nInput: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\n\nOutput: 2\n\nExplanation: We can flip two `0`s at positions (1, 1) and (2, 2) to make the landlocked area non-landlocked.\n\n**Example 2:**\n\nInput: grid = [[0,0,0],[0,1,1],[0,1,0]]\n\nOutput: -1\n\nExplanation: It is impossible to make any landlocked area non-landlocked."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_flips(grid):\n    \"\"\"\n    Returns the minimum number of flips required to make at least one landlocked area non-landlocked.\n    If it's impossible, returns -1.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    \n    # Helper function to perform a flood fill\n    def flood_fill(x, y, prev_value):\n        if 0 <= x < m and 0 <= y < n and grid[x][y] == prev_value:\n            grid[x][y] = 2  # Mark as visited\n            flood_fill(x + 1, y, prev_value)\n            flood_fill(x - 1, y, prev_value)\n            flood_fill(x, y + 1, prev_value)\n            flood_fill(x, y - 1, prev_value)\n    \n    def is_landlocked():\n        for i in range(1, m - 1):\n            for j in range(1, n - 1):\n                if grid[i][j] == 1 and all(grid[x][y] != 0 for x, y in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1))):\n                    return (i, j)\n        return None\n    \n    flips = 0\n    landlocked = is_landlocked()\n    \n    while landlocked:\n        x, y = landlocked\n        flood_fill(x, y, 0)\n        grid[x][y] = 1\n        flips += 1\n        landlocked = is_landlocked()\n    \n    # Check if all land is connected to the boundary\n    def is_connected():\n        visited = set()\n        \n        def dfs(x, y):\n            if (x, y) in visited:\n                return\n            visited.add((x, y))\n            if x == 0 or y == 0 or x == m - 1 or y == n - 1:\n                return True\n            for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                if 0 <= x + dx < m and 0 <= y + dy < n and grid[x + dx][y + dy] == 1:\n                    if dfs(x + dx, y + dy):\n                        return True\n            return False\n        \n        for i in range(1, m - 1):\n            for j in range(1, n - 1):\n                if grid[i][j] == 1 and (i, j) not in visited:\n                    if not dfs(i, j):\n                        return -1\n        return flips\n    \n    return is_connected()\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import min_flips\n\ndef test_min_flips():\n    assert min_flips([[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]) == 2\n    assert min_flips([[0,0,0],[0,1,1],[0,1,0]]) == -1\n    assert min_flips([[1,0,0],[0,0,0],[0,0,0]]) == 0\n    assert min_flips([[0,0,0,0],[0,0,0,0],[0,0,1,0],[0,0,0,0]]) == 1\n    assert min_flips([[0,0,0,0],[0,0,0,0],[0,1,1,0],[0,0,0,0]]) == -1\n    assert min_flips([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,1,0]]) == 0\n    assert min_flips([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000033", "row_id": 33, "seed_ids": ["135", "2357", "1719"], "mode": "leetcode", "instruction": "Given a matrix `grid` of size `m x n` containing only `0`s and `1`s, where `1` represents land and `0` represents water, a **landlocked area** is a region of land completely surrounded by water, with no connection to the boundary of the grid. You are allowed to fill any number of `0`s (turning them into `1`s) to form additional land. The goal is to connect at least one landlocked area to the boundary to make it non-landlocked. Return the minimum number of `0`s you need to flip to achieve this. If it is impossible to make any landlocked area non-landlocked, return `-1`.\n\n**Example 1:**\n\nInput: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\n\nOutput: 2\n\nExplanation: We can flip two `0`s at positions (1, 1) and (2, 2) to make the landlocked area non-landlocked.\n\n**Example 2:**\n\nInput: grid = [[0,0,0],[0,1,1],[0,1,0]]\n\nOutput: -1\n\nExplanation: It is impossible to make any landlocked area non-landlocked."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s`, return the number of distinct **subsequences** of `s` that are palindromic. Since the answer may be very large, return it **modulo** `10^9 + 7`. Note: A string is considered a **subsequence** of another string if it can be derived by deleting some or no characters from the other string without changing the order of the remaining characters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_distinct_palindromic_subsequences(s: str) -> int:\n    \"\"\"\n    Returns the number of distinct palindromic subsequences of the string `s`.\n    The result is returned modulo 10^9 + 7.\n    \"\"\"\n    MOD = 10**9 + 7\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1  # Single character is always a palindrome\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = (2 * dp[i+1][j-1]) % MOD\n                k = j - 1\n                while k > i:\n                    if s[i] == s[k]:\n                        dp[i][j] += (dp[i+1][k-1] - dp[i+1][j-1] + MOD) % MOD\n                        break\n                    k -= 1\n            else:\n                dp[i][j] = (dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1] + MOD) % MOD\n\n    return (dp[0][n-1] - 1 + MOD) % MOD  # Subtract 1 to exclude the empty subsequence\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_distinct_palindromic_subsequences\n\ndef test_count_distinct_palindromic_subsequences():\n    assert count_distinct_palindromic_subsequences(\"abc\") == 3  # \"a\", \"b\", \"c\"\n    assert count_distinct_palindromic_subsequences(\"aaa\") == 3  # \"a\", \"a\", \"aaa\"\n    assert count_distinct_palindromic_subsequences(\"baa\") == 3  # \"a\", \"b\", \"aa\"\n    assert count_distinct_palindromic_subsequences(\"aabca\") == 6  # \"a\", \"b\", \"c\", \"aa\", \"aba\", \"aaca\"\n    assert count_distinct_palindromic_subsequences(\"aaaacaab\") == 10\n    assert count_distinct_palindromic_subsequences(\"aaaaa\") == 5  # \"a\", \"a\", \"aa\", \"aaa\", \"aaaa\"\n    assert count_distinct_palindromic_subsequences(\"abccba\") == 11  # \"a\", \"b\", \"c\", \"b\", \"c\", \"a\", \"bb\", \"cc\", \"bca\", \"bac\", \"abccba\"\n\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000034", "row_id": 34, "seed_ids": ["2484", "291", "249"], "mode": "leetcode", "instruction": "Given a string `s`, return the number of distinct **subsequences** of `s` that are palindromic. Since the answer may be very large, return it **modulo** `10^9 + 7`. Note: A string is considered a **subsequence** of another string if it can be derived by deleting some or no characters from the other string without changing the order of the remaining characters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an integer array `nums` of length `n`, you are asked to perform the following operation exactly `k` times: choose an index `i` (0-indexed) from the array and increment `nums[i]` by 1. After performing these operations, find the maximum possible **GCD** (Greatest Common Divisor) of the array `nums`.\n\nReturn the maximum GCD you can achieve."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport math\nfrom typing import List\n\ndef maximize_gcd(nums: List[int], k: int) -> int:\n    \"\"\"\n    Returns the maximum possible GCD of the array nums after performing exactly k operations.\n    \"\"\"\n    max_val = max(nums)\n    min_val = min(nums)\n    possible_gcds = set()\n    \n    for i in range(min_val, max_val // 2 + 1):\n        if max_val % i == 0:\n            possible_gcds.add(i)\n    \n    for gcd in possible_gcds:\n        if all((num + (k * (num % gcd == 0))) % gcd == 0 for num in nums):\n            return gcd\n    \n    return 1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_maximize_gcd():\n    assert maximize_gcd([2, 3, 6], 1) == 4\n    assert maximize_gcd([3, 9, 6], 2) == 3\n    assert maximize_gcd([3, 9, 6], 3) == 9\n    assert maximize_gcd([2, 4, 6, 8], 10) == 2\n    assert maximize_gcd([10, 10, 10, 10], 5) == 10\n    assert maximize_gcd([1, 3, 5, 7], 2) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000035", "row_id": 35, "seed_ids": ["987", "1753", "11"], "mode": "leetcode", "instruction": "Given an integer array `nums` of length `n`, you are asked to perform the following operation exactly `k` times: choose an index `i` (0-indexed) from the array and increment `nums[i]` by 1. After performing these operations, find the maximum possible **GCD** (Greatest Common Divisor) of the array `nums`.\n\nReturn the maximum GCD you can achieve."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` (a string consisting only of '0's and '1's), you need to perform a series of operations to make the string alternating. An alternating string is one where no two adjacent characters are the same. You can perform the following operation any number of times: choose any index `i` (1-indexed) and flip the character at `s[i]` (change '0' to '1' or '1' to '0'). \n\nReturn the minimum number of operations required to make the string alternating. If it is impossible to make the string alternating, return `-1`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_operations_to_alternate(s: str) -> int:\n    \"\"\"\n    Returns the minimum number of operations required to make the binary string alternating.\n    If it's impossible, return -1.\n    \"\"\"\n    n = len(s)\n    # Count the number of mismatches if starting with '0' and '1'\n    count_0 = sum(s[i] != '0' for i in range(n))\n    count_1 = sum(s[i] != '1' for i in range(n))\n    \n    # The minimum operations is the minimum of the two counts, but not more than n//2\n    min_ops = min(count_0, count_1)\n    if min_ops > n // 2:\n        return -1\n    return min_ops\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_operations_to_alternate():\n    assert min_operations_to_alternate(\"001\") == 1\n    assert min_operations_to_alternate(\"10\") == 0\n    assert min_operations_to_alternate(\"1111\") == -1\n    assert min_operations_to_alternate(\"0101010\") == 0\n    assert min_operations_to_alternate(\"00010001\") == 2\n    assert min_operations_to_alternate(\"1110000\") == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000036", "row_id": 36, "seed_ids": ["994", "746", "1397"], "mode": "leetcode", "instruction": "Given a binary string `s` (a string consisting only of '0's and '1's), you need to perform a series of operations to make the string alternating. An alternating string is one where no two adjacent characters are the same. You can perform the following operation any number of times: choose any index `i` (1-indexed) and flip the character at `s[i]` (change '0' to '1' or '1' to '0'). \n\nReturn the minimum number of operations required to make the string alternating. If it is impossible to make the string alternating, return `-1`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of `n` intervals `intervals`, where each interval is represented as `[start, end]`, find the minimum number of intervals you need to remove so that the remaining intervals do not overlap. An interval `A` overlaps with another interval `B` if `A` and `B` have at least one common point. Return the minimum number of intervals to remove."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_intervals_to_remove(intervals):\n    \"\"\"\n    Given a list of intervals, find the minimum number of intervals to remove\n    so that the remaining intervals do not overlap.\n    \"\"\"\n    if len(intervals) <= 1:\n        return 0\n    \n    # Sort intervals based on the end point. If two intervals have the same end point, sort by start point\n    intervals.sort(key=lambda x: (x[1], x[0]))\n    \n    last_end = intervals[0][1]\n    count = 0\n    \n    for i in range(1, len(intervals)):\n        if intervals[i][0] < last_end:\n            count += 1\n        else:\n            last_end = intervals[i][1]\n    \n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom typing import List\n\ndef test_min_intervals_to_remove():\n    assert min_intervals_to_remove([[1,2],[2,3],[3,4],[1,3]]) == 1\n    assert min_intervals_to_remove([[1,2],[1,2],[1,2]]) == 2\n    assert min_intervals_to_remove([[1,2],[2,3]]) == 0\n    assert min_intervals_to_remove([[5,10],[10,15],[15,20]]) == 0\n    assert min_intervals_to_remove([[1,5],[1,5],[1,5]]) == 2\n    assert min_intervals_to_remove([[1,2],[2,3],[2,4],[3,5],[4,6],[4,7]]) == 2\n    assert min_intervals_to_remove([[0,30],[5,10],[15,20]]) == 1\n    assert min_intervals_to_remove([[1,10],[2,21],[3,22],[4,30]]) == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000037", "row_id": 37, "seed_ids": ["1284", "2165", "1413"], "mode": "leetcode", "instruction": "Given a list of `n` intervals `intervals`, where each interval is represented as `[start, end]`, find the minimum number of intervals you need to remove so that the remaining intervals do not overlap. An interval `A` overlaps with another interval `B` if `A` and `B` have at least one common point. Return the minimum number of intervals to remove."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase letters only, return the _length of the **longest** substring that can be obtained by replacing at most one character in `s` with any other character, such that the resulting substring is an alphabetical continuous string._\n\nFor example, in the string `\"abcbdefg\"`, you can replace the `c` with `a` to get `\"aabdefg\"`, which is an alphabetical continuous string of length 7."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_alphabetical_substring(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring that can be obtained by replacing \n    at most one character in s with any other character, such that the resulting \n    substring is an alphabetical continuous string.\n    \"\"\"\n    max_length = 1\n    start = 0\n    allowed_replacement = True\n    \n    for end in range(1, len(s)):\n        if abs(ord(s[end]) - ord(s[end - 1])) == 1 or s[end] == s[end - 1]:\n            continue\n        \n        if allowed_replacement:\n            allowed_replacement = False\n            while start < end - 1 and (ord(s[start]) != ord(s[end - 1]) or abs(ord(s[start]) - ord(s[start + 1])) != 1):\n                start += 1\n            \n            if start < end - 1:\n                start += 1\n        else:\n            break\n        \n        max_length = max(max_length, end - start + 1)\n    \n    # Check the last segment\n    max_length = max(max_length, end - start + 1)\n    \n    return max_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_longest_alphabetical_substring():\n    assert longest_alphabetical_substring(\"abcbdefg\") == 7\n    assert longest_alphabetical_substring(\"aaaaa\") == 5\n    assert longest_alphabetical_substring(\"abcdek\") == 6\n    assert longest_alphabetical_substring(\"abcbdefgh\") == 8\n    assert longest_alphabetical_substring(\"xyz\") == 3\n    assert longest_alphabetical_substring(\"xya\") == 3\n    assert longest_alphabetical_substring(\"abc\") == 3\n    assert longest_alphabetical_substring(\"abdefghijklmnopqrstuvwxyza\") == 27\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000038", "row_id": 38, "seed_ids": ["2414", "2220", "1929"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase letters only, return the _length of the **longest** substring that can be obtained by replacing at most one character in `s` with any other character, such that the resulting substring is an alphabetical continuous string._\n\nFor example, in the string `\"abcbdefg\"`, you can replace the `c` with `a` to get `\"aabdefg\"`, which is an alphabetical continuous string of length 7."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary search tree (BST) and a range `[low, high]`, return the sum of values of all nodes with a value in the given range. A binary search tree is a tree in which all nodes follow the property that the left subtree of a node contains only nodes with values less than the node's value, and the right subtree of a node contains only nodes with values greater than the node's value."}, {"role": "assistant", "content": "<|Solution Begin|>\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef rangeSumBST(root: TreeNode, low: int, high: int) -> int:\n    \"\"\"\n    Returns the sum of values of all nodes in the BST with values in the range [low, high].\n    \"\"\"\n    if root is None:\n        return 0\n    \n    sum_ = 0\n    if root.val >= low and root.val <= high:\n        sum_ += root.val\n    if root.val > low:\n        sum_ += rangeSumBST(root.left, low, high)\n    if root.val < high:\n        sum_ += rangeSumBST(root.right, low, high)\n    \n    return sum_\n```\n\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef create_tree():\n    \"\"\"\n    Helper function to create a sample BST.\n    \"\"\"\n    tree = TreeNode(10)\n    tree.left = TreeNode(5, TreeNode(3, TreeNode(1), TreeNode(4)), TreeNode(7))\n    tree.right = TreeNode(15, None, TreeNode(18))\n    return tree\n\ndef test_rangeSumBST():\n    root = create_tree()\n    assert rangeSumBST(root, 7, 15) == 32\n    assert rangeSumBST(root, 11, 14) == 0\n    assert rangeSumBST(root, 1, 10) == 22\n    assert rangeSumBST(root, 5, 20) == 69\n    assert rangeSumBST(root, -100, 100) == 69  # This tests if values outside the range are not counted.\n\ndef test_empty_tree():\n    assert rangeSumBST(None, 7, 15) == 0\n\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000039", "row_id": 39, "seed_ids": ["434", "1061", "141"], "mode": "leetcode", "instruction": "Given a binary search tree (BST) and a range `[low, high]`, return the sum of values of all nodes with a value in the given range. A binary search tree is a tree in which all nodes follow the property that the left subtree of a node contains only nodes with values less than the node's value, and the right subtree of a node contains only nodes with values greater than the node's value."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a class `CustomQueue` that supports the following operations:\n\n- `CustomQueue(int capacity)` Initializes the queue with a given capacity.\n- `void enqueue(int value)` Adds a value to the end of the queue if there is still space. Returns `false` if the queue is full.\n- `int dequeue()` Removes and returns the value at the front of the queue. Returns `-1` if the queue is empty.\n- `bool isFull()` Returns `true` if the queue is full, otherwise returns `false`.\n- `bool isEmpty()` Returns `true` if the queue is empty, otherwise returns `false`.\n\nImplement the `CustomQueue` class such that all operations are performed in constant time, i.e., O(1). Additionally, provide a method `getQueue()` that returns the current elements in the queue as a list, maintaining the order of elements as they were added."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass CustomQueue:\n    def __init__(self, capacity: int):\n        self.queue = []\n        self.capacity = capacity\n        self.front = 0\n        self.rear = 0\n\n    def enqueue(self, value: int) -> bool:\n        if self.isFull():\n            return False\n        self.queue.append(value)\n        self.rear += 1\n        return True\n\n    def dequeue(self) -> int:\n        if self.isEmpty():\n            return -1\n        value = self.queue[self.front]\n        self.front += 1\n        return value\n\n    def isFull(self) -> bool:\n        return self.rear - self.front == self.capacity\n\n    def isEmpty(self) -> bool:\n        return self.front == self.rear\n\n    def getQueue(self) -> list:\n        return self.queue[self.front:self.rear]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_customqueue_operations():\n    custom_queue = CustomQueue(3)\n    assert custom_queue.enqueue(1) is True\n    assert custom_queue.enqueue(2) is True\n    assert custom_queue.enqueue(3) is True\n    assert custom_queue.enqueue(4) is False  # Queue is full\n    assert custom_queue.dequeue() == 1\n    assert custom_queue.getQueue() == [2, 3]\n    assert custom_queue.dequeue() == 2\n    assert custom_queue.dequeue() == 3\n    assert custom_queue.dequeue() == -1  # Queue is empty\n    assert custom_queue.enqueue(5) is True\n    assert custom_queue.getQueue() == [5]\n\ndef test_queue_limit():\n    custom_queue = CustomQueue(2)\n    assert custom_queue.enqueue(1) is True\n    assert custom_queue.enqueue(2) is True\n    assert custom_queue.isFull() is True\n    assert custom_queue.enqueue(3) is False\n    assert custom_queue.getQueue() == [1, 2]\n\ndef test_empty_queue():\n    custom_queue = CustomQueue(2)\n    assert custom_queue.isEmpty() is True\n    assert custom_queue.enqueue(1) is True\n    assert custom_queue.getQueue() == [1]\n    assert custom_queue.isEmpty() is False\n    assert custom_queue.dequeue() == 1\n    assert custom_queue.isEmpty() is True\n\ndef test_enqueue_and_dequeue_mixed():\n    custom_queue = CustomQueue(2)\n    assert custom_queue.enqueue(1) is True\n    assert custom_queue.enqueue(2) is True\n    assert custom_queue.dequeue() == 1\n    assert custom_queue.enqueue(3) is True\n    assert custom_queue.getQueue() == [2, 3]\n    assert custom_queue.dequeue() == 2\n    assert custom_queue.dequeue() == 3\n    assert custom_queue.isEmpty() is True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000040", "row_id": 40, "seed_ids": ["1656", "733", "352"], "mode": "leetcode", "instruction": "Design a class `CustomQueue` that supports the following operations:\n\n- `CustomQueue(int capacity)` Initializes the queue with a given capacity.\n- `void enqueue(int value)` Adds a value to the end of the queue if there is still space. Returns `false` if the queue is full.\n- `int dequeue()` Removes and returns the value at the front of the queue. Returns `-1` if the queue is empty.\n- `bool isFull()` Returns `true` if the queue is full, otherwise returns `false`.\n- `bool isEmpty()` Returns `true` if the queue is empty, otherwise returns `false`.\n\nImplement the `CustomQueue` class such that all operations are performed in constant time, i.e., O(1). Additionally, provide a method `getQueue()` that returns the current elements in the queue as a list, maintaining the order of elements as they were added."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an `m x n` binary matrix `grid` representing a map where `0` indicates water and `1` indicates land. A **land bridge** is a path of adjacent `1`s (horizontally or vertically) that connects the leftmost column to the rightmost column. You have a limited number of `k` 0s that can be flipped to 1s to create additional land bridges. Find the minimum number of land bridges needed to connect the leftmost and rightmost columns of the grid, or return `-1` if it is impossible to do so with the given `k` 0s."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_land_bridges(grid, k):\n    \"\"\"\n    Returns the minimum number of land bridges needed to connect\n    the leftmost and rightmost columns of the grid, or -1 if it's impossible.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    left_to_right = [[False] * n for _ in range(m)]\n    cnt_ones = 0\n    \n    # Create a bitmask for each row that indicates which columns have land (1) or water (0)\n    row_bitmasks = [int(''.join(str(int(cell == 1)) for cell in row), 2) for row in grid]\n    \n    def dfs(r, mask):\n        if mask == int('1' * n, 2):\n            return 0\n        if r == m - 1:\n            return float('inf')\n        if not (left_to_right[r] or (k and (mask & row_bitmasks[r]) == row_bitmasks[r])):\n            return dfs(r + 1, mask)\n        # Flip one 0 to 1\n        if k:\n            return 1 + min(dfs(r + 1, mask | (1 << j)) for j in range(n) if not (mask >> j) & 1)\n        # No 0s to flip\n        return float('inf')\n    \n    res = dfs(0, 0)\n    return res if res != float('inf') else -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_min_land_bridges():\n    assert min_land_bridges([[0,0,1,0,0],[0,1,0,1,0],[1,1,0,1,1]], 1) == 1\n    assert min_land_bridges([[0,1,1,0],[0,0,0,0],[0,1,1,0]], 0) == 2\n    assert min_land_bridges([[1,1,1,0,0],[0,0,1,1,1],[0,0,1,0,0]], 2) == -1\n    assert min_land_bridges([[0,0,0,0,0,0,1], [0,0,0,0,0,0,1], [0,0,0,0,0,0,1]], 7) == 0\n    assert min_land_bridges([[0,0,0,0,0,0,1], [0,0,0,0,0,0,1], [0,0,0,0,0,0,1]], 6) == -1\n\npytest.main(['-v', 'min_land_bridges.py'])\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000041", "row_id": 41, "seed_ids": ["1642", "1217", "994"], "mode": "leetcode", "instruction": "You are given an `m x n` binary matrix `grid` representing a map where `0` indicates water and `1` indicates land. A **land bridge** is a path of adjacent `1`s (horizontally or vertically) that connects the leftmost column to the rightmost column. You have a limited number of `k` 0s that can be flipped to 1s to create additional land bridges. Find the minimum number of land bridges needed to connect the leftmost and rightmost columns of the grid, or return `-1` if it is impossible to do so with the given `k` 0s."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given two binary strings `a` and `b`, return _the sum of `a` and `b` when interpreted as binary numbers._ The length of each string is in the range `[1, 1000]` and consists only of `'0'` or `'1'`. Both `a` and `b` can represent very large numbers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef add_binary(a: str, b: str) -> str:\n    \"\"\"\n    Given two binary strings a and b, return the sum of a and b as a binary string.\n    \"\"\"\n    return bin(int(a, 2) + int(b, 2))[2:]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add_binary\n\ndef test_add_binary_positive_cases():\n    assert add_binary(\"11\", \"1\") == \"100\"\n    assert add_binary(\"1010\", \"1011\") == \"10101\"\n\ndef test_add_binary_with_zeros():\n    assert add_binary(\"0\", \"0\") == \"0\"\n    assert add_binary(\"0\", \"1\") == \"1\"\n    assert add_binary(\"1\", \"0\") == \"1\"\n\ndef test_add_binary_with_large_numbers():\n    assert add_binary(\"1111111111\", \"1\") == \"10000000000\"\n    assert add_binary(\"10000000001000000000\", \"10000000001000000000\") == \"10000000001000000000000000000\"\n\ndef test_add_binary_negative_cases():\n    assert add_binary(\"0\", \"10\") == \"10\"\n    assert add_binary(\"10\", \"0\") == \"10\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000042", "row_id": 42, "seed_ids": ["1567", "1072", "617"], "mode": "leetcode", "instruction": "Given two binary strings `a` and `b`, return _the sum of `a` and `b` when interpreted as binary numbers._ The length of each string is in the range `[1, 1000]` and consists only of `'0'` or `'1'`. Both `a` and `b` can represent very large numbers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given two integer arrays `speed` and `efficiency` both of length `n`, and an integer `k`, you are to select a subset of engineers to form a team. Each engineer is represented by their `speed` and `efficiency`. Your goal is to maximize the **product** of the team's **average speed** and the minimum efficiency among the selected engineers. The team must consist of at least `2` engineers. Return the maximum possible product. Since the answer can be a large number, return it modulo `10^9 + 7`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_team_product(speed, efficiency, k):\n    \"\"\"\n    Returns the maximum possible product of the team's average speed and the minimum efficiency.\n    \"\"\"\n    from heapq import nlargest\n    \n    # Create a list of tuples (efficiency, speed) and sort it by efficiency in descending order.\n    engineers = sorted(zip(efficiency, speed), reverse=True)\n    sum_speed = 0\n    max_heap = []\n    max_product = 0\n    \n    for eff, spd in engineers:\n        if len(max_heap) < k:\n            sum_speed += spd\n            nlargest(max_heap, eff)\n        else:\n            sum_speed += spd\n            sum_speed -= heappushpop(max_heap, eff)\n        \n        if len(max_heap) == k:\n            max_product = max(max_product, eff * (sum_speed // k))\n    \n    return max_product % (10**9 + 7)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_team_product\n\ndef test_max_team_product():\n    # Test case 1\n    assert max_team_product([10, 20, 30, 40], [10, 20, 30, 40], 3) == 600\n    # Test case 2\n    assert max_team_product([40, 20, 30], [20, 30, 10], 2) == 600\n    # Test case 3\n    assert max_team_product([10, 20, 50, 70], [5, 25, 40, 100], 1) == 1000\n    # Test case 4\n    assert max_team_product([10, 20, 5, 7], [5, 25, 40, 10], 2) == 250\n    # Test case 5\n    assert max_team_product([5,4,3,2,1], [1,2,3,4,5], 3) % (10**9 + 7) == 35\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000043", "row_id": 43, "seed_ids": ["2389", "2505", "1383"], "mode": "leetcode", "instruction": "Given two integer arrays `speed` and `efficiency` both of length `n`, and an integer `k`, you are to select a subset of engineers to form a team. Each engineer is represented by their `speed` and `efficiency`. Your goal is to maximize the **product** of the team's **average speed** and the minimum efficiency among the selected engineers. The team must consist of at least `2` engineers. Return the maximum possible product. Since the answer can be a large number, return it modulo `10^9 + 7`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of `n` flights, each represented as a triplet `(i, j, k)` where `i` is the starting city, `j` is the destination city, and `k` is the cost of the flight. The cities are labeled from `0` to `n-1`. You are also given a list of `m` reservations, each represented as a pair `(i, j)` indicating that a reservation is made from city `i` to city `j`. A reservation is valid if there exists a direct flight between the two cities. \n\nReturn the total cost of the cheapest valid itinerary that visits every city exactly once, or `-1` if no such itinerary exists. You may start and end at any city, and you may revisit cities and use the same flight multiple times. \n\nIf there are multiple valid itineraries with the same total cost, return the one with the lexicographically smallest itinerary. An itinerary is lexicographically smaller if the sequence of city labels is lexicographically smaller."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict\nfrom itertools import permutations\n\ndef cheapest_itinerary(flights, reservations):\n    \"\"\"\n    Returns the total cost of the cheapest valid itinerary that visits every city exactly once,\n    or -1 if no such itinerary exists.\n    \"\"\"\n    # Create a graph from the flights list\n    graph = defaultdict(list)\n    for i, j, k in flights:\n        graph[i].append((j, k))\n        graph[j].append((i, k))\n    \n    # Filter out airports where no direct flights are made according to reservations\n    airports = set()\n    for i, j in reservations:\n        airports.add(i)\n        airports.add(j)\n    airports = list(airports)\n    \n    # Find all possible permutations of the itinerary\n    min_cost = float('inf')\n    best_path = []\n    for perm in permutations(airports):\n        current_cost = 0\n        valid = True\n        for i in range(len(perm) - 1):\n            u, v = perm[i], perm[i + 1]\n            if (u, v) in graph and (v, u) in graph:\n                for j, k in graph[u]:\n                    if j == v:\n                        current_cost += k\n                        break\n                else:\n                    valid = False\n                    break\n            elif (v, u) in graph:\n                for j, k in graph[v]:\n                    if j == u:\n                        current_cost += k\n                        break\n                else:\n                    valid = False\n                    break\n        \n        if valid and current_cost < min_cost:\n            min_cost = current_cost\n            best_path = perm\n    \n    return min_cost if min_cost != float('inf') else -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_cheapest_itinerary():\n    assert cheapest_itinerary([(0, 1, 100), (1, 2, 100), (2, 0, 100), (1, 2, 600)], [(0, 1), (1, 2)]) == 260\n    assert cheapest_itinerary([(0,1,10),(1,2,100),(2,0,100),(1,2,100),(2,0,100)], [(0,1)]) == -1\n    assert cheapest_itinerary([(0,1,100),(1,2,100),(2,0,100)], [(0,1),(1,2)]) == 200\n    assert cheapest_itinerary([(0,1,100),(1,2,100),(2,0,100)], [(0,1),(2,0)]) == -1\n    assert cheapest_itinerary([(1,2,5), (1,3,5), (3,2,5)], [(2,1)]) == -1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000044", "row_id": 44, "seed_ids": ["847", "1820", "963"], "mode": "leetcode", "instruction": "You are given a list of `n` flights, each represented as a triplet `(i, j, k)` where `i` is the starting city, `j` is the destination city, and `k` is the cost of the flight. The cities are labeled from `0` to `n-1`. You are also given a list of `m` reservations, each represented as a pair `(i, j)` indicating that a reservation is made from city `i` to city `j`. A reservation is valid if there exists a direct flight between the two cities. \n\nReturn the total cost of the cheapest valid itinerary that visits every city exactly once, or `-1` if no such itinerary exists. You may start and end at any city, and you may revisit cities and use the same flight multiple times. \n\nIf there are multiple valid itineraries with the same total cost, return the one with the lexicographically smallest itinerary. An itinerary is lexicographically smaller if the sequence of city labels is lexicographically smaller."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary tree, return the vertical order traversal of its nodes' values. Vertical order traversal means starting from the root, traverse the tree column by column from left to right. If two nodes are in the same row and column, order them from left to right based on their values. The tree is represented using a list of `TreeNode` objects, where each `TreeNode` has an integer value, and left and right pointers to its children. If a node is `null`, it should be represented as `None` in the list. For example, the tree\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\ncan be represented as `[3, [9], [20, 15, 7]]`. Return the vertical order traversal as a list of lists, where each sublist represents a vertical level."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef vertical_order_traversal(root):\n    \"\"\"\n    Returns the vertical order traversal of the tree nodes' values.\n    \"\"\"\n    if not root:\n        return []\n    \n    column_table = defaultdict(list)\n    min_column = max_column = 0\n    \n    def dfs(node, row, column):\n        nonlocal min_column, max_column\n        if node:\n            column_table[column].append((row, node.val))\n            min_column = min(min_column, column)\n            max_column = max(max_column, column)\n            dfs(node.left, row + 1, column - 1)\n            dfs(node.right, row + 1, column + 1)\n    \n    dfs(root, 0, 0)\n    \n    # Sort by row first, then by node value\n    vertical_order_list = []\n    for col in range(min_column, max_column + 1):\n        column_table[col].sort(key=lambda x: x[0])\n        vertical_order_list.append([val for row, val in column_table[col]])\n    \n    return vertical_order_list\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import TreeNode, vertical_order_traversal\n\n# Example tree\n#     3\n#    / \\\n#   9  20\n#     /  \\\n#    15   7\nnode_3 = TreeNode(3)\nnode_9 = TreeNode(9)\nnode_20 = TreeNode(20)\nnode_15 = TreeNode(15)\nnode_7 = TreeNode(7)\n\nnode_3.left = node_9\nnode_3.right = node_20\nnode_20.left = node_15\nnode_20.right = node_7\n\ndef test_vertical_order_traversal():\n    assert vertical_order_traversal(node_3) == [[9], [3, 15], [20], [7]]\n\n# Tree with a single node\nsingle_node = TreeNode(1)\ndef test_single_node():\n    assert vertical_order_traversal(single_node) == [[1]]\n\n# Tree with no nodes\ndef test_no_nodes():\n    assert vertical_order_traversal(None) == []\n\n# Tree with multiple nodes\n#     10\n#    /  \\\n#   3    5\n#  / \\\n# 2   1\nnode_10 = TreeNode(10)\nnode_3 = TreeNode(3)\nnode_5 = TreeNode(5)\nnode_2 = TreeNode(2)\nnode_1 = TreeNode(1)\n\nnode_10.left = node_3\nnode_10.right = node_5\nnode_3.left = node_2\nnode_3.right = node_1\ndef test_multiple_nodes():\n    assert vertical_order_traversal(node_10) == [[2], [3], [10], [5, 1]]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000045", "row_id": 45, "seed_ids": ["223", "1228", "1528"], "mode": "leetcode", "instruction": "Given a binary tree, return the vertical order traversal of its nodes' values. Vertical order traversal means starting from the root, traverse the tree column by column from left to right. If two nodes are in the same row and column, order them from left to right based on their values. The tree is represented using a list of `TreeNode` objects, where each `TreeNode` has an integer value, and left and right pointers to its children. If a node is `null`, it should be represented as `None` in the list. For example, the tree\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\ncan be represented as `[3, [9], [20, 15, 7]]`. Return the vertical order traversal as a list of lists, where each sublist represents a vertical level."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary tree where each node has a unique value. The tree is represented as a list of lists, where each sublist represents a level of the tree. Each element in a sublist is either `None` (indicating a null node) or an integer representing the value of a node. For example:\n\n```python\n[\n    [1],\n    [2, 3],\n    [4, 5, 6, 7]\n]\n```\n\nThis represents a tree with the following structure:\n\n```\n    1\n   / \\\n  2   3\n / \\ / \\\n4  5 6  7\n```\n\nYou are also given a list of **queries** where each query is a 2D integer array `queries[i] = [startValuei, destValuei]`. For each query, you need to find the lowest common ancestor (LCA) of the nodes with values `startValuei` and `destValuei`. The LCA of two nodes is defined as the lowest node that has both nodes in its subtree. If either node does not exist in the tree, return `-1`.\n\nReturn an integer array `answer` where `answer[i]` is the result of the `i-th` query.\n\nFor example, given the tree above and the queries:\n\n```python\nqueries = [[4, 7], [3, 5]]\n```\n\nThe answers would be `[2, 2]`, since the LCA of 4 and 7 is 2, and the LCA of 3 and 5 is also 2."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=None, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree_from_list(lst):\n    if not lst:\n        return None\n    root = TreeNode(lst[0])\n    queue = [root]\n    i, n = 1, len(lst)\n    while i < n:\n        node = queue.pop(0)\n        if i < n:\n            node.left = TreeNode(lst[i]) if lst[i] is not None else None\n            queue.append(node.left)\n            i += 1\n            if i < n and lst[i] is not None:\n                node.right = TreeNode(lst[i])\n                queue.append(node.right)\n                i += 1\n    return root\n\ndef find_node(root, val):\n    if not root:\n        return None\n    if root.val == val:\n        return root\n    left = find_node(root.left, val)\n    if left:\n        return left\n    return find_node(root.right, val)\n\ndef find_lca(root, p, q):\n    if not root:\n        return None\n    if root.val == p.val or root.val == q.val:\n        return root\n    left_lca = find_lca(root.left, p, q)\n    right_lca = find_lca(root.right, p, q)\n    if left_lca and right_lca:\n        return root\n    return left_lca if left_lca else right_lca\n\ndef lca_in_binary_tree(tree_str, queries):\n    tree = build_tree_from_list(tree_str)\n    results = []\n    for p_val, q_val in queries:\n        p_node = find_node(tree, p_val)\n        q_node = find_node(tree, q_val)\n        if not p_node or not q_node:\n            results.append(-1)\n        else:\n            lca_node = find_lca(tree, p_node, q_node)\n            results.append(lca_node.val)\n    return results\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import build_tree_from_list, find_node, find_lca, lca_in_binary_tree\n\ndef test_tree_construction():\n    tree_str = [\n        [1],\n        [2, 3],\n        [4, 5, 6, 7]\n    ]\n    queries = [[4, 7], [3, 5]]\n    result = lca_in_binary_tree(tree_str, queries)\n    assert result == [2, 2]\n\ndef test_no_node():\n    tree_str = [\n        [1],\n        [2, 3],\n        [4, 5, 6, 7]\n    ]\n    queries = [[4, 8]]\n    result = lca_in_binary_tree(tree_str, queries)\n    assert result == [-1]\n\ndef test_root_lca():\n    tree_str = [\n        [1]\n    ]\n    queries = [[1, 1]]\n    result = lca_in_binary_tree(tree_str, queries)\n    assert result == [1]\n\ndef test_empty_queries():\n    tree_str = [\n        [1],\n        [2, 3],\n        [4, 5, 6, 7]\n    ]\n    queries = []\n    result = lca_in_binary_tree(tree_str, queries)\n    assert result == []\n\ndef test_different_trees():\n    tree_str1 = [\n        [1],\n        [2, 3],\n        [4, 5, 6, 7]\n    ]\n    queries1 = [[4, 7], [3, 5]]\n    result1 = lca_in_binary_tree(tree_str1, queries1)\n    tree_str2 = [\n        [1],\n        [2, 3],\n        [4, 5, 6]\n    ]\n    queries2 = [[4, 5], [3, 6]]\n    result2 = lca_in_binary_tree(tree_str2, queries2)\n    assert result1 == result2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000046", "row_id": 46, "seed_ids": ["2055", "565", "2581"], "mode": "leetcode", "instruction": "You are given a binary tree where each node has a unique value. The tree is represented as a list of lists, where each sublist represents a level of the tree. Each element in a sublist is either `None` (indicating a null node) or an integer representing the value of a node. For example:\n\n```python\n[\n    [1],\n    [2, 3],\n    [4, 5, 6, 7]\n]\n```\n\nThis represents a tree with the following structure:\n\n```\n    1\n   / \\\n  2   3\n / \\ / \\\n4  5 6  7\n```\n\nYou are also given a list of **queries** where each query is a 2D integer array `queries[i] = [startValuei, destValuei]`. For each query, you need to find the lowest common ancestor (LCA) of the nodes with values `startValuei` and `destValuei`. The LCA of two nodes is defined as the lowest node that has both nodes in its subtree. If either node does not exist in the tree, return `-1`.\n\nReturn an integer array `answer` where `answer[i]` is the result of the `i-th` query.\n\nFor example, given the tree above and the queries:\n\n```python\nqueries = [[4, 7], [3, 5]]\n```\n\nThe answers would be `[2, 2]`, since the LCA of 4 and 7 is 2, and the LCA of 3 and 5 is also 2."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a class `MyStack` to implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `pop`, `top`, and `empty`). Implement the `MyStack` class:\n\n*   `void push(int x)` Pushes element x to the top of the stack.\n*   `int pop()` Removes the element from the top of the stack and returns it.\n*   `int top()` Returns the element at the top of the stack.\n*   `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.\n\n**Notes:** \n\n*   You must use **only** standard operations of a queue, which means only `enqueue`, `deque`, `size`, and `is empty` operations are valid.\n*   Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import deque\n\nclass MyStack:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.queue1 = deque()\n        self.queue2 = deque()\n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x onto stack.\n        \"\"\"\n        self.queue2.append(x)\n        while self.queue1:\n            self.queue2.append(self.queue1.popleft())\n        self.queue1, self.queue2 = self.queue2, self.queue1\n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element on top of the stack and returns that element.\n        \"\"\"\n        return self.queue1.popleft()\n\n    def top(self) -> int:\n        \"\"\"\n        Get the top element.\n        \"\"\"\n        return self.queue1[0]\n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the stack is empty.\n        \"\"\"\n        return not self.queue1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom collections import deque\nimport pytest\n\ndef test_my_stack():\n    my_stack = MyStack()\n    my_stack.push(1)\n    my_stack.push(2)\n    assert my_stack.top() == 2\n    assert my_stack.pop() == 2\n    assert my_stack.empty() is False\n\n    my_stack.push(3)\n    assert my_stack.pop() == 3\n    assert my_stack.pop() == 1\n    assert my_stack.empty() is True\n\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000047", "row_id": 47, "seed_ids": ["952", "222", "232"], "mode": "leetcode", "instruction": "Design a class `MyStack` to implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `pop`, `top`, and `empty`). Implement the `MyStack` class:\n\n*   `void push(int x)` Pushes element x to the top of the stack.\n*   `int pop()` Removes the element from the top of the stack and returns it.\n*   `int top()` Returns the element at the top of the stack.\n*   `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.\n\n**Notes:** \n\n*   You must use **only** standard operations of a queue, which means only `enqueue`, `deque`, `size`, and `is empty` operations are valid.\n*   Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of `n` jobs where each job is represented by a tuple `(start, end, cpuTime)`, determine the minimum time required to complete all jobs. Each job must be processed in the given order, and the jobs can only be processed one at a time. A job can start immediately after the previous job ends. The goal is to find the total time taken to complete all jobs, including the time spent on the jobs themselves and any waiting time.\n\nFor example, given the jobs `[(1, 3, 2), (2, 5, 3), (7, 9, 1)]`, the total time to complete all jobs is `10` (2 + 3 + 5).\n\nImplement the function `minCompletionTime(jobs)` that takes a list of jobs and returns the minimum completion time."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef minCompletionTime(jobs):\n    \"\"\"\n    Returns the minimum time required to complete all jobs.\n    \"\"\"\n    total_time = 0\n    current_time = 0\n    \n    for start, end, cpuTime in jobs:\n        current_time = max(current_time, start)  # Wait if the current job starts after the previous one ended.\n        total_time += cpuTime  # Add the CPU time of the current job to the total time.\n        current_time = end  # Move to the end time of the current job.\n    \n    return total_time\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_minCompletionTime():\n    assert minCompletionTime([(1, 3, 2)]) == 3\n    assert minCompletionTime([(1, 3, 2), (2, 5, 3), (7, 9, 1)]) == 10\n    assert minCompletionTime([(1, 2, 1), (3, 4, 2), (5, 6, 1)]) == 6\n    assert minCompletionTime([(1, 5, 3), (6, 8, 2), (10, 12, 4)]) == 12\n    assert minCompletionTime([(0, 1, 1), (1, 3, 1), (3, 4, 1)]) == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000048", "row_id": 48, "seed_ids": ["1433", "353", "265"], "mode": "leetcode", "instruction": "Given a list of `n` jobs where each job is represented by a tuple `(start, end, cpuTime)`, determine the minimum time required to complete all jobs. Each job must be processed in the given order, and the jobs can only be processed one at a time. A job can start immediately after the previous job ends. The goal is to find the total time taken to complete all jobs, including the time spent on the jobs themselves and any waiting time.\n\nFor example, given the jobs `[(1, 3, 2), (2, 5, 3), (7, 9, 1)]`, the total time to complete all jobs is `10` (2 + 3 + 5).\n\nImplement the function `minCompletionTime(jobs)` that takes a list of jobs and returns the minimum completion time."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an integer array `nums` and a target integer `target`, find the **shortest contiguous subarray** in `nums` such that the sum of the elements in the subarray is equal to or greater than `target`. If no such subarray exists, return `0`. A **contiguous subarray** is a subarray with at least two elements, and the **sum** of its elements is the sum of the corresponding elements in `nums`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef shortest_subarray_with_sum_at_least_target(nums, target):\n    \"\"\"\n    Finds the shortest contiguous subarray in nums such that the sum of the\n    elements in the subarray is equal to or greater than target. Returns 0 if\n    no such subarray exists.\n    \"\"\"\n    n = len(nums)\n    if n < 2:\n        return 0\n    \n    shortest_length = float('inf')\n    left = 0\n    current_sum = 0\n    \n    for right in range(n):\n        current_sum += nums[right]\n        \n        while current_sum >= target:\n            shortest_length = min(shortest_length, right - left + 1)\n            current_sum -= nums[left]\n            left += 1\n    \n    return shortest_length if shortest_length != float('inf') else 0\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_shortest_subarray_with_sum_at_least_target():\n    assert shortest_subarray_with_sum_at_least_target([2, 3, 1, 2, 4, 3], 7) == 2\n    assert shortest_subarray_with_sum_at_least_target([1, 4, 4], 4) == 1\n    assert shortest_subarray_with_sum_at_least_target([1, 1, 1, 1, 1, 1, 1, 1], 11) == 0\n    assert shortest_subarray_with_sum_at_least_target([1], 1) == 0\n    assert shortest_subarray_with_sum_at_least_target([1, 2, 3, 4, 5], 15) == 5\n    assert shortest_subarray_with_sum_at_least_target([1, 2, 3, 4, 5], 16) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000049", "row_id": 49, "seed_ids": ["1848", "1455", "1601"], "mode": "leetcode", "instruction": "Given an integer array `nums` and a target integer `target`, find the **shortest contiguous subarray** in `nums` such that the sum of the elements in the subarray is equal to or greater than `target`. If no such subarray exists, return `0`. A **contiguous subarray** is a subarray with at least two elements, and the **sum** of its elements is the sum of the corresponding elements in `nums`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an integer `n`, you are asked to find the number of ways to represent `n` as a sum of consecutive positive integers. For example, `5` can be represented as `2 + 3`, which is one way. Return the total number of ways to represent `n` in this manner.\n\nNote: Consecutive positive integers are those where each integer is one more than the previous one, such as `1, 2, 3, ...`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_ways(n: int) -> int:\n    \"\"\"\n    Returns the number of ways to represent n as a sum of consecutive positive integers.\n    \"\"\"\n    ways = 0\n    start = 1\n    while start * (start + 1) < 2 * n:\n        end = int((-start + (start * (start + 1) - 2 * n) ** 0.5) / 2)\n        if start * (start + 1) // 2 + end * (end + 1) // 2 == n:\n            ways += 1\n        start += 1\n    return ways\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_count_ways():\n    assert count_ways(5) == 2  # Because 5 can be represented as 2 + 3 or 5 itself\n    assert count_ways(9) == 3  # Because 9 can be represented as 4 + 5, 2 + 3 + 4, or 9 itself\n    assert count_ways(15) == 4  # Because 15 can be represented as 1 + 2 + 3 + 4 + 5, 7 + 8, 4 + 5 + 6, or 15 itself\n    assert count_ways(1) == 1  # 1 can only be represented as 1\n    assert count_ways(10) == 2  # Because 10 can be represented as 1 + 2 + 3 + 4 or 5 + 5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000050", "row_id": 50, "seed_ids": ["1057", "1399", "157"], "mode": "leetcode", "instruction": "Given an integer `n`, you are asked to find the number of ways to represent `n` as a sum of consecutive positive integers. For example, `5` can be represented as `2 + 3`, which is one way. Return the total number of ways to represent `n` in this manner.\n\nNote: Consecutive positive integers are those where each integer is one more than the previous one, such as `1, 2, 3, ...`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a class `CustomComparator` that implements a custom sorting algorithm for an array of integers. The sorting algorithm should sort the array in ascending order based on the following rules:\n\n1. Elements at even indices should be sorted in ascending order.\n2. Elements at odd indices should be sorted in descending order.\n\nYour task is to implement the `CustomComparator` class with the following methods:\n\n- `CustomComparator(int[] arr)`: Constructor that initializes the array to be sorted.\n- `void sort()`: Sorts the array according to the rules mentioned above.\n- `int[] getResult()`: Returns the sorted array.\n\nAdditionally, provide a `main` method to test your implementation with a sample array and print the sorted array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass CustomComparator:\n    def __init__(self, arr):\n        \"\"\"\n        Constructor that initializes the array to be sorted.\n        \"\"\"\n        self.arr = arr\n\n    def sort(self):\n        \"\"\"\n        Sorts the array according to the rules mentioned:\n        - Elements at even indices are sorted in ascending order.\n        - Elements at odd indices are sorted in descending order.\n        \"\"\"\n        even_indices_sorted = sorted(self.arr[::2])\n        odd_indices_sorted_desc = sorted(self.arr[1::2], reverse=True)\n\n        sorted_arr = []\n        for i in range(len(self.arr) // 2):\n            sorted_arr.append(even_indices_sorted[i])\n            if len(self.arr) % 2 == 0 or i < len(self.arr) // 2 - 1:\n                sorted_arr.append(odd_indices_sorted_desc[i])\n\n        for i in range(len(self.arr) % 2):\n            sorted_arr.append(even_indices_sorted.pop() if i % 2 == 0 else odd_indices_sorted_desc.pop())\n\n        self.arr = sorted_arr\n\n    def getResult(self):\n        \"\"\"\n        Returns the sorted array.\n        \"\"\"\n        return self.arr\n\n\ndef main():\n    arr = [4, 3, 1, 2]\n    comparator = CustomComparator(arr)\n    comparator.sort()\n    print(comparator.getResult())\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\nfrom pytest import mark, raises\n\n@mark.unit\ndef test_custom_comparator():\n    # Test with even length array\n    arr = [4, 3, 1, 2]\n    comparator = CustomComparator(arr)\n    comparator.sort()\n    assert comparator.getResult() == [1, 3, 2, 4]\n\n    # Test with odd length array\n    arr = [4, 3, 1]\n    comparator = CustomComparator(arr)\n    comparator.sort()\n    assert comparator.getResult() == [1, 3, 4]\n\n    # Test with array of length 2\n    arr = [2, 1]\n    comparator = CustomComparator(arr)\n    comparator.sort()\n    assert comparator.getResult() == [1, 2]\n\n    # Test with reversed sorted array\n    arr = [4, 2, 3, 1]\n    comparator = CustomComparator(arr)\n    comparator.sort()\n    assert comparator.getResult() == [2, 4, 3, 1]\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000051", "row_id": 51, "seed_ids": ["2515", "264", "1656"], "mode": "leetcode", "instruction": "Design a class `CustomComparator` that implements a custom sorting algorithm for an array of integers. The sorting algorithm should sort the array in ascending order based on the following rules:\n\n1. Elements at even indices should be sorted in ascending order.\n2. Elements at odd indices should be sorted in descending order.\n\nYour task is to implement the `CustomComparator` class with the following methods:\n\n- `CustomComparator(int[] arr)`: Constructor that initializes the array to be sorted.\n- `void sort()`: Sorts the array according to the rules mentioned above.\n- `int[] getResult()`: Returns the sorted array.\n\nAdditionally, provide a `main` method to test your implementation with a sample array and print the sorted array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` of length `n`, and a positive integer `k`, you are allowed to perform the following operation **any number of times**: choose any index `i` (0-indexed) and flip the value of `s[i]` (i.e., change `s[i]` from `0` to `1` or from `1` to `0`). A **substring** of `s` is said to be **balanced** if the number of `1`s in the substring is equal to the number of `0`s. \n\nAfter performing the above operations, return the **maximum** possible length of a **balanced** substring of `s`. A balanced substring must have an equal number of `0`s and `1`s. If no such balanced substring can be formed, return `0`.\n\nFor example, if `s = \"00110011\"` and `k = 1`, you can flip the second `0` to `1` to form the balanced substring `\"01110011\"`, which has a length of `6`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_balanced_substring_length(s, k):\n    \"\"\"\n    Given a binary string s and an integer k, returns the maximum possible length of a balanced substring.\n    A balanced substring has an equal number of 0s and 1s, and k flips are allowed.\n    \"\"\"\n    balance = 0\n    max_length = 0\n    for i in range(len(s)):\n        balance += 1 if s[i] == '1' else -1\n        if balance < 0:\n            balance = 0\n        max_length = max(max_length, balance)\n    balance = 0\n    for i in range(len(s)):\n        balance += 1 if s[i] == '0' else -1\n        if balance < 0:\n            balance = 0\n        max_length = max(max_length, balance)\n    return min(max_length + k * 2, len(s))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_max_balanced_substring_length():\n    assert max_balanced_substring_length(\"00110011\", 1) == 6\n    assert max_balanced_substring_length(\"0010\", 0) == 2\n    assert max_balanced_substring_length(\"10000\", 1) == 4\n    assert max_balanced_substring_length(\"0101010\", 2) == 8\n    assert max_balanced_substring_length(\"0001111\", 2) == 6\n    assert max_balanced_substring_length(\"0000\", 3) == 6\n    assert max_balanced_substring_length(\"11110000\", 3) == 6\n    assert max_balanced_substring_length(\"11001100\", 1) == 6\n    assert max_balanced_substring_length(\"010101\", 0) == 4\n    assert max_balanced_substring_length(\"10101010\", 1) == 6\n    assert max_balanced_substring_length(\"111111111\", 3) == 9\n\npytest.main()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000052", "row_id": 52, "seed_ids": ["1252", "828", "2560"], "mode": "leetcode", "instruction": "Given a binary string `s` of length `n`, and a positive integer `k`, you are allowed to perform the following operation **any number of times**: choose any index `i` (0-indexed) and flip the value of `s[i]` (i.e., change `s[i]` from `0` to `1` or from `1` to `0`). A **substring** of `s` is said to be **balanced** if the number of `1`s in the substring is equal to the number of `0`s. \n\nAfter performing the above operations, return the **maximum** possible length of a **balanced** substring of `s`. A balanced substring must have an equal number of `0`s and `1`s. If no such balanced substring can be formed, return `0`.\n\nFor example, if `s = \"00110011\"` and `k = 1`, you can flip the second `0` to `1` to form the balanced substring `\"01110011\"`, which has a length of `6`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a rectangular grid of size `m x n`, you are initially positioned at the top-left cell `(0, 0)`. You are allowed to move either down or right at any point in time. Each cell in the grid contains a unique integer. Design a function that returns the lexicographically smallest path of length `k` from the starting cell to the bottom-right cell `(m-1, n-1)`. A path is defined as a sequence of `k` cells from the grid, starting from `(0, 0)` and ending at `(m-1, n-1)`. The path must follow the movement rules (only down or right) and the cells must be distinct. The cells in the path are considered in the order they are visited. The lexicographically smallest path is the one where the sequence of cell values, when concatenated, forms the smallest possible number. For example, if the path is `[5, 7, 8]`, the value is `578`. If the path is `[1, 3, 2]`, the value is `132`. If two paths have the same sequence of cell values, the lexicographically smaller one is the one with the smaller first element."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_smallest_path(grid, k):\n    \"\"\"\n    Returns the lexicographically smallest path of length k from (0, 0) to (m-1, n-1).\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, k, path):\n        if k == 0 or x == m-1 and y == n-1:\n            return [path]\n        smallest_paths = []\n        if x < m-1:\n            smallest_paths += dfs(x+1, y, k-1, path + [grid[x+1][y]])\n        if y < n-1:\n            smallest_paths += dfs(x, y+1, k-1, path + [grid[x][y+1]])\n        return sorted(smallest_paths, key=lambda p: int(''.join(map(str, p))))[:1]\n    \n    return dfs(0, 0, k, [grid[0][0]])[0]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_find_smallest_path():\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    k = 3\n    assert find_smallest_path(grid, k) == [1, 2, 4]\n    \n    grid = [[5, 9, 3], [4, 1, 6], [7, 8, 2]]\n    k = 2\n    assert find_smallest_path(grid, k) == [1, 2]\n\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    k = 4\n    assert find_smallest_path(grid, k) == [1, 2, 4, 7]\n\n    grid = [[10, 11, 12], [13, 14, 15], [16, 17, 18]]\n    k = 3\n    assert find_smallest_path(grid, k) == [10, 11, 12]\n\n    grid = [[1, 1, 3], [4, 5, 6], [7, 8, 2]]\n    k = 2\n    assert find_smallest_path(grid, k) == [1, 1]\n\n    grid = [[1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    k = 2\n    assert find_smallest_path(grid, k) == [1, 1]\n\n    grid = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\n    k = 3\n    assert find_smallest_path(grid, k) == [1, 2, 3]\n\n    grid = [[9, 8, 7], [4, 5, 6], [3, 2, 1]]\n    k = 3\n    assert find_smallest_path(grid, k) == [1, 2, 1]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000053", "row_id": 53, "seed_ids": ["866", "2194", "2503"], "mode": "leetcode", "instruction": "Given a rectangular grid of size `m x n`, you are initially positioned at the top-left cell `(0, 0)`. You are allowed to move either down or right at any point in time. Each cell in the grid contains a unique integer. Design a function that returns the lexicographically smallest path of length `k` from the starting cell to the bottom-right cell `(m-1, n-1)`. A path is defined as a sequence of `k` cells from the grid, starting from `(0, 0)` and ending at `(m-1, n-1)`. The path must follow the movement rules (only down or right) and the cells must be distinct. The cells in the path are considered in the order they are visited. The lexicographically smallest path is the one where the sequence of cell values, when concatenated, forms the smallest possible number. For example, if the path is `[5, 7, 8]`, the value is `578`. If the path is `[1, 3, 2]`, the value is `132`. If two paths have the same sequence of cell values, the lexicographically smaller one is the one with the smaller first element."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given two strings `s` and `t` of equal length. Each string consists of lowercase English letters. A **swap** is defined as exchanging the positions of two characters within a string. Your task is to determine the minimum number of swaps required to make the string `s` an anagram of string `t`. An anagram of a string is another string that contains the same characters, only the order of characters can be different.\n\nFor example, if `s = \"abc\"` and `t = \"bca\"`, you can make `s` an anagram of `t` by swapping `s[0]` and `s[1]`, resulting in `s = \"bca\"`. Return the minimum number of swaps needed to achieve this.\n\nConstraints:\n- `1 <= s.length == t.length <= 100`\n- `s` and `t` consist of lowercase English letters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_swaps_to_anagram(s, t):\n    \"\"\"\n    Returns the minimum number of swaps required to make string s an anagram of string t.\n    \"\"\"\n    if len(s) != len(t):\n        return -1  # Return -1 if lengths are not equal\n    \n    # Count the frequency of each character in both strings\n    from collections import Counter\n    s_count = Counter(s)\n    t_count = Counter(t)\n    \n    # Find characters that are not balanced between the two strings\n    imbalance = (s_count - t_count) + (t_count - s_count)\n    \n    # The minimum number of swaps is half the number of imbalance counts\n    return sum(imbalance.values()) // 2\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import min_swaps_to_anagram\n\ndef test_min_swaps_to_anagram_equal_strings():\n    assert min_swaps_to_anagram(\"abc\", \"abc\") == 0\n\ndef test_min_swaps_to_anagram_swap_needed():\n    assert min_swaps_to_anagram(\"abc\", \"bca\") == 1\n\ndef test_min_swaps_to_anagram_multiple_swaps_needed():\n    assert min_swaps_to_anagram(\"abcc\", \"ccba\") == 2\n\ndef test_min_swaps_to_anagram_case_insensitivity():\n    assert min_swaps_to_anagram(\"aBc\", \"Cba\") == 3\n\ndef test_min_swaps_to_anagram_fail_length_mismatch():\n    assert min_swaps_to_anagram(\"a\", \"ab\") == -1\n\ndef test_min_swaps_to_anagram_empty_strings():\n    assert min_swaps_to_anagram(\"\", \"\") == 0\n\ndef test_min_swaps_to_anagram_multiple_characters():\n    assert min_swaps_to_anagram(\"aabbcc\", \"ccbbaa\") == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000054", "row_id": 54, "seed_ids": ["1519", "2137", "1638"], "mode": "leetcode", "instruction": "You are given two strings `s` and `t` of equal length. Each string consists of lowercase English letters. A **swap** is defined as exchanging the positions of two characters within a string. Your task is to determine the minimum number of swaps required to make the string `s` an anagram of string `t`. An anagram of a string is another string that contains the same characters, only the order of characters can be different.\n\nFor example, if `s = \"abc\"` and `t = \"bca\"`, you can make `s` an anagram of `t` by swapping `s[0]` and `s[1]`, resulting in `s = \"bca\"`. Return the minimum number of swaps needed to achieve this.\n\nConstraints:\n- `1 <= s.length == t.length <= 100`\n- `s` and `t` consist of lowercase English letters."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times:\n\n- Pick any two adjacent characters in `s` and replace them with a single character that is the **lexicographically smallest** character among them. For example, `ab` can be replaced with `a`, and `bb` can be replaced with `b`.\n\nReturn _the lexicographically smallest string that can be obtained by applying the above operation any number of times._\n\nExample:\n```python\nInput: s = \"cbaaaabc\"\nOutput: \"aaaabca\"\nExplanation:\nFirst, replace \"cba\" to get \"aabaaabc\".\nThen, replace \"aabaaabc\" to get \"aaaabca\".\n```"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef smallest_string(s):\n    \"\"\"\n    Returns the lexicographically smallest string that can be obtained.\n    \"\"\"\n    result = \"\"\n    i = 0\n    n = len(s)\n    while i < n:\n        start = i\n        while i < n and s[i] == s[start]:\n            i += 1\n        if i - start > 1:\n            result += s[start]\n        else:\n            result += s[start:i]\n    return result.replace(s[0], 'a')\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_smallest_string():\n    assert smallest_string(\"cbaaaabc\") == \"aaaabca\"\n    assert smallest_string(\"bbbbbb\") == \"bb\"\n    assert smallest_string(\"abcd\") == \"a\"\n    assert smallest_string(\"aaabbbccc\") == \"abc\"\n    assert smallest_string(\"zzzzz\") == \"z\"\n    assert smallest_string(\"aazbzbz\") == \"aaabz\"\n    assert smallest_string(\"abbaabba\") == \"aaa\"\n    assert smallest_string(\"zzzzyyyxx\") == \"xyz\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000055", "row_id": 55, "seed_ids": ["96", "427", "2347"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times:\n\n- Pick any two adjacent characters in `s` and replace them with a single character that is the **lexicographically smallest** character among them. For example, `ab` can be replaced with `a`, and `bb` can be replaced with `b`.\n\nReturn _the lexicographically smallest string that can be obtained by applying the above operation any number of times._\n\nExample:\n```python\nInput: s = \"cbaaaabc\"\nOutput: \"aaaabca\"\nExplanation:\nFirst, replace \"cba\" to get \"aabaaabc\".\nThen, replace \"aabaaabc\" to get \"aaaabca\".\n```"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an unsorted array of integers `nums`, return the maximum number of **distinct** elements in any **continuous subarray** of size `k`. A **continuous subarray** is defined as a subarray that contains `k` consecutive elements from the original array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import Counter\n\ndef max_distinct_elements(nums, k):\n    \"\"\"\n    Returns the maximum number of distinct elements in any continuous subarray of size k.\n    \"\"\"\n    if k == 0:\n        return 0\n    window_counter = Counter(nums[:k])\n    max_distinct = len(window_counter)\n    for i in range(k, len(nums)):\n        window_counter[nums[i]] += 1\n        window_counter[nums[i - k]] -= 1\n        if window_counter[nums[i - k]] == 0:\n            del window_counter[nums[i - k]]\n        max_distinct = max(max_distinct, len(window_counter))\n    return max_distinct\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_distinct_elements\n\ndef test_max_distinct_elements():\n    assert max_distinct_elements([1, 2, 1, 3, 4, 3], 3) == 3\n    assert max_distinct_elements([1, 2, 1, 3, 4, 3], 5) == 4\n    assert max_distinct_elements([1, 2, 1, 3, 4, 3], 6) == 6\n    assert max_distinct_elements([1, 2, 3, 4, 5], 2) == 5\n    assert max_distinct_elements([1, 2, 3, 4, 5], 3) == 4\n    assert max_distinct_elements([1, 3, 1, 2, 2], 2) == 2\n    assert max_distinct_elements([1], 1) == 1\n    assert max_distinct_elements([], 5) == 0\n\ndef test_window_counter_logn_update():\n    nums = [1, 2, 1, 3, 4, 3]\n    k = 3\n    window_counter = Counter()\n    for i in range(k):\n        window_counter[nums[i]] += 1\n    # Check if the counter contains 3 distinct elements\n    assert len(window_counter) == 3\n    for i in range(k, len(nums)):\n        window_counter[nums[i]] += 1\n        window_counter[nums[i - k]] -= 1\n        if window_counter[nums[i - k]] == 0:\n            del window_counter[nums[i - k]]\n        # Check if the counter contains the maximum possible distinct elements\n        assert len(window_counter) in [2, 3]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000056", "row_id": 56, "seed_ids": ["230", "1433", "674"], "mode": "leetcode", "instruction": "Given an unsorted array of integers `nums`, return the maximum number of **distinct** elements in any **continuous subarray** of size `k`. A **continuous subarray** is defined as a subarray that contains `k` consecutive elements from the original array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` consisting of lowercase English letters. You are also given an integer `k`. You can perform the following operation on the string any number of times:\n\n- Pick any substring of length `k` from `s` and reverse it.\n\nYour task is to determine the lexicographically smallest string that can be obtained after performing the above operation any number of times. Return the resulting string.\n\nExample:\n- If `s = \"cbaebabacd\"` and `k = 3`, you can reverse the substring `\"bac\"` to get `\"cbabcabad\"`. Reversing `\"bac\"` again gives `\"cbabcabad\"` which is the lexicographically smallest string possible. So, the answer is `\"abcabad\"`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef smallest_string_after_reversals(s, k):\n    \"\"\"\n    Given a string s and an integer k, return the lexicographically smallest string\n    that can be obtained by reversing any substring of length k any number of times.\n    \"\"\"\n    # Initialize the result string with the first k characters\n    result = s[:k]\n    \n    # Process the rest of the string in chunks of k\n    for i in range(k, len(s), k):\n        chunk = s[i:i+k]\n        # Reverse the chunk to ensure it's the lexicographically smallest possible\n        reversed_chunk = min(chunk, chunk[::-1])\n        result += reversed_chunk\n    \n    # Handle the remaining characters that are less than k\n    if len(s) % k != 0:\n        result += min(s[-(len(s) % k):], s[-(len(s) % k):][::-1])\n    \n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_smallest_string_after_reversals():\n    assert smallest_string_after_reversals(\"cbaebabacd\", 3) == \"abcabcabcabc\"\n    assert smallest_string_after_reversals(\"leetcode\", 4) == \"ecde\u933eecn\"\n    assert smallest_string_after_reversals(\"acbabc\", 3) == \"abcabc\"\n    assert smallest_string_after_reversals(\"cbaebabacdcdcdcd\", 5) == \"abacababcabcabc\"\n\n# Note: The second and fourth test cases have been simplified to match the expected outputs more accurately.\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000057", "row_id": 57, "seed_ids": ["2285", "637", "848"], "mode": "leetcode", "instruction": "You are given a string `s` consisting of lowercase English letters. You are also given an integer `k`. You can perform the following operation on the string any number of times:\n\n- Pick any substring of length `k` from `s` and reverse it.\n\nYour task is to determine the lexicographically smallest string that can be obtained after performing the above operation any number of times. Return the resulting string.\n\nExample:\n- If `s = \"cbaebabacd\"` and `k = 3`, you can reverse the substring `\"bac\"` to get `\"cbabcabad\"`. Reversing `\"bac\"` again gives `\"cbabcabad\"` which is the lexicographically smallest string possible. So, the answer is `\"abcabad\"`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a **0-indexed** string `s` and an integer `k`, reverse the segment of `s` that starts at index `0` and ends at the index of the **k-th** occurrence of the character `a` (**inclusive**). If the character `a` does not occur `k` times in `s`, do nothing. \n\n*   For example, if `s = \"abcdeaa \"` and `k = 3`, then you should reverse the segment that starts at `0` and ends at `3` (**inclusive**). The resulting string will be `\"aebcd \"`.\n\nReturn the resulting string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef reverse_segment(s: str, k: int) -> str:\n    \"\"\"\n    Reverses the segment of s that starts at index 0 and ends at the index of the k-th occurrence of the character 'a'.\n    If 'a' does not occur k times, returns the original string.\n    \"\"\"\n    count = 0\n    target_index = -1\n    for i in range(len(s)):\n        if s[i] == 'a':\n            count += 1\n            if count == k:\n                target_index = i\n                break\n    if target_index >= 0:\n        return s[:target_index+1][::-1] + s[target_index+1:]\n    return s\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_reverse_segment():\n    assert reverse_segment(\"abcdeaa\", 3) == \"aebcd\"\n    assert reverse_segment(\"aabb\", 2) == \"aaab\"\n    assert reverse_segment(\"abracadabra\", 3) == \"aacaabrdrab\"\n    assert reverse_segment(\"abcd\", 1) == \"abcd\"\n    assert reverse_segment(\"aaa\", 2) == \"aaa\"\n    assert reverse_segment(\"a\", 1) == \"a\"\n    assert reverse_segment(\"b\", 1) == \"b\"\n    assert reverse_segment(\"babaa\", 2) == \"aabab\"\n    assert reverse_segment(\"abcdefa\", 4) == \"fbcdea\"\n    assert reverse_segment(\"xyz\", 2) == \"xyz\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000058", "row_id": 58, "seed_ids": ["558", "2000", "1674"], "mode": "leetcode", "instruction": "Given a **0-indexed** string `s` and an integer `k`, reverse the segment of `s` that starts at index `0` and ends at the index of the **k-th** occurrence of the character `a` (**inclusive**). If the character `a` does not occur `k` times in `s`, do nothing. \n\n*   For example, if `s = \"abcdeaa \"` and `k = 3`, then you should reverse the segment that starts at `0` and ends at `3` (**inclusive**). The resulting string will be `\"aebcd \"`.\n\nReturn the resulting string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given two arrays of integers, `nums1` and `nums2`, both of the same length, you are allowed to rearrange the elements of `nums1`. Your task is to find the maximum possible sum of the absolute differences between corresponding elements of `nums1` and `nums2`. In other words, you want to maximize the expression `\u03a3 |nums1[i] - nums2[i]|` for `0 <= i < length(nums1)`. Return this maximum possible sum.\n\nFor example, if `nums1 = [1, 2, 3, 4]` and `nums2 = [2, 1, 4, 3]`, one possible rearrangement of `nums1` could be `[4, 3, 2, 1]`, which would give a sum of `|4-2| + |3-1| + |2-4| + |1-3| = 10`. Find the optimal rearrangement of `nums1` to achieve the highest possible sum."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_absolute_difference(nums1, nums2):\n    \"\"\"\n    Rearranges nums1 to maximize the sum of absolute differences.\n    \"\"\"\n    # Calculate the absolute differences for the current order of nums1 and nums2.\n    current_diff = sum(abs(x - y) for x, y in zip(nums1, nums2))\n    \n    # Calculate the differences in sorted order.\n    sorted_diff = sorted(abs(x - y) for x, y in zip(sorted(nums1), sorted(nums2, reverse=True)))\n    \n    # The optimal difference can always be achieved by rearranging nums1 such that\n    # nums1 = max(nums1) - nums2 and nums1 = min(nums1) + nums2. \n    # This is because the largest and smallest values will create the largest possible differences.\n    optimal_diff = sum(sorted_diff)\n    \n    return max(current_diff, optimal_diff)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_max_absolute_difference():\n    assert max_absolute_difference([1, 2, 3, 4], [2, 1, 4, 3]) == 10\n    assert max_absolute_difference([1, 2, 3, 4], [1, 2, 3, 4]) == 8\n    assert max_absolute_difference([1, 2, 3, 4], [4, 3, 2, 1]) == 10\n    assert max_absolute_difference([1, 2, 4, 5], [2, 1, 5, 4]) == 10\n    assert max_absolute_difference([4, 2, 3, 1], [7, 5, 11, 2]) == 20\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000059", "row_id": 59, "seed_ids": ["1181", "1859", "1874"], "mode": "leetcode", "instruction": "Given two arrays of integers, `nums1` and `nums2`, both of the same length, you are allowed to rearrange the elements of `nums1`. Your task is to find the maximum possible sum of the absolute differences between corresponding elements of `nums1` and `nums2`. In other words, you want to maximize the expression `\u03a3 |nums1[i] - nums2[i]|` for `0 <= i < length(nums1)`. Return this maximum possible sum.\n\nFor example, if `nums1 = [1, 2, 3, 4]` and `nums2 = [2, 1, 4, 3]`, one possible rearrangement of `nums1` could be `[4, 3, 2, 1]`, which would give a sum of `|4-2| + |3-1| + |2-4| + |1-3| = 10`. Find the optimal rearrangement of `nums1` to achieve the highest possible sum."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of `n` tasks, each with a unique identifier from `1` to `n`. The tasks are to be scheduled on a single machine that processes them sequentially. Each task takes a certain amount of time to complete, which is given by an array `times` of length `n` where `times[i]` is the time required to complete the `i+1`-th task. The machine can skip any task once, but only before it starts processing that task. Once a task is skipped, it cannot be processed. Given `times` and an integer `k` (where `0 <= k <= n`), find the minimum possible time required to complete all tasks if you can skip up to `k` tasks. Return the minimum time."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_time_to_complete_tasks(times, k):\n    \"\"\"\n    Returns the minimum time required to complete all tasks given that we can skip up to k tasks.\n    \"\"\"\n    if k == 0:\n        return sum(times)\n    \n    n = len(times)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i-1], dp[i-2] + times[i-1])\n        \n        if i - 1 - k >= 0:\n            dp[i] = max(dp[i], dp[i-1-k] + sum(times[i-k:i]))\n    \n    return dp[n]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import min_time_to_complete_tasks\n\ndef test_min_time_to_complete_tasks_1():\n    assert min_time_to_complete_tasks([1, 2, 3, 4, 5], 2) == 9\n    assert min_time_to_complete_tasks([4, 2, 3, 2], 1) == 7\n\ndef test_min_time_to_complete_tasks_2():\n    assert min_time_to_complete_tasks([1, 1, 1], 0) == 3\n    assert min_time_to_complete_tasks([1], 1) == 1\n\ndef test_min_time_to_complete_tasks_3():\n    assert min_time_to_complete_tasks([10, 10, 10, 10], 2) == 20\n    assert min_time_to_complete_tasks([5, 5, 5, 5], 1) == 13\n\ndef test_min_time_to_complete_tasks_4():\n    assert min_time_to_complete_tasks([1, 2, 3], 3) == 6\n    assert min_time_to_complete_tasks([1], 0) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000060", "row_id": 60, "seed_ids": ["2335", "805", "558"], "mode": "leetcode", "instruction": "You are given a list of `n` tasks, each with a unique identifier from `1` to `n`. The tasks are to be scheduled on a single machine that processes them sequentially. Each task takes a certain amount of time to complete, which is given by an array `times` of length `n` where `times[i]` is the time required to complete the `i+1`-th task. The machine can skip any task once, but only before it starts processing that task. Once a task is skipped, it cannot be processed. Given `times` and an integer `k` (where `0 <= k <= n`), find the minimum possible time required to complete all tasks if you can skip up to `k` tasks. Return the minimum time."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary string `s` consisting only of `0`s and `1`s. A **substring** of `s` is called **good** if it does not contain more than one `0`. You are also given an integer `k`. Your task is to find the **maximum** number of **good** substrings that can be obtained by rearranging the characters of `s` and then splitting the string into at most `k` non-empty substrings. Return the maximum number of good substrings you can obtain.\n\nFor example, if `s = \"1001010011\"` and `k = 3`, one possible way to split `s` into good substrings is `\"10010\"`, `\"100\"`, and `\"11\"`, which gives a total of 3 good substrings."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_good_substrings(s, k):\n    \"\"\"\n    Returns the maximum number of good substrings that can be obtained.\n    \"\"\"\n    max_good = 0\n    current_good = 0\n    zeros_count = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            zeros_count += 1\n        if zeros_count > 1:\n            zeros_count = 1\n            current_good += 1\n        max_good = max(max_good, current_good)\n        if (i + 1) % (k + 1) == 0 and i < len(s) - 1:\n            current_good = 0\n    return max_good\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_max_good_substrings():\n    assert max_good_substrings(\"1001010011\", 3) == 3\n    assert max_good_substrings(\"1000\", 1) == 1\n    assert max_good_substrings(\"000111000\", 2) == 2\n    assert max_good_substrings(\"111\", 1) == 1\n    assert max_good_substrings(\"0000000\", 4) == 4\n    assert max_good_substrings(\"110010\", 2) == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000061", "row_id": 61, "seed_ids": ["294", "2562", "1881"], "mode": "leetcode", "instruction": "You are given a binary string `s` consisting only of `0`s and `1`s. A **substring** of `s` is called **good** if it does not contain more than one `0`. You are also given an integer `k`. Your task is to find the **maximum** number of **good** substrings that can be obtained by rearranging the characters of `s` and then splitting the string into at most `k` non-empty substrings. Return the maximum number of good substrings you can obtain.\n\nFor example, if `s = \"1001010011\"` and `k = 3`, one possible way to split `s` into good substrings is `\"10010\"`, `\"100\"`, and `\"11\"`, which gives a total of 3 good substrings."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times:\n\n- Choose any two indices `i` and `j` (0-indexed) where `0 <= i < j < s.length` and `s[i] = 'a'` and `s[j] = 'z'`. Reverse the substring `s[i+1..j-1]`.\n\nYour task is to determine the minimum number of operations required to transform the string `s` into a string where all characters are the same. If it is impossible to achieve such a string, return `-1`.\n\nFor example, given the string `s = \"azbzczbzcz\"`, you can perform the following operations:\n1. Choose `i = 0` and `j = 1` to get `s = \"aabzczbzcz\"`.\n2. Choose `i = 2` and `j = 3` to get `s = \"aaazbzczcz\"`.\n3. Choose `i = 4` and `j = 5` to get `s = \"aaaaaaazcz\"`.\n4. Choose `i = 6` and `j = 7` to get `s = \"aaaaaaaazz\"`.\n5. Choose `i = 8` and `j = 9` to get `s = \"aaaaaaaaaz\"`.\n\nReturn `5` as the answer."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_operations_to_uniform_string(s: str) -> int:\n    \"\"\"\n    Returns the minimum number of operations required to transform the string\n    into a string where all characters are the same. If it is impossible to achieve,\n    returns -1.\n    \"\"\"\n    if len(set(s)) != 2 or 'a' not in s or 'z' not in s:\n        return -1\n    \n    count_a, count_z = s.count('a'), s.count('z')\n    if count_a > count_z:\n        return s.rfind('z') - s.find('z') + 1\n    else:\n        return s.rfind('a') - s.find('a') + 1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_operations_to_uniform_string():\n    assert min_operations_to_uniform_string(\"azbzczbzcz\") == 5\n    assert min_operations_to_uniform_string(\"aaazzzzz\") == 1\n    assert min_operations_to_uniform_string(\"zzzzyy\") == 4\n    assert min_operations_to_uniform_string(\"aaa\") == -1\n    assert min_operations_to_uniform_string(\"zzz\") == -1\n    assert min_operations_to_uniform_string(\"azzazzazz\") == 3\n    assert min_operations_to_uniform_string(\"aazzazzazz\") == 4\n    assert min_operations_to_uniform_string(\"zzazzazz\") == 3\n\ntest_min_operations_to_uniform_string()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000062", "row_id": 62, "seed_ids": ["1442", "522", "2612"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times:\n\n- Choose any two indices `i` and `j` (0-indexed) where `0 <= i < j < s.length` and `s[i] = 'a'` and `s[j] = 'z'`. Reverse the substring `s[i+1..j-1]`.\n\nYour task is to determine the minimum number of operations required to transform the string `s` into a string where all characters are the same. If it is impossible to achieve such a string, return `-1`.\n\nFor example, given the string `s = \"azbzczbzcz\"`, you can perform the following operations:\n1. Choose `i = 0` and `j = 1` to get `s = \"aabzczbzcz\"`.\n2. Choose `i = 2` and `j = 3` to get `s = \"aaazbzczcz\"`.\n3. Choose `i = 4` and `j = 5` to get `s = \"aaaaaaazcz\"`.\n4. Choose `i = 6` and `j = 7` to get `s = \"aaaaaaaazz\"`.\n5. Choose `i = 8` and `j = 9` to get `s = \"aaaaaaaaaz\"`.\n\nReturn `5` as the answer."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` and an integer `k`, return the minimum number of operations required to make exactly `k` characters in the string '1'. In one operation, you can choose any substring of the string and flip all the characters in it (i.e., change '0' to '1' and '1' to '0'). Two strings are considered to be **similar** if they have the same number of '1's. The test cases are generated such that the binary string `s` can always be made to have exactly `k` '1's."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_operations_to_k_ones(s, k):\n    \"\"\"\n    Given a binary string s and an integer k, return the minimum number of operations\n    required to make exactly k characters in the string '1'.\n    \"\"\"\n    n = len(s)\n    prefix_sum = [0]\n    for char in s:\n        prefix_sum.append(prefix_sum[-1] + (char == '1'))\n    \n    min_ops = float('inf')\n    for left in range(n + 1):\n        right = max(0, (k * 2 - prefix_sum[left] - (n - left)))\n        ops = max(0, n - right) + left - prefix_sum[left]\n        min_ops = min(min_ops, ops)\n    \n    return min_ops\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_operations_to_k_ones():\n    assert min_operations_to_k_ones(\"0001000\", 3) == 3\n    assert min_operations_to_k_ones(\"10000000000\", 3) == 3\n    assert min_operations_to_k_ones(\"111\", 1) == 1\n    assert min_operations_to_k_ones(\"0000000000\", 1) == 9\n    assert min_operations_to_k_ones(\"0011001100\", 5) == 1\n    assert min_operations_to_k_ones(\"0101010101\", 5) == 5\n    assert min_operations_to_k_ones(\"1111111111\", 10) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000063", "row_id": 63, "seed_ids": ["2449", "1456", "1711"], "mode": "leetcode", "instruction": "Given a binary string `s` and an integer `k`, return the minimum number of operations required to make exactly `k` characters in the string '1'. In one operation, you can choose any substring of the string and flip all the characters in it (i.e., change '0' to '1' and '1' to '0'). Two strings are considered to be **similar** if they have the same number of '1's. The test cases are generated such that the binary string `s` can always be made to have exactly `k` '1's."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary search tree (BST) and a node value `target`, return `true` if the `target` is found in the BST, and `false` otherwise. You may assume that each node in the BST has **uniquely** valued children. Additionally, provide a method to insert a new node with a given value into the BST while maintaining its properties."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_in_bst(root: TreeNode, target: int) -> bool:\n    \"\"\"\n    Returns True if the target is found in the BST, False otherwise.\n    \"\"\"\n    current = root\n    while current:\n        if current.val == target:\n            return True\n        elif target < current.val:\n            current = current.left\n        else:\n            current = current.right\n    return False\n\ndef insert_into_bst(root: TreeNode, val: int) -> TreeNode:\n    \"\"\"\n    Inserts a new node with the given value into the BST while maintaining its properties.\n    \"\"\"\n    if not root:\n        return TreeNode(val)\n    \n    current = root\n    while True:\n        if val < current.val:\n            if current.left is None:\n                current.left = TreeNode(val)\n                break\n            current = current.left\n        else:\n            if current.right is None:\n                current.right = TreeNode(val)\n                break\n            current = current.right\n    return root\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef create_bst() -> TreeNode:\n    \"\"\"\n    Creates and returns a simple BST with nodes 2, 1, and 3.\n    \"\"\"\n    root = TreeNode(2)\n    root.left = TreeNode(1)\n    root.right = TreeNode(3)\n    return root\n\ndef test_find_in_bst():\n    root = create_bst()\n    assert find_in_bst(root, 1) == True\n    assert find_in_bst(root, 3) == True\n    assert find_in_bst(root, 2) == True\n    assert find_in_bst(root, 4) == False\n\ndef test_insert_into_bst():\n    root = create_bst()\n    assert find_in_bst(insert_into_bst(root, 4), 4) == True\n    assert find_in_bst(insert_into_bst(root, 0), 0) == True\n    assert find_in_bst(insert_into_bst(root, -1), -1) == True\n    assert find_in_bst(root, 2) == True\n\ndef test_insertion_maintains_structure():\n    root = create_bst()\n    new_root = insert_into_bst(root, 4)\n    assert find_in_bst(new_root.left, 1) == True\n    assert find_in_bst(new_root.right, 3) == True\n    assert find_in_bst(new_root.right.right, 4) == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000064", "row_id": 64, "seed_ids": ["1470", "1431", "114"], "mode": "leetcode", "instruction": "Given a binary search tree (BST) and a node value `target`, return `true` if the `target` is found in the BST, and `false` otherwise. You may assume that each node in the BST has **uniquely** valued children. Additionally, provide a method to insert a new node with a given value into the BST while maintaining its properties."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an array `nums` consisting of integers from `1` to `n` inclusive, where `n` is the length of the array. The array is initially sorted in ascending order. However, exactly one element is missing from the array, and the array is not necessarily contiguous. Your task is to find the missing element and return it. \n\nFor example, if the array is `[1, 2, 4, 5, 6]`, the missing element is `3`, and you should return `3`. If the array is `[1, 3, 4, 5]`, the missing element is `2`, and you should return `2`.\n\nReturn the missing element in the array."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_missing_element(nums):\n    \"\"\"\n    Returns the missing element in the array `nums`. The array `nums` is\n    initially a sorted array of integers from `1` to `n` inclusive, where an\n    element is missing, and the array is not necessarily contiguous.\n    \"\"\"\n    expected_sum = (len(nums) + 1) * (len(nums) + 2) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_find_missing_element():\n    assert find_missing_element([1, 2, 4, 5, 6]) == 3\n    assert find_missing_element([1, 3, 4, 5]) == 2\n    assert find_missing_element([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\n    assert find_missing_element([1, 2, 3, 4, 5, 6, 8, 9, 10]) == 7\n    assert find_missing_element([1, 2, 3, 5, 6, 7, 8, 9, 10]) == 4\n    assert find_missing_element([3, 4, 5, 6, 7, 8, 9, 10]) == 2\n    assert find_missing_element([2, 3, 4, 5, 6, 7, 8, 10]) == 9\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000065", "row_id": 65, "seed_ids": ["824", "1329", "1955"], "mode": "leetcode", "instruction": "You are given an array `nums` consisting of integers from `1` to `n` inclusive, where `n` is the length of the array. The array is initially sorted in ascending order. However, exactly one element is missing from the array, and the array is not necessarily contiguous. Your task is to find the missing element and return it. \n\nFor example, if the array is `[1, 2, 4, 5, 6]`, the missing element is `3`, and you should return `3`. If the array is `[1, 3, 4, 5]`, the missing element is `2`, and you should return `2`.\n\nReturn the missing element in the array."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a **binary search tree (BST)**, return the number of **valid** sequences of **node values** such that for every node, the value of that node is **strictly greater** than the sum of the values of all nodes that come before it and **strictly less** than the sum of the values of all nodes that come after it. In other words, a valid sequence is one where each node's value is the sum of a contiguous subsequence of its in-order traversal values. For example, in the tree:\n\n```\n    5\n   / \\\n  3   7\n / \\\n2   4\n```\n\nThe sequence `[2, 3, 4, 5, 7]` is valid because each node's value is greater than the sum of all previous nodes and less than the sum of all subsequent nodes. Note that the sequence must strictly follow the in-order traversal of the tree."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef count_valid_sequences(root: TreeNode) -> int:\n    \"\"\"\n    Returns the number of valid sequences in the binary search tree.\n    \"\"\"\n    def dfs(node, previous_sum, next_sum, min_val, max_val):\n        if not node:\n            return 0\n        if min_val < node.val < next_sum and previous_sum < node.val < max_val:\n            return 1 + dfs(node.left, previous_sum + node.val, next_sum, min_val, node.val) + dfs(node.right, previous_sum, next_sum + node.val, node.val, max_val)\n        return 0\n\n    return dfs(root, 0, 0, float('-inf'), float('inf'))\n```\n<|Solution End|>\n\n<|Test Begin|>\n\n```python\ndef create_tree():\n    # Creating a tree:\n    #     5\n    #    / \\\n    #   3   7\n    #  / \\\n    # 2   4\n    root = TreeNode(5)\n    root.left = TreeNode(3)\n    root.right = TreeNode(7)\n    root.left.left = TreeNode(2)\n    root.left.right = TreeNode(4)\n    return root\n\ndef test_valid_sequences():\n    root = create_tree()\n    assert count_valid_sequences(root) == 2\n\ndef test_invalid_sequences():\n    root = TreeNode(5)\n    root.left = TreeNode(2)\n    root.right = TreeNode(7)\n    assert count_valid_sequences(root) == 0\n\ndef test_single_node():\n    root = TreeNode(5)\n    assert count_valid_sequences(root) == 1\n\ndef test_no_leaf():\n    root = TreeNode(5)\n    root.left = TreeNode(3)\n    root.right = TreeNode(6)\n    assert count_valid_sequences(root) == 1\n\ndef test_empty_tree():\n    assert count_valid_sequences(None) == 0\n```\n\n<|Test End|>"}], "metadata": {"prompt_id": "00000066", "row_id": 66, "seed_ids": ["929", "376", "663"], "mode": "leetcode", "instruction": "Given a **binary search tree (BST)**, return the number of **valid** sequences of **node values** such that for every node, the value of that node is **strictly greater** than the sum of the values of all nodes that come before it and **strictly less** than the sum of the values of all nodes that come after it. In other words, a valid sequence is one where each node's value is the sum of a contiguous subsequence of its in-order traversal values. For example, in the tree:\n\n```\n    5\n   / \\\n  3   7\n / \\\n2   4\n```\n\nThe sequence `[2, 3, 4, 5, 7]` is valid because each node's value is greater than the sum of all previous nodes and less than the sum of all subsequent nodes. Note that the sequence must strictly follow the in-order traversal of the tree."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an integer array `nums` and an integer `k`. The _value_ of this array is defined as the sum of `|nums[i] - nums[i + 1]|` for all `0 <= i < nums.length - 1`. You are allowed to select any subarray of the given array and shift its elements cyclically (i.e., rotate the subarray elements to the left or right) any number of times. You can perform this operation **only once**. Find the maximum possible value of the final array after performing the operation."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_array_value(nums, k):\n    \"\"\"\n    Given an integer array nums and an integer k, this function finds the\n    maximum possible value of the array after rotating any subarray once.\n    The value of an array is defined as the sum of |nums[i] - nums[i + 1]|.\n    \"\"\"\n    n = len(nums)\n    if n == 1:\n        return 0\n\n    total_sum = sum(abs(nums[i] - nums[(i + 1) % n]) for i in range(n))\n    max_gain = 0\n\n    for i in range(n):\n        gain = -abs(nums[i] - nums[(i + 1) % n])  # Remove the initial pair\n        # Calculate the gain by not using nums[i:end] but instead using nums[(i-1+shift)%n:end]\n        gain += abs(nums[(i - 1 + k + 1) % n] - nums[(i + k) % n])\n        # Calculate the gain by not using nums[0:i] but instead using nums[0:(i+shift-1)%n]\n        gain += abs(nums[(i - 1 + k) % n] - nums[(i) % n])\n        max_gain = max(max_gain, gain)\n\n    return total_sum + max_gain\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_max_array_value():\n    assert max_array_value([1, 2, 3, 4, 5], 4) == 18\n    assert max_array_value([4, 3, 2, 6], 2) == 20\n    assert max_array_value([1], 1) == 0\n    assert max_array_value([10, 10, 10], 2) == 0\n    assert max_array_value([1, 1, 1, 1], 2) == 2\n\ndef test_case1():\n    nums = [2, 3, 1, 5, 4]\n    k = 3\n    assert max_array_value(nums, k) == 12\n\ndef test_case2():\n    nums = [1, 2, 3, 4, 5]\n    k = 3\n    assert max_array_value(nums, k) == 22\n\ndef test_case3():\n    nums = [10, 5, 5, 10]\n    k = 1\n    assert max_array_value(nums, k) == 20\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000067", "row_id": 67, "seed_ids": ["1814", "2135", "1330"], "mode": "leetcode", "instruction": "You are given an integer array `nums` and an integer `k`. The _value_ of this array is defined as the sum of `|nums[i] - nums[i + 1]|` for all `0 <= i < nums.length - 1`. You are allowed to select any subarray of the given array and shift its elements cyclically (i.e., rotate the subarray elements to the left or right) any number of times. You can perform this operation **only once**. Find the maximum possible value of the final array after performing the operation."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary tree, your task is to find the minimum **balance factor** of all its nodes. A node's balance factor is defined as the difference between the heights of its left and right subtrees, and the balance factor of the entire tree is the minimum balance factor of all its nodes. If the tree is empty, the balance factor is considered to be 0. Additionally, if a node does not have a left or right subtree, its balance factor is the height of the existing subtree. Return the minimum balance factor of the tree.\n\nFor example, consider the following tree:\n\n```\n    1\n   / \\\n  2   3\n /\n4\n```\n\nThe balance factors of the nodes are as follows:\n- Node 1: |2 - 1| = 1\n- Node 2: |1 - 0| = 1\n- Node 3: |0 - 0| = 0\n- Node 4: 1 (since it only has a left subtree)\n\nThe minimum balance factor is 0.\n\n**Note**: A node's height is defined as the number of edges on the longest path from the node to a leaf. A leaf node has a height of 0."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef height(root):\n    if not root:\n        return 0\n    return 1 + max(height(root.left), height(root.right))\n\ndef min_balance_factor(root):\n    if not root:\n        return 0\n    \n    left_height = height(root.left)\n    right_height = height(root.right)\n    current_balance = left_height - right_height\n    \n    left_min_balance = min_balance_factor(root.left)\n    right_min_balance = min_balance_factor(root.right)\n    \n    return min(current_balance, left_min_balance, right_min_balance)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_balance_factor():\n    # Tree:\n    #     1\n    #    / \\\n    #   2   3\n    #  /\n    # 4\n    tree = TreeNode(1, TreeNode(2, TreeNode(4)), TreeNode(3))\n    assert min_balance_factor(tree) == 0\n\n    # Tree:\n    #     1\n    #    / \\\n    #   2   3\n    #  / \\\n    # 4   5\n    tree = TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3))\n    assert min_balance_factor(tree) == -1\n\n    # Tree:\n    #     1\n    #    /\n    #   2\n    #  /\n    # 4\n    tree = TreeNode(1, TreeNode(2, TreeNode(4)))\n    assert min_balance_factor(tree) == -1\n\n    # Tree:\n    #     1\n    #    / \\\n    #   2   3\n    #  /     \\\n    # 4       5\n    tree = TreeNode(1, TreeNode(2, TreeNode(4)), TreeNode(3, None, TreeNode(5)))\n    assert min_balance_factor(tree) == -2\n\n    # Tree:\n    #     1\n    #    /\n    #   2\n    #  / \\\n    # 4   5\n    tree = TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)))\n    assert min_balance_factor(tree) == 1\n\n    # Tree is empty\n    assert min_balance_factor(None) == 0\n\n    # Single node tree\n    tree = TreeNode(1)\n    assert min_balance_factor(tree) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000068", "row_id": 68, "seed_ids": ["2547", "1334", "133"], "mode": "leetcode", "instruction": "Given a binary tree, your task is to find the minimum **balance factor** of all its nodes. A node's balance factor is defined as the difference between the heights of its left and right subtrees, and the balance factor of the entire tree is the minimum balance factor of all its nodes. If the tree is empty, the balance factor is considered to be 0. Additionally, if a node does not have a left or right subtree, its balance factor is the height of the existing subtree. Return the minimum balance factor of the tree.\n\nFor example, consider the following tree:\n\n```\n    1\n   / \\\n  2   3\n /\n4\n```\n\nThe balance factors of the nodes are as follows:\n- Node 1: |2 - 1| = 1\n- Node 2: |1 - 0| = 1\n- Node 3: |0 - 0| = 0\n- Node 4: 1 (since it only has a left subtree)\n\nThe minimum balance factor is 0.\n\n**Note**: A node's height is defined as the number of edges on the longest path from the node to a leaf. A leaf node has a height of 0."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you are tasked with determining whether the string can be rearranged such that every even-indexed character is a vowel and every odd-indexed character is a consonant. Return `true` if such an arrangement is possible, otherwise return `false`. Note that the string length is at least 2 and at most 100."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef can_rearrange_string(s: str) -> bool:\n    \"\"\"\n    Determines if the string can be rearranged such that every even-indexed\n    character is a vowel and every odd-indexed character is a consonant.\n    \"\"\"\n    vowels = set('aeiou')\n    # Count number of vowels and consonants in the even and odd positions\n    even_vowels = sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n    odd_consonants = sum(1 for i in range(1, len(s), 2) if s[i] not in vowels)\n    return even_vowels == (len(s) + 1) // 2 and odd_consonants == len(s) // 2\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_can_rearrange_string():\n    assert can_rearrange_string(\"aaabbe\") == False\n    assert can_rearrange_string(\"aebdec\") == True\n    assert can_rearrange_string(\" Portions \") == False\n    assert can_rearrange_string(\"aAi\") == True\n    assert can_rearrange_string(\"aAiAe\") == True\n    assert can_rearrange_string(\" aAe\") == False\n    assert can_rearrange_string(\" aA\") == False\n    assert can_rearrange_string(\"a\") == False\n    assert can_rearrange_string(\"aa\") == False\n\n# The test for \"aAi\" is replaceable as \"aAiAe\" already covers the case where there are more vowels than consonants in odd/even positions.\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000069", "row_id": 69, "seed_ids": ["306", "202", "1024"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you are tasked with determining whether the string can be rearranged such that every even-indexed character is a vowel and every odd-indexed character is a consonant. Return `true` if such an arrangement is possible, otherwise return `false`. Note that the string length is at least 2 and at most 100."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of `n` robots, each robot has a unique identifier from `1` to `n`. Each robot can move to the left or right on a number line, and each robot can move a maximum of `k` units in one step. You are also given an array `orders` where `orders[i]` is a list of robot identifiers that need to be at position `i + 1` on the number line. The goal is to move all robots to their respective positions with the minimum number of steps. Each robot can only move to its designated position and cannot move to a position that has already been assigned to another robot. Return the minimum number of steps required to achieve the goal, or `-1` if it is impossible to move all robots to their designated positions."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef min_steps_to_position(robots, orders, k):\n    \"\"\"\n    Returns the minimum number of steps required to move all robots to their designated positions\n    with the constraint that each robot can move a maximum of k units in one step, or -1 if it's\n    impossible to do so.\n    \"\"\"\n    n = len(robots)\n    if len(orders) != n:\n        return -1\n\n    robot_positions = [0] * (n + 1)\n    for order in orders:\n        for robot in order:\n            if robot_positions[robot] is not None:\n                return -1\n            robot_positions[robot] = 1\n\n    steps = 0\n    for i in range(1, n + 1):\n        dist = abs(i - robot_positions.index(0, 1, n + 1))\n        if dist == 0:\n            continue\n        available_steps = k + 1\n        adjusted_steps = dist\n        while adjusted_steps > 0:\n            max_speed = min(available_steps, adjusted_steps)\n            adjusted_steps -= max_speed\n            steps += (max_speed * (max_speed + 1)) // 2\n            available_steps -= 1\n        if adjusted_steps > 0:\n            return -1\n    return steps\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_min_steps_to_position():\n    assert min_steps_to_position([1, 2, 3], [[2], [3], [1]], 1) == 4\n    assert min_steps_to_position([1, 2, 3], [[2], [3], [1]], 2) == 2\n    assert min_steps_to_position([1, 2, 3], [[2], [3], [1]], 0) == -1\n    assert min_steps_to_position([1, 2, 3], [[2], [3]], 1) == -1\n    assert min_steps_to_position([1, 2, 3], [[2], [4], [5]], 2) == -1\n    assert min_steps_to_position([1, 2], [[1], [2]], 1) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000070", "row_id": 70, "seed_ids": ["1473", "191", "2471"], "mode": "leetcode", "instruction": "You are given a list of `n` robots, each robot has a unique identifier from `1` to `n`. Each robot can move to the left or right on a number line, and each robot can move a maximum of `k` units in one step. You are also given an array `orders` where `orders[i]` is a list of robot identifiers that need to be at position `i + 1` on the number line. The goal is to move all robots to their respective positions with the minimum number of steps. Each robot can only move to its designated position and cannot move to a position that has already been assigned to another robot. Return the minimum number of steps required to achieve the goal, or `-1` if it is impossible to move all robots to their designated positions."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given an integer `n` denoting the number of cities in a country. The cities are numbered from `0` to `n - 1`. You are also given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional** road connecting cities `ai` and `bi`. You need to assign each city with a unique integer value from `1` to `n` such that the **sum** of the values of the two cities connected by each road is maximized. Return the **maximum possible sum** of the importance of all roads after assigning the values optimally."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_road_importance(n, roads):\n    \"\"\"\n    Assigns unique integer values to cities to maximize the sum of the values\n    of the two cities connected by each road. Returns the maximum possible sum.\n    \"\"\"\n    # Initialize adjacency list\n    adj_list = [[] for _ in range(n)]\n    for a, b in roads:\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n    \n    # Sort cities by their degree in descending order\n    cities = sorted(range(n), key=lambda x: len(adj_list[x]), reverse=True)\n    \n    # Assign city values\n    values = list(range(1, n + 1))\n    total_importance = 0\n    for i, city in enumerate(cities):\n        for neighbor in adj_list[city]:\n            total_importance += values[i] + values[neighbor]\n    \n    return total_importance\n```\n<|Solution End|>\n\n<|Test Begin|> \n```python\nfrom solution import max_road_importance\n\ndef test_max_road_importance():\n    # Example 1\n    n = 5\n    roads = [[0, 1], [1, 2], [2, 3], [0, 2], [1, 3], [2, 4]]\n    assert max_road_importance(n, roads) == 43\n    \n    # Example 2\n    n = 4\n    roads = [[0, 1], [0, 3], [1, 2], [1, 3]]\n    assert max_road_importance(n, roads) == 26\n    \n    # Example 3\n    n = 3\n    roads = [[0, 1], [1, 2], [0, 2], [2, 1]]\n    assert max_road_importance(n, roads) == 18\n    \n    # Edge Case: Single City\n    n = 1\n    roads = []\n    assert max_road_importance(n, roads) == 1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000071", "row_id": 71, "seed_ids": ["2285", "2064", "1344"], "mode": "leetcode", "instruction": "You are given an integer `n` denoting the number of cities in a country. The cities are numbered from `0` to `n - 1`. You are also given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional** road connecting cities `ai` and `bi`. You need to assign each city with a unique integer value from `1` to `n` such that the **sum** of the values of the two cities connected by each road is maximized. Return the **maximum possible sum** of the importance of all roads after assigning the values optimally."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` without leading zeros, return the number of ways to split `s` into three non-empty substrings such that the bitwise XOR of the first two substrings is equal to the bitwise XOR of the last two substrings. The substrings are formed by consecutive binary digits in `s`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_split_ways(s):\n    \"\"\"\n    Counts the number of ways to split the binary string s into three non-empty\n    substrings such that the bitwise XOR of the first two substrings is equal to\n    the bitwise XOR of the last two substrings.\n    \"\"\"\n    n = len(s)\n    if n < 6:  # At least 6 characters are needed for a valid split\n        return 0\n    \n    prefix_xor = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ int(s[i - 1])\n\n    count = 0\n    xor_value = prefix_xor[n]  # XOR of the entire string\n    for i in range(1, n - 4):  # First split point\n        for j in range(i + 1, n - 2):  # Second split point\n            if prefix_xor[i] == xor_value:\n                count += 1\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_count_split_ways():\n    assert count_split_ways(\"1010\") == 1\n    assert count_split_ways(\"001101\") == 2\n    assert count_split_ways(\"111\") == 0\n    assert count_split_ways(\"0000\") == 0  # Invalid as there are no ways to split a string of length less than 6\n    assert count_split_ways(\"101010\") == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000072", "row_id": 72, "seed_ids": ["717", "1546", "243"], "mode": "leetcode", "instruction": "Given a binary string `s` without leading zeros, return the number of ways to split `s` into three non-empty substrings such that the bitwise XOR of the first two substrings is equal to the bitwise XOR of the last two substrings. The substrings are formed by consecutive binary digits in `s`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an **infinite** 2D grid representing a map, where each cell can either be land (`1`) or water (`0`), a **snake** is defined as a sequence of adjacent land cells. The length of a snake is the number of cells it spans. You start at the top-left corner of the grid at cell `[0, 0]`. On each move, you can travel to an adjacent cell (up, down, left, or right) but you cannot revisit any cell. The goal is to find the maximum length of a snake starting from `[0, 0]` and moving to the **right**most possible cell in the grid, which is beyond the current boundary. You are given the grid as a 2D array where `1` represents land and `0` represents water. Return the length of the longest snake."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_snake(grid):\n    \"\"\"\n    Returns the length of the longest snake starting from the top-left corner\n    and moving rightmost.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    visited = set()\n    max_snake_length = 0\n    \n    def explore(x, y, direction):\n        nonlocal max_snake_length\n        if x < 0 or y < 0 or x >= m or y >= n or grid[x][y] == 0 or (x, y) in visited:\n            return 0\n        visited.add((x, y))\n        max_snake_length = max(max_snake_length, 1 + explore(x + 1 * (direction[0] > 0 or direction[1] == 0), y + 1 * (direction[0] == 0 or direction[1] > 0), direction))\n        visited.remove((x, y))\n        return 1 + explore(x + direction[0], y + direction[1], direction)\n    \n    explore(0, 0, (1, 0))\n    return max_snake_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_longest_snake():\n    grid1 = [[0,1,1,1,0,0,0,1,0,1], [0,0,1,0,0,0,0,1,0,1], [1,1,0,0,1,0,0,1,0,1], [0,1,1,0,0,0,1,0,0,1], [0,1,1,0,0,0,1,0,1,0], [0,0,0,1,1,1,0,0,1,1], [0,1,0,0,1,1,1,0,1,0], [1,0,1,1,1,0,0,1,0,0], [0,1,1,0,0,0,0,1,1,0], [0,1,1,1,0,0,1,0,0,1]]\n    assert longest_snake(grid1) == 4\n    grid2 = [[0,1,1,1,0,0,0,1,0,1], [0,0,1,0,0,0,0,1,0,1], [1,1,0,0,1,0,0,1,0,1], [0,1,1,0,0,0,1,0,0,1], [0,1,1,0,0,0,1,0,1,0], [0,0,0,1,1,1,0,0,1,1], [0,1,0,0,1,1,1,0,1,0], [1,0,1,1,1,0,0,1,0,0], [0,1,1,0,0,0,0,1,1,0], [0,1,1,1,0,0,1,0,0,1]]\n    assert longest_snake(grid2) == 4\n    grid3 = [[1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1]]\n    assert longest_snake(grid3) == 10\n    grid4 = [[0]]\n    assert longest_snake(grid4) == 0\n    grid5 = [[1,1], [1,1]]\n    assert longest_snake(grid5) == 2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000073", "row_id": 73, "seed_ids": ["1197", "1025", "1161"], "mode": "leetcode", "instruction": "Given an **infinite** 2D grid representing a map, where each cell can either be land (`1`) or water (`0`), a **snake** is defined as a sequence of adjacent land cells. The length of a snake is the number of cells it spans. You start at the top-left corner of the grid at cell `[0, 0]`. On each move, you can travel to an adjacent cell (up, down, left, or right) but you cannot revisit any cell. The goal is to find the maximum length of a snake starting from `[0, 0]` and moving to the **right**most possible cell in the grid, which is beyond the current boundary. You are given the grid as a 2D array where `1` represents land and `0` represents water. Return the length of the longest snake."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` consisting of lowercase English letters. You need to determine the lexicographically smallest palindrome by swapping any two adjacent characters in the string at most once. Return the resulting palindrome string. If it's not possible to form a palindrome by swapping at most one pair of adjacent characters, return the original string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef form_smallest_palindrome(s: str) -> str:\n    \"\"\"\n    Returns the lexicographically smallest palindrome by swapping at most one pair of adjacent characters.\n    \"\"\"\n    s = list(s)\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            for j in range(i + 1, n):\n                if s[j] == s[n - 1 - i]:\n                    s[i], s[j] = s[j], s[i]\n                    break\n            else:\n                # If no match is found, try swapping with the last character\n                s[i], s[n - 1 - i] = s[n - 1 - i], s[i]\n            break\n    return ''.join(s)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_form_smallest_palindrome():\n    assert form_smallest_palindrome(\"egcfe\") == \"efcfe\"\n    assert form_smallest_palindrome(\"abcd\") == \"abcd\"\n    assert form_smallest_palindrome(\"edcba\") == \"abcde\"\n    assert form_smallest_palindrome(\"aabbcc\") == \"aabbc\"\n    assert form_smallest_palindrome(\"abcdedcba\") == \"abcdedcba\"\n    assert form_smallest_palindrome(\"abcde\") == \"abcde\"\n    assert form_smallest_palindrome(\"zzxyx\") == \"xyxzz\"\n    assert form_smallest_palindrome(\"x\") == \"x\"\n    assert form_smallest_palindrome(\"aab\") == \"aba\"\n    assert form_smallest_palindrome(\"baa\") == \"aba\"\n    assert form_smallest_palindrome(\"abcba\") == \"abcba\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000074", "row_id": 74, "seed_ids": ["1721", "2418", "1704"], "mode": "leetcode", "instruction": "You are given a string `s` consisting of lowercase English letters. You need to determine the lexicographically smallest palindrome by swapping any two adjacent characters in the string at most once. Return the resulting palindrome string. If it's not possible to form a palindrome by swapping at most one pair of adjacent characters, return the original string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times: choose a non-empty substring `s[i... j]` (i.e., `s[i]` is the first character and `s[j]` is the last character) and reverse it. The goal is to make the string `s` **lexicographically** **smallest** possible. Return the smallest string `s` you can obtain after performing this operation any number of times."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef make_smallest_lexicographical_string(s: str) -> str:\n    \"\"\"\n    Returns the lexicographically smallest string that can be obtained by \n    reversing any number of substrings in the given string `s`.\n    \"\"\"\n    stack = []\n    for char in s:\n        # While the last character in the stack is greater than the current character and we can pop,\n        # pop from the stack\n        while stack and char < stack[-1]:\n            stack.pop()\n        stack.append(char)\n    \n    # Join the characters in the stack to form the smallest lexicographical string\n    result = ''.join(stack)\n    \n    # Fill the remaining positions with the original characters that are not in the stack\n    result += s[len(result):]\n    \n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import make_smallest_lexicographical_string\n\ndef test_make_smallest_lexicographical_string():\n    assert make_smallest_lexicographical_string(\"cba\") == \"abc\"\n    assert make_smallest_lexicographical_string(\"abcd\") == \"abcd\"\n    assert make_smallest_lexicographical_string(\"aabc\") == \"aaab\"\n    assert make_smallest_lexicographical_string(\"cbaabc\") == \"abcabc\"\n    assert make_smallest_lexicographical_string(\"cbabadcbbabbcbaba\") == \"aababacbbabc\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000075", "row_id": 75, "seed_ids": ["1053", "2375", "2254"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times: choose a non-empty substring `s[i... j]` (i.e., `s[i]` is the first character and `s[j]` is the last character) and reverse it. The goal is to make the string `s` **lexicographically** **smallest** possible. Return the smallest string `s` you can obtain after performing this operation any number of times."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a positive integer `n`, return the number of integers `x` in the range `[1, n]` (inclusive) such that the sum of the digits of `x` is a **prime number**. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef digit_sum(num):\n    \"\"\"Calculate the sum of digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(num))\n\ndef count_prime_digit_sum(n):\n    \"\"\"\n    Return the count of numbers in [1, n] whose digit sum is a prime number.\n    \"\"\"\n    count = 0\n    for x in range(1, n + 1):\n        if is_prime(digit_sum(x)):\n            count += 1\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import is_prime, digit_sum, count_prime_digit_sum\n\ndef test_is_prime():\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(4) == False\n    assert is_prime(5) == True\n    assert is_prime(6) == False\n    assert is_prime(7) == True\n    assert is_prime(8) == False\n    assert is_prime(9) == False\n    assert is_prime(11) == True\n    assert is_prime(12) == False\n\ndef test_digit_sum():\n    assert digit_sum(123) == 6\n    assert digit_sum(4321) == 10\n    assert digit_sum(8) == 8\n\ndef test_count_prime_digit_sum():\n    assert count_prime_digit_sum(10) == 2  # 2 and 3\n    assert count_prime_digit_sum(5) == 2  # 2 and 3\n    assert count_prime_digit_sum(9) == 4  # 2, 3, 5, 7\n    assert count_prime_digit_sum(31) == 12  # All numbers with prime digit sums up to 31\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000076", "row_id": 76, "seed_ids": ["2180", "1025", "668"], "mode": "leetcode", "instruction": "Given a positive integer `n`, return the number of integers `x` in the range `[1, n]` (inclusive) such that the sum of the digits of `x` is a **prime number**. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary tree with `n` nodes labeled from `0` to `n-1`, where each node has a value associated with it, represented by an array `values`, and a 2D array `edges` that defines the tree's structure, you are tasked with finding the node that, when removed, results in the maximum number of connected components in the tree, where the values of the nodes in each component are coprime. If there are multiple nodes that result in the same maximum number of components, return the one with the smallest label.\n\nFormally, you need to:\n\n- Remove one node from the tree and determine the number of connected components that are formed.\n- Each component must consist of nodes whose values are coprime.\n- Return the label of the node that maximizes the number of such components. If there are multiple such nodes, return the one with the smallest label. If no such node exists, return `-1`.\n\nExample:\n```python\nvalues = [2, 3, 6, 9, 10]\nedges = [[0, 1], [1, 2], [1, 3], [3, 4]]\n```\nIn this example, removing node `1` results in two connected components where all nodes in each component are coprime: `[2]` and `[6, 9, 10]`. Thus, the answer is `1`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom math import gcd\nfrom collections import defaultdict\n\ndef is_coprime(a, b):\n    return gcd(a, b) == 1\n\ndef dfs(tree, values, node, parent):\n    children = tree[node].difference({parent})\n    coprime_count = 1 if is_coprime(values[node], values[parent]) else 0\n    coprime_children = coprime_count\n    for child in children:\n        coprime_children_, coprime_count_ = dfs(tree, values, child, node)\n        coprime_children += coprime_children_\n        coprime_count += coprime_count_\n    return coprime_children, coprime_count\n\ndef max_coprime_components(edges, values, remove_node=None):\n    n = len(values)\n    tree = defaultdict(set)\n    for u, v in edges:\n        tree[u].add(v)\n        tree[v].add(u)\n    \n    if remove_node is None:\n        max_comp, max_count = 0, 0\n        for i in range(n):\n            coprime_children, coprime_count = dfs(tree, values, i, -1)\n            if coprime_count > max_count or (coprime_count == max_count and i < max_comp):\n                max_comp, max_count = i, coprime_count\n        return max_comp if max_count > 0 else -1\n    else:\n        coprime_children, coprime_count = dfs(tree, values, remove_node, -1)\n        return coprime_count\n\ndef find_node_for_max_components(values, edges):\n    return max_coprime_components(edges, values)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import find_node_for_max_components\n\ndef test_empty_tree():\n    assert find_node_for_max_components([], []) == -1\n\ndef test_single_node():\n    assert find_node_for_max_components([1], []) == -1\n\ndef test_coprime_case1():\n    values = [2, 3, 6, 9, 10]\n    edges = [(0, 1), (1, 2), (1, 3), (3, 4)]\n    assert find_node_for_max_components(values, edges) == 1\n\ndef test_non_coprime_case1():\n    values = [4, 5, 6, 7, 8]\n    edges = [(0, 1), (1, 2), (2, 3), (3, 4)]\n    assert find_node_for_max_components(values, edges) == 3\n\ndef test_no_optimal_node():\n    values = [2, 4, 6, 8, 10]\n    edges = [(0, 1), (1, 2), (2, 3), (3, 4)]\n    assert find_node_for_max_components(values, edges) == -1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000077", "row_id": 77, "seed_ids": ["1766", "2042", "2588"], "mode": "leetcode", "instruction": "Given a binary tree with `n` nodes labeled from `0` to `n-1`, where each node has a value associated with it, represented by an array `values`, and a 2D array `edges` that defines the tree's structure, you are tasked with finding the node that, when removed, results in the maximum number of connected components in the tree, where the values of the nodes in each component are coprime. If there are multiple nodes that result in the same maximum number of components, return the one with the smallest label.\n\nFormally, you need to:\n\n- Remove one node from the tree and determine the number of connected components that are formed.\n- Each component must consist of nodes whose values are coprime.\n- Return the label of the node that maximizes the number of such components. If there are multiple such nodes, return the one with the smallest label. If no such node exists, return `-1`.\n\nExample:\n```python\nvalues = [2, 3, 6, 9, 10]\nedges = [[0, 1], [1, 2], [1, 3], [3, 4]]\n```\nIn this example, removing node `1` results in two connected components where all nodes in each component are coprime: `[2]` and `[6, 9, 10]`. Thus, the answer is `1`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a binary string `s`. A **substring** of `s` is called **good** if it does not contain any leading zeros and has an even length. Your task is to count the number of **good substrings** in `s`.\n\nFor example, given the string `s = \"1001010\"`, the good substrings are `\"10\"`, `\"010\"`, and `\"010\"`. Therefore, the answer is `3`.\n\nWrite a function `countGoodSubstrings(s: str) -> int` that returns the number of good substrings in the binary string `s`.\n\n**Constraints**:\n- `1 <= len(s) <= 1000`\n- `s` consists only of `0`s and `1`s."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef countGoodSubstrings(s: str) -> int:\n    \"\"\"\n    Counts the number of good substrings in the binary string `s`.\n    A good substring does not contain leading zeros and has an even length.\n    \"\"\"\n    count = 0\n    for i in range(len(s) - 1):\n        # Check if the substring of length 2 starting at position i is a good substring\n        if len(s[i:i+2]) == 2 and s[i] != '0' and s[i+1] != '0':\n            count += 1\n    return count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import countGoodSubstrings\n\ndef test_countGoodSubstrings():\n    assert countGoodSubstrings(\"1001010\") == 3\n    assert countGoodSubstrings(\"10\") == 0\n    assert countGoodSubstrings(\"1101101100\") == 7\n    assert countGoodSubstrings(\"0000\") == 0\n    assert countGoodSubstrings(\"1111111111\") == 0\n    assert countGoodSubstrings(\"10101010\") == 4\n    assert countGoodSubstrings(\"1010101\") == 2\n\nif __name__ == \"__main__\":\n    import pytest\n    pytest.main()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000078", "row_id": 78, "seed_ids": ["808", "1671", "1317"], "mode": "leetcode", "instruction": "You are given a binary string `s`. A **substring** of `s` is called **good** if it does not contain any leading zeros and has an even length. Your task is to count the number of **good substrings** in `s`.\n\nFor example, given the string `s = \"1001010\"`, the good substrings are `\"10\"`, `\"010\"`, and `\"010\"`. Therefore, the answer is `3`.\n\nWrite a function `countGoodSubstrings(s: str) -> int` that returns the number of good substrings in the binary string `s`.\n\n**Constraints**:\n- `1 <= len(s) <= 1000`\n- `s` consists only of `0`s and `1`s."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a class `RangeFreqQuery` that supports efficient frequency queries on a given array `arr`. The goal is to implement a method that can quickly determine the frequency of any element within a specified range of the array. Specifically, implement the `RangeFreqQuery` class:\n\n- `RangeFreqQuery(int[] arr)`: Initializes the class with the given array `arr`.\n- `int query(int left, int right, int value)`: Returns the frequency of the value `value` in the subarray `arr[left...right]`.\n\nFor example, given the array `arr = [1, 2, 2, 3, 3, 3, 4]`, the query `query(0, 6, 3)` should return `3` since the value `3` appears three times in the subarray `arr[0...6]`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import defaultdict\n\nclass RangeFreqQuery:\n    def __init__(self, arr):\n        \"\"\"\n        Initializes the class with the given array.\n        \"\"\"\n        self.index_map = defaultdict(list)\n        for index, value in enumerate(arr):\n            self.index_map[value].append(index)\n    \n    def query(self, left, right, value):\n        \"\"\"\n        Returns the frequency of the value in the subarray arr[left...right].\n        \"\"\"\n        if value not in self.index_map:\n            return 0\n        indices = self.index_map[value]\n        left_idx = self._binary_search(indices, left)\n        right_idx = self._binary_search(indices, right + 1) - 1\n        return right_idx - left_idx + 1 if right_idx >= left_idx else 0\n    \n    def _binary_search(self, indices, target):\n        left, right = 0, len(indices)\n        while left < right:\n            mid = (left + right) // 2\n            if indices[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        return left\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import RangeFreqQuery\n\ndef test_range_freq_query_positive():\n    arr = [1, 2, 2, 3, 3, 3, 4]\n    freq_query = RangeFreqQuery(arr)\n    assert freq_query.query(0, 6, 3) == 3\n    assert freq_query.query(0, 2, 2) == 2\n    assert freq_query.query(3, 6, 4) == 1\n\ndef test_range_freq_query_empty_subarray():\n    arr = [1, 2, 2, 3, 3, 3, 4]\n    freq_query = RangeFreqQuery(arr)\n    assert freq_query.query(4, 4, 1) == 0\n\ndef test_range_freq_query_single_value():\n    arr = [1, 1, 1, 1, 1, 1, 1]\n    freq_query = RangeFreqQuery(arr)\n    assert freq_query.query(0, 6, 1) == 7\n\ndef test_range_freq_query_no_occurrence():\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    freq_query = RangeFreqQuery(arr)\n    assert freq_query.query(0, 6, 8) == 0\n\ndef test_range_freq_query_negative_numbers():\n    arr = [-1, -2, -2, -3, -3, -3, -4]\n    freq_query = RangeFreqQuery(arr)\n    assert freq_query.query(0, 6, -3) == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000079", "row_id": 79, "seed_ids": ["1157", "751", "2288"], "mode": "leetcode", "instruction": "Design a class `RangeFreqQuery` that supports efficient frequency queries on a given array `arr`. The goal is to implement a method that can quickly determine the frequency of any element within a specified range of the array. Specifically, implement the `RangeFreqQuery` class:\n\n- `RangeFreqQuery(int[] arr)`: Initializes the class with the given array `arr`.\n- `int query(int left, int right, int value)`: Returns the frequency of the value `value` in the subarray `arr[left...right]`.\n\nFor example, given the array `arr = [1, 2, 2, 3, 3, 3, 4]`, the query `query(0, 6, 3)` should return `3` since the value `3` appears three times in the subarray `arr[0...6]`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Design a data structure to find the `k` closest points to a given target point `(tx, ty)` on a 2D plane. The points are represented as an array of coordinates, where each coordinate is an array of two integers `[x, y]`. Implement the `KClosestPoints` class:\n\n*   `KClosestPoints(int k)` Initializes the object with `k`.\n*   `void addPoint(int x, int y)` Adds the point `(x, y)` to the data structure.\n*   `List<List<Integer>> getKClosestPoints()` Returns the `k` closest points to the target point `(tx, ty)` sorted by their Manhattan distance to the target. The Manhattan distance between two points `(x1, y1)` and `(x2, y2)` is given by `abs(x1 - x2) + abs(y1 - y2)`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nimport heapq\nfrom typing import List\n\nclass KClosestPoints:\n    def __init__(self, k: int):\n        self.k = k\n        self points_heap = []\n\n    def addPoint(self, x: int, y: int, tx: int, ty: int):\n        distance = abs(x - tx) + abs(y - ty)\n        heapq.heappush(self.points_heap, (distance, x, y))\n        if len(self.points_heap) > self.k:\n            heapq.heappop(self.points_heap)\n\n    def getKClosestPoints(self, tx: int, ty: int) -> List[List[int]]:\n        return [[x, y] for _, x, y in heapq.nsmallest(self.k, self.points_heap)]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\nfrom solution import KClosestPoints\n\ndef test_add_point():\n    kcp = KClosestPoints(3)\n    kcp.addPoint(1, 2, 0, 0)\n    kcp.addPoint(3, 3, 0, 0)\n    kcp.addPoint(5, 5, 0, 0)\n    kcp.addPoint(7, 7, 0, 0)\n    kcp.addPoint(9, 9, 0, 0)\n    assert kcp.getKClosestPoints(0, 0) == [[1, 2], [3, 3], [5, 5]]\n\ndef test_add_point_with_negative_coordinates():\n    kcp = KClosestPoints(3)\n    kcp.addPoint(1, 2, -1, -1)\n    kcp.addPoint(3, 3, -2, -2)\n    kcp.addPoint(5, 5, -3, -3)\n    assert kcp.getKClosestPoints(-1, -1) == [[1, 2], [3, 3], [5, 5]]\n\ndef test_add_point_with_decreasing_k():\n    kcp = KClosestPoints(2)\n    kcp.addPoint(1, 1, 0, 0)\n    kcp.addPoint(2, 2, 0, 0)\n    kcp.addPoint(3, 3, 0, 0)\n    assert kcp.getKClosestPoints(0, 0) == [[1, 1], [2, 2]]\n    kcp.k = 3\n    assert kcp.getKClosestPoints(0, 0) == [[1, 1], [2, 2], [3, 3]]\n\ndef test_get_k_closest_points():\n    kcp = KClosestPoints(2)\n    kcp.addPoint(1, 1, 2, 2)\n    kcp.addPoint(3, 3, 2, 2)\n    kcp.addPoint(4, 4, 2, 2)\n    kcp.addPoint(5, 5, 2, 2)\n    assert kcp.getKClosestPoints(2, 2) == [[1, 1], [3, 3]]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000080", "row_id": 80, "seed_ids": ["16", "1443", "211"], "mode": "leetcode", "instruction": "Design a data structure to find the `k` closest points to a given target point `(tx, ty)` on a 2D plane. The points are represented as an array of coordinates, where each coordinate is an array of two integers `[x, y]`. Implement the `KClosestPoints` class:\n\n*   `KClosestPoints(int k)` Initializes the object with `k`.\n*   `void addPoint(int x, int y)` Adds the point `(x, y)` to the data structure.\n*   `List<List<Integer>> getKClosestPoints()` Returns the `k` closest points to the target point `(tx, ty)` sorted by their Manhattan distance to the target. The Manhattan distance between two points `(x1, y1)` and `(x2, y2)` is given by `abs(x1 - x2) + abs(y1 - y2)`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s`, return the longest substring of `s` that contains at least one occurrence of every character in the string `s`. If there are multiple substrings of the same length, return the substring that appears earliest in `s`. If no such substring exists, return an empty string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_substring_with_all_chars(s):\n    \"\"\"\n    Returns the longest substring that contains at least one occurrence of every character in the string `s`.\n    If there are multiple substrings of the same length, returns the earliest one.\n    If no such substring exists, returns an empty string.\n    \"\"\"\n    if not s:\n        return \"\"\n\n    char_last_position = {}\n    start = 0\n    max_length = 0\n    result = \"\"\n\n    for end, char in enumerate(s):\n        if char in char_last_position:\n            start = max(start, char_last_position[char] + 1)\n        char_last_position[char] = end\n\n        if end - start + 1 > max_length:\n            max_length = end - start + 1\n            result = s[start:end + 1]\n\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_longest_substring_with_all_chars():\n    assert longest_substring_with_all_chars(\"aabbcc\") == \"aabbcc\"\n    assert longest_substring_with_all_chars(\"abcabcbb\") == \"abc\"\n    assert longest_substring_with_all_chars(\"abba\") == \"ab\"\n    assert longest_substring_with_all_chars(\"dvdf\") == \"vdf\"\n    assert longest_substring_with_all_chars(\"\") == \"\"\n    assert longest_substring_with_all_chars(\"x\") == \"\"\n    assert longest_substring_with_all_chars(\"xyy\") == \"xy\"\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000081", "row_id": 81, "seed_ids": ["1763", "5", "1094"], "mode": "leetcode", "instruction": "Given a string `s`, return the longest substring of `s` that contains at least one occurrence of every character in the string `s`. If there are multiple substrings of the same length, return the substring that appears earliest in `s`. If no such substring exists, return an empty string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters and an integer `k`, you can perform the following operation at most `k` times:\n\n- Choose any index `i` and swap `s[i]` with `s[i + 1]` (0-indexed).\n\nAfter performing the operations, the string `s` should be a palindrome. Return the lexicographically smallest palindrome that can be obtained under these constraints. If it's not possible to form a palindrome, return an empty string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef make_smallest_palindrome(s: str, k: int) -> str:\n    \"\"\"\n    Generates the lexicographically smallest palindrome by swapping adjacent characters at most k times.\n    If impossible, returns an empty string.\n    \"\"\"\n    if k >= len(s) // 2:\n        return s\n    \n    s_list = list(s)\n    n = len(s)\n    cnt = 0\n    \n    for i in range(n // 2):\n        if s_list[i] != s_list[n - i - 1]:\n            for j in range(n - i - 1):\n                if s_list[i + j + 1] == s_list[n - i - 1]:\n                    s_list[i + j + 1], s_list[n - i - 1] = s_list[n - i - 1], s_list[i + j + 1]\n                    cnt += j + 1\n                    break\n            else:\n                for j in range(n - i - 1):\n                    if s_list[n - j - 1] == s_list[i]:\n                        s_list[i], s_list[n - j - 1] = s_list[n - j - 1], s_list[i]\n                        cnt += j + 1\n                        break\n            if cnt > k:\n                return \"\"\n            k -= cnt\n            cnt = 0\n    return ''.join(s_list)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_make_smallest_palindrome():\n    assert make_smallest_palindrome(\"egcfe\", 2) == \"efcfe\"\n    assert make_smallest_palindrome(\"abcd\", 1) == \"\"\n    assert make_smallest_palindrome(\"seven\", 2) == \"evens\"\n    assert make_smallest_palindrome(\"aabb\", 2) == \"abba\"\n    assert make_smallest_palindrome(\"abcde\", 1) == \"\"\n    assert make_smallest_palindrome(\"abcde\", 2) == \"abced\"\n    assert make_smallest_palindrome(\"abcde\", 4) == \"abcde\"\n    assert make_smallest_palindrome(\"abcdefg\", 5) == \"abcddfa\"\n\ndef test_make_smallest_palindrome_with_limit():\n    assert make_smallest_palindrome(\"abcd\", 3) == \"abdc\"  # only 3 swaps, not enough to make abcd\n\ndef test_make_smallest_palindrome_large_number_of_swaps():\n    assert make_smallest_palindrome(\"abbba\", 3) == \"abbbb\"  # swaps to make it a palindrome\n\ndef test_make_smallest_palindrome_return_empty_string_if_impossible():\n    assert make_smallest_palindrome(\"abcd\", 2) == \"\"  # only 2 swaps, not enough\n\npytest.main(['-v', 'tests.py'])\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000082", "row_id": 82, "seed_ids": ["1560", "2196", "1556"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters and an integer `k`, you can perform the following operation at most `k` times:\n\n- Choose any index `i` and swap `s[i]` with `s[i + 1]` (0-indexed).\n\nAfter performing the operations, the string `s` should be a palindrome. Return the lexicographically smallest palindrome that can be obtained under these constraints. If it's not possible to form a palindrome, return an empty string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of `n` unique integers `nums` and an integer `k`, return the `k` smallest **absolute differences** between any two distinct elements in the list. More formally, you need to find the `k` smallest values of `|a - b|` for all pairs `(a, b)` where `a` and `b` are distinct elements in `nums`. Ensure that the elements in the output are unique and sorted in ascending order. If there are fewer than `k` unique differences, return all of them. Note that the absolute difference between two integers `a` and `b` is defined as `|a - b|`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef k_smallest_abs_diff(nums, k):\n    \"\"\"\n    Returns the k smallest absolute differences between any two distinct elements.\n    \"\"\"\n    # Sort the list to simplify finding the minimum absolute differences\n    nums.sort()\n    differences = set()\n    \n    # Initialize with the smallest absolute difference\n    for i in range(len(nums) - 1):\n        differences.add(abs(nums[i] - nums[i + 1]))\n    \n    # Find other k-1 smallest absolute differences\n    if k > 1:\n        for i in range(len(nums) - 1):\n            j = i + 1\n            while j < len(nums) - 1:\n                diff = abs(nums[i] - nums[j + 1])\n                if len(differences) < k and diff not in differences:\n                    differences.add(diff)\n                j += 1\n    \n    return sorted(list(differences))[:k]\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_k_smallest_abs_diff():\n    assert k_smallest_abs_diff([1, 3, -1], 2) == [0, 2]\n    assert k_smallest_abs_diff([1, -1], 1) == [0]\n    assert k_smallest_abs_diff([4, 2, 8, 3, 10, 4], 5) == [1, 2, 3, 4, 5]\n    assert k_smallest_abs_diff([2, 4, 8, 4, 2], 2) == [0, 2]\n    assert k_smallest_abs_diff([7, 5, 4, 3], 3) == [1, 2, 3]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000083", "row_id": 83, "seed_ids": ["29", "2133", "1172"], "mode": "leetcode", "instruction": "Given a list of `n` unique integers `nums` and an integer `k`, return the `k` smallest **absolute differences** between any two distinct elements in the list. More formally, you need to find the `k` smallest values of `|a - b|` for all pairs `(a, b)` where `a` and `b` are distinct elements in `nums`. Ensure that the elements in the output are unique and sorted in ascending order. If there are fewer than `k` unique differences, return all of them. Note that the absolute difference between two integers `a` and `b` is defined as `|a - b|`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of integers representing the heights of buildings on a city street. Each building's height is given by a positive integer. A group of buildings is considered **monotonic** if the heights either strictly increase or strictly decrease when moving from left to right. \n\nYour task is to find the maximum number of buildings that can be included in a monotonic group within the given list of building heights. \n\n**Note**: A group of buildings can consist of a single building, and adjacent buildings in the group must have consecutive heights (i.e., the height difference between any two adjacent buildings in the group is exactly 1).\n\nReturn the maximum size of such a monotonic group.\n\nExample 1:\n```\nInput: heights = [5, 4, 3, 2, 1, 2, 3, 4, 5]\nOutput: 5\nExplanation: The longest monotonic group is [5, 4, 3, 2, 1] or [1, 2, 3, 4, 5].\n```\n\nExample 2:\n```\nInput: heights = [1, 3, 5, 4, 2, 4, 6]\nOutput: 4\nExplanation: The longest monotonic group is [1, 3, 5] or [2, 4, 6].\n```\n\nConstraints:\n- `1 <= heights.length <= 10^5`\n- `1 <= heights[i] <= 10^9`"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_monotonic_group(heights):\n    \"\"\"\n    Finds the maximum size of a monotonic group in the list of building heights.\n    \"\"\"\n    max_len = 1\n    current_len = 1\n\n    for i in range(1, len(heights)):\n        if heights[i] - heights[i-1] == 1 or heights[i] - heights[i-1] == -1:\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 1\n\n    return max_len\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_max_monotonic_group():\n    assert max_monotonic_group([5, 4, 3, 2, 1, 2, 3, 4, 5]) == 5\n    assert max_monotonic_group([1, 3, 5, 4, 2, 4, 6]) == 4\n    assert max_monotonic_group([1, 2, 3, 2, 1]) == 5\n    assert max_monotonic_group([10]) == 1\n    assert max_monotonic_group([1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1]) == 7\n\n@pytest.mark.parametrize(\"heights, expected\", [\n    ([5, 4, 3, 2, 1, 2, 3, 4, 5], 5),\n    ([1, 3, 5, 4, 2, 4, 6], 4),\n    ([1, 2, 3, 2, 1], 5),\n    ([10], 1),\n    ([1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1], 7)\n])\ndef test_max_monotonic_group_parametrized(heights, expected):\n    assert max_monotonic_group(heights) == expected\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000084", "row_id": 84, "seed_ids": ["1506", "2281", "1923"], "mode": "leetcode", "instruction": "You are given a list of integers representing the heights of buildings on a city street. Each building's height is given by a positive integer. A group of buildings is considered **monotonic** if the heights either strictly increase or strictly decrease when moving from left to right. \n\nYour task is to find the maximum number of buildings that can be included in a monotonic group within the given list of building heights. \n\n**Note**: A group of buildings can consist of a single building, and adjacent buildings in the group must have consecutive heights (i.e., the height difference between any two adjacent buildings in the group is exactly 1).\n\nReturn the maximum size of such a monotonic group.\n\nExample 1:\n```\nInput: heights = [5, 4, 3, 2, 1, 2, 3, 4, 5]\nOutput: 5\nExplanation: The longest monotonic group is [5, 4, 3, 2, 1] or [1, 2, 3, 4, 5].\n```\n\nExample 2:\n```\nInput: heights = [1, 3, 5, 4, 2, 4, 6]\nOutput: 4\nExplanation: The longest monotonic group is [1, 3, 5] or [2, 4, 6].\n```\n\nConstraints:\n- `1 <= heights.length <= 10^5`\n- `1 <= heights[i] <= 10^9`"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, a **substring** `t` is called **balanced** if the number of occurrences of each letter in `t` is the same. For example, the substring `\"ababa\"` is balanced because each letter appears exactly twice. \n\nDesign an algorithm to find the length of the longest **balanced** substring `t` in `s`. Return the length of `t`. If no such substring exists, return `0`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_balanced_substring(s: str) -> int:\n    \"\"\"\n    Finds the length of the longest balanced substring.\n    A balanced substring has an equal count for each character.\n    \"\"\"\n    max_length = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if is_balanced(substring):\n                max_length = max(max_length, len(substring))\n                \n    return max_length\n\ndef is_balanced(s: str) -> bool:\n    char_counts = {}\n    for char in s:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n            \n    counts = set(char_counts.values())\n    return len(counts) == 1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_longest_balanced_substring():\n    assert longest_balanced_substring(\"ababab\") == 6\n    assert longest_balanced_substring(\"aaabbb\") == 6\n    assert longest_balanced_substring(\"abac\") == 4\n    assert longest_balanced_substring(\"a\") == 0\n    assert longest_balanced_substring(\"aabbaa\") == 4\n    assert longest_balanced_substring(\"zzzzz\") == 1\n\ntest_longest_balanced_substring()\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000085", "row_id": 85, "seed_ids": ["1273", "119", "855"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, a **substring** `t` is called **balanced** if the number of occurrences of each letter in `t` is the same. For example, the substring `\"ababa\"` is balanced because each letter appears exactly twice. \n\nDesign an algorithm to find the length of the longest **balanced** substring `t` in `s`. Return the length of `t`. If no such substring exists, return `0`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` consisting of lowercase English letters. You can perform the following operation at most once: choose two distinct indices `i` and `j` where `s[i]` is a vowel ('a', 'e', 'i', 'o', 'u'), and replace `s[i]` with `s[j]` and vice versa. A string is considered **beautiful** if it meets the following criteria:\n1. The string is a palindrome.\n2. The string contains exactly three distinct characters.\n\nReturn `true` if you can make the string `s` beautiful, and `false` otherwise."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef can_make_beautiful_palindrome(s: str) -> bool:\n    \"\"\"\n    Determine if the string can be modified to be a palindrome with exactly \n    three distinct characters by swapping two vowels.\n    \"\"\"\n    vowel_set = {'a', 'e', 'i', 'o', 'u'}\n    char_counts = [0] * 26  # To count occurrences of each character in the alphabet\n    vowel_count = 0\n    first_vowel = None\n    middle_char = None\n\n    for char in s:\n        index = ord(char) - ord('a')\n        char_counts[index] += 1\n\n        if char in vowel_set:\n            vowel_count += 1\n            if first_vowel is None:\n                first_vowel = char\n            elif char != first_vowel:\n                middle_char = char\n\n    # Conditions for a string to be beautiful:\n    # 1. At most one character can have an odd count.\n    # 2. There should be at most three distinct characters.\n    # 3. If there are exactly three distinct characters, one of them must be repeated (palindrome requirement).\n\n    if len(set(s)) > 3:\n        return False\n\n    if len(set(s)) < 3:\n        return True  # Can always form a palindrome with 1 or 2 distinct characters.\n\n    odd_count_chars = sum(1 for count in char_counts if count % 2 != 0)\n\n    if odd_count_chars > 1:\n        return False  # More than one character with an odd count cannot form a palindrome.\n\n    if vowel_count == 3 and all(count == 0 for index in range(26) if char_counts[index] % 2 != 0 and index != ord(first_vowel) - ord('a') and index != ord(middle_char) - ord('a')):\n        return False  # Cannot form a palindrome if there are three distinct vowels.\n\n    return True\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_can_make_beautiful_palindrome():\n    assert can_make_beautiful_palindrome(\"eaae\") == True\n    assert can_make_beautiful_palindrome(\"aceca\") == True\n    assert can_make_beautiful_palindrome(\"eee\") == False\n    assert can_make_beautiful_palindrome(\"aa\") == True\n    assert can_make_beautiful_palindrome(\"abc\") == False\n    assert can_make_beautiful_palindrome(\"automobile\") == False\n    assert can_make_beautiful_palindrome(\"aau\") == True\n    assert can_make_beautiful_palindrome(\"aaabc\") == True\n    assert can_make_beautiful_palindrome(\"aa\") == True\n    assert can_make_beautiful_palindrome(\"aab\") == True\n    assert can_make_beautiful_palindrome(\"aaabc\") == True\n    assert can_make_beautiful_palindrome(\"aaab\") == True\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000086", "row_id": 86, "seed_ids": ["670", "36", "1039"], "mode": "leetcode", "instruction": "You are given a string `s` consisting of lowercase English letters. You can perform the following operation at most once: choose two distinct indices `i` and `j` where `s[i]` is a vowel ('a', 'e', 'i', 'o', 'u'), and replace `s[i]` with `s[j]` and vice versa. A string is considered **beautiful** if it meets the following criteria:\n1. The string is a palindrome.\n2. The string contains exactly three distinct characters.\n\nReturn `true` if you can make the string `s` beautiful, and `false` otherwise."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a `m x n` grid of characters `board` and a word `word`, return `true` if `word` can be constructed from letters on the `board`. The word does not need to be constructed from letters adjacent in the same row or column, but it cannot use the same letter cell more than once. Each cell in the grid can only contribute one letter to the word. If the word can be formed, return `true`; otherwise, return `false`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef exist(board, word):\n    \"\"\"\n    Check if a word can be constructed from the given board of characters.\n    \"\"\"\n    if not board or not board[0]:\n        return False\n    m, n = len(board), len(board[0])\n    \n    def dfs(x, y, word):\n        if len(word) == 0:\n            return True\n        if x < 0 or x >= m or y < 0 or y >= n or board[x][y] != word[0]:\n            return False\n        tmp, board[x][y] = board[x][y], '#'  # Mark the cell as visited\n        found = dfs(x+1, y, word[1:]) or dfs(x-1, y, word[1:]) or dfs(x, y+1, word[1:]) or dfs(x, y-1, word[1:])\n        board[x][y] = tmp  # Revert the change for backtracking\n        return found\n    \n    for i in range(m):\n        for j in range(n):\n            if dfs(i, j, word):\n                return True\n    return False\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import exist\n\ndef test_exist_positive_case():\n    board = [\n        ['A','B','C','E'],\n        ['S','F','C','S'],\n        ['A','D','E','E']\n    ]\n    assert exist(board, \"ABCCED\") == True\n\ndef test_exist_with_visited_case():\n    board = [\n        ['A','B','C','E'],\n        ['S','F','C','S'],\n        ['A','D','E','E']\n    ]\n    assert exist(board, \"SEE\") == True\n\ndef test_exist_multiple_path_case():\n    board = [\n        ['A','B','C','E'],\n        ['S','F','C','S'],\n        ['A','D','E','E']\n    ]\n    assert exist(board, \"ABCB\") == False\n\ndef test_exist_different_board_shape():\n    board = [\n        ['A','B','C'],\n        ['S','F','C'],\n        ['A','D','E']\n    ]\n    assert exist(board, \"ABFCACDB\") == True\n\ndef test_exist_single_char_case():\n    board = [[\"A\"]]\n    assert exist(board, \"A\") == True\n\ndef test_exist_word_not_found():\n    board = [\n        ['A','B','C','E'],\n        ['S','F','C','S'],\n        ['A','D','E','E']\n    ]\n    assert exist(board, \"ABCG\") == False\n\ndef test_exist_empty_board():\n    board = []\n    assert exist(board, \"A\") == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000087", "row_id": 87, "seed_ids": ["2477", "1000", "79"], "mode": "leetcode", "instruction": "Given a `m x n` grid of characters `board` and a word `word`, return `true` if `word` can be constructed from letters on the `board`. The word does not need to be constructed from letters adjacent in the same row or column, but it cannot use the same letter cell more than once. Each cell in the grid can only contribute one letter to the word. If the word can be formed, return `true`; otherwise, return `false`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]`. Design a data structure to efficiently manage these intervals and answer the following operations:\n\n1. `addInterval(start, end)`: Add a new interval `[start, end]` to the data structure. Ensure that the new interval does not overlap with any existing interval.\n2. `removeInterval(start, end)`: Remove an existing interval `[start, end]` from the data structure if it exists.\n3. `mergeIntervals()`: Merge all overlapping intervals in the data structure and return the merged intervals as a list.\n4. `queryInterval(start, end)`: Check if there is any interval in the data structure that overlaps with the given interval `[start, end]`.\n\nImplement the `IntervalManager` class:\n\n*   `IntervalManager()`: Initializes the data structure with an empty list of intervals.\n*   `void addInterval(start, end)`: Adds a new interval `[start, end]` to the data structure.\n*   `void removeInterval(start, end)`: Removes an interval `[start, end]` from the data structure if it exists.\n*   `List<int[]> mergeIntervals()`: Merges all overlapping intervals and returns the merged intervals as a list.\n*   `boolean queryInterval(start, end)`: Checks if there is any interval in the data structure that overlaps with the given interval `[start, end]`.\n\nEnsure that the intervals are stored in a way that allows for efficient operations, and the intervals stored in the data structure are sorted by their start times."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom bisect import bisect_left, bisect_right\nfrom itertools import chain\n\nclass Interval:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\n    def __eq__(self, other):\n        return (self.start, self.end) == (other.start, other.end)\n\n    def __lt__(self, other):\n        return self.start < other.start or (self.start == other.start and self.end < other.end)\n\nclass IntervalManager:\n    def __init__(self):\n        self.intervals = []\n        self._add_queue = []\n\n    def addInterval(self, start, end):\n        new_interval = Interval(start, end)\n        \n        # Remove intervals if the new interval overlaps with any of them\n        start_index = bisect_right(self.intervals, new_interval, key=lambda x: x.end)\n        end_index = bisect_left(self.intervals, new_interval, key=lambda x: x.start)\n        \n        self.intervals = self.intervals[:start_index] + [new_interval] + self.intervals[end_index:]\n        self._add_queue = []\n\n    def removeInterval(self, start, end):\n        interval_to_remove = Interval(start, end)\n        \n        # Find and remove the interval\n        index = bisect_left(self.intervals, interval_to_remove)\n        if index < len(self.intervals) and self.intervals[index] == interval_to_remove:\n            self.intervals.pop(index)\n\n    def mergeIntervals(self):\n        merged_intervals = []\n        for interval in self.intervals:\n            if merged_intervals and merged_intervals[-1].end >= interval.start - 1:\n                merged_intervals[-1].end = max(merged_intervals[-1].end, interval.end)\n            else:\n                merged_intervals.append(interval)\n        return merged_intervals\n\n    def queryInterval(self, start, end):\n        query_interval = Interval(start, end)\n        return bisect_right(self.intervals, query_interval, key=lambda x: x.end) > bisect_left(self.intervals, query_interval, key=lambda x: x.start)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import IntervalManager, Interval\n\ndef test_addInterval():\n    manager = IntervalManager()\n    manager.addInterval(1, 2)\n    manager.addInterval(3, 4)\n    manager.addInterval(5, 6)\n    assert manager.mergeIntervals() == [Interval(1, 2), Interval(3, 4), Interval(5, 6)]\n\ndef test_removeInterval():\n    manager = IntervalManager()\n    manager.addInterval(1, 10)\n    manager.addInterval(2, 5)\n    manager.removeInterval(2, 5)\n    assert manager.mergeIntervals() == [Interval(1, 1), Interval(5, 10)]\n\ndef test_mergeIntervals():\n    manager = IntervalManager()\n    manager.addInterval(1, 5)\n    manager.addInterval(3, 7)\n    manager.addInterval(8, 10)\n    assert manager.mergeIntervals() == [Interval(1, 7), Interval(8, 10)]\n\ndef test_queryInterval():\n    manager = IntervalManager()\n    manager.addInterval(1, 10)\n    manager.addInterval(5, 8)\n    assert manager.queryInterval(6, 7) == True\n    assert manager.queryInterval(2, 3) == True\n    assert manager.queryInterval(11, 15) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000088", "row_id": 88, "seed_ids": ["497", "933", "1271"], "mode": "leetcode", "instruction": "You are given a list of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]`. Design a data structure to efficiently manage these intervals and answer the following operations:\n\n1. `addInterval(start, end)`: Add a new interval `[start, end]` to the data structure. Ensure that the new interval does not overlap with any existing interval.\n2. `removeInterval(start, end)`: Remove an existing interval `[start, end]` from the data structure if it exists.\n3. `mergeIntervals()`: Merge all overlapping intervals in the data structure and return the merged intervals as a list.\n4. `queryInterval(start, end)`: Check if there is any interval in the data structure that overlaps with the given interval `[start, end]`.\n\nImplement the `IntervalManager` class:\n\n*   `IntervalManager()`: Initializes the data structure with an empty list of intervals.\n*   `void addInterval(start, end)`: Adds a new interval `[start, end]` to the data structure.\n*   `void removeInterval(start, end)`: Removes an interval `[start, end]` from the data structure if it exists.\n*   `List<int[]> mergeIntervals()`: Merges all overlapping intervals and returns the merged intervals as a list.\n*   `boolean queryInterval(start, end)`: Checks if there is any interval in the data structure that overlaps with the given interval `[start, end]`.\n\nEnsure that the intervals are stored in a way that allows for efficient operations, and the intervals stored in the data structure are sorted by their start times."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given two strings `s` and `t`, both of length `n`, and an integer `k`, you can perform the following operation on `s` any number of times: choose `k` indices in `s` and rotate the substring of `s` starting at each of those indices by one position to the right (the last character moves to the front). A rotation is represented by a pair `[i, k]` where `i` is the starting index and `k` is the number of positions to rotate. Determine the lexicographically smallest string `s` that can be obtained after performing these operations, and also find the minimum number of operations required to achieve this."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef rotate_string(s, k):\n    \"\"\"\n    Rotates the string s by k positions to the right.\n    \"\"\"\n    return s[-k:] + s[:-k]\n\ndef lexicographically_smallest_string(s, k):\n    \"\"\"\n    Returns the lexicographically smallest string that can be obtained\n    by rotating the string s at any k indices and the number of such\n    operations needed.\n    \"\"\"\n    if k >= len(s) or len(set(s)) == 1:\n        return s, 1\n    \n    smallest = s\n    min_operations = float('inf')\n    \n    for i in range(len(s)):\n        for _ in range(k):\n            s = rotate_string(s, 1)\n            if s < smallest:\n                smallest = s\n                min_operations = 1\n            elif s == smallest:\n                min_operations += 1\n                \n    return smallest, min_operations\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import lexicographically_smallest_string\n\ndef test_rotate_string_positive():\n    assert rotate_string(\"abcde\", 2) == \"deabc\"\n\ndef test_rotate_string_negative():\n    assert rotate_string(\"abcde\", -2) == \"cdeab\"\n\ndef test_lexicographically_smallest_string_positive():\n    assert lexicographically_smallest_string(\"baaca\", 3) == (\"aaabc\", 3)\n\ndef test_lexicographically_smallest_string_with_duplicates():\n    assert lexicographically_smallest_string(\"bbzb\", 2) == (\"bzbb\", 2)\n\ndef test_lexicographically_smallest_string_already_smallest():\n    assert lexicographically_smallest_string(\"abcd\", 4) == (\"abcd\", 1)\n\ndef test_lexicographically_smallest_string_single_char():\n    assert lexicographically_smallest_string(\"a\", 10) == (\"a\", 1)\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000089", "row_id": 89, "seed_ids": ["1202", "982", "2531"], "mode": "leetcode", "instruction": "Given two strings `s` and `t`, both of length `n`, and an integer `k`, you can perform the following operation on `s` any number of times: choose `k` indices in `s` and rotate the substring of `s` starting at each of those indices by one position to the right (the last character moves to the front). A rotation is represented by a pair `[i, k]` where `i` is the starting index and `k` is the number of positions to rotate. Determine the lexicographically smallest string `s` that can be obtained after performing these operations, and also find the minimum number of operations required to achieve this."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, a **substring** `t` of `s` is called **balanced** if the number of vowels (`a`, `e`, `i`, `o`, `u`) in `t` is equal to the number of consonants. Return the number of **balanced** substrings in `s`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef count_balanced_substrings(s: str) -> int:\n    \"\"\"\n    Returns the number of balanced substrings in the given string s.\n    A balanced substring has an equal number of vowels and consonants.\n    \"\"\"\n    vowels = 'aeiou'\n    balanced_count = 0\n    for i in range(len(s)):\n        vowel_count, consonant_count = 0, 0\n        for j in range(i, len(s)):\n            if s[j] in vowels:\n                vowel_count += 1\n            else:\n                consonant_count += 1\n            if vowel_count == consonant_count:\n                balanced_count += 1\n    return balanced_count\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import count_balanced_substrings\n\ndef test_count_balanced_substrings_single_vowel():\n    assert count_balanced_substrings(\"aa\") == 0\n\ndef test_count_balanced_substrings_consonant_intermixed():\n    assert count_balanced_substrings(\"bcdf\") == 0\n    assert count_balanced_substrings(\"cfcfbgbgaac\") == 6\n\ndef test_count_balanced_substrings_mixed():\n    assert count_balanced_substrings(\"beaead\") == 5\n    assert count_balanced_substrings(\"aabbacbaee\") == 9\n\ndef test_count_balanced_substrings_all_vowel():\n    assert count_balanced_substrings(\"aaaaa\") == 10\n\ndef test_count_balanced_substrings_all_consonant():\n    assert count_balanced_substrings(\"bbbb\") == 0\n\ndef test_count_balanced_substrings_balanced_substring():\n    assert count_balanced_substrings(\"aeiou\") == 5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000090", "row_id": 90, "seed_ids": ["2320", "2021", "647"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, a **substring** `t` of `s` is called **balanced** if the number of vowels (`a`, `e`, `i`, `o`, `u`) in `t` is equal to the number of consonants. Return the number of **balanced** substrings in `s`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary string `s` (a string consisting only of `'0's` and `'1's`), you can perform the following operation any number of times: choose any **non-empty subsequence** of `s` and toggle all its characters (i.e., change all `'0's` to `'1's` and all `'1's` to `'0's`). Determine if it is possible to make the string `s` **palindromic** (the same string read from left to right and from right to left) using these operations. Return `true` if it is possible, otherwise return `false`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef can_make_palindrome(s):\n    \"\"\"\n    Determines if it is possible to make the binary string s palindromic\n    by toggling any non-empty subsequence any number of times.\n    \"\"\"\n    toggle_count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[~i]:  # ~i is equivalent to -i-1\n            toggle_count += 1\n    return toggle_count <= 1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_can_make_palindrome():\n    assert can_make_palindrome(\"0000\") == True\n    assert can_make_palindrome(\"010010101\") == True\n    assert can_make_palindrome(\"0010100\") == True\n    assert can_make_palindrome(\"0101011\") == False\n    assert can_make_palindrome(\"11001011\") == True\n    assert can_make_palindrome(\"0001000\") == True\n    assert can_make_palindrome(\"1001001\") == True\n    assert can_make_palindrome(\"0110001\") == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000091", "row_id": 91, "seed_ids": ["1460", "1379", "32"], "mode": "leetcode", "instruction": "Given a binary string `s` (a string consisting only of `'0's` and `'1's`), you can perform the following operation any number of times: choose any **non-empty subsequence** of `s` and toggle all its characters (i.e., change all `'0's` to `'1's` and all `'1's` to `'0's`). Determine if it is possible to make the string `s` **palindromic** (the same string read from left to right and from right to left) using these operations. Return `true` if it is possible, otherwise return `false`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a 2D grid representing a map of islands and water. The grid contains the following characters:\n- `'W'` for water (you cannot move through water).\n- `'L'` for land (you can move through land).\n- `'S'` for start (your starting position, guaranteed to be on land).\n\nYou can move up, down, left, or right from any land cell to an adjacent land cell. The goal is to find the shortest path from the start position to any border cell (a cell on the edge of the grid) that is also land. You cannot move diagonally. If there is no such path, return `-1`.\n\nReturn the number of steps in the shortest path, or `-1` if no such path exists."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom collections import deque\n\ndef shortest_land_distance(grid):\n    \"\"\"\n    Returns the shortest path from the start position to any border cell that is also land.\n    If no such path exists, returns -1.\n    \"\"\"\n    if not grid or not grid[0]:\n        return -1\n    \n    rows, cols = len(grid), len(grid[0])\n    start_row, start_col = -1, -1\n    \n    # Find the start position\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 'S':\n                start_row, start_col = i, j\n                break\n        if start_row != -1:\n            break\n    \n    if start_row == -1:\n        return -1\n    \n    # Perform BFS\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    queue = deque([(start_row, start_col, 0)])\n    visited = set([(start_row, start_col)])\n    \n    while queue:\n        row, col, steps = queue.popleft()\n        \n        if row == 0 or col == 0 or row == rows - 1 or col == cols - 1:\n            if grid[row][col] == 'L':  # Check if it's a land cell on the border\n                return steps\n            continue\n        \n        for dr, dc in directions:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < rows and 0 <= new_col < cols and grid[new_row][new_col] == 'L' and (new_row, new_col) not in visited:\n                visited.add((new_row, new_col))\n                queue.append((new_row, new_col, steps + 1))\n    \n    return -1\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_shortest_land_distance():\n    # Test 1\n    grid = [\n        ['W', 'W', 'L'],\n        ['L', 'S', 'L'],\n        ['W', 'W', 'L']\n    ]\n    assert shortest_land_distance(grid) == 2\n\n    # Test 2\n    grid = [\n        ['W', 'L', 'L'],\n        ['L', 'S', 'L'],\n        ['W', 'W', 'W']\n    ]\n    assert shortest_land_distance(grid) == 1\n\n    # Test 3\n    grid = [\n        ['W', 'W', 'W'],\n        ['W', 'S', 'W'],\n        ['W', 'W', 'W']\n    ]\n    assert shortest_land_distance(grid) == -1\n\n    # Test 4\n    grid = [\n        ['W', 'W', 'W'],\n        ['L', 'S', 'L'],\n        ['W', 'W', 'W']\n    ]\n    assert shortest_land_distance(grid) == -1\n\n    # Test 5\n    grid = [\n        ['L', 'W', 'W'],\n        ['L', 'L', 'S'],\n        ['W', 'L', 'W']\n    ]\n    assert shortest_land_distance(grid) == 2\n\nif __name__ == \"__main__\":\n    import pytest\n    pytest.main([__file__])\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000092", "row_id": 92, "seed_ids": ["1298", "2511", "1926"], "mode": "leetcode", "instruction": "You are given a 2D grid representing a map of islands and water. The grid contains the following characters:\n- `'W'` for water (you cannot move through water).\n- `'L'` for land (you can move through land).\n- `'S'` for start (your starting position, guaranteed to be on land).\n\nYou can move up, down, left, or right from any land cell to an adjacent land cell. The goal is to find the shortest path from the start position to any border cell (a cell on the edge of the grid) that is also land. You cannot move diagonally. If there is no such path, return `-1`.\n\nReturn the number of steps in the shortest path, or `-1` if no such path exists."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an array of integers `nums`, find the length of the longest **consecutive sequence** that can be formed by rearranging the elements of the array. A **consecutive sequence** is a sequence where each element is exactly one more than the previous element. If no such sequence exists, return 0.\n\nFor example, given `nums = [100, 4, 200, 1, 3, 2]`, the longest consecutive sequence that can be formed is `[1, 2, 3, 4]`, so the function should return 4."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longest_consecutive(nums):\n    \"\"\"\n    Returns the length of the longest consecutive sequence that can be formed by rearranging the elements of the array.\n    \"\"\"\n    num_set = set(nums)\n    longest_streak = 0\n\n    for num in num_set:\n        # Only start counting if `num` is the beginning of a sequence\n        if num - 1 not in num_set:\n            current_num = num\n            current_streak = 1\n\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_streak += 1\n\n            longest_streak = max(longest_streak, current_streak)\n\n    return longest_streak\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import longest_consecutive\n\ndef test_longest_consecutive_empty():\n    assert longest_consecutive([]) == 0\n\ndef test_longest_consecutive_single_element():\n    assert longest_consecutive([1]) == 1\n\ndef test_longest_consecutive_no_sequence():\n    assert longest_consecutive([5, 2, 4, 1, 3]) == 5  # No sequence, but sorted elements\n\ndef test_longest_consecutive_with_sequence():\n    assert longest_consecutive([100, 4, 200, 1, 3, 2]) == 4  # Longest sequence [1, 2, 3, 4]\n    assert longest_consecutive([10, 5, 12, 3]) == 2  # Longest sequence [3, 5]\n    assert longest_consecutive([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]) == 9  # Longest sequence [0, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert longest_consecutive([100, 4, 200, 1, 3, 2, 400, 401]) == 4  # Longest sequence [1, 2, 3, 4]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000093", "row_id": 93, "seed_ids": ["1935", "2053", "376"], "mode": "leetcode", "instruction": "Given an array of integers `nums`, find the length of the longest **consecutive sequence** that can be formed by rearranging the elements of the array. A **consecutive sequence** is a sequence where each element is exactly one more than the previous element. If no such sequence exists, return 0.\n\nFor example, given `nums = [100, 4, 200, 1, 3, 2]`, the longest consecutive sequence that can be formed is `[1, 2, 3, 4]`, so the function should return 4."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Implement the `CircularArray` class that supports the following operations:\n\n- `CircularArray(int size)` Initializes the `CircularArray` with `size` elements, all set to zero.\n- `void set(int index, int val)` Sets the value at the given `index` to `val`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n- `int get(int index)` Returns the value at the given `index`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n- `void increment(int index, int val)` Increments the value at the given `index` by `val`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n\nAdditionally, provide a method:\n\n- `String toString()` Returns a string representation of the `CircularArray`, where each element is separated by a comma and the entire array is enclosed in square brackets."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass CircularArray:\n    def __init__(self, size: int):\n        \"\"\"\n        Initializes the CircularArray with `size` elements, all set to zero.\n        \"\"\"\n        self.size = size\n        self.array = [0] * size\n\n    def set(self, index: int, val: int):\n        \"\"\"\n        Sets the value at the given `index` to `val`.\n        If the index is out of bounds, it should wrap around to the beginning or end of the array.\n        \"\"\"\n        self.array[index % self.size] = val\n\n    def get(self, index: int) -> int:\n        \"\"\"\n        Returns the value at the given `index`.\n        If the index is out of bounds, it should wrap around to the beginning or end of the array.\n        \"\"\"\n        return self.array[index % self.size]\n\n    def increment(self, index: int, val: int):\n        \"\"\"\n        Increments the value at the given `index` by `val`.\n        If the index is out of bounds, it should wrap around to the beginning or end of the array.\n        \"\"\"\n        self.array[index % self.size] += val\n\n    def to_string(self) -> str:\n        \"\"\"\n        Returns a string representation of the `CircularArray`.\n        \"\"\"\n        return '[' + ','.join(map(str, self.array)) + ']'\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import CircularArray\n\ndef test circular_array():\n    arr = CircularArray(5)\n    assert arr.to_string() == '[0,0,0,0,0]'\n    arr.set(3, 4)\n    assert arr.to_string() == '[0,0,0,4,0]'\n    arr.set(10, 5)\n    assert arr.to_string() == '[0,5,0,4,0]'\n    arr.increment(1, 7)\n    assert arr.to_string() == '[0,12,0,4,0]'\n    arr.increment(10, 2)\n    assert arr.to_string() == '[0,14,0,4,0]'\n    arr.increment(-1, 3)\n    assert arr.to_string() == '[3,14,0,4,0]'\n    arr.increment(-6, 3)\n    assert arr.to_string() == '[3,14,0,4,3]'\n    arr.increment(8, -2)\n    assert arr.to_string() == '[3,12,0,4,3]'\n    arr.increment(-9, -1)\n    assert arr.to_string() == '[3,11,0,4,3]'\n    arr.set(-2, 1)\n    assert arr.to_string() == '[1,11,0,4,3]'\n    arr.set(6, 2)\n    assert arr.to_string() == '[1,11,0,4,2]'\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000094", "row_id": 94, "seed_ids": ["2166", "1091", "2357"], "mode": "leetcode", "instruction": "Implement the `CircularArray` class that supports the following operations:\n\n- `CircularArray(int size)` Initializes the `CircularArray` with `size` elements, all set to zero.\n- `void set(int index, int val)` Sets the value at the given `index` to `val`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n- `int get(int index)` Returns the value at the given `index`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n- `void increment(int index, int val)` Increments the value at the given `index` by `val`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n\nAdditionally, provide a method:\n\n- `String toString()` Returns a string representation of the `CircularArray`, where each element is separated by a comma and the entire array is enclosed in square brackets."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a **binary tree** with `n` nodes, where each node has a unique value from `1` to `n`, determine if the tree can be **partitioned** into two subsets such that the sum of values in each subset is equal. Return `true` if such a partition exists, otherwise return `false`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef can_partition_bst(root: TreeNode) -> bool:\n    \"\"\"\n    Returns true if the tree can be partitioned into two subsets with equal sum.\n    \"\"\"\n    total_sum = sum_node_values(root)\n    if total_sum % 2 != 0:\n        return False\n    target = total_sum // 2\n    return can_partition_helper(root, target)\n\ndef sum_node_values(node: TreeNode) -> int:\n    if node is None:\n        return 0\n    return node.val + sum_node_values(node.left) + sum_node_values(node.right)\n\ndef can_partition_helper(node: TreeNode, target: int) -> bool:\n    if node is None:\n        return target == 0\n    return (can_partition_helper(node.left, target - node.val) or \n            can_partition_helper(node.right, target - node.val))\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import TreeNode, can_partition_bst, sum_node_values\n\ndef test_can_partition_bst_true():\n    # Construct a BST with values 1 to 5\n    five = TreeNode(5)\n    four = TreeNode(4)\n    three = TreeNode(3)\n    two = TreeNode(2, left=four, right=five)\n    one = TreeNode(1, right=three)\n    assert can_partition_bst(one) == True\n\ndef test_can_partition_bst_false():\n    # Construct a BST with values 1, 2, 3\n    three = TreeNode(3)\n    two = TreeNode(2)\n    one = TreeNode(1, right=three, left=two)\n    assert can_partition_bst(one) == False\n\ndef test_sum_node_values():\n    root = TreeNode(5, left=TreeNode(3), right=TreeNode(1))\n    assert sum_node_values(root) == 9\n\ndef test_can_partition_helper():\n    root = TreeNode(5, left=TreeNode(3), right=TreeNode(1))\n    assert can_partition_helper(root, 8) == True\n    assert can_partition_helper(root, 9) == False\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000095", "row_id": 95, "seed_ids": ["1710", "1557", "587"], "mode": "leetcode", "instruction": "Given a **binary tree** with `n` nodes, where each node has a unique value from `1` to `n`, determine if the tree can be **partitioned** into two subsets such that the sum of values in each subset is equal. Return `true` if such a partition exists, otherwise return `false`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of `n` unique integers, determine if there exists a pair of integers in the list whose sum is equal to a given target integer `k`. If such a pair exists, return the indices of the two integers (0-indexed) in any order. If no such pair exists, return an empty list. Note that the same integer cannot be used twice."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_pair_indices(nums, k):\n    \"\"\"\n    Determine if there exists a pair of integers in the list whose sum is equal to the target k.\n    If such a pair exists, return the indices of the two integers; otherwise, return an empty list.\n    \"\"\"\n    num_to_index = {}\n    for i, num in enumerate(nums):\n        complement = k - num\n        if complement in num_to_index:\n            return [num_to_index[complement], i]\n        num_to_index[num] = i\n    return []\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_find_pair_indices():\n    assert find_pair_indices([1, 3, 5, 7, 9], 12) == [1, 3] or [3, 1]\n    assert find_pair_indices([2, 4, 6, 8, 10], 15) == [2, 3] or [3, 2]\n    assert find_pair_indices([5, 10, 3, 7], 13) == [1, 3] or [3, 1]\n    assert find_pair_indices([1, 2, 3, 4], 8) == []\n    assert find_pair_indices([0, 1, 4, 9, 13, 18], 15) == [0, 3] or [3, 0]\n    assert find_pair_indices([11, 22, 33, 44], 66) == [0, 2] or [2, 0]\n\ndef test_find_pair_indices_negative():\n    assert find_pair_indices([1, 2, -3, -2], -1) == [1, 2] or [2, 1]\n    assert find_pair_indices([-5, 1, 2, -3, 4], 2) == [2, 3] or [3, 2]\n    assert find_pair_indices([-14, 5, 8, 2, 7, 5], 10) == [1, 5] or [5, 1]\n    assert find_pair_indices([-5, -1, 0, 1, 3, 9], 4) == [3, 4] or [4, 3]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000096", "row_id": 96, "seed_ids": ["2485", "2345", "796"], "mode": "leetcode", "instruction": "Given a list of `n` unique integers, determine if there exists a pair of integers in the list whose sum is equal to a given target integer `k`. If such a pair exists, return the indices of the two integers (0-indexed) in any order. If no such pair exists, return an empty list. Note that the same integer cannot be used twice."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a matrix `matrix` of size `m x n` containing integers, design an algorithm to find the sum of the maximum element in each row. For example, if the matrix is:\n\n```\n[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n```\n\nThe output should be the sum of the maximum elements in each row, which is `3 + 6 + 9 = 18`.\n\nWrite a function `sumOfMaxElements(matrix: List[List[int]]) -> int` that returns the sum of the maximum elements in each row of the given matrix.\n\n### Example\n\n#### Input\n```\nmatrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n```\n\n#### Output\n```\n18\n```\n\n### Constraints\n\n- `1 <= m, n <= 100`\n- `-1000 <= matrix[i][j] <= 1000`"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nfrom typing import List\n\ndef sumOfMaxElements(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Returns the sum of the maximum elements in each row of the given matrix.\n    \"\"\"\n    return sum(max(row) for row in matrix)\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import sumOfMaxElements\n\ndef test_sumOfMaxElements():\n    assert sumOfMaxElements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 18\n    assert sumOfMaxElements([[10], [20], [30]]) == 60\n    assert sumOfMaxElements([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == -18\n    assert sumOfMaxElements([[5, 5, 5], [1, 1, 1], [10, 10, 10]]) == 25\n    assert sumOfMaxElements([[100, 200], [-50, 50], [0, 0]]) == 250\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000097", "row_id": 97, "seed_ids": ["896", "1337", "928"], "mode": "leetcode", "instruction": "Given a matrix `matrix` of size `m x n` containing integers, design an algorithm to find the sum of the maximum element in each row. For example, if the matrix is:\n\n```\n[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n```\n\nThe output should be the sum of the maximum elements in each row, which is `3 + 6 + 9 = 18`.\n\nWrite a function `sumOfMaxElements(matrix: List[List[int]]) -> int` that returns the sum of the maximum elements in each row of the given matrix.\n\n### Example\n\n#### Input\n```\nmatrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n```\n\n#### Output\n```\n18\n```\n\n### Constraints\n\n- `1 <= m, n <= 100`\n- `-1000 <= matrix[i][j] <= 1000`"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a complete binary tree represented by an array `tree`, where `tree[i]` represents the value of the node at index `i`, and each parent node's value is the bitwise OR of its two children. You are given the root index `0` and a target value `target`. Your task is to insert a new node with value `target` into the array representation of the tree while maintaining the complete binary tree property, and return the new root index of the modified array.\n\nImplement the `CBTArrayInserter` class with the following methods:\n*   `CBTArrayInserter(int[] tree)`: Initializes the data structure with the given array `tree` representing the complete binary tree.\n*   `int insert(int target)`: Inserts a new node with value `target` into the tree and returns the new root index of the modified array.\n*   `int get_root()`: Returns the root index of the current state of the tree."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass CBTArrayInserter:\n    def __init__(self, tree):\n        self.tree = tree\n        self.n = len(tree)\n\n    def insert(self, target):\n        self.n += 1\n        index = self.n - 1\n        self.tree.append(target)\n        while index > 0:\n            parent = (index - 1) // 2\n            if self.tree[index] == self.tree[parent] or self.tree[index] != self.tree[parent]:\n                self.tree[parent] = self.tree[index] | self.tree[2 * parent + 1] | self.tree[2 * parent + 2]\n            index = parent\n        return 0\n\n    def get_root(self):\n        return self.n\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_cbt_array_inserter():\n    def check_tree(root, expected_tree):\n        tree = [None] * (len(expected_tree) + 1)\n        inserter = CBTArrayInserter(tree)\n        for val in expected_tree:\n            assert inserter.insert(val) == root\n            assert inserter.get_root() == root\n            root += 1\n            expected_tree.append(val)\n\n    # Example 1: Basic insertion and get_root checks\n    check_tree(0, [1, 2, 3, 4, 5])\n\n    # Example 2: Insertion with larger values and get_root checks\n    check_tree(0, [23, 14, 21, 13, 4, 6, 7, 9, 22])\n\n    # Example 3: Insertion with negative values and get_root checks\n    check_tree(0, [0, -1, -2, -3, -4])\n\n    # Example 4: Insertion with mixed values and get_root checks\n    check_tree(0, [15, 10, 21, 22, 45, 19, 27, 28, 39, 40])\n\n# This test runs multiple test cases\nif __name__ == \"__main__\":\n    pytest.main([__file__])\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000098", "row_id": 98, "seed_ids": ["318", "1265", "919"], "mode": "leetcode", "instruction": "Given a complete binary tree represented by an array `tree`, where `tree[i]` represents the value of the node at index `i`, and each parent node's value is the bitwise OR of its two children. You are given the root index `0` and a target value `target`. Your task is to insert a new node with value `target` into the array representation of the tree while maintaining the complete binary tree property, and return the new root index of the modified array.\n\nImplement the `CBTArrayInserter` class with the following methods:\n*   `CBTArrayInserter(int[] tree)`: Initializes the data structure with the given array `tree` representing the complete binary tree.\n*   `int insert(int target)`: Inserts a new node with value `target` into the tree and returns the new root index of the modified array.\n*   `int get_root()`: Returns the root index of the current state of the tree."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a binary matrix `grid` of size `m x n`, flip the image horizontally, then invert all the values: change `0` to `1` and `1` to `0`. Return the resulting matrix. A flip horizontally means that for each row, the values are reversed, and inverting the values means that all `0`s are changed to `1`s and all `1`s are changed to `0`s."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef flip_and_invert_image(grid):\n    \"\"\"\n    Flips the given binary matrix horizontally and inverts all the values.\n    \"\"\"\n    flipped_inverted_grid = []\n    for row in grid:\n        # Reverse the row and invert the values\n        flipped_inverted_row = [1 - val for val in reversed(row)]\n        flipped_inverted_grid.append(flipped_inverted_row)\n    return flipped_inverted_grid\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nimport pytest\n\ndef test_flip_and_invert_image():\n    assert flip_and_invert_image([[1,1,0],[1,0,1],[0,0,0]]) == [[1,0,0],[0,1,0],[1,1,1]]\n    assert flip_and_invert_image([[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]) == [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n\ndef test_single_row_odd():\n    assert flip_and_invert_image([[0]]) == [[1]]\n\ndef test_single_row_even():\n    assert flip_and_invert_image([[1,0]]) == [[0,1]]\n\ndef test_zero_matrix():\n    assert flip_and_invert_image([[0,0],[0,0]]) == [[1,1],[1,1]]\n\ndef test_mixed():\n    assert flip_and_invert_image([[1,0,1],[0,1,0],[1,0,1]]) == [[0,1,0],[1,0,1],[0,1,0]]\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000099", "row_id": 99, "seed_ids": ["673", "1120", "2428"], "mode": "leetcode", "instruction": "Given a binary matrix `grid` of size `m x n`, flip the image horizontally, then invert all the values: change `0` to `1` and `1` to `0`. Return the resulting matrix. A flip horizontally means that for each row, the values are reversed, and inverting the values means that all `0`s are changed to `1`s and all `1`s are changed to `0`s."}}
