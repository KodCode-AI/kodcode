{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire `timeToLive` seconds after the `currentTime`. If the token is renewed, the expiry time will be **extended** to expire `timeToLive` seconds after the (potentially different) `currentTime`.  Implement the `AuthenticationManager` class:  *   `AuthenticationManager(int timeToLive)` constructs the `AuthenticationManager` and sets the `timeToLive`. *   `generate(string tokenId, int currentTime)` generates a new token with the given `tokenId` at the given `currentTime` in seconds. *   `renew(string tokenId, int currentTime)` renews the **unexpired** token with the given `tokenId` at the given `currentTime` in seconds. If there are no unexpired tokens with the given `tokenId`, the request is ignored, and nothing happens. *   `countUnexpiredTokens(int currentTime)` returns the number of **unexpired** tokens at the given currentTime.  Note that if a token expires at time `t`, and another action happens on time `t` (`renew` or `countUnexpiredTokens`), the expiration takes place **before** the other actions.\n\n[Question 2]: Given the array `nums`, obtain a subsequence of the array whose sum of elements is **strictly greater** than the sum of the non included elements in such subsequence.  If there are multiple solutions, return the subsequence with **minimum size** and if there still exist multiple solutions, return the subsequence with the **maximum total sum** of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array.  Note that the solution with the given constraints is guaranteed to be **unique**. Also return the answer sorted in **non-increasing** order.\n\n[Question 3]: You are given the `root` of a binary tree and a positive integer `k`.  The **level sum** in the tree is the sum of the values of the nodes that are on the **same** level.  Return _the_ `kth` _**largest** level sum in the tree (not necessarily distinct)_. If there are fewer than `k` levels in the tree, return `-1`.  **Note** that two nodes are on the same level if they have the same distance from the root.\n\n[Question 4]:"}, {"role": "assistant", "content": "Implement a class `CircularQueue` that supports the following operations:\n\n*   `CircularQueue(int k)` constructs the `CircularQueue` with a maximum size of `k`.\n*   `int Front()` retrieves the element at the front of the queue without removing it. Returns `-1` if the queue is empty.\n*   `int Rear()` retrieves the element at the rear of the queue without removing it. Returns `-1` if the queue is empty.\n*   `boolean enQueue(int value)` inserts the element `value` into the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is full).\n*   `boolean deQueue()` deletes an element from the queue. Returns `true` if the operation is successful, `false` otherwise (i.e., the queue is empty).\n*   `boolean isEmpty()` returns `true` if the queue is currently empty, `false` otherwise.\n*   `boolean isFull()` returns `true` if the queue is currently full, `false` otherwise.\n\nEnsure that all operations are performed in **constant time** (O(1))."}], "metadata": {"prompt_id": "00000000", "row_id": 0, "seed_ids": ["1797", "1403", "2583"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given two strings `s` and `part`, perform the following operation on `s` until **all** occurrences of the substring `part` are removed:  *   Find the **leftmost** occurrence of the substring `part` and **remove** it from `s`.  Return `s` _after removing all occurrences of_ `part`.  A **substring** is a contiguous sequence of characters in a string.\n\n[Question 2]: You are given a **0-indexed** string `s` that has lowercase English letters in its **even** indices and digits in its **odd** indices.  There is a function `shift(c, x)`, where `c` is a character and `x` is a digit, that returns the `xth` character after `c`.  *   For example, `shift('a', 5) = 'f'` and `shift('x', 0) = 'x'`.  For every **odd** index `i`, you want to replace the digit `s[i]` with `shift(s[i-1], s[i])`.  Return `s` _after replacing all digits. It is **guaranteed** that_ `shift(s[i-1], s[i])` _will never exceed_ `'z'`.\n\n[Question 3]: Given an integer array `arr` of **distinct** integers and an integer `k`.  A game will be played between the first two elements of the array (i.e. `arr[0]` and `arr[1]`). In each round of the game, we compare `arr[0]` with `arr[1]`, the larger integer wins and remains at position `0`, and the smaller integer moves to the end of the array. The game ends when an integer wins `k` consecutive rounds.  Return _the integer which will win the game_.  It is **guaranteed** that there will be a winner of the game.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s` consisting of lowercase English letters, and an integer `k`, you can perform the following operation on `s` `k` times: \n\n*   Choose any non-empty substring of `s` and sort its characters in **ascending** order.\n\nAfter performing the operations, return the **lexicographically largest** string `s` that can be obtained. A substring is a contiguous sequence of characters in a string, and a string is lexicographically larger than another if it comes later in a dictionary order."}], "metadata": {"prompt_id": "00000001", "row_id": 1, "seed_ids": ["1910", "1844", "1535"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given a **0-indexed** integer array `nums`. For each index `i` (`1 <= i <= nums.length - 2`) the **beauty** of `nums[i]` equals:  *   `2`, if `nums[j] < nums[i] < nums[k]`, for **all** `0 <= j < i` and for **all** `i < k <= nums.length - 1`. *   `1`, if `nums[i - 1] < nums[i] < nums[i + 1]`, and the previous condition is not satisfied. *   `0`, if none of the previous conditions holds.  Return _the **sum of beauty** of all_ `nums[i]` _where_ `1 <= i <= nums.length - 2`.\n\n[Question 2]: Two strings `X` and `Y` are similar if we can swap two letters (in different positions) of `X`, so that it equals `Y`. Also two strings `X` and `Y` are similar if they are equal.  For example, `\"tars \"` and `\"rats \"` are similar (swapping at positions `0` and `2`), and `\"rats \"` and `\"arts \"` are similar, but `\"star \"` is not similar to `\"tars \"`, `\"rats \"`, or `\"arts \"`.  Together, these form two connected groups by similarity: `{ \"tars \", \"rats \", \"arts \"}` and `{ \"star \"}`. Notice that `\"tars \"` and `\"arts \"` are in the same group even though they are not similar. Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.  We are given a list `strs` of strings where every string in `strs` is an anagram of every other string in `strs`. How many groups are there?\n\n[Question 3]: You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains **one less block** than the row beneath it and is centered on top.  To make the pyramid aesthetically pleasing, there are only specific **triangular patterns** that are allowed. A triangular pattern consists of a **single block** stacked on top of **two blocks**. The patterns are given as a list of three-letter strings `allowed`, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.  *   For example, `\"ABC \"` represents a triangular pattern with a `'C'` block stacked on top of an `'A'` (left) and `'B'` (right) block. Note that this is different from `\"BAC \"` where `'B'` is on the left bottom and `'A'` is on the right bottom.  You start with a bottom row of blocks `bottom`, given as a single string, that you **must** use as the base of the pyramid.  Given `bottom` and `allowed`, return `true` _if you can build the pyramid all the way to the top such that **every triangular pattern** in the pyramid is in_ `allowed`_, or_ `false` _otherwise_.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a string `s` consisting of lowercase English letters. A **substring** of `s` is considered **beautiful** if it contains an even number of distinct letters and the sum of the ASCII values of all characters in the substring is divisible by 3. Return the number of **beautiful substrings** in `s`.\n\nFor example, in the string `\"abcabb\"`, `\"a\"`, `\"bb\"`, and `\"abb\"` are beautiful substrings."}], "metadata": {"prompt_id": "00000002", "row_id": 2, "seed_ids": ["2012", "839", "756"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given an array of non-negative integers `nums` and an integer `k`. In one operation, you may choose **any** element from `nums` and **increment** it by `1`.  Return _the **maximum** **product** of_ `nums` _after **at most**_ `k` _operations._ Since the answer may be very large, return it **modulo** `109 + 7`. Note that you should maximize the product before taking the modulo.\n\n[Question 2]: You are given an integer `n` denoting the number of nodes of a **weighted directed** graph. The nodes are numbered from `0` to `n - 1`.  You are also given a 2D integer array `edges` where `edges[i] = [fromi, toi, weighti]` denotes that there exists a **directed** edge from `fromi` to `toi` with weight `weighti`.  Lastly, you are given three **distinct** integers `src1`, `src2`, and `dest` denoting three distinct nodes of the graph.  Return _the **minimum weight** of a subgraph of the graph such that it is **possible** to reach_ `dest` _from both_ `src1` _and_ `src2` _via a set of edges of this subgraph_. In case such a subgraph does not exist, return `-1`.  A **subgraph** is a graph whose vertices and edges are subsets of the original graph. The **weight** of a subgraph is the sum of weights of its constituent edges.\n\n[Question 3]: Given a digit string `s`, return _the number of **unique substrings** of_ `s` _where every digit appears the same number of times._\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times: choose any two adjacent characters in `s` and swap them if the first character has a higher ASCII value than the second character. After performing any number of operations, return the lexicographically smallest string that can be obtained. Note that the ASCII values of lowercase English letters range from 97 to 122."}], "metadata": {"prompt_id": "00000003", "row_id": 3, "seed_ids": ["2233", "2203", "2168"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: There are `n` couples sitting in `2n` seats arranged in a row and want to hold hands.  The people and seats are represented by an integer array `row` where `row[i]` is the ID of the person sitting in the `ith` seat. The couples are numbered in order, the first couple being `(0, 1)`, the second couple being `(2, 3)`, and so on with the last couple being `(2n - 2, 2n - 1)`.  Return _the minimum number of swaps so that every couple is sitting side by side_. A swap consists of choosing any two people, then they stand up and switch seats.\n\n[Question 2]: We have two arrays `arr1` and `arr2` which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions:  *   `arr1` contains `uniqueCnt1` **distinct** positive integers, each of which is **not divisible** by `divisor1`. *   `arr2` contains `uniqueCnt2` **distinct** positive integers, each of which is **not divisible** by `divisor2`. *   **No** integer is present in both `arr1` and `arr2`.  Given `divisor1`, `divisor2`, `uniqueCnt1`, and `uniqueCnt2`, return _the **minimum possible maximum** integer that can be present in either array_.\n\n[Question 3]: A **wonderful** string is a string where **at most one** letter appears an **odd** number of times.  *   For example, `\"ccjjc \"` and `\"abab \"` are wonderful, but `\"ab \"` is not.  Given a string `word` that consists of the first ten lowercase English letters (`'a'` through `'j'`), return _the **number of wonderful non-empty substrings** in_ `word`_. If the same substring appears multiple times in_ `word`_, then count **each occurrence** separately._  A **substring** is a contiguous sequence of characters in a string.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s` consisting of lowercase English letters, a **substring** of `s` is called a **balanced substring** if the number of distinct characters in it is exactly `k`. For a given integer `k`, return the number of balanced substrings in `s`.\n\nExample:\n```python\ns = \"abcabc\", k = 2\nOutput: 3\nExplanation: The balanced substrings are \"ab\", \"bc\", and \"ab\".\n```\n\nExample:\n```python\ns = \"aaabbbccc\", k = 3\nOutput: 1\nExplanation: The only balanced substring is \"aaabbbccc\".\n```"}], "metadata": {"prompt_id": "00000004", "row_id": 4, "seed_ids": ["765", "2513", "1915"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given two integers `n` and `maxValue`, which are used to describe an **ideal** array.  A **0-indexed** integer array `arr` of length `n` is considered **ideal** if the following conditions hold:  *   Every `arr[i]` is a value from `1` to `maxValue`, for `0 <= i < n`. *   Every `arr[i]` is divisible by `arr[i - 1]`, for `0 < i < n`.  Return _the number of **distinct** ideal arrays of length_ `n`. Since the answer may be very large, return it modulo `109 + 7`.\n\n[Question 2]: You are given a string `s` consisting only of characters `'a'` and `'b'`\u200b\u200b\u200b\u200b.  You can delete any number of characters in `s` to make `s` **balanced**. `s` is **balanced** if there is no pair of indices `(i,j)` such that `i < j` and `s[i] = 'b'` and `s[j]= 'a'`.  Return _the **minimum** number of deletions needed to make_ `s` _**balanced**_.\n\n[Question 3]: You are given the `root` of a binary tree containing digits from `0` to `9` only.  Each root-to-leaf path in the tree represents a number.  *   For example, the root-to-leaf path `1 -> 2 -> 3` represents the number `123`.  Return _the total sum of all root-to-leaf numbers_. Test cases are generated so that the answer will fit in a **32-bit** integer.  A **leaf** node is a node with no children.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a binary tree where each node contains a single digit from `0` to `9`. A **path** in the tree is defined as any sequence of nodes from some starting node to any leaf node. Each root-to-leaf path in the tree represents a number. For example, the path `1 -> 2 -> 3` represents the number `123`.\n\nYou need to find the sum of all root-to-leaf numbers in the tree. A **leaf** node is a node with no children. The result should be returned as an integer, and test cases are generated so that the answer will fit in a **32-bit** integer."}], "metadata": {"prompt_id": "00000005", "row_id": 5, "seed_ids": ["2338", "1653", "129"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You have two types of tiles: a `2 x 1` domino shape and a tromino shape. You may rotate these shapes.  Given an integer n, return _the number of ways to tile an_ `2 x n` _board_. Since the answer may be very large, return it **modulo** `109 + 7`.  In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.\n\n[Question 2]: Given two [sparse matrices](https://en.wikipedia.org/wiki/Sparse_matrix) `mat1` of size `m x k` and `mat2` of size `k x n`, return the result of `mat1 x mat2`. You may assume that multiplication is always possible.\n\n[Question 3]: You have a keyboard layout as shown above in the **X-Y** plane, where each English uppercase letter is located at some coordinate.  *   For example, the letter `'A'` is located at coordinate `(0, 0)`, the letter `'B'` is located at coordinate `(0, 1)`, the letter `'P'` is located at coordinate `(2, 3)` and the letter `'Z'` is located at coordinate `(4, 1)`.  Given the string `word`, return _the minimum total **distance** to type such string using only two fingers_.  The **distance** between coordinates `(x1, y1)` and `(x2, y2)` is `|x1 - x2| + |y1 - y2|`.  **Note** that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s` consisting of lowercase English letters, you are allowed to perform the following operation any number of times: pick any substring `s[i...j]` and replace it with the same substring in reverse order. For example, `s = \"abcde\"` can be transformed into `\"dcbae\"` by replacing the substring `s[1...4]` with `\"dcba\"`. \n\nDetermine the lexicographically smallest string that can be obtained by performing the above operation any number of times. Return the resulting string."}], "metadata": {"prompt_id": "00000006", "row_id": 6, "seed_ids": ["790", "311", "1320"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: There is a hotel with `n` rooms. The rooms are represented by a 2D integer array `rooms` where `rooms[i] = [roomIdi, sizei]` denotes that there is a room with room number `roomIdi` and size equal to `sizei`. Each `roomIdi` is guaranteed to be **unique**.  You are also given `k` queries in a 2D array `queries` where `queries[j] = [preferredj, minSizej]`. The answer to the `jth` query is the room number `id` of a room such that:  *   The room has a size of **at least** `minSizej`, and *   `abs(id - preferredj)` is **minimized**, where `abs(x)` is the absolute value of `x`.  If there is a **tie** in the absolute difference, then use the room with the **smallest** such `id`. If there is **no such room**, the answer is `-1`.  Return _an array_ `answer` _of length_ `k` _where_ `answer[j]` _contains the answer to the_ `jth` _query_.\n\n[Question 2]: You are given two integer arrays `nums1` and `nums2`. You are tasked to implement a data structure that supports queries of two types:  1.  **Add** a positive integer to an element of a given index in the array `nums2`. 2.  **Count** the number of pairs `(i, j)` such that `nums1[i] + nums2[j]` equals a given value (`0 <= i < nums1.length` and `0 <= j < nums2.length`).  Implement the `FindSumPairs` class:  *   `FindSumPairs(int[] nums1, int[] nums2)` Initializes the `FindSumPairs` object with two integer arrays `nums1` and `nums2`. *   `void add(int index, int val)` Adds `val` to `nums2[index]`, i.e., apply `nums2[index] += val`. *   `int count(int tot)` Returns the number of pairs `(i, j)` such that `nums1[i] + nums2[j] == tot`.\n\n[Question 3]: Given an integer array `arr`, return _the number of distinct bitwise ORs of all the non-empty subarrays of_ `arr`.  The bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer.  A **subarray** is a contiguous non-empty sequence of elements within an array.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given an integer array `nums`, you are tasked with designing a data structure that supports two types of queries efficiently:\n\n1. **Add** a positive integer to an element of a given index in the array `nums`.\n2. **Find** the maximum value in a given range of the array `nums`.\n\nImplement the `DynamicArray` class:\n\n*   `DynamicArray(int[] nums)` Initializes the `DynamicArray` object with the integer array `nums`.\n*   `void add(int index, int val)` Adds `val` to `nums[index]`, i.e., applies `nums[index] += val`.\n*   `int find(int left, int right)` Returns the maximum value in the subarray `nums[left...right]`.\n\nEnsure that the `find` operation is as efficient as possible, given the updates to the array."}], "metadata": {"prompt_id": "00000007", "row_id": 7, "seed_ids": ["1847", "1865", "898"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given the `root` of an N-ary tree of unique values, and two nodes of the tree `p` and `q`.  You should move the subtree of the node `p` to become a direct child of node `q`. If `p` is already a direct child of `q`, do not change anything. Node `p` **must be** the last child in the children list of node `q`.  Return _the root of the tree_ after adjusting it.  There are 3 cases for nodes `p` and `q`:  1.  Node `q` is in the sub-tree of node `p`. 2.  Node `p` is in the sub-tree of node `q`. 3.  Neither node `p` is in the sub-tree of node `q` nor node `q` is in the sub-tree of node `p`.  In cases 2 and 3, you just need to move `p` (with its sub-tree) to be a child of `q`, but in case 1 the tree may be disconnected, thus you need to reconnect the tree again. **Please read the examples carefully before solving this problem.**  _Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)._  For example, the above tree is serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`.\n\n[Question 2]: There is an `m x n` rectangular island that borders both the **Pacific Ocean** and **Atlantic Ocean**. The **Pacific Ocean** touches the island's left and top edges, and the **Atlantic Ocean** touches the island's right and bottom edges.  The island is partitioned into a grid of square cells. You are given an `m x n` integer matrix `heights` where `heights[r][c]` represents the **height above sea level** of the cell at coordinate `(r, c)`.  The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is **less than or equal to** the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.  Return _a **2D list** of grid coordinates_ `result` _where_ `result[i] = [ri, ci]` _denotes that rain water can flow from cell_ `(ri, ci)` _to **both** the Pacific and Atlantic oceans_.\n\n[Question 3]: Alice is texting Bob using her phone. The **mapping** of digits to letters is shown in the figure below.  In order to **add** a letter, Alice has to **press** the key of the corresponding digit `i` times, where `i` is the position of the letter in the key.  *   For example, to add the letter `'s'`, Alice has to press `'7'` four times. Similarly, to add the letter `'k'`, Alice has to press `'5'` twice. *   Note that the digits `'0'` and `'1'` do not map to any letters, so Alice **does not** use them.  However, due to an error in transmission, Bob did not receive Alice's text message but received a **string of pressed keys** instead.  *   For example, when Alice sent the message `\"bob \"`, Bob received the string `\"2266622 \"`.  Given a string `pressedKeys` representing the string received by Bob, return _the **total number of possible text messages** Alice could have sent_.  Since the answer may be very large, return it **modulo** `109 + 7`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a list of strings `words` and a string `target`, you need to find the minimum number of adjacent swaps required to arrange the strings in `words` such that they form the `target` string. Each string in `words` can only be used once, and the order of the strings in `words` must match the order of the strings in `target`. A swap is defined as exchanging the positions of two adjacent strings in the list. Please return the minimum number of swaps required to achieve the `target` string. If it is not possible to arrange the strings in `words` to form the `target` string, return `-1`.\n\nFor example, given `words = [\"abc\",\"def\",\"ghi\"]` and `target = \"defabcghi\"`, the minimum number of swaps required is `2`. First, swap \"abc\" and \"def\", then swap \"def\" and \"ghi\". Therefore, the answer is `2`."}], "metadata": {"prompt_id": "00000008", "row_id": 8, "seed_ids": ["1516", "417", "2266"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given the `root` of a binary tree and an integer `distance`. A pair of two different **leaf** nodes of a binary tree is said to be good if the length of **the shortest path** between them is less than or equal to `distance`.  Return _the number of good leaf node pairs_ in the tree.\n\n[Question 2]: Given an integer array `arr`, return `true` if there are three consecutive odd numbers in the array. Otherwise, return `false`.\n\n[Question 3]: There are `n` rings and each ring is either red, green, or blue. The rings are distributed **across ten rods** labeled from `0` to `9`.  You are given a string `rings` of length `2n` that describes the `n` rings that are placed onto the rods. Every two characters in `rings` forms a **color-position pair** that is used to describe each ring where:  *   The **first** character of the `ith` pair denotes the `ith` ring's **color** (`'R'`, `'G'`, `'B'`). *   The **second** character of the `ith` pair denotes the **rod** that the `ith` ring is placed on (`'0'` to `'9'`).  For example, `\"R3G2B1 \"` describes `n == 3` rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1.  Return _the number of rods that have **all three colors** of rings on them._\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a string `s` consisting of lowercase English letters and an integer `k`. A **substring** of `s` is considered **balanced** if the frequency of each letter in the substring is at most `k`. Return the **maximum length** of a balanced substring of `s`."}], "metadata": {"prompt_id": "00000009", "row_id": 9, "seed_ids": ["1530", "1550", "2103"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given an integer array `nums` and an integer `k`, find three non-overlapping subarrays of length `k` with maximum sum and return them.  Return the result as a list of indices representing the starting position of each interval (**0-indexed**). If there are multiple answers, return the lexicographically smallest one.\n\n[Question 2]: A string `originalText` is encoded using a **slanted transposition cipher** to a string `encodedText` with the help of a matrix having a **fixed number of rows** `rows`.  `originalText` is placed first in a top-left to bottom-right manner.  The blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of `originalText`. The arrow indicates the order in which the cells are filled. All empty cells are filled with `' '`. The number of columns is chosen such that the rightmost column will **not be empty** after filling in `originalText`.  `encodedText` is then formed by appending all characters of the matrix in a row-wise fashion.  The characters in the blue cells are appended first to `encodedText`, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed.  For example, if `originalText = \"cipher \"` and `rows = 3`, then we encode it in the following manner:  The blue arrows depict how `originalText` is placed in the matrix, and the red arrows denote the order in which `encodedText` is formed. In the above example, `encodedText = \"ch ie pr \"`.  Given the encoded string `encodedText` and number of rows `rows`, return _the original string_ `originalText`.  **Note:** `originalText` **does not** have any trailing spaces `' '`. The test cases are generated such that there is only one possible `originalText`.\n\n[Question 3]: Design a queue that supports `push` and `pop` operations in the front, middle, and back.  Implement the `FrontMiddleBack` class:  *   `FrontMiddleBack()` Initializes the queue. *   `void pushFront(int val)` Adds `val` to the **front** of the queue. *   `void pushMiddle(int val)` Adds `val` to the **middle** of the queue. *   `void pushBack(int val)` Adds `val` to the **back** of the queue. *   `int popFront()` Removes the **front** element of the queue and returns it. If the queue is empty, return `-1`. *   `int popMiddle()` Removes the **middle** element of the queue and returns it. If the queue is empty, return `-1`. *   `int popBack()` Removes the **back** element of the queue and returns it. If the queue is empty, return `-1`.  **Notice** that when there are **two** middle position choices, the operation is performed on the **frontmost** middle position choice. For example:  *   Pushing `6` into the middle of `[1, 2, 3, 4, 5]` results in `[1, 2, 6, 3, 4, 5]`. *   Popping the middle from `[1, 2, 3, 4, 5, 6]` returns `3` and results in `[1, 2, 4, 5, 6]`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Design a data structure to manage a collection of intervals with the following operations:\n\n- `addInterval(start, end)`: Add a new interval `[start, end]` to the collection.\n- `mergeOverlappingIntervals()`: Merge all overlapping intervals in the collection and return the merged intervals.\n- `removeInterval(start, end)`: Remove the interval `[start, end]` from the collection if it exists.\n- `getIntervals()`: Return the current collection of intervals.\n\nImplement the `IntervalManager` class:\n\n- `IntervalManager()`: Initializes the interval manager.\n- `void addInterval(int start, int end)`: Adds a new interval `[start, end]` to the collection. Ensure no duplicate intervals are added.\n- `List<int[]> mergeOverlappingIntervals()`: Merges all overlapping intervals in the collection and returns the merged intervals as a list of `[start, end]` pairs.\n- `void removeInterval(int start, int end)`: Removes the interval `[start, end]` from the collection if it exists.\n- `List<int[]> getIntervals()`: Returns the current collection of intervals as a list of `[start, end]` pairs.\n\n**Note**: Intervals are represented as `[start, end]` where `start` and `end` are inclusive. The intervals are sorted by their start time."}], "metadata": {"prompt_id": "00000010", "row_id": 10, "seed_ids": ["689", "2075", "1670"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given a string `s` containing lowercase English letters, and a matrix `shift`, where `shift[i] = [directioni, amounti]`:  *   `directioni` can be `0` (for left shift) or `1` (for right shift). *   `amounti` is the amount by which string `s` is to be shifted. *   A left shift by 1 means remove the first character of `s` and append it to the end. *   Similarly, a right shift by 1 means remove the last character of `s` and add it to the beginning.  Return the final string after all operations.\n\n[Question 2]: Given an integer array `arr` and a target value `target`, return the integer `value` such that when we change all the integers larger than `value` in the given array to be equal to `value`, the sum of the array gets as close as possible (in absolute difference) to `target`.  In case of a tie, return the minimum such integer.  Notice that the answer is not neccesarilly a number from `arr`.\n\n[Question 3]: The demons had captured the princess and imprisoned her in **the bottom-right corner** of a `dungeon`. The `dungeon` consists of `m x n` rooms laid out in a 2D grid. Our valiant knight was initially positioned in **the top-left room** and must fight his way through `dungeon` to rescue the princess.  The knight has an initial health point represented by a positive integer. If at any point his health point drops to `0` or below, he dies immediately.  Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).  To reach the princess as quickly as possible, the knight decides to move only **rightward** or **downward** in each step.  Return _the knight's minimum initial health so that he can rescue the princess_.  **Note** that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a matrix `grid` of size `m x n` containing non-negative integers, and a target value `target`, you need to determine if there exists a path from the top-left corner to the bottom-right corner such that the sum of the values along the path is exactly `target`. You can only move rightward or downward at any point in time. If such a path exists, return `true`; otherwise, return `false`."}], "metadata": {"prompt_id": "00000011", "row_id": 11, "seed_ids": ["1427", "1300", "174"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Implement the class `SubrectangleQueries` which receives a `rows x cols` rectangle as a matrix of integers in the constructor and supports two methods:  1. `updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)`  *   Updates all values with `newValue` in the subrectangle whose upper left coordinate is `(row1,col1)` and bottom right coordinate is `(row2,col2)`.  2. `getValue(int row, int col)`  *   Returns the current value of the coordinate `(row,col)` from the rectangle.\n\n[Question 2]: You are playing a game that has `n` levels numbered from `0` to `n - 1`. You are given a **0-indexed** integer array `damage` where `damage[i]` is the amount of health you will lose to complete the `ith` level.  You are also given an integer `armor`. You may use your armor ability **at most once** during the game on **any** level which will protect you from **at most** `armor` damage.  You must complete the levels in order and your health must be **greater than** `0` at all times to beat the game.  Return _the **minimum** health you need to start with to beat the game._\n\n[Question 3]: There is a **hidden** integer array `arr` that consists of `n` non-negative integers.  It was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = arr[i] XOR arr[i + 1]`. For example, if `arr = [1,0,2,1]`, then `encoded = [1,2,3]`.  You are given the `encoded` array. You are also given an integer `first`, that is the first element of `arr`, i.e. `arr[0]`.  Return _the original array_ `arr`. It can be proved that the answer exists and is unique.\n\n[Question 4]:"}, {"role": "assistant", "content": "Design a function `maxProfitWithTransactionFee` that calculates the maximum profit you can achieve from trading a stock given an array of daily prices and a transaction fee. You can complete as many buy-sell transactions as you like, but you need to pay the transaction fee for each transaction. A transaction consists of buying and then selling one share of the stock. You cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n### Function Signature\n```python\ndef maxProfitWithTransactionFee(prices: List[int], fee: int) -> int:\n    pass\n```\n\n### Constraints\n- `1 <= prices.length <= 5 * 10^4`\n- `0 <= prices[i] <= 10^5`\n- `0 <= fee < 10^5`"}], "metadata": {"prompt_id": "00000012", "row_id": 12, "seed_ids": ["1476", "2214", "1720"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given the `head` of a sorted linked list, _delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list_. Return _the linked list **sorted** as well_.\n\n[Question 2]: There are `n` points on a road you are driving your taxi on. The `n` points on the road are labeled from `1` to `n` in the direction you are going, and you want to drive from point `1` to point `n` to make money by picking up passengers. You cannot change the direction of the taxi.  The passengers are represented by a **0-indexed** 2D integer array `rides`, where `rides[i] = [starti, endi, tipi]` denotes the `ith` passenger requesting a ride from point `starti` to point `endi` who is willing to give a `tipi` dollar tip.  For **each** passenger `i` you pick up, you **earn** `endi - starti + tipi` dollars. You may only drive **at most one** passenger at a time.  Given `n` and `rides`, return _the **maximum** number of dollars you can earn by picking up the passengers optimally._  **Note:** You may drop off a passenger and pick up a different passenger at the same point.\n\n[Question 3]: Alice and Bob take turns playing a game, with **Alice starting first**.  There are `n` stones arranged in a row. On each player's turn, they can **remove** either the leftmost stone or the rightmost stone from the row and receive points equal to the **sum** of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.  Bob found that he will always lose this game (poor Bob, he always loses), so he decided to **minimize the score's difference**. Alice's goal is to **maximize the difference** in the score.  Given an array of integers `stones` where `stones[i]` represents the value of the `ith` stone **from the left**, return _the **difference** in Alice and Bob's score if they both play **optimally**._\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a binary tree, return the sum of all left leaves. A leaf is a node with no children, and a left leaf is a leaf that is the left child of its parent. If there are no left leaves, return 0."}], "metadata": {"prompt_id": "00000013", "row_id": 13, "seed_ids": ["82", "2008", "1690"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given a **0-indexed** integer array `arr` and an integer `k`. The array `arr` is circular. In other words, the first element of the array is the next element of the last element, and the last element of the array is the previous element of the first element.  You can do the following operation any number of times:  *   Pick any element from `arr` and increase or decrease it by `1`.  Return _the minimum number of operations such that the sum of each **subarray** of length_ `k` _is equal_.  A **subarray** is a contiguous part of the array.\n\n[Question 2]: The **letter value** of a letter is its position in the alphabet **starting from 0** (i.e. `'a' -> 0`, `'b' -> 1`, `'c' -> 2`, etc.).  The **numerical value** of some string of lowercase English letters `s` is the **concatenation** of the **letter values** of each letter in `s`, which is then **converted** into an integer.  *   For example, if `s = \"acb \"`, we concatenate each letter's letter value, resulting in `\"021 \"`. After converting it, we get `21`.  You are given three strings `firstWord`, `secondWord`, and `targetWord`, each consisting of lowercase English letters `'a'` through `'j'` **inclusive**.  Return `true` _if the **summation** of the **numerical values** of_ `firstWord` _and_ `secondWord` _equals the **numerical value** of_ `targetWord`_, or_ `false` _otherwise._\n\n[Question 3]: Given the `root` of a binary tree, return _the sum of values of nodes with an **even-valued grandparent**_. If there are no nodes with an **even-valued grandparent**, return `0`.  A **grandparent** of a node is the parent of its parent if it exists.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given the root of a binary tree, return the sum of values of all nodes that have an odd-valued parent. If there are no such nodes, return 0. A parent node is considered odd if its value is an odd number."}], "metadata": {"prompt_id": "00000014", "row_id": 14, "seed_ids": ["2607", "1880", "1315"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given an `m x n` matrix `grid` consisting of positive integers.  Perform the following operation until `grid` becomes empty:  *   Delete the element with the greatest value from each row. If multiple such elements exist, delete any of them. *   Add the maximum of deleted elements to the answer.  **Note** that the number of columns decreases by one after each operation.  Return _the answer after performing the operations described above_.\n\n[Question 2]: You are given a string `time` in the form of `hh:mm`, where some of the digits in the string are hidden (represented by `?`).  The valid times are those inclusively between `00:00` and `23:59`.  Return _the latest valid time you can get from_ `time` _by replacing the hidden_ _digits_.\n\n[Question 3]: You are given two strings `s` and `p` where `p` is a **subsequence** of `s`. You are also given a **distinct 0-indexed** integer array `removable` containing a subset of indices of `s` (`s` is also **0-indexed**).  You want to choose an integer `k` (`0 <= k <= removable.length`) such that, after removing `k` characters from `s` using the **first** `k` indices in `removable`, `p` is still a **subsequence** of `s`. More formally, you will mark the character at `s[removable[i]]` for each `0 <= i < k`, then remove all marked characters and check if `p` is still a subsequence.  Return _the **maximum**_ `k` _you can choose such that_ `p` _is still a **subsequence** of_ `s` _after the removals_.  A **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given two strings `text1` and `text2`, both consisting of lowercase English letters. Your task is to find the length of the longest **common subsequence** (LCS) between the two strings. Additionally, you are provided with a **mask** string `mask`, where each character is either `'0'` or `'1'`. You need to modify the LCS such that each character in the LCS is replaced by the corresponding character in `mask` if the corresponding position in `mask` is `'1'`, and kept as is if the corresponding position in `mask` is `'0'`. Return the modified LCS as a string.\n\n**Note**: A **common subsequence** is a sequence that can be derived from both strings by deleting some characters without changing the order of the remaining characters."}], "metadata": {"prompt_id": "00000015", "row_id": 15, "seed_ids": ["2500", "1736", "1898"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: There are `n` houses in a village. We want to supply water for all the houses by building wells and laying pipes.  For each house `i`, we can either build a well inside it directly with cost `wells[i - 1]` (note the `-1` due to **0-indexing**), or pipe in water from another well to it. The costs to lay pipes between houses are given by the array `pipes` where each `pipes[j] = [house1j, house2j, costj]` represents the cost to connect `house1j` and `house2j` together using a pipe. Connections are bidirectional, and there could be multiple valid connections between the same two houses with different costs.  Return _the minimum total cost to supply water to all houses_.\n\n[Question 2]: There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `ai` first if you want to take course `bi`.  *   For example, the pair `[0, 1]` indicates that you have to take course `0` before you can take course `1`.  Prerequisites can also be **indirect**. If course `a` is a prerequisite of course `b`, and course `b` is a prerequisite of course `c`, then course `a` is a prerequisite of course `c`.  You are also given an array `queries` where `queries[j] = [uj, vj]`. For the `jth` query, you should answer whether course `uj` is a prerequisite of course `vj` or not.  Return _a boolean array_ `answer`_, where_ `answer[j]` _is the answer to the_ `jth` _query._\n\n[Question 3]: You are given a binary matrix `matrix` of size `m x n`, and you are allowed to rearrange the **columns** of the `matrix` in any order.  Return _the area of the largest submatrix within_ `matrix` _where **every** element of the submatrix is_ `1` _after reordering the columns optimally._\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a grid of size `m x n` where each cell can either be `0` (land) or `1` (water). You can change any number of `0`s to `1`s to form one or more islands. An island is a maximal 4-directionally connected group of `1`s. You want to maximize the number of islands in the grid. What is the maximum number of islands you can form?"}], "metadata": {"prompt_id": "00000016", "row_id": 16, "seed_ids": ["1168", "1462", "1727"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.  You must write an algorithm with `O(log n)` runtime complexity.\n\n[Question 2]: Given an integer array `nums`, return _the **greatest common divisor** of the smallest number and largest number in_ `nums`.  The **greatest common divisor** of two numbers is the largest positive integer that evenly divides both numbers.\n\n[Question 3]: There are `n` kids with candies. You are given an integer array `candies`, where each `candies[i]` represents the number of candies the `ith` kid has, and an integer `extraCandies`, denoting the number of extra candies that you have.  Return _a boolean array_ `result` _of length_ `n`_, where_ `result[i]` _is_ `true` _if, after giving the_ `ith` _kid all the_ `extraCandies`_, they will have the **greatest** number of candies among all the kids__, or_ `false` _otherwise_.  Note that **multiple** kids can have the **greatest** number of candies.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given an array of integers `nums` and an integer `k`, return the maximum number of consecutive 1's in the array if you can flip at most `k` 0's to 1's. The array length is at most 100,000, and `k` is between 0 and the length of the array."}], "metadata": {"prompt_id": "00000017", "row_id": 17, "seed_ids": ["35", "1979", "1431"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given a **0-indexed** `m x n` binary matrix `grid`.  A **0-indexed** `m x n` difference matrix `diff` is created with the following procedure:  *   Let the number of ones in the `ith` row be `onesRowi`. *   Let the number of ones in the `jth` column be `onesColj`. *   Let the number of zeros in the `ith` row be `zerosRowi`. *   Let the number of zeros in the `jth` column be `zerosColj`. *   `diff[i][j] = onesRowi + onesColj - zerosRowi - zerosColj`  Return _the difference matrix_ `diff`.\n\n[Question 2]: There is an undirected tree with `n` nodes labeled from `0` to `n - 1`.  You are given a **0-indexed** integer array `nums` of length `n` where `nums[i]` represents the value of the `ith` node. You are also given a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.  You are allowed to **delete** some edges, splitting the tree into multiple connected components. Let the **value** of a component be the sum of **all** `nums[i]` for which node `i` is in the component.  Return _the **maximum** number of edges you can delete, such that every connected component in the tree has the same value._\n\n[Question 3]: Given an integer array `nums`, your goal is to make all elements in `nums` equal. To complete one operation, follow these steps:  1.  Find the **largest** value in `nums`. Let its index be `i` (**0-indexed**) and its value be `largest`. If there are multiple elements with the largest value, pick the smallest `i`. 2.  Find the **next largest** value in `nums` **strictly smaller** than `largest`. Let its value be `nextLargest`. 3.  Reduce `nums[i]` to `nextLargest`.  Return _the number of operations to make all elements in_ `nums` _equal_.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a **0-indexed** integer array `nums` of length `n`. You are allowed to perform the following operation on the array any number of times:\n\n- Choose an index `i` such that `0 <= i < n` and set `nums[i]` to `0`.\n\nYou are also given a **0-indexed** array `costs` of the same length, where `costs[i]` represents the cost of setting `nums[i]` to `0`. \n\nYour goal is to make all elements in `nums` equal to `0` with the minimum possible cost. \n\nReturn _the minimum cost to achieve this_."}], "metadata": {"prompt_id": "00000018", "row_id": 18, "seed_ids": ["2482", "2440", "1887"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: There are `n` employees, each with a unique id from `0` to `n - 1`.  You are given a 2D integer array `logs` where `logs[i] = [idi, leaveTimei]` where:  *   `idi` is the id of the employee that worked on the `ith` task, and *   `leaveTimei` is the time at which the employee finished the `ith` task. All the values `leaveTimei` are **unique**.  Note that the `ith` task starts the moment right after the `(i - 1)th` task ends, and the `0th` task starts at time `0`.  Return _the id of the employee that worked the task with the longest time._ If there is a tie between two or more employees, return _the **smallest** id among them_.\n\n[Question 2]: Given two **0-indexed** integer arrays `nums1` and `nums2`, return _a list_ `answer` _of size_ `2` _where:_  *   `answer[0]` _is a list of all **distinct** integers in_ `nums1` _which are **not** present in_ `nums2`_._ *   `answer[1]` _is a list of all **distinct** integers in_ `nums2` _which are **not** present in_ `nums1`.  **Note** that the integers in the lists may be returned in **any** order.\n\n[Question 3]: There is a rectangular brick wall in front of you with `n` rows of bricks. The `ith` row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.  Draw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.  Given the 2D array `wall` that contains the information about the wall, return _the minimum number of crossed bricks after drawing such a vertical line_.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically smallest substring that can be formed by rearranging any number of characters within the string. A substring is defined as a contiguous sequence of characters within a string.\n\nReturn the lexicographically smallest substring found. If the string is empty or consists of a single character, return the string itself."}], "metadata": {"prompt_id": "00000019", "row_id": 19, "seed_ids": ["2432", "2215", "554"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given an `m x n` binary `grid`, where each `1` represents a brick and `0` represents an empty space. A brick is **stable** if:  *   It is directly connected to the top of the grid, or *   At least one other brick in its four adjacent cells is **stable**.  You are also given an array `hits`, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location `hits[i] = (rowi, coli)`. The brick on that location (if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will **fall**. Once a brick falls, it is **immediately** erased from the `grid` (i.e., it does not land on other stable bricks).  Return _an array_ `result`_, where each_ `result[i]` _is the number of bricks that will **fall** after the_ `ith` _erasure is applied._  **Note** that an erasure may refer to a location with no brick, and if it does, no bricks drop.\n\n[Question 2]: Given a string `s` of zeros and ones, _return the maximum score after splitting the string into two **non-empty** substrings_ (i.e. **left** substring and **right** substring).  The score after splitting a string is the number of **zeros** in the **left** substring plus the number of **ones** in the **right** substring.\n\n[Question 3]: You own a **Goal Parser** that can interpret a string `command`. The `command` consists of an alphabet of `\"G \"`, `\"() \"` and/or `\"(al) \"` in some order. The Goal Parser will interpret `\"G \"` as the string `\"G \"`, `\"() \"` as the string `\"o \"`, and `\"(al) \"` as the string `\"al \"`. The interpreted strings are then concatenated in the original order.  Given the string `command`, return _the **Goal Parser**'s interpretation of_ `command`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a binary string `s` (a string consisting only of '0's and '1's), you are allowed to perform the following operation any number of times: choose any two adjacent characters and flip them (i.e., change '0' to '1' and '1' to '0'). Your goal is to make the string as long as possible such that it does not contain the substring \"010\". Return the maximum length of the string you can achieve.\n\n**Example:**\n\n```python\nInput: s = \"110\"\nOutput: 3\nExplanation: We can flip the last two characters to get \"111\", which does not contain \"010\" as a substring.\n```\n\n**Constraints:**\n\n- `1 <= s.length <= 1000`\n- `s` consists only of '0's and '1's."}], "metadata": {"prompt_id": "00000020", "row_id": 20, "seed_ids": ["803", "1422", "1678"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given the `head` of a linked list, rotate the list to the right by `k` places.\n\n[Question 2]: Given an `m x n` grid of characters `board` and a string `word`, return `true` _if_ `word` _exists in the grid_.  The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n\n[Question 3]: Given the `root` of a binary tree and two integers `val` and `depth`, add a row of nodes with value `val` at the given depth `depth`.  Note that the `root` node is at depth `1`.  The adding rule is:  *   Given the integer `depth`, for each not null tree node `cur` at the depth `depth - 1`, create two tree nodes with value `val` as `cur`'s left subtree root and right subtree root. *   `cur`'s original left subtree should be the left subtree of the new left subtree root. *   `cur`'s original right subtree should be the right subtree of the new right subtree root. *   If `depth == 1` that means there is no depth `depth - 1` at all, then create a tree node with value `val` as the new root of the whole original tree, and the original tree is the new root's left subtree.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a binary search tree (BST) and an integer `k`, write a function to find the `k`th smallest element in the tree. Ensure your solution does not modify the tree."}], "metadata": {"prompt_id": "00000021", "row_id": 21, "seed_ids": ["61", "79", "623"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given two integers `left` and `right` that represent the range `[left, right]`, return _the bitwise AND of all numbers in this range, inclusive_.\n\n[Question 2]: Given the `root` of a binary tree, return the leftmost value in the last row of the tree.\n\n[Question 3]: Given a string `s`, return `true` _if_ `s` _is a **good** string, or_ `false` _otherwise_.  A string `s` is **good** if **all** the characters that appear in `s` have the **same** number of occurrences (i.e., the same frequency).\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s` consisting of lowercase English letters, return the **length** of the longest **palindromic** substring in `s`. A **palindromic** string is a string that reads the same backward as forward."}], "metadata": {"prompt_id": "00000022", "row_id": 22, "seed_ids": ["201", "513", "1941"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given an array `nums` sorted in **non-decreasing** order, return _the maximum between the number of positive integers and the number of negative integers._  *   In other words, if the number of positive integers in `nums` is `pos` and the number of negative integers is `neg`, then return the maximum of `pos` and `neg`.  **Note** that `0` is neither positive nor negative.\n\n[Question 2]: Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.  Implement the `MinStack` class:  *   `MinStack()` initializes the stack object. *   `void push(int val)` pushes the element `val` onto the stack. *   `void pop()` removes the element on the top of the stack. *   `int top()` gets the top element of the stack. *   `int getMin()` retrieves the minimum element in the stack.  You must implement a solution with `O(1)` time complexity for each function.\n\n[Question 3]: Given two nodes of a binary tree `p` and `q`, return _their lowest common ancestor (LCA)_.  Each node will have a reference to its parent node. The definition for `Node` is below:  class Node { public int val; public Node left; public Node right; public Node parent; }  According to the **[definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor)**: \"The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow **a node to be a descendant of itself**). \"\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a binary search tree (BST) and a node value `target`, return the value of the closest leaf node to the target. A leaf node is a node with no children. The distance between two nodes is defined as the number of edges on the path connecting them. If there are multiple leaf nodes equally close to the target, return the value of any one of them."}], "metadata": {"prompt_id": "00000023", "row_id": 23, "seed_ids": ["2529", "155", "1650"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given the `head` of a linked list with `n` nodes.  For each node in the list, find the value of the **next greater node**. That is, for each node, find the value of the first node that is next to it and has a **strictly larger** value than it.  Return an integer array `answer` where `answer[i]` is the value of the next greater node of the `ith` node (**1-indexed**). If the `ith` node does not have a next greater node, set `answer[i] = 0`.\n\n[Question 2]: You are given a string `s` and array `queries` where `queries[i] = [lefti, righti, ki]`. We may rearrange the substring `s[lefti...righti]` for each query and then choose up to `ki` of them to replace with any lowercase English letter.  If the substring is possible to be a palindrome string after the operations above, the result of the query is `true`. Otherwise, the result is `false`.  Return a boolean array `answer` where `answer[i]` is the result of the `ith` query `queries[i]`.  Note that each letter is counted individually for replacement, so if, for example `s[lefti...righti] = \"aaa \"`, and `ki = 2`, we can only replace two of the letters. Also, note that no query modifies the initial string `s`.\n\n[Question 3]: Given the `head` of a linked list and an integer `val`, remove all the nodes of the linked list that has `Node.val == val`, and return _the new head_.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a binary search tree (BST) and an integer `k`. Your task is to find the `k`-th smallest element in the BST. The BST is not necessarily balanced. Return the value of the `k`-th smallest element.\n\nFor example, given the BST with the following structure:\n\n```\n    5\n   / \\\n  3   6\n / \\\n2   4\n```\n\nIf `k = 3`, the output should be `3` because the elements in ascending order are `[2, 3, 4, 5, 6]`, and the 3rd smallest element is `3`.\n\nReturn the value of the `k`-th smallest element in the BST."}], "metadata": {"prompt_id": "00000024", "row_id": 24, "seed_ids": ["1019", "1177", "203"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given two strings `s` and `p`, return _an array of all the start indices of_ `p`_'s anagrams in_ `s`. You may return the answer in **any order**.  An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n[Question 2]: A **swap** is defined as taking two **distinct** positions in an array and swapping the values in them.  A **circular** array is defined as an array where we consider the **first** element and the **last** element to be **adjacent**.  Given a **binary** **circular** array `nums`, return _the minimum number of swaps required to group all_ `1`_'s present in the array together at **any location**_.\n\n[Question 3]: Given an array `intervals` where `intervals[i] = [li, ri]` represent the interval `[li, ri)`, remove all intervals that are covered by another interval in the list.  The interval `[a, b)` is covered by the interval `[c, d)` if and only if `c <= a` and `b <= d`.  Return _the number of remaining intervals_.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given an array of integers `nums` and a positive integer `k`, return the maximum sum of a non-empty subarray of size `k` that contains at least one negative number. If there is no such subarray, return 0. A subarray is a contiguous part of an array."}], "metadata": {"prompt_id": "00000025", "row_id": 25, "seed_ids": ["438", "2134", "1288"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given a binary array `nums` containing only the integers `0` and `1`. Return _the number of **subarrays** in nums that have **more**_ `1`'_s than_ `0`_'s. Since the answer may be very large, return it **modulo**_ `109 + 7`.  A **subarray** is a contiguous sequence of elements within an array.\n\n[Question 2]: You are given an array of integers `distance`.  You start at the point `(0, 0)` on an **X-Y plane,** and you move `distance[0]` meters to the north, then `distance[1]` meters to the west, `distance[2]` meters to the south, `distance[3]` meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.  Return `true` _if your path crosses itself or_ `false` _if it does not_.\n\n[Question 3]: You are given an array `nums` that consists of non-negative integers. Let us define `rev(x)` as the reverse of the non-negative integer `x`. For example, `rev(123) = 321`, and `rev(120) = 21`. A pair of indices `(i, j)` is **nice** if it satisfies all of the following conditions:  *   `0 <= i < j < nums.length` *   `nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])`  Return _the number of nice pairs of indices_. Since that number can be too large, return it **modulo** `109 + 7`.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given an array `nums` consisting of positive integers. A **triangle** is valid if the sum of its two shorter sides is greater than the length of the longest side. Return the number of **unique** triangles that can be formed from the elements of `nums`. Since the answer may be very large, return it **modulo** `109 + 7`. Two triangles are considered **unique** if at least one of their sides has different lengths."}], "metadata": {"prompt_id": "00000026", "row_id": 26, "seed_ids": ["2031", "335", "1814"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: An **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`.  Given an integer `n`, return `true` _if_ `n` _is an **ugly number**_.\n\n[Question 2]: We are given an array `asteroids` of integers representing asteroids in a row.  For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.  Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.\n\n[Question 3]: Given an integer `n`, return _the number of trailing zeroes in_ `n!`.  Note that `n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a list of strings `words` and a string `target`, return the number of strings in `words` that contain the `target` as a substring. A substring is a contiguous sequence of characters within a string."}], "metadata": {"prompt_id": "00000027", "row_id": 27, "seed_ids": ["263", "735", "172"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given an array `nums` with `n` integers, your task is to check if it could become non-decreasing by modifying **at most one element**.  We define an array is non-decreasing if `nums[i] <= nums[i + 1]` holds for every `i` (**0-based**) such that (`0 <= i <= n - 2`).\n\n[Question 2]: A string `s` is called **good** if there are no two different characters in `s` that have the same **frequency**.  Given a string `s`, return _the **minimum** number of characters you need to delete to make_ `s` _**good**._  The **frequency** of a character in a string is the number of times it appears in the string. For example, in the string `\"aab \"`, the **frequency** of `'a'` is `2`, while the **frequency** of `'b'` is `1`.\n\n[Question 3]: You are given an `n x n` `grid` where you have placed some `1 x 1 x 1` cubes. Each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of cell `(i, j)`.  After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.  Return _the total surface area of the resulting shapes_.  **Note:** The bottom face of each shape counts toward its surface area.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a binary string `s`, your task is to find the **minimum** number of swaps required to group all the `1`'s present in the string into a contiguous (consecutive) substring. In one swap, you can choose any two indices `i` and `j` (0-indexed) and swap the characters at these indices. Return the **minimum** number of swaps required to achieve this."}], "metadata": {"prompt_id": "00000028", "row_id": 28, "seed_ids": ["665", "1647", "892"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given an integer array `nums` and an integer `k`. You can partition the array into **at most** `k` non-empty adjacent subarrays. The **score** of a partition is the sum of the averages of each subarray.  Note that the partition must use every integer in `nums`, and that the score is not necessarily an integer.  Return _the maximum **score** you can achieve of all the possible partitions_. Answers within `10-6` of the actual answer will be accepted.\n\n[Question 2]: You are given four integers, `m`, `n`, `introvertsCount`, and `extrovertsCount`. You have an `m x n` grid, and there are two types of people: introverts and extroverts. There are `introvertsCount` introverts and `extrovertsCount` extroverts.  You should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you **do not** have to have all the people living in the grid.  The **happiness** of each person is calculated as follows:  *   Introverts **start** with `120` happiness and **lose** `30` happiness for each neighbor (introvert or extrovert). *   Extroverts **start** with `40` happiness and **gain** `20` happiness for each neighbor (introvert or extrovert).  Neighbors live in the directly adjacent cells north, east, south, and west of a person's cell.  The **grid happiness** is the **sum** of each person's happiness. Return _the **maximum possible grid happiness**._\n\n[Question 3]: You are given a **0-indexed** integer array `nums`. For each index `i` (`1 <= i <= nums.length - 2`) the **beauty** of `nums[i]` equals:  *   `2`, if `nums[j] < nums[i] < nums[k]`, for **all** `0 <= j < i` and for **all** `i < k <= nums.length - 1`. *   `1`, if `nums[i - 1] < nums[i] < nums[i + 1]`, and the previous condition is not satisfied. *   `0`, if none of the previous conditions holds.  Return _the **sum of beauty** of all_ `nums[i]` _where_ `1 <= i <= nums.length - 2`.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a binary string `s` and an integer `k`. A **substring** of `s` is considered **balanced** if the number of `0`s and `1`s in it are equal. You can perform the following operation any number of times: choose any index `i` in the string `s` and flip the character at `i` (i.e., change `'0'` to `'1'` and vice versa). Your task is to find the length of the **longest balanced substring** you can obtain by performing the above operation **at most** `k` times. Return the length of this longest balanced substring.\n\nFor example, if `s = \"1100011\"` and `k = 2`, you can flip the characters at indices `4` and `6` to get `\"1101111\"`, which contains a balanced substring of length `7`."}], "metadata": {"prompt_id": "00000029", "row_id": 29, "seed_ids": ["813", "1659", "2012"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given a string `text`, you want to use the characters of `text` to form as many instances of the word **\"balloon \"** as possible.  You can use each character in `text` **at most once**. Return the maximum number of instances that can be formed.\n\n[Question 2]: Given a string `s` which represents an expression, _evaluate this expression and return its value_.  The integer division should truncate toward zero.  You may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`.  **Note:** You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.\n\n[Question 3]: Given an array `nums` of integers and integer `k`, return the maximum `sum` such that there exists `i < j` with `nums[i] + nums[j] = sum` and `sum < k`. If no `i`, `j` exist satisfying this equation, return `-1`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `text`, you want to use the characters of `text` to form as many instances of the word **\"racecar \"** as possible.  You can use each character in `text` **at most once**. Return the maximum number of instances that can be formed."}], "metadata": {"prompt_id": "00000030", "row_id": 30, "seed_ids": ["1189", "227", "1099"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You have `n` binary tree nodes numbered from `0` to `n - 1` where node `i` has two children `leftChild[i]` and `rightChild[i]`, return `true` if and only if **all** the given nodes form **exactly one** valid binary tree.  If node `i` has no left child then `leftChild[i]` will equal `-1`, similarly for the right child.  Note that the nodes have no values and that we only use the node numbers in this problem.\n\n[Question 2]: Given a binary array `nums`, return _the maximum number of consecutive_ `1`_'s in the array_.\n\n[Question 3]: A newly designed keypad was tested, where a tester pressed a sequence of `n` keys, one at a time.  You are given a string `keysPressed` of length `n`, where `keysPressed[i]` was the `ith` key pressed in the testing sequence, and a sorted list `releaseTimes`, where `releaseTimes[i]` was the time the `ith` key was released. Both arrays are **0-indexed**. The `0th` key was pressed at the time `0`, and every subsequent key was pressed at the **exact** time the previous key was released.  The tester wants to know the key of the keypress that had the **longest duration**. The `ith` keypress had a **duration** of `releaseTimes[i] - releaseTimes[i - 1]`, and the `0th` keypress had a duration of `releaseTimes[0]`.  Note that the same key could have been pressed multiple times during the test, and these multiple presses of the same key **may not** have had the same **duration**.  _Return the key of the keypress that had the **longest duration**. If there are multiple such keypresses, return the lexicographically largest key of the keypresses._\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s` consisting of lowercase English letters, you are tasked with finding the lexicographically largest substring that is a palindrome. A palindrome is a string that reads the same backward as forward. If there are multiple palindromic substrings of the same length, return the one that is lexicographically largest. A substring is any contiguous sequence of characters within a string."}], "metadata": {"prompt_id": "00000031", "row_id": 31, "seed_ids": ["1361", "485", "1629"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given an integer array `nums` sorted in **non-decreasing** order.  Build and return _an integer array_ `result` _with the same length as_ `nums` _such that_ `result[i]` _is equal to the **summation of absolute differences** between_ `nums[i]` _and all the other elements in the array._  In other words, `result[i]` is equal to `sum(|nums[i]-nums[j]|)` where `0 <= j < nums.length` and `j != i` (**0-indexed**).\n\n[Question 2]: There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling **up, down, left or right**, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction. There is also a hole in this maze. The ball will drop into the hole if it rolls onto the hole.  Given the `m x n` `maze`, the ball's position `ball` and the hole's position `hole`, where `ball = [ballrow, ballcol]` and `hole = [holerow, holecol]`, return _a string_ `instructions` _of all the instructions that the ball should follow to drop in the hole with the **shortest distance** possible_. If there are multiple valid instructions, return the **lexicographically minimum** one. If the ball can't drop in the hole, return `\"impossible \"`.  If there is a way for the ball to drop in the hole, the answer `instructions` should contain the characters `'u'` (i.e., up), `'d'` (i.e., down), `'l'` (i.e., left), and `'r'` (i.e., right).  The **distance** is the number of **empty spaces** traveled by the ball from the start position (excluded) to the destination (included).  You may assume that **the borders of the maze are all walls** (see examples).\n\n[Question 3]: You are given an integer array `nums`. A subsequence of `nums` is called a **square streak** if:  *   The length of the subsequence is at least `2`, and *   **after** sorting the subsequence, each element (except the first element) is the **square** of the previous number.  Return _the length of the **longest square streak** in_ `nums`_, or return_ `-1` _if there is no **square streak**._  A **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given an integer array `nums` sorted in **non-decreasing** order. Define a function `f(x)` for each element `x` in `nums` such that `f(x)` is the number of elements in `nums` that are strictly less than `x`. Build and return an integer array `result` with the same length as `nums` such that `result[i]` is equal to the summation of `f(nums[i])` for all `i` in the array. In other words, `result[i]` is equal to `sum(f(nums[i]))` where `0 <= j < nums.length` and `j != i` (0-indexed)."}], "metadata": {"prompt_id": "00000032", "row_id": 32, "seed_ids": ["1685", "499", "2501"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: There are `n` children standing in a line. Each child is assigned a rating value given in the integer array `ratings`.  You are giving candies to these children subjected to the following requirements:  *   Each child must have at least one candy. *   Children with a higher rating get more candies than their neighbors.  Return _the minimum number of candies you need to have to distribute the candies to the children_.\n\n[Question 2]: You are given a non-negative integer array `nums`. In one operation, you must:  *   Choose a positive integer `x` such that `x` is less than or equal to the **smallest non-zero** element in `nums`. *   Subtract `x` from every **positive** element in `nums`.  Return _the **minimum** number of operations to make every element in_ `nums` _equal to_ `0`.\n\n[Question 3]: You are given an array `pairs`, where `pairs[i] = [xi, yi]`, and:  *   There are no duplicates. *   `xi < yi`  Let `ways` be the number of rooted trees that satisfy the following conditions:  *   The tree consists of nodes whose values appeared in `pairs`. *   A pair `[xi, yi]` exists in `pairs` **if and only if** `xi` is an ancestor of `yi` or `yi` is an ancestor of `xi`. *   **Note:** the tree does not have to be a binary tree.  Two ways are considered to be different if there is at least one node that has different parents in both ways.  Return:  *   `0` if `ways == 0` *   `1` if `ways == 1` *   `2` if `ways > 1`  A **rooted tree** is a tree that has a single root node, and all edges are oriented to be outgoing from the root.  An **ancestor** of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a matrix `grid` of size `m x n` containing only `0`s and `1`s, where `1` represents land and `0` represents water, a **landlocked area** is a region of land completely surrounded by water, with no connection to the boundary of the grid. You are allowed to fill any number of `0`s (turning them into `1`s) to form additional land. The goal is to connect at least one landlocked area to the boundary to make it non-landlocked. Return the minimum number of `0`s you need to flip to achieve this. If it is impossible to make any landlocked area non-landlocked, return `-1`.\n\n**Example 1:**\n\nInput: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\n\nOutput: 2\n\nExplanation: We can flip two `0`s at positions (1, 1) and (2, 2) to make the landlocked area non-landlocked.\n\n**Example 2:**\n\nInput: grid = [[0,0,0],[0,1,1],[0,1,0]]\n\nOutput: -1\n\nExplanation: It is impossible to make any landlocked area non-landlocked."}], "metadata": {"prompt_id": "00000033", "row_id": 33, "seed_ids": ["135", "2357", "1719"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given a string of digits `s`, return _the number of **palindromic subsequences** of_ `s` _having length_ `5`. Since the answer may be very large, return it **modulo** `109 + 7`.  **Note:**  *   A string is **palindromic** if it reads the same forward and backward. *   A **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n[Question 2]: Given a `pattern` and a string `s`, return `true` _if_ `s` _**matches** the_ `pattern`_._  A string `s` **matches** a `pattern` if there is some **bijective mapping** of single characters to strings such that if each character in `pattern` is replaced by the string it maps to, then the resulting string is `s`. A **bijective mapping** means that no two characters map to the same string, and no character maps to two different strings.\n\n[Question 3]: We can shift a string by shifting each of its letters to its successive letter.  *   For example, `\"abc \"` can be shifted to be `\"bcd \"`.  We can keep shifting the string to form a sequence.  *   For example, we can keep shifting `\"abc \"` to form the sequence: `\"abc \" -> \"bcd \" -> ... -> \"xyz \"`.  Given an array of strings `strings`, group all `strings[i]` that belong to the same shifting sequence. You may return the answer in **any order**.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s`, return the number of distinct **subsequences** of `s` that are palindromic. Since the answer may be very large, return it **modulo** `10^9 + 7`. Note: A string is considered a **subsequence** of another string if it can be derived by deleting some or no characters from the other string without changing the order of the remaining characters."}], "metadata": {"prompt_id": "00000034", "row_id": 34, "seed_ids": ["2484", "291", "249"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given the `root` of a binary tree, calculate the **vertical order traversal** of the binary tree.  For each node at position `(row, col)`, its left and right children will be at positions `(row + 1, col - 1)` and `(row + 1, col + 1)` respectively. The root of the tree is at `(0, 0)`.  The **vertical order traversal** of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.  Return _the **vertical order traversal** of the binary tree_.\n\n[Question 2]: You are playing a solitaire game with **three piles** of stones of sizes `a`\u200b\u200b\u200b\u200b\u200b\u200b, `b`,\u200b\u200b\u200b\u200b\u200b\u200b and `c`\u200b\u200b\u200b\u200b\u200b\u200b respectively. Each turn you choose two **different non-empty** piles, take one stone from each, and add `1` point to your score. The game stops when there are **fewer than two non-empty** piles (meaning there are no more available moves).  Given three integers `a`\u200b\u200b\u200b\u200b\u200b, `b`,\u200b\u200b\u200b\u200b\u200b and `c`\u200b\u200b\u200b\u200b\u200b, return _the_ **_maximum_** _**score** you can get._\n\n[Question 3]: You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `ith` line are `(i, 0)` and `(i, height[i])`.  Find two lines that together with the x-axis form a container, such that the container contains the most water.  Return _the maximum amount of water a container can store_.  **Notice** that you may not slant the container.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given an integer array `nums` of length `n`, you are asked to perform the following operation exactly `k` times: choose an index `i` (0-indexed) from the array and increment `nums[i]` by 1. After performing these operations, find the maximum possible **GCD** (Greatest Common Divisor) of the array `nums`.\n\nReturn the maximum GCD you can achieve."}], "metadata": {"prompt_id": "00000035", "row_id": 35, "seed_ids": ["987", "1753", "11"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given an `m x n` `grid` where each cell can have one of three values:  *   `0` representing an empty cell, *   `1` representing a fresh orange, or *   `2` representing a rotten orange.  Every minute, any fresh orange that is **4-directionally adjacent** to a rotten orange becomes rotten.  Return _the minimum number of minutes that must elapse until no cell has a fresh orange_. If _this is impossible, return_ `-1`.\n\n[Question 2]: You are given an integer array `cost` where `cost[i]` is the cost of `ith` step on a staircase. Once you pay the cost, you can either climb one or two steps.  You can either start from the step with index `0`, or the step with index `1`.  Return _the minimum cost to reach the top of the floor_.\n\n[Question 3]: Given the strings `s1` and `s2` of size `n` and the string `evil`, return _the number of **good** strings_.  A **good** string has size `n`, it is alphabetically greater than or equal to `s1`, it is alphabetically smaller than or equal to `s2`, and it does not contain the string `evil` as a substring. Since the answer can be a huge number, return this **modulo** `109 + 7`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a binary string `s` (a string consisting only of '0's and '1's), you need to perform a series of operations to make the string alternating. An alternating string is one where no two adjacent characters are the same. You can perform the following operation any number of times: choose any index `i` (1-indexed) and flip the character at `s[i]` (change '0' to '1' or '1' to '0'). \n\nReturn the minimum number of operations required to make the string alternating. If it is impossible to make the string alternating, return `-1`."}], "metadata": {"prompt_id": "00000036", "row_id": 36, "seed_ids": ["994", "746", "1397"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given a `m x n` binary matrix `mat`. In one step, you can choose one cell and flip it and all the four neighbors of it if they exist (Flip is changing `1` to `0` and `0` to `1`). A pair of cells are called neighbors if they share one edge.  Return the _minimum number of steps_ required to convert `mat` to a zero matrix or `-1` if you cannot.  A **binary matrix** is a matrix with all cells equal to `0` or `1` only.  A **zero matrix** is a matrix with all cells equal to `0`.\n\n[Question 2]: You are given an integer `num.` **Rearrange** the digits of `num` such that its value is **minimized** and it does not contain **any** leading zeros.  Return _the rearranged number with minimal value_.  Note that the sign of the number does not change after rearranging the digits.\n\n[Question 3]: Given an array of integers `nums`, you start with an initial **positive** value _startValue__._  In each iteration, you calculate the step by step sum of _startValue_ plus elements in `nums` (from left to right).  Return the minimum **positive** value of _startValue_ such that the step by step sum is never less than 1.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a list of `n` intervals `intervals`, where each interval is represented as `[start, end]`, find the minimum number of intervals you need to remove so that the remaining intervals do not overlap. An interval `A` overlaps with another interval `B` if `A` and `B` have at least one common point. Return the minimum number of intervals to remove."}], "metadata": {"prompt_id": "00000037", "row_id": 37, "seed_ids": ["1284", "2165", "1413"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: An **alphabetical continuous string** is a string consisting of consecutive letters in the alphabet. In other words, it is any substring of the string `\"abcdefghijklmnopqrstuvwxyz \"`.  *   For example, `\"abc \"` is an alphabetical continuous string, while `\"acb \"` and `\"za \"` are not.  Given a string `s` consisting of lowercase letters only, return the _length of the **longest** alphabetical continuous substring._\n\n[Question 2]: A **bit flip** of a number `x` is choosing a bit in the binary representation of `x` and **flipping** it from either `0` to `1` or `1` to `0`.  *   For example, for `x = 7`, the binary representation is `111` and we may choose any bit (including any leading zeros not shown) and flip it. We can flip the first bit from the right to get `110`, flip the second bit from the right to get `101`, flip the fifth bit from the right (a leading zero) to get `10111`, etc.  Given two integers `start` and `goal`, return _the **minimum** number of **bit flips** to convert_ `start` _to_ `goal`.\n\n[Question 3]: Given an integer array `nums` of length `n`, you want to create an array `ans` of length `2n` where `ans[i] == nums[i]` and `ans[i + n] == nums[i]` for `0 <= i < n` (**0-indexed**).  Specifically, `ans` is the **concatenation** of two `nums` arrays.  Return _the array_ `ans`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s` consisting of lowercase letters only, return the _length of the **longest** substring that can be obtained by replacing at most one character in `s` with any other character, such that the resulting substring is an alphabetical continuous string._\n\nFor example, in the string `\"abcbdefg\"`, you can replace the `c` with `a` to get `\"aabdefg\"`, which is an alphabetical continuous string of length 7."}], "metadata": {"prompt_id": "00000038", "row_id": 38, "seed_ids": ["2414", "2220", "1929"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given a string `s`, return _the number of segments in the string_.  A **segment** is defined to be a contiguous sequence of **non-space characters**.\n\n[Question 2]: You are given two strings of the same length `s1` and `s2` and a string `baseStr`.  We say `s1[i]` and `s2[i]` are equivalent characters.  *   For example, if `s1 = \"abc \"` and `s2 = \"cde \"`, then we have `'a' == 'c'`, `'b' == 'd'`, and `'c' == 'e'`.  Equivalent characters follow the usual rules of any equivalence relation:  *   **Reflexivity:** `'a' == 'a'`. *   **Symmetry:** `'a' == 'b'` implies `'b' == 'a'`. *   **Transitivity:** `'a' == 'b'` and `'b' == 'c'` implies `'a' == 'c'`.  For example, given the equivalency information from `s1 = \"abc \"` and `s2 = \"cde \"`, `\"acd \"` and `\"aab \"` are equivalent strings of `baseStr = \"eed \"`, and `\"aab \"` is the lexicographically smallest equivalent string of `baseStr`.  Return _the lexicographically smallest equivalent string of_ `baseStr` _by using the equivalency information from_ `s1` _and_ `s2`.\n\n[Question 3]: Given `head`, the head of a linked list, determine if the linked list has a cycle in it.  There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. **Note that `pos` is not passed as a parameter**.  Return `true` _if there is a cycle in the linked list_. Otherwise, return `false`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a binary search tree (BST) and a range `[low, high]`, return the sum of values of all nodes with a value in the given range. A binary search tree is a tree in which all nodes follow the property that the left subtree of a node contains only nodes with values less than the node's value, and the right subtree of a node contains only nodes with values greater than the node's value."}], "metadata": {"prompt_id": "00000039", "row_id": 39, "seed_ids": ["434", "1061", "141"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: There is a stream of `n` `(idKey, value)` pairs arriving in an **arbitrary** order, where `idKey` is an integer between `1` and `n` and `value` is a string. No two pairs have the same `id`.  Design a stream that returns the values in **increasing order of their IDs** by returning a **chunk** (list) of values after each insertion. The concatenation of all the **chunks** should result in a list of the sorted values.  Implement the `OrderedStream` class:  *   `OrderedStream(int n)` Constructs the stream to take `n` values. *   `String[] insert(int idKey, String value)` Inserts the pair `(idKey, value)` into the stream, then returns the **largest possible chunk** of currently inserted values that appear next in the order.\n\n[Question 2]: An image is represented by an `m x n` integer grid `image` where `image[i][j]` represents the pixel value of the image.  You are also given three integers `sr`, `sc`, and `color`. You should perform a **flood fill** on the image starting from the pixel `image[sr][sc]`.  To perform a **flood fill**, consider the starting pixel, plus any pixels connected **4-directionally** to the starting pixel of the same color as the starting pixel, plus any pixels connected **4-directionally** to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with `color`.  Return _the modified image after performing the flood fill_.\n\n[Question 3]: Given a data stream input of non-negative integers `a1, a2, ..., an`, summarize the numbers seen so far as a list of disjoint intervals.  Implement the `SummaryRanges` class:  *   `SummaryRanges()` Initializes the object with an empty stream. *   `void addNum(int value)` Adds the integer `value` to the stream. *   `int[][] getIntervals()` Returns a summary of the integers in the stream currently as a list of disjoint intervals `[starti, endi]`. The answer should be sorted by `starti`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Design a class `CustomQueue` that supports the following operations:\n\n- `CustomQueue(int capacity)` Initializes the queue with a given capacity.\n- `void enqueue(int value)` Adds a value to the end of the queue if there is still space. Returns `false` if the queue is full.\n- `int dequeue()` Removes and returns the value at the front of the queue. Returns `-1` if the queue is empty.\n- `bool isFull()` Returns `true` if the queue is full, otherwise returns `false`.\n- `bool isEmpty()` Returns `true` if the queue is empty, otherwise returns `false`.\n\nImplement the `CustomQueue` class such that all operations are performed in constant time, i.e., O(1). Additionally, provide a method `getQueue()` that returns the current elements in the queue as a list, maintaining the order of elements as they were added."}], "metadata": {"prompt_id": "00000040", "row_id": 40, "seed_ids": ["1656", "733", "352"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given an integer array `heights` representing the heights of buildings, some `bricks`, and some `ladders`.  You start your journey from building `0` and move to the next building by possibly using bricks or ladders.  While moving from building `i` to building `i+1` (**0-indexed**),  *   If the current building's height is **greater than or equal** to the next building's height, you do **not** need a ladder or bricks. *   If the current building's height is **less than** the next building's height, you can either use **one ladder** or `(h[i+1] - h[i])` **bricks**.  _Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally._\n\n[Question 2]: We have `n` chips, where the position of the `ith` chip is `position[i]`.  We need to move all the chips to **the same position**. In one step, we can change the position of the `ith` chip from `position[i]` to:  *   `position[i] + 2` or `position[i] - 2` with `cost = 0`. *   `position[i] + 1` or `position[i] - 1` with `cost = 1`.  Return _the minimum cost_ needed to move all the chips to the same position.\n\n[Question 3]: You are given an `m x n` `grid` where each cell can have one of three values:  *   `0` representing an empty cell, *   `1` representing a fresh orange, or *   `2` representing a rotten orange.  Every minute, any fresh orange that is **4-directionally adjacent** to a rotten orange becomes rotten.  Return _the minimum number of minutes that must elapse until no cell has a fresh orange_. If _this is impossible, return_ `-1`.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given an `m x n` binary matrix `grid` representing a map where `0` indicates water and `1` indicates land. A **land bridge** is a path of adjacent `1`s (horizontally or vertically) that connects the leftmost column to the rightmost column. You have a limited number of `k` 0s that can be flipped to 1s to create additional land bridges. Find the minimum number of land bridges needed to connect the leftmost and rightmost columns of the grid, or return `-1` if it is impossible to do so with the given `k` 0s."}], "metadata": {"prompt_id": "00000041", "row_id": 41, "seed_ids": ["1642", "1217", "994"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given an array of integers `nums`, find the maximum length of a subarray where the product of all its elements is positive.  A subarray of an array is a consecutive sequence of zero or more values taken out of that array.  Return _the maximum length of a subarray with positive product_.\n\n[Question 2]: You are given an `m x n` binary matrix `matrix`.  You can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from `0` to `1` or vice versa).  Return _the maximum number of rows that have all values equal after some number of flips_.\n\n[Question 3]: You are given two binary trees `root1` and `root2`.  Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.  Return _the merged tree_.  **Note:** The merging process must start from the root nodes of both trees.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given two binary strings `a` and `b`, return _the sum of `a` and `b` when interpreted as binary numbers._ The length of each string is in the range `[1, 1000]` and consists only of `'0'` or `'1'`. Both `a` and `b` can represent very large numbers."}], "metadata": {"prompt_id": "00000042", "row_id": 42, "seed_ids": ["1567", "1072", "617"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given an integer array `nums` of length `n`, and an integer array `queries` of length `m`.  Return _an array_ `answer` _of length_ `m` _where_ `answer[i]` _is the **maximum** size of a **subsequence** that you can take from_ `nums` _such that the **sum** of its elements is less than or equal to_ `queries[i]`.  A **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n[Question 2]: Given an integer array `nums`, return _the value of the bitwise_ **OR** _of the sum of all possible **subsequences** in the array_.  A **subsequence** is a sequence that can be derived from another sequence by removing zero or more elements without changing the order of the remaining elements.\n\n[Question 3]: You are given two integers `n` and `k` and two integer arrays `speed` and `efficiency` both of length `n`. There are `n` engineers numbered from `1` to `n`. `speed[i]` and `efficiency[i]` represent the speed and efficiency of the `ith` engineer respectively.  Choose **at most** `k` different engineers out of the `n` engineers to form a team with the maximum **performance**.  The performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.  Return _the maximum performance of this team_. Since the answer can be a huge number, return it **modulo** `109 + 7`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given two integer arrays `speed` and `efficiency` both of length `n`, and an integer `k`, you are to select a subset of engineers to form a team. Each engineer is represented by their `speed` and `efficiency`. Your goal is to maximize the **product** of the team's **average speed** and the minimum efficiency among the selected engineers. The team must consist of at least `2` engineers. Return the maximum possible product. Since the answer can be a large number, return it modulo `10^9 + 7`."}], "metadata": {"prompt_id": "00000043", "row_id": 43, "seed_ids": ["2389", "2505", "1383"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You have an undirected, connected graph of `n` nodes labeled from `0` to `n - 1`. You are given an array `graph` where `graph[i]` is a list of all the nodes connected with node `i` by an edge.  Return _the length of the shortest path that visits every node_. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.\n\n[Question 2]: There are `m` boys and `n` girls in a class attending an upcoming party.  You are given an `m x n` integer matrix `grid`, where `grid[i][j]` equals `0` or `1`. If `grid[i][j] == 1`, then that means the `ith` boy can invite the `jth` girl to the party. A boy can invite at most **one girl**, and a girl can accept at most **one invitation** from a boy.  Return _the **maximum** possible number of accepted invitations._\n\n[Question 3]: You are given an array of points in the **X-Y** plane `points` where `points[i] = [xi, yi]`.  Return _the minimum area of any rectangle formed from these points, with sides **not necessarily parallel** to the X and Y axes_. If there is not any such rectangle, return `0`.  Answers within `10-5` of the actual answer will be accepted.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a list of `n` flights, each represented as a triplet `(i, j, k)` where `i` is the starting city, `j` is the destination city, and `k` is the cost of the flight. The cities are labeled from `0` to `n-1`. You are also given a list of `m` reservations, each represented as a pair `(i, j)` indicating that a reservation is made from city `i` to city `j`. A reservation is valid if there exists a direct flight between the two cities. \n\nReturn the total cost of the cheapest valid itinerary that visits every city exactly once, or `-1` if no such itinerary exists. You may start and end at any city, and you may revisit cities and use the same flight multiple times. \n\nIf there are multiple valid itineraries with the same total cost, return the one with the lexicographically smallest itinerary. An itinerary is lexicographically smaller if the sequence of city labels is lexicographically smaller."}], "metadata": {"prompt_id": "00000044", "row_id": 44, "seed_ids": ["847", "1820", "963"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given the coordinates of two **rectilinear** rectangles in a 2D plane, return _the total area covered by the two rectangles_.  The first rectangle is defined by its **bottom-left** corner `(ax1, ay1)` and its **top-right** corner `(ax2, ay2)`.  The second rectangle is defined by its **bottom-left** corner `(bx1, by1)` and its **top-right** corner `(bx2, by2)`.\n\n[Question 2]: In some array `arr`, the values were in arithmetic progression: the values `arr[i + 1] - arr[i]` are all equal for every `0 <= i < arr.length - 1`.  A value from `arr` was removed that **was not the first or last value in the array**.  Given `arr`, return _the removed value_.\n\n[Question 3]: You are given a string `s` and an integer array `indices` of the **same length**. The string `s` will be shuffled such that the character at the `ith` position moves to `indices[i]` in the shuffled string.  Return _the shuffled string_.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a binary tree, return the vertical order traversal of its nodes' values. Vertical order traversal means starting from the root, traverse the tree column by column from left to right. If two nodes are in the same row and column, order them from left to right based on their values. The tree is represented using a list of `TreeNode` objects, where each `TreeNode` has an integer value, and left and right pointers to its children. If a node is `null`, it should be represented as `None` in the list. For example, the tree\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\ncan be represented as `[3, [9], [20, 15, 7]]`. Return the vertical order traversal as a list of lists, where each sublist represents a vertical level."}], "metadata": {"prompt_id": "00000045", "row_id": 45, "seed_ids": ["223", "1228", "1528"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: There is a long table with a line of plates and candles arranged on top of it. You are given a **0-indexed** string `s` consisting of characters `'*'` and `'|'` only, where a `'*'` represents a **plate** and a `'|'` represents a **candle**.  You are also given a **0-indexed** 2D integer array `queries` where `queries[i] = [lefti, righti]` denotes the **substring** `s[lefti...righti]` (**inclusive**). For each query, you need to find the **number** of plates **between candles** that are **in the substring**. A plate is considered **between candles** if there is at least one candle to its left **and** at least one candle to its right **in the substring**.  *   For example, `s = \"||**||**|* \"`, and a query `[3, 8]` denotes the substring `\"*||******| \"`. The number of plates between candles in this substring is `2`, as each of the two plates has at least one candle **in the substring** to its left **and** right.  Return _an integer array_ `answer` _where_ `answer[i]` _is the answer to the_ `ith` _query_.\n\n[Question 2]: You are given an integer array `nums` of length `n` where `nums` is a permutation of the numbers in the range `[0, n - 1]`.  You should build a set `s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... }` subjected to the following rule:  *   The first element in `s[k]` starts with the selection of the element `nums[k]` of `index = k`. *   The next element in `s[k]` should be `nums[nums[k]]`, and then `nums[nums[nums[k]]]`, and so on. *   We stop adding right before a duplicate element occurs in `s[k]`.  Return _the longest length of a set_ `s[k]`.\n\n[Question 3]: Alice has an undirected tree with `n` nodes labeled from `0` to `n - 1`. The tree is represented as a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.  Alice wants Bob to find the root of the tree. She allows Bob to make several **guesses** about her tree. In one guess, he does the following:  *   Chooses two **distinct** integers `u` and `v` such that there exists an edge `[u, v]` in the tree. *   He tells Alice that `u` is the **parent** of `v` in the tree.  Bob's guesses are represented by a 2D integer array `guesses` where `guesses[j] = [uj, vj]` indicates Bob guessed `uj` to be the parent of `vj`.  Alice being lazy, does not reply to each of Bob's guesses, but just says that **at least** `k` of his guesses are `true`.  Given the 2D integer arrays `edges`, `guesses` and the integer `k`, return _the **number of possible nodes** that can be the root of Alice's tree_. If there is no such tree, return `0`.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a binary tree where each node has a unique value. The tree is represented as a list of lists, where each sublist represents a level of the tree. Each element in a sublist is either `None` (indicating a null node) or an integer representing the value of a node. For example:\n\n```python\n[\n    [1],\n    [2, 3],\n    [4, 5, 6, 7]\n]\n```\n\nThis represents a tree with the following structure:\n\n```\n    1\n   / \\\n  2   3\n / \\ / \\\n4  5 6  7\n```\n\nYou are also given a list of **queries** where each query is a 2D integer array `queries[i] = [startValuei, destValuei]`. For each query, you need to find the lowest common ancestor (LCA) of the nodes with values `startValuei` and `destValuei`. The LCA of two nodes is defined as the lowest node that has both nodes in its subtree. If either node does not exist in the tree, return `-1`.\n\nReturn an integer array `answer` where `answer[i]` is the result of the `i-th` query.\n\nFor example, given the tree above and the queries:\n\n```python\nqueries = [[4, 7], [3, 5]]\n```\n\nThe answers would be `[2, 2]`, since the LCA of 4 and 7 is 2, and the LCA of 3 and 5 is also 2."}], "metadata": {"prompt_id": "00000046", "row_id": 46, "seed_ids": ["2055", "565", "2581"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given an integer array of unique positive integers `nums`. Consider the following graph:  *   There are `nums.length` nodes, labeled `nums[0]` to `nums[nums.length - 1]`, *   There is an undirected edge between `nums[i]` and `nums[j]` if `nums[i]` and `nums[j]` share a common factor greater than `1`.  Return _the size of the largest connected component in the graph_.\n\n[Question 2]: Given the `root` of a **complete** binary tree, return the number of the nodes in the tree.  According to **[Wikipedia](http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees)**, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.  Design an algorithm that runs in less than `O(n)` time complexity.\n\n[Question 3]: Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (`push`, `peek`, `pop`, and `empty`).  Implement the `MyQueue` class:  *   `void push(int x)` Pushes element x to the back of the queue. *   `int pop()` Removes the element from the front of the queue and returns it. *   `int peek()` Returns the element at the front of the queue. *   `boolean empty()` Returns `true` if the queue is empty, `false` otherwise.  **Notes:**  *   You must use **only** standard operations of a stack, which means only `push to top`, `peek/pop from top`, `size`, and `is empty` operations are valid. *   Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.\n\n[Question 4]:"}, {"role": "assistant", "content": "Design a class `MyStack` to implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `pop`, `top`, and `empty`). Implement the `MyStack` class:\n\n*   `void push(int x)` Pushes element x to the top of the stack.\n*   `int pop()` Removes the element from the top of the stack and returns it.\n*   `int top()` Returns the element at the top of the stack.\n*   `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.\n\n**Notes:** \n\n*   You must use **only** standard operations of a queue, which means only `enqueue`, `deque`, `size`, and `is empty` operations are valid.\n*   Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations."}], "metadata": {"prompt_id": "00000047", "row_id": 47, "seed_ids": ["952", "222", "232"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given two strings: `s1` and `s2` with the same size, check if some permutation of string `s1` can break some permutation of string `s2` or vice-versa. In other words `s2` can break `s1` or vice-versa.  A string `x` can break string `y` (both of size `n`) if `x[i] >= y[i]` (in alphabetical order) for all `i` between `0` and `n-1`.\n\n[Question 2]: Design a [Snake game](https://en.wikipedia.org/wiki/Snake_(video_game)) that is played on a device with screen size `height x width`. [Play the game online](http://patorjk.com/games/snake/) if you are not familiar with the game.  The snake is initially positioned at the top left corner `(0, 0)` with a length of `1` unit.  You are given an array `food` where `food[i] = (ri, ci)` is the row and column position of a piece of food that the snake can eat. When a snake eats a piece of food, its length and the game's score both increase by `1`.  Each piece of food appears one by one on the screen, meaning the second piece of food will not appear until the snake eats the first piece of food.  When a piece of food appears on the screen, it is **guaranteed** that it will not appear on a block occupied by the snake.  The game is over if the snake goes out of bounds (hits a wall) or if its head occupies a space that its body occupies **after** moving (i.e. a snake of length 4 cannot run into itself).  Implement the `SnakeGame` class:  *   `SnakeGame(int width, int height, int[][] food)` Initializes the object with a screen of size `height x width` and the positions of the `food`. *   `int move(String direction)` Returns the score of the game after applying one `direction` move by the snake. If the game is over, return `-1`.\n\n[Question 3]: There are a row of `n` houses, each house can be painted with one of the `k` colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.  The cost of painting each house with a certain color is represented by an `n x k` cost matrix costs.  *   For example, `costs[0][0]` is the cost of painting house `0` with color `0`; `costs[1][2]` is the cost of painting house `1` with color `2`, and so on...  Return _the minimum cost to paint all houses_.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a list of `n` jobs where each job is represented by a tuple `(start, end, cpuTime)`, determine the minimum time required to complete all jobs. Each job must be processed in the given order, and the jobs can only be processed one at a time. A job can start immediately after the previous job ends. The goal is to find the total time taken to complete all jobs, including the time spent on the jobs themselves and any waiting time.\n\nFor example, given the jobs `[(1, 3, 2), (2, 5, 3), (7, 9, 1)]`, the total time to complete all jobs is `10` (2 + 3 + 5).\n\nImplement the function `minCompletionTime(jobs)` that takes a list of jobs and returns the minimum completion time."}], "metadata": {"prompt_id": "00000048", "row_id": 48, "seed_ids": ["1433", "353", "265"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given an integer array `nums` **(0-indexed)** and two integers `target` and `start`, find an index `i` such that `nums[i] == target` and `abs(i - start)` is **minimized**. Note that `abs(x)` is the absolute value of `x`.  Return `abs(i - start)`.  It is **guaranteed** that `target` exists in `nums`.\n\n[Question 2]: Given a `sentence` that consists of some words separated by a **single space**, and a `searchWord`, check if `searchWord` is a prefix of any word in `sentence`.  Return _the index of the word in_ `sentence` _(**1-indexed**) where_ `searchWord` _is a prefix of this word_. If `searchWord` is a prefix of more than one word, return the index of the first word **(minimum index)**. If there is no such word return `-1`.  A **prefix** of a string `s` is any leading contiguous substring of `s`.\n\n[Question 3]: We have `n` buildings numbered from `0` to `n - 1`. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.  You are given an array `requests` where `requests[i] = [fromi, toi]` represents an employee's request to transfer from building `fromi` to building `toi`.  **All buildings are full**, so a list of requests is achievable only if for each building, the **net change in employee transfers is zero**. This means the number of employees **leaving** is **equal** to the number of employees **moving in**. For example if `n = 3` and two employees are leaving building `0`, one is leaving building `1`, and one is leaving building `2`, there should be two employees moving to building `0`, one employee moving to building `1`, and one employee moving to building `2`.  Return _the maximum number of achievable requests_.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given an integer array `nums` and a target integer `target`, find the **shortest contiguous subarray** in `nums` such that the sum of the elements in the subarray is equal to or greater than `target`. If no such subarray exists, return `0`. A **contiguous subarray** is a subarray with at least two elements, and the **sum** of its elements is the sum of the corresponding elements in `nums`."}], "metadata": {"prompt_id": "00000049", "row_id": 49, "seed_ids": ["1848", "1455", "1601"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: On a campus represented on the X-Y plane, there are `n` workers and `m` bikes, with `n <= m`.  You are given an array `workers` of length `n` where `workers[i] = [xi, yi]` is the position of the `ith` worker. You are also given an array `bikes` of length `m` where `bikes[j] = [xj, yj]` is the position of the `jth` bike. All the given positions are **unique**.  Assign a bike to each worker. Among the available bikes and workers, we choose the `(workeri, bikej)` pair with the shortest **Manhattan distance** between each other and assign the bike to that worker.  If there are multiple `(workeri, bikej)` pairs with the same shortest **Manhattan distance**, we choose the pair with **the smallest worker index**. If there are multiple ways to do that, we choose the pair with **the smallest bike index**. Repeat this process until there are no available workers.  Return _an array_ `answer` _of length_ `n`_, where_ `answer[i]` _is the index (**0-indexed**) of the bike that the_ `ith` _worker is assigned to_.  The **Manhattan distance** between two points `p1` and `p2` is `Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.\n\n[Question 2]: You are given an integer `n`.  Each number from `1` to `n` is grouped according to the sum of its digits.  Return _the number of groups that have the largest size_.\n\n[Question 3]: Given a `file` and assume that you can only read the file using a given method `read4`, implement a method to read `n` characters.  **Method read4:**  The API `read4` reads **four consecutive characters** from `file`, then writes those characters into the buffer array `buf4`.  The return value is the number of actual characters read.  Note that `read4()` has its own file pointer, much like `FILE *fp` in C.  **Definition of read4:**  Parameter:  char\\[\\] buf4 Returns:    int  buf4\\[\\] is a destination, not a source. The results from read4 will be copied to buf4\\[\\].  Below is a high-level example of how `read4` works:  File file( \"abcde `\"); // File is  \"`abcde `\", initially file pointer (fp) points to 'a' char[] buf4 = new char[4]; // Create buffer with enough space to store characters read4(buf4); // read4 returns 4. Now buf4 =  \"abcd \", fp points to 'e' read4(buf4); // read4 returns 1. Now buf4 =  \"e \", fp points to end of file read4(buf4); // read4 returns 0. Now buf4 =  \" \", fp points to end of file`  **Method read:**  By using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly.  The return value is the number of actual characters read.  **Definition of read:**  Parameters:\tchar\\[\\] buf, int n Returns:\tint  buf\\[\\] is a destination, not a source. You will need to write the results to buf\\[\\].  **Note:**  *   Consider that you cannot manipulate the file directly. The file is only accessible for `read4` but not for `read`. *   The `read` function will only be called once for each test case. *   You may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given an integer `n`, you are asked to find the number of ways to represent `n` as a sum of consecutive positive integers. For example, `5` can be represented as `2 + 3`, which is one way. Return the total number of ways to represent `n` in this manner.\n\nNote: Consecutive positive integers are those where each integer is one more than the previous one, such as `1, 2, 3, ...`."}], "metadata": {"prompt_id": "00000050", "row_id": 50, "seed_ids": ["1057", "1399", "157"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given a **0-indexed** **circular** string array `words` and a string `target`. A **circular array** means that the array's end connects to the array's beginning.  *   Formally, the next element of `words[i]` is `words[(i + 1) % n]` and the previous element of `words[i]` is `words[(i - 1 + n) % n]`, where `n` is the length of `words`.  Starting from `startIndex`, you can move to either the next word or the previous word with `1` step at a time.  Return _the **shortest** distance needed to reach the string_ `target`. If the string `target` does not exist in `words`, return `-1`.\n\n[Question 2]: An **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`.  Given an integer `n`, return _the_ `nth` _**ugly number**_.\n\n[Question 3]: There is a stream of `n` `(idKey, value)` pairs arriving in an **arbitrary** order, where `idKey` is an integer between `1` and `n` and `value` is a string. No two pairs have the same `id`.  Design a stream that returns the values in **increasing order of their IDs** by returning a **chunk** (list) of values after each insertion. The concatenation of all the **chunks** should result in a list of the sorted values.  Implement the `OrderedStream` class:  *   `OrderedStream(int n)` Constructs the stream to take `n` values. *   `String[] insert(int idKey, String value)` Inserts the pair `(idKey, value)` into the stream, then returns the **largest possible chunk** of currently inserted values that appear next in the order.\n\n[Question 4]:"}, {"role": "assistant", "content": "Design a class `CustomComparator` that implements a custom sorting algorithm for an array of integers. The sorting algorithm should sort the array in ascending order based on the following rules:\n\n1. Elements at even indices should be sorted in ascending order.\n2. Elements at odd indices should be sorted in descending order.\n\nYour task is to implement the `CustomComparator` class with the following methods:\n\n- `CustomComparator(int[] arr)`: Constructor that initializes the array to be sorted.\n- `void sort()`: Sorts the array according to the rules mentioned above.\n- `int[] getResult()`: Returns the sorted array.\n\nAdditionally, provide a `main` method to test your implementation with a sample array and print the sorted array."}], "metadata": {"prompt_id": "00000051", "row_id": 51, "seed_ids": ["2515", "264", "1656"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: There is an `m x n` matrix that is initialized to all `0`'s. There is also a 2D array `indices` where each `indices[i] = [ri, ci]` represents a **0-indexed location** to perform some increment operations on the matrix.  For each location `indices[i]`, do **both** of the following:  1.  Increment **all** the cells on row `ri`. 2.  Increment **all** the cells on column `ci`.  Given `m`, `n`, and `indices`, return _the **number of odd-valued cells** in the matrix after applying the increment to all locations in_ `indices`.\n\n[Question 2]: Let's define a function `countUniqueChars(s)` that returns the number of unique characters on `s`.  *   For example, calling `countUniqueChars(s)` if `s = \"LEETCODE \"` then `\"L \"`, `\"T \"`, `\"C \"`, `\"O \"`, `\"D \"` are the unique characters since they appear only once in `s`, therefore `countUniqueChars(s) = 5`.  Given a string `s`, return the sum of `countUniqueChars(t)` where `t` is a substring of `s`. The test cases are generated such that the answer fits in a 32-bit integer.  Notice that some substrings can be repeated so in this case you have to count the repeated ones too.\n\n[Question 3]: There are several consecutive houses along a street, each of which has some money inside. There is also a robber, who wants to steal money from the homes, but he **refuses to steal from adjacent homes**.  The **capability** of the robber is the maximum amount of money he steals from one house of all the houses he robbed.  You are given an integer array `nums` representing how much money is stashed in each house. More formally, the `ith` house from the left has `nums[i]` dollars.  You are also given an integer `k`, representing the **minimum** number of houses the robber will steal from. It is always possible to steal at least `k` houses.  Return _the **minimum** capability of the robber out of all the possible ways to steal at least_ `k` _houses_.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a binary string `s` of length `n`, and a positive integer `k`, you are allowed to perform the following operation **any number of times**: choose any index `i` (0-indexed) and flip the value of `s[i]` (i.e., change `s[i]` from `0` to `1` or from `1` to `0`). A **substring** of `s` is said to be **balanced** if the number of `1`s in the substring is equal to the number of `0`s. \n\nAfter performing the above operations, return the **maximum** possible length of a **balanced** substring of `s`. A balanced substring must have an equal number of `0`s and `1`s. If no such balanced substring can be formed, return `0`.\n\nFor example, if `s = \"00110011\"` and `k = 1`, you can flip the second `0` to `1` to form the balanced substring `\"01110011\"`, which has a length of `6`."}], "metadata": {"prompt_id": "00000052", "row_id": 52, "seed_ids": ["1252", "828", "2560"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given an integer n, return _the smallest **prime palindrome** greater than or equal to_ `n`.  An integer is **prime** if it has exactly two divisors: `1` and itself. Note that `1` is not a prime number.  *   For example, `2`, `3`, `5`, `7`, `11`, and `13` are all primes.  An integer is a **palindrome** if it reads the same from left to right as it does from right to left.  *   For example, `101` and `12321` are palindromes.  The test cases are generated so that the answer always exists and is in the range `[2, 2 * 108]`.\n\n[Question 2]: A cell `(r, c)` of an excel sheet is represented as a string `\" \"` where:  *   denotes the column number `c` of the cell. It is represented by **alphabetical letters**. *   For example, the `1st` column is denoted by `'A'`, the `2nd` by `'B'`, the `3rd` by `'C'`, and so on. *   is the row number `r` of the cell. The `rth` row is represented by the **integer** `r`.  You are given a string `s` in the format `\": \"`, where represents the column `c1`, represents the row `r1`, represents the column `c2`, and represents the row `r2`, such that `r1 <= r2` and `c1 <= c2`.  Return _the **list of cells**_ `(x, y)` _such that_ `r1 <= x <= r2` _and_ `c1 <= y <= c2`. The cells should be represented as **strings** in the format mentioned above and be sorted in **non-decreasing** order first by columns and then by rows.\n\n[Question 3]: You are given an `m x n` integer matrix `grid` and an array `queries` of size `k`.  Find an array `answer` of size `k` such that for each integer `queries[i]` you start in the **top left** cell of the matrix and repeat the following process:  *   If `queries[i]` is **strictly** greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any **adjacent** cell in all `4` directions: up, down, left, and right. *   Otherwise, you do not get any points, and you end this process.  After the process, `answer[i]` is the **maximum** number of points you can get. **Note** that for each query you are allowed to visit the same cell **multiple** times.  Return _the resulting array_ `answer`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a rectangular grid of size `m x n`, you are initially positioned at the top-left cell `(0, 0)`. You are allowed to move either down or right at any point in time. Each cell in the grid contains a unique integer. Design a function that returns the lexicographically smallest path of length `k` from the starting cell to the bottom-right cell `(m-1, n-1)`. A path is defined as a sequence of `k` cells from the grid, starting from `(0, 0)` and ending at `(m-1, n-1)`. The path must follow the movement rules (only down or right) and the cells must be distinct. The cells in the path are considered in the order they are visited. The lexicographically smallest path is the one where the sequence of cell values, when concatenated, forms the smallest possible number. For example, if the path is `[5, 7, 8]`, the value is `578`. If the path is `[1, 3, 2]`, the value is `132`. If two paths have the same sequence of cell values, the lexicographically smaller one is the one with the smaller first element."}], "metadata": {"prompt_id": "00000053", "row_id": 53, "seed_ids": ["866", "2194", "2503"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` `edges`. The **root** of the tree is the node `0`, and each node of the tree has **a label** which is a lower-case character given in the string `labels` (i.e. The node with the number `i` has the label `labels[i]`).  The `edges` array is given on the form `edges[i] = [ai, bi]`, which means there is an edge between nodes `ai` and `bi` in the tree.  Return _an array of size `n`_ where `ans[i]` is the number of nodes in the subtree of the `ith` node which have the same label as node `i`.  A subtree of a tree `T` is the tree consisting of a node in `T` and all of its descendant nodes.\n\n[Question 2]: You have `n` buckets each containing some gallons of water in it, represented by a **0-indexed** integer array `buckets`, where the `ith` bucket contains `buckets[i]` gallons of water. You are also given an integer `loss`.  You want to make the amount of water in each bucket equal. You can pour any amount of water from one bucket to another bucket (not necessarily an integer). However, every time you pour `k` gallons of water, you spill `loss` **percent** of `k`.  Return _the **maximum** amount of water in each bucket after making the amount of water equal._ Answers within `10-5` of the actual answer will be accepted.\n\n[Question 3]: Given two strings `s` and `t`, find the number of ways you can choose a non-empty substring of `s` and replace a **single character** by a different character such that the resulting substring is a substring of `t`. In other words, find the number of substrings in `s` that differ from some substring in `t` by **exactly** one character.  For example, the underlined substrings in `\"computer \"` and `\"computation \"` only differ by the `'e'`/`'a'`, so this is a valid way.  Return _the number of substrings that satisfy the condition above._  A **substring** is a contiguous sequence of characters within a string.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given two strings `s` and `t` of equal length. Each string consists of lowercase English letters. A **swap** is defined as exchanging the positions of two characters within a string. Your task is to determine the minimum number of swaps required to make the string `s` an anagram of string `t`. An anagram of a string is another string that contains the same characters, only the order of characters can be different.\n\nFor example, if `s = \"abc\"` and `t = \"bca\"`, you can make `s` an anagram of `t` by swapping `s[0]` and `s[1]`, resulting in `s = \"bca\"`. Return the minimum number of swaps needed to achieve this.\n\nConstraints:\n- `1 <= s.length == t.length <= 100`\n- `s` and `t` consist of lowercase English letters."}], "metadata": {"prompt_id": "00000054", "row_id": 54, "seed_ids": ["1519", "2137", "1638"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given an integer `n`, return _the number of structurally unique **BST'**s (binary search trees) which has exactly_ `n` _nodes of unique values from_ `1` _to_ `n`.\n\n[Question 2]: Given a `n * n` matrix `grid` of `0's` and `1's` only. We want to represent `grid` with a Quad-Tree.  Return _the root of the Quad-Tree representing_ `grid`.  A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:  *   `val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. Notice that you can assign the `val` to True or False when `isLeaf` is False, and both are accepted in the answer. *   `isLeaf`: True if the node is a leaf node on the tree or False if the node has four children.  class Node { public boolean val; public boolean isLeaf; public Node topLeft; public Node topRight; public Node bottomLeft; public Node bottomRight; }  We can construct a Quad-Tree from a two-dimensional area using the following steps:  1.  If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop. 2.  If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo. 3.  Recurse for each of the children with the proper sub-grid.  If you want to know more about the Quad-Tree, you can refer to the [wiki](https://en.wikipedia.org/wiki/Quadtree).  **Quad-Tree format:**  You don't need to read this section for solving the problem. This is only if you want to understand the output format here. The output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below.  It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`.  If the value of `isLeaf` or `val` is True we represent it as **1** in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as **0**.\n\n[Question 3]: You are given an integer array `ranks` and a character array `suits`. You have `5` cards where the `ith` card has a rank of `ranks[i]` and a suit of `suits[i]`.  The following are the types of **poker hands** you can make from best to worst:  1.  `\"Flush \"`: Five cards of the same suit. 2.  `\"Three of a Kind \"`: Three cards of the same rank. 3.  `\"Pair \"`: Two cards of the same rank. 4.  `\"High Card \"`: Any single card.  Return _a string representing the **best** type of **poker hand** you can make with the given cards._  **Note** that the return values are **case-sensitive**.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times:\n\n- Pick any two adjacent characters in `s` and replace them with a single character that is the **lexicographically smallest** character among them. For example, `ab` can be replaced with `a`, and `bb` can be replaced with `b`.\n\nReturn _the lexicographically smallest string that can be obtained by applying the above operation any number of times._\n\nExample:\n```python\nInput: s = \"cbaaaabc\"\nOutput: \"aaaabca\"\nExplanation:\nFirst, replace \"cba\" to get \"aabaaabc\".\nThen, replace \"aabaaabc\" to get \"aaaabca\".\n```"}], "metadata": {"prompt_id": "00000055", "row_id": 55, "seed_ids": ["96", "427", "2347"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given the `root` of a binary search tree, and an integer `k`, return _the_ `kth` _smallest value (**1-indexed**) of all the values of the nodes in the tree_.\n\n[Question 2]: Given two strings: `s1` and `s2` with the same size, check if some permutation of string `s1` can break some permutation of string `s2` or vice-versa. In other words `s2` can break `s1` or vice-versa.  A string `x` can break string `y` (both of size `n`) if `x[i] >= y[i]` (in alphabetical order) for all `i` between `0` and `n-1`.\n\n[Question 3]: Given an unsorted array of integers `nums`, return _the length of the longest **continuous increasing subsequence** (i.e. subarray)_. The subsequence must be **strictly** increasing.  A **continuous increasing subsequence** is defined by two indices `l` and `r` (`l < r`) such that it is `[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]` and for each `l <= i < r`, `nums[i] < nums[i + 1]`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given an unsorted array of integers `nums`, return the maximum number of **distinct** elements in any **continuous subarray** of size `k`. A **continuous subarray** is defined as a subarray that contains `k` consecutive elements from the original array."}], "metadata": {"prompt_id": "00000056", "row_id": 56, "seed_ids": ["230", "1433", "674"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given an integer `n` denoting the number of cities in a country. The cities are numbered from `0` to `n - 1`.  You are also given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional** road connecting cities `ai` and `bi`.  You need to assign each city with an integer value from `1` to `n`, where each value can only be used **once**. The **importance** of a road is then defined as the **sum** of the values of the two cities it connects.  Return _the **maximum total importance** of all roads possible after assigning the values optimally._\n\n[Question 2]: Given the `root` of a binary tree, return _the average value of the nodes on each level in the form of an array_. Answers within `10-5` of the actual answer will be accepted.\n\n[Question 3]: You are given a string `s` of lowercase English letters and an integer array `shifts` of the same length.  Call the `shift()` of a letter, the next letter in the alphabet, (wrapping around so that `'z'` becomes `'a'`).  *   For example, `shift('a') = 'b'`, `shift('t') = 'u'`, and `shift('z') = 'a'`.  Now for each `shifts[i] = x`, we want to shift the first `i + 1` letters of `s`, `x` times.  Return _the final string after all such shifts to s are applied_.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a string `s` consisting of lowercase English letters. You are also given an integer `k`. You can perform the following operation on the string any number of times:\n\n- Pick any substring of length `k` from `s` and reverse it.\n\nYour task is to determine the lexicographically smallest string that can be obtained after performing the above operation any number of times. Return the resulting string.\n\nExample:\n- If `s = \"cbaebabacd\"` and `k = 3`, you can reverse the substring `\"bac\"` to get `\"cbabcabad\"`. Reversing `\"bac\"` again gives `\"cbabcabad\"` which is the lexicographically smallest string possible. So, the answer is `\"abcabad\"`."}], "metadata": {"prompt_id": "00000057", "row_id": 57, "seed_ids": ["2285", "637", "848"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: A Binary Matrix is a matrix in which all the elements are either **0** or **1**.  Given `quadTree1` and `quadTree2`. `quadTree1` represents a `n * n` binary matrix and `quadTree2` represents another `n * n` binary matrix.  Return _a Quad-Tree_ representing the `n * n` binary matrix which is the result of **logical bitwise OR** of the two binary matrixes represented by `quadTree1` and `quadTree2`.  Notice that you can assign the value of a node to **True** or **False** when `isLeaf` is **False**, and both are **accepted** in the answer.  A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:  *   `val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. *   `isLeaf`: True if the node is leaf node on the tree or False if the node has the four children.  class Node { public boolean val; public boolean isLeaf; public Node topLeft; public Node topRight; public Node bottomLeft; public Node bottomRight; }  We can construct a Quad-Tree from a two-dimensional area using the following steps:  1.  If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop. 2.  If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo. 3.  Recurse for each of the children with the proper sub-grid.  If you want to know more about the Quad-Tree, you can refer to the [wiki](https://en.wikipedia.org/wiki/Quadtree).  **Quad-Tree format:**  The input/output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below.  It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`.  If the value of `isLeaf` or `val` is True we represent it as **1** in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as **0**.\n\n[Question 2]: Given a **0-indexed** string `word` and a character `ch`, **reverse** the segment of `word` that starts at index `0` and ends at the index of the **first occurrence** of `ch` (**inclusive**). If the character `ch` does not exist in `word`, do nothing.  *   For example, if `word = \"abcdefd \"` and `ch = \"d \"`, then you should **reverse** the segment that starts at `0` and ends at `3` (**inclusive**). The resulting string will be `\"dcbaefd \"`.  Return _the resulting string_.\n\n[Question 3]: You are given an integer array `nums` of **even** length `n` and an integer `limit`. In one move, you can replace any integer from `nums` with another integer between `1` and `limit`, inclusive.  The array `nums` is **complementary** if for all indices `i` (**0-indexed**), `nums[i] + nums[n - 1 - i]` equals the same number. For example, the array `[1,2,3,4]` is complementary because for all indices `i`, `nums[i] + nums[n - 1 - i] = 5`.  Return the _**minimum** number of moves required to make_ `nums` _**complementary**_.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a **0-indexed** string `s` and an integer `k`, reverse the segment of `s` that starts at index `0` and ends at the index of the **k-th** occurrence of the character `a` (**inclusive**). If the character `a` does not occur `k` times in `s`, do nothing. \n\n*   For example, if `s = \"abcdeaa \"` and `k = 3`, then you should reverse the segment that starts at `0` and ends at `3` (**inclusive**). The resulting string will be `\"aebcd \"`.\n\nReturn the resulting string."}], "metadata": {"prompt_id": "00000058", "row_id": 58, "seed_ids": ["558", "2000", "1674"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given a list of `phrases`, generate a list of Before and After puzzles.  A _phrase_ is a string that consists of lowercase English letters and spaces only. No space appears in the start or the end of a phrase. There are no consecutive spaces in a phrase.  _Before and After puzzles_ are phrases that are formed by merging two phrases where the **last word of the first phrase** is the same as the **first word of the second phrase**.  Return the Before and After puzzles that can be formed by every two phrases `phrases[i]` and `phrases[j]` where `i != j`. Note that the order of matching two phrases matters, we want to consider both orders.  You should return a list of **distinct** strings **sorted lexicographically**.\n\n[Question 2]: A **sentence** is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.  A sentence can be **shuffled** by appending the **1-indexed word position** to each word then rearranging the words in the sentence.  *   For example, the sentence `\"This is a sentence \"` can be shuffled as `\"sentence4 a3 is2 This1 \"` or `\"is2 sentence4 This1 a3 \"`.  Given a **shuffled sentence** `s` containing no more than `9` words, reconstruct and return _the original sentence_.\n\n[Question 3]: The **product sum** of two equal-length arrays `a` and `b` is equal to the sum of `a[i] * b[i]` for all `0 <= i < a.length` (**0-indexed**).  *   For example, if `a = [1,2,3,4]` and `b = [5,2,3,1]`, the **product sum** would be `1*5 + 2*2 + 3*3 + 4*1 = 22`.  Given two arrays `nums1` and `nums2` of length `n`, return _the **minimum product sum** if you are allowed to **rearrange** the **order** of the elements in_ `nums1`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given two arrays of integers, `nums1` and `nums2`, both of the same length, you are allowed to rearrange the elements of `nums1`. Your task is to find the maximum possible sum of the absolute differences between corresponding elements of `nums1` and `nums2`. In other words, you want to maximize the expression `\u03a3 |nums1[i] - nums2[i]|` for `0 <= i < length(nums1)`. Return this maximum possible sum.\n\nFor example, if `nums1 = [1, 2, 3, 4]` and `nums2 = [2, 1, 4, 3]`, one possible rearrangement of `nums1` could be `[4, 3, 2, 1]`, which would give a sum of `|4-2| + |3-1| + |2-4| + |1-3| = 10`. Find the optimal rearrangement of `nums1` to achieve the highest possible sum."}], "metadata": {"prompt_id": "00000059", "row_id": 59, "seed_ids": ["1181", "1859", "1874"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You have a water dispenser that can dispense cold, warm, and hot water. Every second, you can either fill up `2` cups with **different** types of water, or `1` cup of any type of water.  You are given a **0-indexed** integer array `amount` of length `3` where `amount[0]`, `amount[1]`, and `amount[2]` denote the number of cold, warm, and hot water cups you need to fill respectively. Return _the **minimum** number of seconds needed to fill up all the cups_.\n\n[Question 2]: You are given an integer array `nums`.  You should move each element of `nums` into one of the two arrays `A` and `B` such that `A` and `B` are non-empty, and `average(A) == average(B)`.  Return `true` if it is possible to achieve that and `false` otherwise.  **Note** that for an array `arr`, `average(arr)` is the sum of all the elements of `arr` over the length of `arr`.\n\n[Question 3]: A Binary Matrix is a matrix in which all the elements are either **0** or **1**.  Given `quadTree1` and `quadTree2`. `quadTree1` represents a `n * n` binary matrix and `quadTree2` represents another `n * n` binary matrix.  Return _a Quad-Tree_ representing the `n * n` binary matrix which is the result of **logical bitwise OR** of the two binary matrixes represented by `quadTree1` and `quadTree2`.  Notice that you can assign the value of a node to **True** or **False** when `isLeaf` is **False**, and both are **accepted** in the answer.  A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:  *   `val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. *   `isLeaf`: True if the node is leaf node on the tree or False if the node has the four children.  class Node { public boolean val; public boolean isLeaf; public Node topLeft; public Node topRight; public Node bottomLeft; public Node bottomRight; }  We can construct a Quad-Tree from a two-dimensional area using the following steps:  1.  If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop. 2.  If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo. 3.  Recurse for each of the children with the proper sub-grid.  If you want to know more about the Quad-Tree, you can refer to the [wiki](https://en.wikipedia.org/wiki/Quadtree).  **Quad-Tree format:**  The input/output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below.  It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`.  If the value of `isLeaf` or `val` is True we represent it as **1** in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as **0**.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a list of `n` tasks, each with a unique identifier from `1` to `n`. The tasks are to be scheduled on a single machine that processes them sequentially. Each task takes a certain amount of time to complete, which is given by an array `times` of length `n` where `times[i]` is the time required to complete the `i+1`-th task. The machine can skip any task once, but only before it starts processing that task. Once a task is skipped, it cannot be processed. Given `times` and an integer `k` (where `0 <= k <= n`), find the minimum possible time required to complete all tasks if you can skip up to `k` tasks. Return the minimum time."}], "metadata": {"prompt_id": "00000060", "row_id": 60, "seed_ids": ["2335", "805", "558"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are playing a Flip Game with your friend.  You are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip **two consecutive** `\"++ \"` into `\"-- \"`. The game ends when a person can no longer make a move, and therefore the other person will be the winner.  Return `true` _if the starting player can **guarantee a win**_, and `false` otherwise.\n\n[Question 2]: You are given a **0-indexed** integer array `nums`.  The **concatenation** of two numbers is the number formed by concatenating their numerals.  *   For example, the concatenation of `15`, `49` is `1549`.  The **concatenation value** of `nums` is initially equal to `0`. Perform this operation until `nums` becomes empty:  *   If there exists more than one number in `nums`, pick the first element and last element in `nums` respectively and add the value of their concatenation to the **concatenation value** of `nums`, then delete the first and last element from `nums`. *   If one element exists, add its value to the **concatenation value** of `nums`, then delete it.  Return _the concatenation value of the `nums`_.\n\n[Question 3]: You are given a very large integer `n`, represented as a string,\u200b\u200b\u200b\u200b\u200b\u200b and an integer digit `x`. The digits in `n` and the digit `x` are in the **inclusive** range `[1, 9]`, and `n` may represent a **negative** number.  You want to **maximize** `n`**'s numerical value** by inserting `x` anywhere in the decimal representation of `n`\u200b\u200b\u200b\u200b\u200b\u200b. You **cannot** insert `x` to the left of the negative sign.  *   For example, if `n = 73` and `x = 6`, it would be best to insert it between `7` and `3`, making `n = 763`. *   If `n = -55` and `x = 2`, it would be best to insert it before the first `5`, making `n = -255`.  Return _a string representing the **maximum** value of_ `n`_\u200b\u200b\u200b\u200b\u200b\u200b after the insertion_.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a binary string `s` consisting only of `0`s and `1`s. A **substring** of `s` is called **good** if it does not contain more than one `0`. You are also given an integer `k`. Your task is to find the **maximum** number of **good** substrings that can be obtained by rearranging the characters of `s` and then splitting the string into at most `k` non-empty substrings. Return the maximum number of good substrings you can obtain.\n\nFor example, if `s = \"1001010011\"` and `k = 3`, one possible way to split `s` into good substrings is `\"10010\"`, `\"100\"`, and `\"11\"`, which gives a total of 3 good substrings."}], "metadata": {"prompt_id": "00000061", "row_id": 61, "seed_ids": ["294", "2562", "1881"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given an array of integers `arr`.  We want to select three indices `i`, `j` and `k` where `(0 <= i < j <= k < arr.length)`.  Let's define `a` and `b` as follows:  *   `a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]` *   `b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]`  Note that **^** denotes the **bitwise-xor** operation.  Return _the number of triplets_ (`i`, `j` and `k`) Where `a == b`.\n\n[Question 2]: Given an array of strings `strs`, return _the length of the **longest uncommon subsequence** between them_. If the longest uncommon subsequence does not exist, return `-1`.  An **uncommon subsequence** between an array of strings is a string that is a **subsequence of one string but not the others**.  A **subsequence** of a string `s` is a string that can be obtained after deleting any number of characters from `s`.  *   For example, `\"abc \"` is a subsequence of `\"aebdc \"` because you can delete the underlined characters in `\"aebdc \"` to get `\"abc \"`. Other subsequences of `\"aebdc \"` include `\"aebdc \"`, `\"aeb \"`, and `\" \"` (empty string).\n\n[Question 3]: You are given an integer `n` and an integer `p` in the range `[0, n - 1]`. Representing a **0-indexed** array `arr` of length `n` where all positions are set to `0`'s, except position `p` which is set to `1`.  You are also given an integer array `banned` containing some positions from the array. For the **i****th** position in `banned`, `arr[banned[i]] = 0`, and `banned[i] != p`.  You can perform **multiple** operations on `arr`. In an operation, you can choose a **subarray** with size `k` and **reverse** the subarray. However, the `1` in `arr` should never go to any of the positions in `banned`. In other words, after each operation `arr[banned[i]]` **remains** `0`.  _Return an array_ `ans` _where_ _for each_ `i` _from_ `[0, n - 1]`, `ans[i]` _is the **minimum** number of reverse operations needed to bring the_ `1` _to position_ `i` _in arr_, _or_ `-1` _if it is impossible_.  *   A **subarray** is a contiguous **non-empty** sequence of elements within an array. *   The values of `ans[i]` are independent for all `i`'s. *   The **reverse** of an array is an array containing the values in **reverse order**.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times:\n\n- Choose any two indices `i` and `j` (0-indexed) where `0 <= i < j < s.length` and `s[i] = 'a'` and `s[j] = 'z'`. Reverse the substring `s[i+1..j-1]`.\n\nYour task is to determine the minimum number of operations required to transform the string `s` into a string where all characters are the same. If it is impossible to achieve such a string, return `-1`.\n\nFor example, given the string `s = \"azbzczbzcz\"`, you can perform the following operations:\n1. Choose `i = 0` and `j = 1` to get `s = \"aabzczbzcz\"`.\n2. Choose `i = 2` and `j = 3` to get `s = \"aaazbzczcz\"`.\n3. Choose `i = 4` and `j = 5` to get `s = \"aaaaaaazcz\"`.\n4. Choose `i = 6` and `j = 7` to get `s = \"aaaaaaaazz\"`.\n5. Choose `i = 8` and `j = 9` to get `s = \"aaaaaaaaaz\"`.\n\nReturn `5` as the answer."}], "metadata": {"prompt_id": "00000062", "row_id": 62, "seed_ids": ["1442", "522", "2612"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given two positive integer arrays `nums` and `target`, of the same length.  In one operation, you can choose any two **distinct** indices `i` and `j` where `0 <= i, j < nums.length` and:  *   set `nums[i] = nums[i] + 2` and *   set `nums[j] = nums[j] - 2`.  Two arrays are considered to be **similar** if the frequency of each element is the same.  Return _the minimum number of operations required to make_ `nums` _similar to_ `target`. The test cases are generated such that `nums` can always be similar to `target`.\n\n[Question 2]: Given a string `s` and an integer `k`, return _the maximum number of vowel letters in any substring of_ `s` _with length_ `k`.  **Vowel letters** in English are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n[Question 3]: A **good meal** is a meal that contains **exactly two different food items** with a sum of deliciousness equal to a power of two.  You can pick **any** two different foods to make a good meal.  Given an array of integers `deliciousness` where `deliciousness[i]` is the deliciousness of the `i\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b`\u200b\u200b\u200b\u200b item of food, return _the number of different **good meals** you can make from this list modulo_ `109 + 7`.  Note that items with different indices are considered different even if they have the same deliciousness value.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a binary string `s` and an integer `k`, return the minimum number of operations required to make exactly `k` characters in the string '1'. In one operation, you can choose any substring of the string and flip all the characters in it (i.e., change '0' to '1' and '1' to '0'). Two strings are considered to be **similar** if they have the same number of '1's. The test cases are generated such that the binary string `s` can always be made to have exactly `k` '1's."}], "metadata": {"prompt_id": "00000063", "row_id": 63, "seed_ids": ["2449", "1456", "1711"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given the array `nums` consisting of `2n` elements in the form `[x1,x2,...,xn,y1,y2,...,yn]`.  _Return the array in the form_ `[x1,y1,x2,y2,...,xn,yn]`.\n\n[Question 2]: There are `n` kids with candies. You are given an integer array `candies`, where each `candies[i]` represents the number of candies the `ith` kid has, and an integer `extraCandies`, denoting the number of extra candies that you have.  Return _a boolean array_ `result` _of length_ `n`_, where_ `result[i]` _is_ `true` _if, after giving the_ `ith` _kid all the_ `extraCandies`_, they will have the **greatest** number of candies among all the kids__, or_ `false` _otherwise_.  Note that **multiple** kids can have the **greatest** number of candies.\n\n[Question 3]: Given the `root` of a binary tree, flatten the tree into a \"linked list \":  *   The \"linked list \" should use the same `TreeNode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`. *   The \"linked list \" should be in the same order as a [**pre-order** **traversal**](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR) of the binary tree.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a binary search tree (BST) and a node value `target`, return `true` if the `target` is found in the BST, and `false` otherwise. You may assume that each node in the BST has **uniquely** valued children. Additionally, provide a method to insert a new node with a given value into the BST while maintaining its properties."}], "metadata": {"prompt_id": "00000064", "row_id": 64, "seed_ids": ["1470", "1431", "114"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given a string `sentence` that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.  We would like to convert the sentence to \"Goat Latin \" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:  *   If a word begins with a vowel (`'a'`, `'e'`, `'i'`, `'o'`, or `'u'`), append `\"ma \"` to the end of the word. *   For example, the word `\"apple \"` becomes `\"applema \"`. *   If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add `\"ma \"`. *   For example, the word `\"goat \"` becomes `\"oatgma \"`. *   Add one letter `'a'` to the end of each word per its word index in the sentence, starting with `1`. *   For example, the first word gets `\"a \"` added to the end, the second word gets `\"aa \"` added to the end, and so on.  Return _the final sentence representing the conversion from sentence to Goat Latin_.\n\n[Question 2]: A **matrix diagonal** is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the **matrix diagonal** starting from `mat[2][0]`, where `mat` is a `6 x 3` matrix, includes cells `mat[2][0]`, `mat[3][1]`, and `mat[4][2]`.  Given an `m x n` matrix `mat` of integers, sort each **matrix diagonal** in ascending order and return _the resulting matrix_.\n\n[Question 3]: A sequence is **special** if it consists of a **positive** number of `0`s, followed by a **positive** number of `1`s, then a **positive** number of `2`s.  *   For example, `[0,1,2]` and `[0,0,1,1,1,2]` are special. *   In contrast, `[2,1,0]`, `[1]`, and `[0,1,2,0]` are not special.  Given an array `nums` (consisting of **only** integers `0`, `1`, and `2`), return _the **number of different subsequences** that are special_. Since the answer may be very large, **return it modulo** `109 + 7`.  A **subsequence** of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Two subsequences are **different** if the **set of indices** chosen are different.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given an array `nums` consisting of integers from `1` to `n` inclusive, where `n` is the length of the array. The array is initially sorted in ascending order. However, exactly one element is missing from the array, and the array is not necessarily contiguous. Your task is to find the missing element and return it. \n\nFor example, if the array is `[1, 2, 4, 5, 6]`, the missing element is `3`, and you should return `3`. If the array is `[1, 3, 4, 5]`, the missing element is `2`, and you should return `2`.\n\nReturn the missing element in the array."}], "metadata": {"prompt_id": "00000065", "row_id": 65, "seed_ids": ["824", "1329", "1955"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Every **valid email** consists of a **local name** and a **domain name**, separated by the `'@'` sign. Besides lowercase letters, the email may contain one or more `'.'` or `'+'`.  *   For example, in `\"alice@leetcode.com \"`, `\"alice \"` is the **local name**, and `\"leetcode.com \"` is the **domain name**.  If you add periods `'.'` between some characters in the **local name** part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule **does not apply** to **domain names**.  *   For example, `\"alice.z@leetcode.com \"` and `\"alicez@leetcode.com \"` forward to the same email address.  If you add a plus `'+'` in the **local name**, everything after the first plus sign **will be ignored**. This allows certain emails to be filtered. Note that this rule **does not apply** to **domain names**.  *   For example, `\"m.y+name@email.com \"` will be forwarded to `\"my@email.com \"`.  It is possible to use both of these rules at the same time.  Given an array of strings `emails` where we send one email to each `emails[i]`, return _the number of different addresses that actually receive mails_.\n\n[Question 2]: A **wiggle sequence** is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.  *   For example, `[1, 7, 4, 9, 2, 5]` is a **wiggle sequence** because the differences `(6, -3, 5, -7, 3)` alternate between positive and negative. *   In contrast, `[1, 4, 7, 2, 5]` and `[1, 7, 4, 5, 5]` are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.  A **subsequence** is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.  Given an integer array `nums`, return _the length of the longest **wiggle subsequence** of_ `nums`.\n\n[Question 3]: Given the `root` of a binary tree, return `true` _if you can partition the tree into two trees with equal sums of values after removing exactly one edge on the original tree_.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a **binary search tree (BST)**, return the number of **valid** sequences of **node values** such that for every node, the value of that node is **strictly greater** than the sum of the values of all nodes that come before it and **strictly less** than the sum of the values of all nodes that come after it. In other words, a valid sequence is one where each node's value is the sum of a contiguous subsequence of its in-order traversal values. For example, in the tree:\n\n```\n    5\n   / \\\n  3   7\n / \\\n2   4\n```\n\nThe sequence `[2, 3, 4, 5, 7]` is valid because each node's value is greater than the sum of all previous nodes and less than the sum of all subsequent nodes. Note that the sequence must strictly follow the in-order traversal of the tree."}], "metadata": {"prompt_id": "00000066", "row_id": 66, "seed_ids": ["929", "376", "663"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given an array `nums` that consists of non-negative integers. Let us define `rev(x)` as the reverse of the non-negative integer `x`. For example, `rev(123) = 321`, and `rev(120) = 21`. A pair of indices `(i, j)` is **nice** if it satisfies all of the following conditions:  *   `0 <= i < j < nums.length` *   `nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])`  Return _the number of nice pairs of indices_. Since that number can be too large, return it **modulo** `109 + 7`.\n\n[Question 2]: You are given two **0-indexed** arrays of strings `startWords` and `targetWords`. Each string consists of **lowercase English letters** only.  For each string in `targetWords`, check if it is possible to choose a string from `startWords` and perform a **conversion operation** on it to be equal to that from `targetWords`.  The **conversion operation** is described in the following two steps:  1.  **Append** any lowercase letter that is **not present** in the string to its end. *   For example, if the string is `\"abc \"`, the letters `'d'`, `'e'`, or `'y'` can be added to it, but not `'a'`. If `'d'` is added, the resulting string will be `\"abcd \"`. 2.  **Rearrange** the letters of the new string in **any** arbitrary order. *   For example, `\"abcd \"` can be rearranged to `\"acbd \"`, `\"bacd \"`, `\"cbda \"`, and so on. Note that it can also be rearranged to `\"abcd \"` itself.  Return _the **number of strings** in_ `targetWords` _that can be obtained by performing the operations on **any** string of_ `startWords`.  **Note** that you will only be verifying if the string in `targetWords` can be obtained from a string in `startWords` by performing the operations. The strings in `startWords` **do not** actually change during this process.\n\n[Question 3]: You are given an integer array `nums`. The _value_ of this array is defined as the sum of `|nums[i] - nums[i + 1]|` for all `0 <= i < nums.length - 1`.  You are allowed to select any subarray of the given array and reverse it. You can perform this operation **only once**.  Find maximum possible value of the final array.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given an integer array `nums` and an integer `k`. The _value_ of this array is defined as the sum of `|nums[i] - nums[i + 1]|` for all `0 <= i < nums.length - 1`. You are allowed to select any subarray of the given array and shift its elements cyclically (i.e., rotate the subarray elements to the left or right) any number of times. You can perform this operation **only once**. Find the maximum possible value of the final array after performing the operation."}], "metadata": {"prompt_id": "00000067", "row_id": 67, "seed_ids": ["1814", "2135", "1330"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given an integer array `nums` and an integer `k`.  Split the array into some number of non-empty subarrays. The **cost** of a split is the sum of the **importance value** of each subarray in the split.  Let `trimmed(subarray)` be the version of the subarray where all numbers which appear only once are removed.  *   For example, `trimmed([3,1,2,4,3,4]) = [3,4,3,4].`  The **importance value** of a subarray is `k + trimmed(subarray).length`.  *   For example, if a subarray is `[1,2,3,3,3,4,4]`, then trimmed(`[1,2,3,3,3,4,4]) = [3,3,3,4,4].`The importance value of this subarray will be `k + 5`.  Return _the minimum possible cost of a split of_ `nums`.  A **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n[Question 2]: There are `n` cities numbered from `0` to `n-1`. Given the array `edges` where `edges[i] = [fromi, toi, weighti]` represents a bidirectional and weighted edge between cities `fromi` and `toi`, and given the integer `distanceThreshold`.  Return the city with the smallest number of cities that are reachable through some path and whose distance is **at most** `distanceThreshold`, If there are multiple such cities, return the city with the greatest number.  Notice that the distance of a path connecting cities _**i**_ and _**j**_ is equal to the sum of the edges' weights along that path.\n\n[Question 3]: Given a reference of a node in a **[connected](https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph)** undirected graph.  Return a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) (clone) of the graph.  Each node in the graph contains a value (`int`) and a list (`List[Node]`) of its neighbors.  class Node { public int val; public List neighbors; }  **Test case format:**  For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with `val == 1`, the second node with `val == 2`, and so on. The graph is represented in the test case using an adjacency list.  **An adjacency list** is a collection of unordered **lists** used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.  The given node will always be the first node with `val = 1`. You must return the **copy of the given node** as a reference to the cloned graph.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a binary tree, your task is to find the minimum **balance factor** of all its nodes. A node's balance factor is defined as the difference between the heights of its left and right subtrees, and the balance factor of the entire tree is the minimum balance factor of all its nodes. If the tree is empty, the balance factor is considered to be 0. Additionally, if a node does not have a left or right subtree, its balance factor is the height of the existing subtree. Return the minimum balance factor of the tree.\n\nFor example, consider the following tree:\n\n```\n    1\n   / \\\n  2   3\n /\n4\n```\n\nThe balance factors of the nodes are as follows:\n- Node 1: |2 - 1| = 1\n- Node 2: |1 - 0| = 1\n- Node 3: |0 - 0| = 0\n- Node 4: 1 (since it only has a left subtree)\n\nThe minimum balance factor is 0.\n\n**Note**: A node's height is defined as the number of edges on the longest path from the node to a leaf. A leaf node has a height of 0."}], "metadata": {"prompt_id": "00000068", "row_id": 68, "seed_ids": ["2547", "1334", "133"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: An **additive number** is a string whose digits can form an **additive sequence**.  A valid **additive sequence** should contain **at least** three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.  Given a string containing only digits, return `true` if it is an **additive number** or `false` otherwise.  **Note:** Numbers in the additive sequence **cannot** have leading zeros, so sequence `1, 2, 03` or `1, 02, 3` is invalid.\n\n[Question 2]: Write an algorithm to determine if a number `n` is happy.  A **happy number** is a number defined by the following process:  *   Starting with any positive integer, replace the number by the sum of the squares of its digits. *   Repeat the process until the number equals 1 (where it will stay), or it **loops endlessly in a cycle** which does not include 1. *   Those numbers for which this process **ends in 1** are happy.  Return `true` _if_ `n` _is a happy number, and_ `false` _if not_.\n\n[Question 3]: You are given a series of video clips from a sporting event that lasted `time` seconds. These video clips can be overlapping with each other and have varying lengths.  Each video clip is described by an array `clips` where `clips[i] = [starti, endi]` indicates that the ith clip started at `starti` and ended at `endi`.  We can cut these clips into segments freely.  *   For example, a clip `[0, 7]` can be cut into segments `[0, 1] + [1, 3] + [3, 7]`.  Return _the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event_ `[0, time]`. If the task is impossible, return `-1`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s` consisting of lowercase English letters, you are tasked with determining whether the string can be rearranged such that every even-indexed character is a vowel and every odd-indexed character is a consonant. Return `true` if such an arrangement is possible, otherwise return `false`. Note that the string length is at least 2 and at most 100."}], "metadata": {"prompt_id": "00000069", "row_id": 69, "seed_ids": ["306", "202", "1024"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: There is a row of `m` houses in a small city, each house must be painted with one of the `n` colors (labeled from `1` to `n`), some houses that have been painted last summer should not be painted again.  A neighborhood is a maximal group of continuous houses that are painted with the same color.  *   For example: `houses = [1,2,2,3,3,2,1,1]` contains `5` neighborhoods `[{1}, {2,2}, {3,3}, {2}, {1,1}]`.  Given an array `houses`, an `m x n` matrix `cost` and an integer `target` where:  *   `houses[i]`: is the color of the house `i`, and `0` if the house is not painted yet. *   `cost[i][j]`: is the cost of paint the house `i` with the color `j + 1`.  Return _the minimum cost of painting all the remaining houses in such a way that there are exactly_ `target` _neighborhoods_. If it is not possible, return `-1`.\n\n[Question 2]: Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the [Hamming weight](http://en.wikipedia.org/wiki/Hamming_weight)).  **Note:**  *   Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned. *   In Java, the compiler represents the signed integers using [2's complement notation](https://en.wikipedia.org/wiki/Two%27s_complement). Therefore, in **Example 3**, the input represents the signed integer. `-3`.\n\n[Question 3]: You are given the `root` of a binary tree with **unique values**.  In one operation, you can choose any two nodes **at the same level** and swap their values.  Return _the minimum number of operations needed to make the values at each level sorted in a **strictly increasing order**_.  The **level** of a node is the number of edges along the path between it and the root node_._\n\n[Question 4]:"}, {"role": "assistant", "content": "[Question 5]: You are given a list of `n` robots, each robot has a unique identifier from `1` to `n`. Each robot can move to the left or right on a number line, and each robot can move a maximum of `k` units in one step. You are also given an array `orders` where `orders[i]` is a list of robot identifiers that need to be at position `i + 1` on the number line. The goal is to move all robots to their respective positions with the minimum number of steps. Each robot can only move to its designated position and cannot move to a position that has already been assigned to another robot. Return the minimum number of steps required to achieve the goal, or `-1` if it is impossible to move all robots to their designated positions."}], "metadata": {"prompt_id": "00000070", "row_id": 70, "seed_ids": ["1473", "191", "2471"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given an integer `n` denoting the number of cities in a country. The cities are numbered from `0` to `n - 1`.  You are also given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional** road connecting cities `ai` and `bi`.  You need to assign each city with an integer value from `1` to `n`, where each value can only be used **once**. The **importance** of a road is then defined as the **sum** of the values of the two cities it connects.  Return _the **maximum total importance** of all roads possible after assigning the values optimally._\n\n[Question 2]: You are given an integer `n` indicating there are `n` specialty retail stores. There are `m` product types of varying amounts, which are given as a **0-indexed** integer array `quantities`, where `quantities[i]` represents the number of products of the `ith` product type.  You need to distribute **all products** to the retail stores following these rules:  *   A store can only be given **at most one product type** but can be given **any** amount of it. *   After distribution, each store will have been given some number of products (possibly `0`). Let `x` represent the maximum number of products given to any store. You want `x` to be as small as possible, i.e., you want to **minimize** the **maximum** number of products that are given to any store.  Return _the minimum possible_ `x`.\n\n[Question 3]: Given two numbers, `hour` and `minutes`, return _the smaller angle (in degrees) formed between the_ `hour` _and the_ `minute` _hand_.  Answers within `10-5` of the actual value will be accepted as correct.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given an integer `n` denoting the number of cities in a country. The cities are numbered from `0` to `n - 1`. You are also given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional** road connecting cities `ai` and `bi`. You need to assign each city with a unique integer value from `1` to `n` such that the **sum** of the values of the two cities connected by each road is maximized. Return the **maximum possible sum** of the importance of all roads after assigning the values optimally."}], "metadata": {"prompt_id": "00000071", "row_id": 71, "seed_ids": ["2285", "2064", "1344"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: We have two special characters:  *   The first character can be represented by one bit `0`. *   The second character can be represented by two bits (`10` or `11`).  Given a binary array `bits` that ends with `0`, return `true` if the last character must be a one-bit character.\n\n[Question 2]: Given an array `nums` and an integer `target`, return _the maximum number of **non-empty** **non-overlapping** subarrays such that the sum of values in each subarray is equal to_ `target`.\n\n[Question 3]: Given an array of strings `wordsDict` and two different strings that already exist in the array `word1` and `word2`, return _the shortest distance between these two words in the list_.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a binary string `s` without leading zeros, return the number of ways to split `s` into three non-empty substrings such that the bitwise XOR of the first two substrings is equal to the bitwise XOR of the last two substrings. The substrings are formed by consecutive binary digits in `s`."}], "metadata": {"prompt_id": "00000072", "row_id": 72, "seed_ids": ["717", "1546", "243"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: In an **infinite** chess board with coordinates from `-infinity` to `+infinity`, you have a **knight** at square `[0, 0]`.  A knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.  Return _the minimum number of steps needed to move the knight to the square_ `[x, y]`. It is guaranteed the answer exists.\n\n[Question 2]: Alice and Bob take turns playing a game, with Alice starting first.  Initially, there is a number `n` on the chalkboard. On each player's turn, that player makes a move consisting of:  *   Choosing any `x` with `0 < x < n` and `n % x == 0`. *   Replacing the number `n` on the chalkboard with `n - x`.  Also, if a player cannot make a move, they lose the game.  Return `true` _if and only if Alice wins the game, assuming both players play optimally_.\n\n[Question 3]: Given the `root` of a binary tree, the level of its root is `1`, the level of its children is `2`, and so on.  Return the **smallest** level `x` such that the sum of all the values of nodes at level `x` is **maximal**.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given an **infinite** 2D grid representing a map, where each cell can either be land (`1`) or water (`0`), a **snake** is defined as a sequence of adjacent land cells. The length of a snake is the number of cells it spans. You start at the top-left corner of the grid at cell `[0, 0]`. On each move, you can travel to an adjacent cell (up, down, left, or right) but you cannot revisit any cell. The goal is to find the maximum length of a snake starting from `[0, 0]` and moving to the **right**most possible cell in the grid, which is beyond the current boundary. You are given the grid as a 2D array where `1` represents land and `0` represents water. Return the length of the longest snake."}], "metadata": {"prompt_id": "00000073", "row_id": 73, "seed_ids": ["1197", "1025", "1161"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given the `head` of a linked list, and an integer `k`.  Return _the head of the linked list after **swapping** the values of the_ `kth` _node from the beginning and the_ `kth` _node from the end (the list is **1-indexed**)._\n\n[Question 2]: You are given an array of strings `names`, and an array `heights` that consists of **distinct** positive integers. Both arrays are of length `n`.  For each index `i`, `names[i]` and `heights[i]` denote the name and height of the `ith` person.  Return `names` _sorted in **descending** order by the people's heights_.\n\n[Question 3]: You are given a string `s` of even length. Split this string into two halves of equal lengths, and let `a` be the first half and `b` be the second half.  Two strings are **alike** if they have the same number of vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`, `'A'`, `'E'`, `'I'`, `'O'`, `'U'`). Notice that `s` contains uppercase and lowercase letters.  Return `true` _if_ `a` _and_ `b` _are **alike**_. Otherwise, return `false`.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a string `s` consisting of lowercase English letters. You need to determine the lexicographically smallest palindrome by swapping any two adjacent characters in the string at most once. Return the resulting palindrome string. If it's not possible to form a palindrome by swapping at most one pair of adjacent characters, return the original string."}], "metadata": {"prompt_id": "00000074", "row_id": 74, "seed_ids": ["1721", "2418", "1704"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given an array of positive integers `arr` (not necessarily distinct), return _the_ _lexicographically_ _largest permutation that is smaller than_ `arr`, that can be **made with exactly one swap**. If it cannot be done, then return the same array.  **Note** that a _swap_ exchanges the positions of two numbers `arr[i]` and `arr[j]`\n\n[Question 2]: You are given a **0-indexed** string `pattern` of length `n` consisting of the characters `'I'` meaning **increasing** and `'D'` meaning **decreasing**.  A **0-indexed** string `num` of length `n + 1` is created using the following conditions:  *   `num` consists of the digits `'1'` to `'9'`, where each digit is used **at most** once. *   If `pattern[i] == 'I'`, then `num[i] < num[i + 1]`. *   If `pattern[i] == 'D'`, then `num[i] > num[i + 1]`.  Return _the lexicographically **smallest** possible string_ `num` _that meets the conditions._\n\n[Question 3]: You have a video sharing platform where users can upload and delete videos. Each `video` is a **string** of digits, where the `ith` digit of the string represents the content of the video at minute `i`. For example, the first digit represents the content at minute `0` in the video, the second digit represents the content at minute `1` in the video, and so on. Viewers of videos can also like and dislike videos. Internally, the platform keeps track of the **number of views, likes, and dislikes** on each video.  When a video is uploaded, it is associated with the smallest available integer `videoId` starting from `0`. Once a video is deleted, the `videoId` associated with that video can be reused for another video.  Implement the `VideoSharingPlatform` class:  *   `VideoSharingPlatform()` Initializes the object. *   `int upload(String video)` The user uploads a `video`. Return the `videoId` associated with the video. *   `void remove(int videoId)` If there is a video associated with `videoId`, remove the video. *   `String watch(int videoId, int startMinute, int endMinute)` If there is a video associated with `videoId`, increase the number of views on the video by `1` and return the substring of the video string starting at `startMinute` and ending at `min(endMinute, video.length - 1``)` (**inclusive**). Otherwise, return `\"-1 \"`. *   `void like(int videoId)` Increases the number of likes on the video associated with `videoId` by `1` if there is a video associated with `videoId`. *   `void dislike(int videoId)` Increases the number of dislikes on the video associated with `videoId` by `1` if there is a video associated with `videoId`. *   `int[] getLikesAndDislikes(int videoId)` Return a **0-indexed** integer array `values` of length `2` where `values[0]` is the number of likes and `values[1]` is the number of dislikes on the video associated with `videoId`. If there is no video associated with `videoId`, return `[-1]`. *   `int getViews(int videoId)` Return the number of views on the video associated with `videoId`, if there is no video associated with `videoId`, return `-1`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s` consisting of lowercase English letters, you can perform the following operation any number of times: choose a non-empty substring `s[i... j]` (i.e., `s[i]` is the first character and `s[j]` is the last character) and reverse it. The goal is to make the string `s` **lexicographically** **smallest** possible. Return the smallest string `s` you can obtain after performing this operation any number of times."}], "metadata": {"prompt_id": "00000075", "row_id": 75, "seed_ids": ["1053", "2375", "2254"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given a positive integer `num`, return _the number of positive integers **less than or equal to**_ `num` _whose digit sums are **even**_.  The **digit sum** of a positive integer is the sum of all its digits.\n\n[Question 2]: Alice and Bob take turns playing a game, with Alice starting first.  Initially, there is a number `n` on the chalkboard. On each player's turn, that player makes a move consisting of:  *   Choosing any `x` with `0 < x < n` and `n % x == 0`. *   Replacing the number `n` on the chalkboard with `n - x`.  Also, if a player cannot make a move, they lose the game.  Return `true` _if and only if Alice wins the game, assuming both players play optimally_.\n\n[Question 3]: Nearly everyone has used the [Multiplication Table](https://en.wikipedia.org/wiki/Multiplication_table). The multiplication table of size `m x n` is an integer matrix `mat` where `mat[i][j] == i * j` (**1-indexed**).  Given three integers `m`, `n`, and `k`, return _the_ `kth` _smallest element in the_ `m x n` _multiplication table_.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a positive integer `n`, return the number of integers `x` in the range `[1, n]` (inclusive) such that the sum of the digits of `x` is a **prime number**. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself."}], "metadata": {"prompt_id": "00000076", "row_id": 76, "seed_ids": ["2180", "1025", "668"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: There is a tree (i.e., a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` edges. Each node has a value associated with it, and the **root** of the tree is node `0`.  To represent this tree, you are given an integer array `nums` and a 2D array `edges`. Each `nums[i]` represents the `ith` node's value, and each `edges[j] = [uj, vj]` represents an edge between nodes `uj` and `vj` in the tree.  Two values `x` and `y` are **coprime** if `gcd(x, y) == 1` where `gcd(x, y)` is the **greatest common divisor** of `x` and `y`.  An ancestor of a node `i` is any other node on the shortest path from node `i` to the **root**. A node is **not** considered an ancestor of itself.  Return _an array_ `ans` _of size_ `n`, _where_ `ans[i]` _is the closest ancestor to node_ `i` _such that_ `nums[i]` _and_ `nums[ans[i]]` are **coprime**, or `-1` _if there is no such ancestor_.\n\n[Question 2]: A sentence is a list of **tokens** separated by a **single** space with no leading or trailing spaces. Every token is either a **positive number** consisting of digits `0-9` with no leading zeros, or a **word** consisting of lowercase English letters.  *   For example, `\"a puppy has 2 eyes 4 legs \"` is a sentence with seven tokens: `\"2 \"` and `\"4 \"` are numbers and the other tokens such as `\"puppy \"` are words.  Given a string `s` representing a sentence, you need to check if **all** the numbers in `s` are **strictly increasing** from left to right (i.e., other than the last number, **each** number is **strictly smaller** than the number on its **right** in `s`).  Return `true` _if so, or_ `false` _otherwise_.\n\n[Question 3]: You are given a **0-indexed** integer array `nums`. In one operation, you can:  *   Choose two different indices `i` and `j` such that `0 <= i, j < nums.length`. *   Choose a non-negative integer `k` such that the `kth` bit (**0-indexed**) in the binary representation of `nums[i]` and `nums[j]` is `1`. *   Subtract `2k` from `nums[i]` and `nums[j]`.  A subarray is **beautiful** if it is possible to make all of its elements equal to `0` after applying the above operation any number of times.  Return _the number of **beautiful subarrays** in the array_ `nums`.  A subarray is a contiguous **non-empty** sequence of elements within an array.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a binary tree with `n` nodes labeled from `0` to `n-1`, where each node has a value associated with it, represented by an array `values`, and a 2D array `edges` that defines the tree's structure, you are tasked with finding the node that, when removed, results in the maximum number of connected components in the tree, where the values of the nodes in each component are coprime. If there are multiple nodes that result in the same maximum number of components, return the one with the smallest label.\n\nFormally, you need to:\n\n- Remove one node from the tree and determine the number of connected components that are formed.\n- Each component must consist of nodes whose values are coprime.\n- Return the label of the node that maximizes the number of such components. If there are multiple such nodes, return the one with the smallest label. If no such node exists, return `-1`.\n\nExample:\n```python\nvalues = [2, 3, 6, 9, 10]\nedges = [[0, 1], [1, 2], [1, 3], [3, 4]]\n```\nIn this example, removing node `1` results in two connected components where all nodes in each component are coprime: `[2]` and `[6, 9, 10]`. Thus, the answer is `1`."}], "metadata": {"prompt_id": "00000077", "row_id": 77, "seed_ids": ["1766", "2042", "2588"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: There are two types of soup: **type A** and **type B**. Initially, we have `n` ml of each type of soup. There are four kinds of operations:  1.  Serve `100` ml of **soup A** and `0` ml of **soup B**, 2.  Serve `75` ml of **soup A** and `25` ml of **soup B**, 3.  Serve `50` ml of **soup A** and `50` ml of **soup B**, and 4.  Serve `25` ml of **soup A** and `75` ml of **soup B**.  When we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability `0.25`. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.  **Note** that we do not have an operation where all `100` ml's of **soup B** are used first.  Return _the probability that **soup A** will be empty first, plus half the probability that **A** and **B** become empty at the same time_. Answers within `10-5` of the actual answer will be accepted.\n\n[Question 2]: You may recall that an array `arr` is a **mountain array** if and only if:  *   `arr.length >= 3` *   There exists some index `i` (**0-indexed**) with `0 < i < arr.length - 1` such that: *   `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]` *   `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`  Given an integer array `nums`\u200b\u200b\u200b, return _the **minimum** number of elements to remove to make_ `nums_\u200b\u200b\u200b_` _a **mountain array**._\n\n[Question 3]: **No-Zero integer** is a positive integer that **does not contain any `0`** in its decimal representation.  Given an integer `n`, return _a list of two integers_ `[a, b]` _where_:  *   `a` and `b` are **No-Zero integers**. *   `a + b = n`  The test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.\n\n[Question 4]:"}, {"role": "assistant", "content": "[Question 5]: You are given a binary string `s`. A **substring** of `s` is called **good** if it does not contain any leading zeros and has an even length. Your task is to count the number of **good substrings** in `s`.\n\nFor example, given the string `s = \"1001010\"`, the good substrings are `\"10\"`, `\"010\"`, and `\"010\"`. Therefore, the answer is `3`.\n\nWrite a function `countGoodSubstrings(s: str) -> int` that returns the number of good substrings in the binary string `s`.\n\n**Constraints**:\n- `1 <= len(s) <= 1000`\n- `s` consists only of `0`s and `1`s."}], "metadata": {"prompt_id": "00000078", "row_id": 78, "seed_ids": ["808", "1671", "1317"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Design a data structure that efficiently finds the **majority element** of a given subarray.  The **majority element** of a subarray is an element that occurs `threshold` times or more in the subarray.  Implementing the `MajorityChecker` class:  *   `MajorityChecker(int[] arr)` Initializes the instance of the class with the given array `arr`. *   `int query(int left, int right, int threshold)` returns the element in the subarray `arr[left...right]` that occurs at least `threshold` times, or `-1` if no such element exists.\n\n[Question 2]: An **IP address** is a formatted 32-bit unsigned integer where each group of 8 bits is printed as a decimal number and the dot character `'.'` splits the groups.  *   For example, the binary number `00001111 10001000 11111111 01101011` (spaces added for clarity) formatted as an IP address would be `\"15.136.255.107 \"`.  A **CIDR block** is a format used to denote a specific set of IP addresses. It is a string consisting of a base IP address, followed by a slash, followed by a prefix length `k`. The addresses it covers are all the IPs whose **first `k` bits** are the same as the base IP address.  *   For example, `\"123.45.67.89/20 \"` is a CIDR block with a prefix length of `20`. Any IP address whose binary representation matches `01111011 00101101 0100xxxx xxxxxxxx`, where `x` can be either `0` or `1`, is in the set covered by the CIDR block.  You are given a start IP address `ip` and the number of IP addresses we need to cover `n`. Your goal is to use **as few CIDR blocks as possible** to cover all the IP addresses in the **inclusive** range `[ip, ip + n - 1]` **exactly**. No other IP addresses outside of the range should be covered.  Return _the **shortest** list of **CIDR blocks** that covers the range of IP addresses. If there are multiple answers, return **any** of them_.\n\n[Question 3]: A **sentence** is a string of single-space separated words where each word can contain digits, lowercase letters, and the dollar sign `'$'`. A word represents a **price** if it is a sequence of digits preceded by a dollar sign.  *   For example, `\"$100 \"`, `\"$23 \"`, and `\"$6 \"` represent prices while `\"100 \"`, `\"$ \"`, and `\"$1e5 \"` do not.  You are given a string `sentence` representing a sentence and an integer `discount`. For each word representing a price, apply a discount of `discount%` on the price and **update** the word in the sentence. All updated prices should be represented with **exactly two** decimal places.  Return _a string representing the modified sentence_.  Note that all prices will contain **at most** `10` digits.\n\n[Question 4]:"}, {"role": "assistant", "content": "Design a class `RangeFreqQuery` that supports efficient frequency queries on a given array `arr`. The goal is to implement a method that can quickly determine the frequency of any element within a specified range of the array. Specifically, implement the `RangeFreqQuery` class:\n\n- `RangeFreqQuery(int[] arr)`: Initializes the class with the given array `arr`.\n- `int query(int left, int right, int value)`: Returns the frequency of the value `value` in the subarray `arr[left...right]`.\n\nFor example, given the array `arr = [1, 2, 2, 3, 3, 3, 4]`, the query `query(0, 6, 3)` should return `3` since the value `3` appears three times in the subarray `arr[0...6]`."}], "metadata": {"prompt_id": "00000079", "row_id": 79, "seed_ids": ["1157", "751", "2288"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given an integer array `nums` of length `n` and an integer `target`, find three integers in `nums` such that the sum is closest to `target`.  Return _the sum of the three integers_.  You may assume that each input would have exactly one solution.\n\n[Question 2]: Given an undirected tree consisting of `n` vertices numbered from `0` to `n-1`, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. _Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at **vertex 0** and coming back to this vertex._  The edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`. Additionally, there is a boolean array `hasApple`, where `hasApple[i] = true` means that vertex `i` has an apple; otherwise, it does not have any apple.\n\n[Question 3]: Design a data structure that supports adding new words and finding if a string matches any previously added string.  Implement the `WordDictionary` class:  *   `WordDictionary()` Initializes the object. *   `void addWord(word)` Adds `word` to the data structure, it can be matched later. *   `bool search(word)` Returns `true` if there is any string in the data structure that matches `word` or `false` otherwise. `word` may contain dots `'.'` where dots can be matched with any letter.\n\n[Question 4]:"}, {"role": "assistant", "content": "Design a data structure to find the `k` closest points to a given target point `(tx, ty)` on a 2D plane. The points are represented as an array of coordinates, where each coordinate is an array of two integers `[x, y]`. Implement the `KClosestPoints` class:\n\n*   `KClosestPoints(int k)` Initializes the object with `k`.\n*   `void addPoint(int x, int y)` Adds the point `(x, y)` to the data structure.\n*   `List<List<Integer>> getKClosestPoints()` Returns the `k` closest points to the target point `(tx, ty)` sorted by their Manhattan distance to the target. The Manhattan distance between two points `(x1, y1)` and `(x2, y2)` is given by `abs(x1 - x2) + abs(y1 - y2)`."}], "metadata": {"prompt_id": "00000080", "row_id": 80, "seed_ids": ["16", "1443", "211"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: A string `s` is **nice** if, for every letter of the alphabet that `s` contains, it appears **both** in uppercase and lowercase. For example, `\"abABB \"` is nice because `'A'` and `'a'` appear, and `'B'` and `'b'` appear. However, `\"abA \"` is not because `'b'` appears, but `'B'` does not.  Given a string `s`, return _the longest **substring** of `s` that is **nice**. If there are multiple, return the substring of the **earliest** occurrence. If there are none, return an empty string_.\n\n[Question 2]: Given a string `s`, return _the longest_ _palindromic_ _substring_ in `s`.\n\n[Question 3]: There is a car with `capacity` empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).  You are given the integer `capacity` and an array `trips` where `trips[i] = [numPassengersi, fromi, toi]` indicates that the `ith` trip has `numPassengersi` passengers and the locations to pick them up and drop them off are `fromi` and `toi` respectively. The locations are given as the number of kilometers due east from the car's initial location.  Return `true` _if it is possible to pick up and drop off all passengers for all the given trips, or_ `false` _otherwise_.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s`, return the longest substring of `s` that contains at least one occurrence of every character in the string `s`. If there are multiple substrings of the same length, return the substring that appears earliest in `s`. If no such substring exists, return an empty string."}], "metadata": {"prompt_id": "00000081", "row_id": 81, "seed_ids": ["1763", "5", "1094"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given an integer `n` and an integer array `rounds`. We have a circular track which consists of `n` sectors labeled from `1` to `n`. A marathon will be held on this track, the marathon consists of `m` rounds. The `ith` round starts at sector `rounds[i - 1]` and ends at sector `rounds[i]`. For example, round 1 starts at sector `rounds[0]` and ends at sector `rounds[1]`  Return _an array of the most visited sectors_ sorted in **ascending** order.  Notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).\n\n[Question 2]: You are given a 2D integer array `descriptions` where `descriptions[i] = [parenti, childi, isLefti]` indicates that `parenti` is the **parent** of `childi` in a **binary** tree of **unique** values. Furthermore,  *   If `isLefti == 1`, then `childi` is the left child of `parenti`. *   If `isLefti == 0`, then `childi` is the right child of `parenti`.  Construct the binary tree described by `descriptions` and return _its **root**_.  The test cases will be generated such that the binary tree is **valid**.\n\n[Question 3]: Given an integer `n`, add a dot ( \". \") as the thousands separator and return it in string format.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s` consisting of lowercase English letters and an integer `k`, you can perform the following operation at most `k` times:\n\n- Choose any index `i` and swap `s[i]` with `s[i + 1]` (0-indexed).\n\nAfter performing the operations, the string `s` should be a palindrome. Return the lexicographically smallest palindrome that can be obtained under these constraints. If it's not possible to form a palindrome, return an empty string."}], "metadata": {"prompt_id": "00000082", "row_id": 82, "seed_ids": ["1560", "2196", "1556"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given two integers `dividend` and `divisor`, divide two integers **without** using multiplication, division, and mod operator.  The integer division should truncate toward zero, which means losing its fractional part. For example, `8.345` would be truncated to `8`, and `-2.7335` would be truncated to `-2`.  Return _the **quotient** after dividing_ `dividend` _by_ `divisor`.  **Note:** Assume we are dealing with an environment that could only store integers within the **32-bit** signed integer range: `[-231, 231 - 1]`. For this problem, if the quotient is **strictly greater than** `231 - 1`, then return `231 - 1`, and if the quotient is **strictly less than** `-231`, then return `-231`.\n\n[Question 2]: An `n x n` matrix is **valid** if every row and every column contains **all** the integers from `1` to `n` (**inclusive**).  Given an `n x n` integer matrix `matrix`, return `true` _if the matrix is **valid**._ Otherwise, return `false`.\n\n[Question 3]: You have an infinite number of stacks arranged in a row and numbered (left to right) from `0`, each of the stacks has the same maximum capacity.  Implement the `DinnerPlates` class:  *   `DinnerPlates(int capacity)` Initializes the object with the maximum capacity of the stacks `capacity`. *   `void push(int val)` Pushes the given integer `val` into the leftmost stack with a size less than `capacity`. *   `int pop()` Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns `-1` if all the stacks are empty. *   `int popAtStack(int index)` Returns the value at the top of the stack with the given index `index` and removes it from that stack or returns `-1` if the stack with that given index is empty.\n\n[Question 4]:"}, {"role": "assistant", "content": "[Question 5]: Given a list of `n` unique integers `nums` and an integer `k`, return the `k` smallest **absolute differences** between any two distinct elements in the list. More formally, you need to find the `k` smallest values of `|a - b|` for all pairs `(a, b)` where `a` and `b` are distinct elements in `nums`. Ensure that the elements in the output are unique and sorted in ascending order. If there are fewer than `k` unique differences, return all of them. Note that the absolute difference between two integers `a` and `b` is defined as `|a - b|`."}], "metadata": {"prompt_id": "00000083", "row_id": 83, "seed_ids": ["29", "2133", "1172"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given all the nodes of an **[N-ary tree](https://leetcode.com/explore/learn/card/n-ary-tree/)** as an array of `Node` objects, where each node has a **unique value**.  Return _the **root** of the N-ary tree_.  **Custom testing:**  An N-ary tree can be serialized as represented in its level order traversal where each group of children is separated by the `null` value (see examples).  For example, the above tree is serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`.  The testing will be done in the following way:  1.  The **input data** should be provided as a serialization of the tree. 2.  The driver code will construct the tree from the serialized input data and put each `Node` object into an array **in an arbitrary order**. 3.  The driver code will pass the array to `findRoot`, and your function should find and return the root `Node` object in the array. 4.  The driver code will take the returned `Node` object and serialize it. If the serialized value and the input data are the **same**, the test **passes**.\n\n[Question 2]: As the ruler of a kingdom, you have an army of wizards at your command.  You are given a **0-indexed** integer array `strength`, where `strength[i]` denotes the strength of the `ith` wizard. For a **contiguous** group of wizards (i.e. the wizards' strengths form a **subarray** of `strength`), the **total strength** is defined as the **product** of the following two values:  *   The strength of the **weakest** wizard in the group. *   The **total** of all the individual strengths of the wizards in the group.  Return _the **sum** of the total strengths of **all** contiguous groups of wizards_. Since the answer may be very large, return it **modulo** `109 + 7`.  A **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n[Question 3]: There is a country of `n` cities numbered from `0` to `n - 1`. In this country, there is a road connecting **every pair** of cities.  There are `m` friends numbered from `0` to `m - 1` who are traveling through the country. Each one of them will take a path consisting of some cities. Each path is represented by an integer array that contains the visited cities in order. The path may contain a city **more than once**, but the same city will not be listed consecutively.  Given an integer `n` and a 2D integer array `paths` where `paths[i]` is an integer array representing the path of the `ith` friend, return _the length of the **longest common subpath** that is shared by **every** friend's path, or_ `0` _if there is no common subpath at all_.  A **subpath** of a path is a contiguous sequence of cities within that path.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a list of integers representing the heights of buildings on a city street. Each building's height is given by a positive integer. A group of buildings is considered **monotonic** if the heights either strictly increase or strictly decrease when moving from left to right. \n\nYour task is to find the maximum number of buildings that can be included in a monotonic group within the given list of building heights. \n\n**Note**: A group of buildings can consist of a single building, and adjacent buildings in the group must have consecutive heights (i.e., the height difference between any two adjacent buildings in the group is exactly 1).\n\nReturn the maximum size of such a monotonic group.\n\nExample 1:\n```\nInput: heights = [5, 4, 3, 2, 1, 2, 3, 4, 5]\nOutput: 5\nExplanation: The longest monotonic group is [5, 4, 3, 2, 1] or [1, 2, 3, 4, 5].\n```\n\nExample 2:\n```\nInput: heights = [1, 3, 5, 4, 2, 4, 6]\nOutput: 4\nExplanation: The longest monotonic group is [1, 3, 5] or [2, 4, 6].\n```\n\nConstraints:\n- `1 <= heights.length <= 10^5`\n- `1 <= heights[i] <= 10^9`"}], "metadata": {"prompt_id": "00000084", "row_id": 84, "seed_ids": ["1506", "2281", "1923"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: A tree rooted at node 0 is given as follows:  *   The number of nodes is `nodes`; *   The value of the `ith` node is `value[i]`; *   The parent of the `ith` node is `parent[i]`.  Remove every subtree whose sum of values of nodes is zero.  Return _the number of the remaining nodes in the tree_.\n\n[Question 2]: Given an integer `rowIndex`, return the `rowIndexth` (**0-indexed**) row of the **Pascal's triangle**.  In **Pascal's triangle**, each number is the sum of the two numbers directly above it as shown:\n\n[Question 3]: There is an exam room with `n` seats in a single row labeled from `0` to `n - 1`.  When a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number `0`.  Design a class that simulates the mentioned exam room.  Implement the `ExamRoom` class:  *   `ExamRoom(int n)` Initializes the object of the exam room with the number of the seats `n`. *   `int seat()` Returns the label of the seat at which the next student will set. *   `void leave(int p)` Indicates that the student sitting at seat `p` will leave the room. It is guaranteed that there will be a student sitting at seat `p`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s` consisting of lowercase English letters, a **substring** `t` is called **balanced** if the number of occurrences of each letter in `t` is the same. For example, the substring `\"ababa\"` is balanced because each letter appears exactly twice. \n\nDesign an algorithm to find the length of the longest **balanced** substring `t` in `s`. Return the length of `t`. If no such substring exists, return `0`."}], "metadata": {"prompt_id": "00000085", "row_id": 85, "seed_ids": ["1273", "119", "855"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given an integer `num`. You can swap two digits at most once to get the maximum valued number.  Return _the maximum valued number you can get_.\n\n[Question 2]: Determine if a `9 x 9` Sudoku board is valid. Only the filled cells need to be validated **according to the following rules**:  1.  Each row must contain the digits `1-9` without repetition. 2.  Each column must contain the digits `1-9` without repetition. 3.  Each of the nine `3 x 3` sub-boxes of the grid must contain the digits `1-9` without repetition.  **Note:**  *   A Sudoku board (partially filled) could be valid but is not necessarily solvable. *   Only the filled cells need to be validated according to the mentioned rules.\n\n[Question 3]: You have a convex `n`\\-sided polygon where each vertex has an integer value. You are given an integer array `values` where `values[i]` is the value of the `ith` vertex (i.e., **clockwise order**).  You will **triangulate** the polygon into `n - 2` triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all `n - 2` triangles in the triangulation.  Return _the smallest possible total score that you can achieve with some triangulation of the polygon_.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a string `s` consisting of lowercase English letters. You can perform the following operation at most once: choose two distinct indices `i` and `j` where `s[i]` is a vowel ('a', 'e', 'i', 'o', 'u'), and replace `s[i]` with `s[j]` and vice versa. A string is considered **beautiful** if it meets the following criteria:\n1. The string is a palindrome.\n2. The string contains exactly three distinct characters.\n\nReturn `true` if you can make the string `s` beautiful, and `false` otherwise."}], "metadata": {"prompt_id": "00000086", "row_id": 86, "seed_ids": ["670", "36", "1039"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: There is a tree (i.e., a connected, undirected graph with no cycles) structure country network consisting of `n` cities numbered from `0` to `n - 1` and exactly `n - 1` roads. The capital city is city `0`. You are given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional road** connecting cities `ai` and `bi`.  There is a meeting for the representatives of each city. The meeting is in the capital city.  There is a car in each city. You are given an integer `seats` that indicates the number of seats in each car.  A representative can use the car in their city to travel or change the car and ride with another representative. The cost of traveling between two cities is one liter of fuel.  Return _the minimum number of liters of fuel to reach the capital city_.\n\n[Question 2]: There are `n` piles of `stones` arranged in a row. The `ith` pile has `stones[i]` stones.  A move consists of merging exactly `k` **consecutive** piles into one pile, and the cost of this move is equal to the total number of stones in these `k` piles.  Return _the minimum cost to merge all piles of stones into one pile_. If it is impossible, return `-1`.\n\n[Question 3]: Given an `m x n` grid of characters `board` and a string `word`, return `true` _if_ `word` _exists in the grid_.  The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a `m x n` grid of characters `board` and a word `word`, return `true` if `word` can be constructed from letters on the `board`. The word does not need to be constructed from letters adjacent in the same row or column, but it cannot use the same letter cell more than once. Each cell in the grid can only contribute one letter to the word. If the word can be formed, return `true`; otherwise, return `false`."}], "metadata": {"prompt_id": "00000087", "row_id": 87, "seed_ids": ["2477", "1000", "79"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given an array of non-overlapping axis-aligned rectangles `rects` where `rects[i] = [ai, bi, xi, yi]` indicates that `(ai, bi)` is the bottom-left corner point of the `ith` rectangle and `(xi, yi)` is the top-right corner point of the `ith` rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.  Any integer point inside the space covered by one of the given rectangles should be equally likely to be returned.  **Note** that an integer point is a point that has integer coordinates.  Implement the `Solution` class:  *   `Solution(int[][] rects)` Initializes the object with the given rectangles `rects`. *   `int[] pick()` Returns a random integer point `[u, v]` inside the space covered by one of the given rectangles.\n\n[Question 2]: You have a `RecentCounter` class which counts the number of recent requests within a certain time frame.  Implement the `RecentCounter` class:  *   `RecentCounter()` Initializes the counter with zero recent requests. *   `int ping(int t)` Adds a new request at time `t`, where `t` represents some time in milliseconds, and returns the number of requests that has happened in the past `3000` milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range `[t - 3000, t]`.  It is **guaranteed** that every call to `ping` uses a strictly larger value of `t` than the previous call.\n\n[Question 3]: A decimal number can be converted to its **Hexspeak representation** by first converting it to an uppercase hexadecimal string, then replacing all occurrences of the digit `'0'` with the letter `'O'`, and the digit `'1'` with the letter `'I'`. Such a representation is valid if and only if it consists only of the letters in the set `{'A', 'B', 'C', 'D', 'E', 'F', 'I', 'O'}`.  Given a string `num` representing a decimal integer `n`, _return the **Hexspeak representation** of_ `n` _if it is valid, otherwise return_ `\"ERROR \"`.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a list of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]`. Design a data structure to efficiently manage these intervals and answer the following operations:\n\n1. `addInterval(start, end)`: Add a new interval `[start, end]` to the data structure. Ensure that the new interval does not overlap with any existing interval.\n2. `removeInterval(start, end)`: Remove an existing interval `[start, end]` from the data structure if it exists.\n3. `mergeIntervals()`: Merge all overlapping intervals in the data structure and return the merged intervals as a list.\n4. `queryInterval(start, end)`: Check if there is any interval in the data structure that overlaps with the given interval `[start, end]`.\n\nImplement the `IntervalManager` class:\n\n*   `IntervalManager()`: Initializes the data structure with an empty list of intervals.\n*   `void addInterval(start, end)`: Adds a new interval `[start, end]` to the data structure.\n*   `void removeInterval(start, end)`: Removes an interval `[start, end]` from the data structure if it exists.\n*   `List<int[]> mergeIntervals()`: Merges all overlapping intervals and returns the merged intervals as a list.\n*   `boolean queryInterval(start, end)`: Checks if there is any interval in the data structure that overlaps with the given interval `[start, end]`.\n\nEnsure that the intervals are stored in a way that allows for efficient operations, and the intervals stored in the data structure are sorted by their start times."}], "metadata": {"prompt_id": "00000088", "row_id": 88, "seed_ids": ["497", "933", "1271"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given a string `s`, and an array of pairs of indices in the string `pairs` where `pairs[i] = [a, b]` indicates 2 indices(0-indexed) of the string.  You can swap the characters at any pair of indices in the given `pairs` **any number of times**.  Return the lexicographically smallest string that `s` can be changed to after using the swaps.\n\n[Question 2]: Given an integer array nums, return _the number of **AND triples**_.  An **AND triple** is a triple of indices `(i, j, k)` such that:  *   `0 <= i < nums.length` *   `0 <= j < nums.length` *   `0 <= k < nums.length` *   `nums[i] & nums[j] & nums[k] == 0`, where `&` represents the bitwise-AND operator.\n\n[Question 3]: You are given two **0-indexed** strings `word1` and `word2`.  A **move** consists of choosing two indices `i` and `j` such that `0 <= i < word1.length` and `0 <= j < word2.length` and swapping `word1[i]` with `word2[j]`.  Return `true` _if it is possible to get the number of distinct characters in_ `word1` _and_ `word2` _to be equal with **exactly one** move._ Return `false` _otherwise_.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given two strings `s` and `t`, both of length `n`, and an integer `k`, you can perform the following operation on `s` any number of times: choose `k` indices in `s` and rotate the substring of `s` starting at each of those indices by one position to the right (the last character moves to the front). A rotation is represented by a pair `[i, k]` where `i` is the starting index and `k` is the number of positions to rotate. Determine the lexicographically smallest string `s` that can be obtained after performing these operations, and also find the minimum number of operations required to achieve this."}], "metadata": {"prompt_id": "00000089", "row_id": 89, "seed_ids": ["1202", "982", "2531"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: There is a street with `n * 2` **plots**, where there are `n` plots on each side of the street. The plots on each side are numbered from `1` to `n`. On each plot, a house can be placed.  Return _the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street_. Since the answer may be very large, return it **modulo** `109 + 7`.  Note that if a house is placed on the `ith` plot on one side of the street, a house can also be placed on the `ith` plot on the other side of the street.\n\n[Question 2]: A perfectly straight street is represented by a number line. The street has street lamp(s) on it and is represented by a 2D integer array `lights`. Each `lights[i] = [positioni, rangei]` indicates that there is a street lamp at position `positioni` that lights up the area from `[positioni - rangei, positioni + rangei]` (**inclusive**).  The **brightness** of a position `p` is defined as the number of street lamp that light up the position `p`.  Given `lights`, return _the **brightest** position on the_ _street. If there are multiple brightest positions, return the **smallest** one._\n\n[Question 3]: Given a string `s`, return _the number of **palindromic substrings** in it_.  A string is a **palindrome** when it reads the same backward as forward.  A **substring** is a contiguous sequence of characters within the string.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a string `s` consisting of lowercase English letters, a **substring** `t` of `s` is called **balanced** if the number of vowels (`a`, `e`, `i`, `o`, `u`) in `t` is equal to the number of consonants. Return the number of **balanced** substrings in `s`."}], "metadata": {"prompt_id": "00000090", "row_id": 90, "seed_ids": ["2320", "2021", "647"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given two integer arrays of equal length `target` and `arr`. In one step, you can select any **non-empty subarray** of `arr` and reverse it. You are allowed to make any number of steps.  Return `true` _if you can make_ `arr` _equal to_ `target` _or_ `false` _otherwise_.\n\n[Question 2]: Given two binary trees `original` and `cloned` and given a reference to a node `target` in the original tree.  The `cloned` tree is a **copy of** the `original` tree.  Return _a reference to the same node_ in the `cloned` tree.  **Note** that you are **not allowed** to change any of the two trees or the `target` node and the answer **must be** a reference to a node in the `cloned` tree.\n\n[Question 3]: Given a string containing just the characters `'('` and `')'`, return _the length of the longest valid (well-formed) parentheses_ _substring_.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a binary string `s` (a string consisting only of `'0's` and `'1's`), you can perform the following operation any number of times: choose any **non-empty subsequence** of `s` and toggle all its characters (i.e., change all `'0's` to `'1's` and all `'1's` to `'0's`). Determine if it is possible to make the string `s` **palindromic** (the same string read from left to right and from right to left) using these operations. Return `true` if it is possible, otherwise return `false`."}], "metadata": {"prompt_id": "00000091", "row_id": 91, "seed_ids": ["1460", "1379", "32"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You have `n` boxes labeled from `0` to `n - 1`. You are given four arrays: `status`, `candies`, `keys`, and `containedBoxes` where:  *   `status[i]` is `1` if the `ith` box is open and `0` if the `ith` box is closed, *   `candies[i]` is the number of candies in the `ith` box, *   `keys[i]` is a list of the labels of the boxes you can open after opening the `ith` box. *   `containedBoxes[i]` is a list of the boxes you found inside the `ith` box.  You are given an integer array `initialBoxes` that contains the labels of the boxes you initially have. You can take all the candies in **any open box** and you can use the keys in it to open new boxes and you also can use the boxes you find in it.  Return _the maximum number of candies you can get following the rules above_.\n\n[Question 2]: You are given a **0-indexed** integer array `forts` of length `n` representing the positions of several forts. `forts[i]` can be `-1`, `0`, or `1` where:  *   `-1` represents there is **no fort** at the `ith` position. *   `0` indicates there is an **enemy** fort at the `ith` position. *   `1` indicates the fort at the `ith` the position is under your command.  Now you have decided to move your army from one of your forts at position `i` to an empty position `j` such that:  *   `0 <= i, j <= n - 1` *   The army travels over enemy forts **only**. Formally, for all `k` where `min(i,j) < k < max(i,j)`, `forts[k] == 0.`  While moving the army, all the enemy forts that come in the way are **captured**.  Return _the **maximum** number of enemy forts that can be captured_. In case it is **impossible** to move your army, or you do not have any fort under your command, return `0`_._\n\n[Question 3]: You are given an `m x n` matrix `maze` (**0-indexed**) with empty cells (represented as `'.'`) and walls (represented as `'+'`). You are also given the `entrance` of the maze, where `entrance = [entrancerow, entrancecol]` denotes the row and column of the cell you are initially standing at.  In one step, you can move one cell **up**, **down**, **left**, or **right**. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the **nearest exit** from the `entrance`. An **exit** is defined as an **empty cell** that is at the **border** of the `maze`. The `entrance` **does not count** as an exit.  Return _the **number of steps** in the shortest path from the_ `entrance` _to the nearest exit, or_ `-1` _if no such path exists_.\n\n[Question 4]:"}, {"role": "assistant", "content": "You are given a 2D grid representing a map of islands and water. The grid contains the following characters:\n- `'W'` for water (you cannot move through water).\n- `'L'` for land (you can move through land).\n- `'S'` for start (your starting position, guaranteed to be on land).\n\nYou can move up, down, left, or right from any land cell to an adjacent land cell. The goal is to find the shortest path from the start position to any border cell (a cell on the edge of the grid) that is also land. You cannot move diagonally. If there is no such path, return `-1`.\n\nReturn the number of steps in the shortest path, or `-1` if no such path exists."}], "metadata": {"prompt_id": "00000092", "row_id": 92, "seed_ids": ["1298", "2511", "1926"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.  Given a string `text` of words separated by a single space (no leading or trailing spaces) and a string `brokenLetters` of all **distinct** letter keys that are broken, return _the **number of words** in_ `text` _you can fully type using this keyboard_.\n\n[Question 2]: A **distinct string** is a string that is present only **once** in an array.  Given an array of strings `arr`, and an integer `k`, return _the_ `kth` _**distinct string** present in_ `arr`. If there are **fewer** than `k` distinct strings, return _an **empty string**_ `\" \"`.  Note that the strings are considered in the **order in which they appear** in the array.\n\n[Question 3]: A **wiggle sequence** is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.  *   For example, `[1, 7, 4, 9, 2, 5]` is a **wiggle sequence** because the differences `(6, -3, 5, -7, 3)` alternate between positive and negative. *   In contrast, `[1, 4, 7, 2, 5]` and `[1, 7, 4, 5, 5]` are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.  A **subsequence** is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.  Given an integer array `nums`, return _the length of the longest **wiggle subsequence** of_ `nums`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given an array of integers `nums`, find the length of the longest **consecutive sequence** that can be formed by rearranging the elements of the array. A **consecutive sequence** is a sequence where each element is exactly one more than the previous element. If no such sequence exists, return 0.\n\nFor example, given `nums = [100, 4, 200, 1, 3, 2]`, the longest consecutive sequence that can be formed is `[1, 2, 3, 4]`, so the function should return 4."}], "metadata": {"prompt_id": "00000093", "row_id": 93, "seed_ids": ["1935", "2053", "376"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: A **Bitset** is a data structure that compactly stores bits.  Implement the `Bitset` class:  *   `Bitset(int size)` Initializes the Bitset with `size` bits, all of which are `0`. *   `void fix(int idx)` Updates the value of the bit at the index `idx` to `1`. If the value was already `1`, no change occurs. *   `void unfix(int idx)` Updates the value of the bit at the index `idx` to `0`. If the value was already `0`, no change occurs. *   `void flip()` Flips the values of each bit in the Bitset. In other words, all bits with value `0` will now have value `1` and vice versa. *   `boolean all()` Checks if the value of **each** bit in the Bitset is `1`. Returns `true` if it satisfies the condition, `false` otherwise. *   `boolean one()` Checks if there is **at least one** bit in the Bitset with value `1`. Returns `true` if it satisfies the condition, `false` otherwise. *   `int count()` Returns the **total number** of bits in the Bitset which have value `1`. *   `String toString()` Returns the current composition of the Bitset. Note that in the resultant string, the character at the `ith` index should coincide with the value at the `ith` bit of the Bitset.\n\n[Question 2]: Given an `n x n` binary matrix `grid`, return _the length of the shortest **clear path** in the matrix_. If there is no clear path, return `-1`.  A **clear path** in a binary matrix is a path from the **top-left** cell (i.e., `(0, 0)`) to the **bottom-right** cell (i.e., `(n - 1, n - 1)`) such that:  *   All the visited cells of the path are `0`. *   All the adjacent cells of the path are **8-directionally** connected (i.e., they are different and they share an edge or a corner).  The **length of a clear path** is the number of visited cells of this path.\n\n[Question 3]: You are given a non-negative integer array `nums`. In one operation, you must:  *   Choose a positive integer `x` such that `x` is less than or equal to the **smallest non-zero** element in `nums`. *   Subtract `x` from every **positive** element in `nums`.  Return _the **minimum** number of operations to make every element in_ `nums` _equal to_ `0`.\n\n[Question 4]:"}, {"role": "assistant", "content": "Implement the `CircularArray` class that supports the following operations:\n\n- `CircularArray(int size)` Initializes the `CircularArray` with `size` elements, all set to zero.\n- `void set(int index, int val)` Sets the value at the given `index` to `val`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n- `int get(int index)` Returns the value at the given `index`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n- `void increment(int index, int val)` Increments the value at the given `index` by `val`. If the index is out of bounds, it should wrap around to the beginning or end of the array.\n\nAdditionally, provide a method:\n\n- `String toString()` Returns a string representation of the `CircularArray`, where each element is separated by a comma and the entire array is enclosed in square brackets."}], "metadata": {"prompt_id": "00000094", "row_id": 94, "seed_ids": ["2166", "1091", "2357"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are assigned to put some amount of boxes onto **one truck**. You are given a 2D array `boxTypes`, where `boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]`:  *   `numberOfBoxesi` is the number of boxes of type `i`. *   `numberOfUnitsPerBoxi` is the number of units in each box of the type `i`.  You are also given an integer `truckSize`, which is the **maximum** number of **boxes** that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed `truckSize`.  Return _the **maximum** total number of **units** that can be put on the truck._\n\n[Question 2]: Given a **directed acyclic graph**, with `n` vertices numbered from `0` to `n-1`, and an array `edges` where `edges[i] = [fromi, toi]` represents a directed edge from node `fromi` to node `toi`.  Find _the smallest set of vertices from which all nodes in the graph are reachable_. It's guaranteed that a unique solution exists.  Notice that you can return the vertices in any order.\n\n[Question 3]: You are given an array `trees` where `trees[i] = [xi, yi]` represents the location of a tree in the garden.  Fence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if **all the trees are enclosed**.  Return _the coordinates of trees that are exactly located on the fence perimeter_. You may return the answer in **any order**.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a **binary tree** with `n` nodes, where each node has a unique value from `1` to `n`, determine if the tree can be **partitioned** into two subsets such that the sum of values in each subset is equal. Return `true` if such a partition exists, otherwise return `false`."}], "metadata": {"prompt_id": "00000095", "row_id": 95, "seed_ids": ["1710", "1557", "587"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given a positive integer `n`, find the **pivot integer** `x` such that:  *   The sum of all elements between `1` and `x` inclusively equals the sum of all elements between `x` and `n` inclusively.  Return _the pivot integer_ `x`. If no such integer exists, return `-1`. It is guaranteed that there will be at most one pivot index for the given input.\n\n[Question 2]: You are given a **0-indexed** 2D integer array `peaks` where `peaks[i] = [xi, yi]` states that mountain `i` has a peak at coordinates `(xi, yi)`. A mountain can be described as a right-angled isosceles triangle, with its base along the `x`\\-axis and a right angle at its peak. More formally, the **gradients** of ascending and descending the mountain are `1` and `-1` respectively.  A mountain is considered **visible** if its peak does not lie within another mountain (including the border of other mountains).  Return _the number of visible mountains_.\n\n[Question 3]: Given two strings `s` and `goal`, return `true` _if and only if_ `s` _can become_ `goal` _after some number of **shifts** on_ `s`.  A **shift** on `s` consists of moving the leftmost character of `s` to the rightmost position.  *   For example, if `s = \"abcde \"`, then it will be `\"bcdea \"` after one shift.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a list of `n` unique integers, determine if there exists a pair of integers in the list whose sum is equal to a given target integer `k`. If such a pair exists, return the indices of the two integers (0-indexed) in any order. If no such pair exists, return an empty list. Note that the same integer cannot be used twice."}], "metadata": {"prompt_id": "00000096", "row_id": 96, "seed_ids": ["2485", "2345", "796"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: An array is **monotonic** if it is either monotone increasing or monotone decreasing.  An array `nums` is monotone increasing if for all `i <= j`, `nums[i] <= nums[j]`. An array `nums` is monotone decreasing if for all `i <= j`, `nums[i] >= nums[j]`.  Given an integer array `nums`, return `true` _if the given array is monotonic, or_ `false` _otherwise_.\n\n[Question 2]: You are given an `m x n` binary matrix `mat` of `1`'s (representing soldiers) and `0`'s (representing civilians). The soldiers are positioned **in front** of the civilians. That is, all the `1`'s will appear to the **left** of all the `0`'s in each row.  A row `i` is **weaker** than a row `j` if one of the following is true:  *   The number of soldiers in row `i` is less than the number of soldiers in row `j`. *   Both rows have the same number of soldiers and `i < j`.  Return _the indices of the_ `k` _**weakest** rows in the matrix ordered from weakest to strongest_.\n\n[Question 3]: You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`.  Some nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.  Suppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops.  We will remove **exactly one node** from `initial`, **completely removing it and any connections from this node to any other node**.  Return the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with **the smallest index**.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a matrix `matrix` of size `m x n` containing integers, design an algorithm to find the sum of the maximum element in each row. For example, if the matrix is:\n\n```\n[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n```\n\nThe output should be the sum of the maximum elements in each row, which is `3 + 6 + 9 = 18`.\n\nWrite a function `sumOfMaxElements(matrix: List[List[int]]) -> int` that returns the sum of the maximum elements in each row of the given matrix.\n\n### Example\n\n#### Input\n```\nmatrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n```\n\n#### Output\n```\n18\n```\n\n### Constraints\n\n- `1 <= m, n <= 100`\n- `-1000 <= matrix[i][j] <= 1000`"}], "metadata": {"prompt_id": "00000097", "row_id": 97, "seed_ids": ["896", "1337", "928"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given a string array `words`, return _the maximum value of_ `length(word[i]) * length(word[j])` _where the two words do not share common letters_. If no such two words exist, return `0`.\n\n[Question 2]: You are given an immutable linked list, print out all values of each node in reverse with the help of the following interface:  *   `ImmutableListNode`: An interface of immutable linked list, you are given the head of the list.  You need to use the following functions to access the linked list (you **can't** access the `ImmutableListNode` directly):  *   `ImmutableListNode.printValue()`: Print value of the current node. *   `ImmutableListNode.getNext()`: Return the next node.  The input is only given to initialize the linked list internally. You must solve this problem without modifying the linked list. In other words, you must operate the linked list using only the mentioned APIs.\n\n[Question 3]: A **complete binary tree** is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.  Design an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.  Implement the `CBTInserter` class:  *   `CBTInserter(TreeNode root)` Initializes the data structure with the `root` of the complete binary tree. *   `int insert(int v)` Inserts a `TreeNode` into the tree with value `Node.val == val` so that the tree remains complete, and returns the value of the parent of the inserted `TreeNode`. *   `TreeNode get_root()` Returns the root node of the tree.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a complete binary tree represented by an array `tree`, where `tree[i]` represents the value of the node at index `i`, and each parent node's value is the bitwise OR of its two children. You are given the root index `0` and a target value `target`. Your task is to insert a new node with value `target` into the array representation of the tree while maintaining the complete binary tree property, and return the new root index of the modified array.\n\nImplement the `CBTArrayInserter` class with the following methods:\n*   `CBTArrayInserter(int[] tree)`: Initializes the data structure with the given array `tree` representing the complete binary tree.\n*   `int insert(int target)`: Inserts a new node with value `target` into the tree and returns the new root index of the modified array.\n*   `int get_root()`: Returns the root index of the current state of the tree."}], "metadata": {"prompt_id": "00000098", "row_id": 98, "seed_ids": ["318", "1265", "919"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given an integer array `nums`, return _the number of longest increasing subsequences._  **Notice** that the sequence has to be **strictly** increasing.\n\n[Question 2]: Given the `root` of a binary tree, return _the maximum **average** value of a **subtree** of that tree_. Answers within `10-5` of the actual answer will be accepted.  A **subtree** of a tree is any node of that tree plus all its descendants.  The **average** value of a tree is the sum of its values, divided by the number of nodes.\n\n[Question 3]: You are given an `m x n` integer matrix `grid`.  We define an **hourglass** as a part of the matrix with the following form:  Return _the **maximum** sum of the elements of an hourglass_.  **Note** that an hourglass cannot be rotated and must be entirely contained within the matrix.\n\n[Question 4]:"}, {"role": "assistant", "content": "Given a binary matrix `grid` of size `m x n`, flip the image horizontally, then invert all the values: change `0` to `1` and `1` to `0`. Return the resulting matrix. A flip horizontally means that for each row, the values are reversed, and inverting the values means that all `0`s are changed to `1`s and all `1`s are changed to `0`s."}], "metadata": {"prompt_id": "00000099", "row_id": 99, "seed_ids": ["673", "1120", "2428"], "mode": "leetcode"}}
