{
  "metadata": {
    "prompt_id": "00000077",
    "row_id": 77,
    "seed_ids": [
      752
    ],
    "mode": "algorithm"
  },
  "instruction": "**Scenario**:\nYou are working on a project that requires the implementation of the Liouville Lambda function for a range of integers. The function should efficiently determine whether a given integer has an even or odd number of prime factors and return the corresponding value.\n\n**Task**:\nImplement the `liouville_lambda` function to calculate the Liouville Lambda value for a given integer. Additionally, extend the function to handle a list of integers and return a list of corresponding Liouville Lambda values.\n\n**Requirements**:\n- The function should take a single integer or a list of integers as input.\n- If a single integer is provided, the function should return the Liouville Lambda value for that integer.\n- If a list of integers is provided, the function should return a list of Liouville Lambda values for each integer in the list.\n- Ensure the function handles edge cases such as non-integer inputs, negative numbers, and zero.\n- Optimize the function for efficiency, especially for large inputs.\n\n**Input and Output Formats**:\n- **Input**: A single integer or a list of integers.\n- **Output**: The Liouville Lambda value for a single integer or a list of Liouville Lambda values for each integer in the list.\n\n**Constraints**:\n- The input list can contain up to 1000 integers.\n- Each integer in the list will be between 1 and 10^6, inclusive.\n\n**Example**:\n```python\n# Example 1: Single integer\nprint(liouville_lambda(10))  # Output: 1\n\n# Example 2: List of integers\nprint(liouville_lambda([10, 11, 12]))  # Output: [1, -1, -1]\n```\n\n**Note**:\nYou are not allowed to use the `prime_factors` function directly. Instead, you must implement your own efficient prime factorization method.",
  "solution_code": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_factors(n):\n    \"\"\"\n    Return the prime factors of n.\n    \"\"\"\n    factors = []\n    # Check for number of 2s\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # Check for other primes\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef liouville_lambda(n):\n    \"\"\"\n    Returns the Liouville Lambda value for a given integer or a list of integers.\n    \"\"\"\n    if not isinstance(n, list):\n        n = [n]\n    results = []\n    for num in n:\n        factors = prime_factors(num)\n        factor_count = len(factors)\n        prime_factors_dict = {factor: factors.count(factor) for factor in set(factors)}\n        is_even = all(count % 2 == 0 for count in prime_factors_dict.values())\n        if is_even:\n            results.append(1)\n        else:\n            results.append(-1)\n    return results if n != [n] else results[0]",
  "test_code": "import pytest\n\ndef test_liouville_lambda_single_int():\n    assert liouville_lambda(10) == 1\n    assert liouville_lambda(7) == -1\n    assert liouville_lambda(1) == 1\n\ndef test_liouville_lambda_list_of_ints():\n    assert liouville_lambda([10, 11, 12]) == [1, -1, -1]\n    assert liouville_lambda([100, 97, 98]) == [1, -1, -1]\n\ndef test_liouville_lambda_edge_cases():\n    assert liouville_lambda(0) == 1  # By convention, L(0) = 1\n    assert liouville_lambda([-10]) == 1 # Negative numbers are not considered in this implementation\n    assert liouville_lambda([]) == []  # Empty list should return an empty list\n    assert liouville_lambda([1000000, 999999]) == [1, -1]  # Large numbers\n\ndef test_input_type():\n    with pytest.raises(TypeError):\n        liouville_lambda(\"10\")  # String input\n    with pytest.raises(TypeError):\n        liouville_lambda([1, \"2\"])  # List with a string\n\ndef test_prime_factors():\n    factors = prime_factors(60)\n    assert len(factors) == 4\n    assert set(factors) == {2, 3, 5}",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}