{
  "metadata": {
    "prompt_id": "00000077",
    "row_id": 77,
    "seed_ids": [
      752
    ],
    "mode": "algorithm"
  },
  "instruction": "**Scenario**:\nYou are working on a project that requires the implementation of the Liouville Lambda function for a range of integers. The function should efficiently determine whether a given integer has an even or odd number of prime factors and return the corresponding value.\n\n**Task**:\nImplement the `liouville_lambda` function to calculate the Liouville Lambda value for a given integer. Additionally, extend the function to handle a list of integers and return a list of corresponding Liouville Lambda values.\n\n**Requirements**:\n- The function should take a single integer or a list of integers as input.\n- If a single integer is provided, the function should return the Liouville Lambda value for that integer.\n- If a list of integers is provided, the function should return a list of Liouville Lambda values for each integer in the list.\n- Ensure the function handles edge cases such as non-integer inputs, negative numbers, and zero.\n- Optimize the function for efficiency, especially for large inputs.\n\n**Input and Output Formats**:\n- **Input**: A single integer or a list of integers.\n- **Output**: The Liouville Lambda value for a single integer or a list of Liouville Lambda values for each integer in the list.\n\n**Constraints**:\n- The input list can contain up to 1000 integers.\n- Each integer in the list will be between 1 and 10^6, inclusive.\n\n**Example**:\n```python\n# Example 1: Single integer\nprint(liouville_lambda(10))  # Output: 1\n\n# Example 2: List of integers\nprint(liouville_lambda([10, 11, 12]))  # Output: [1, -1, -1]\n```\n\n**Note**:\nYou are not allowed to use the `prime_factors` function directly. Instead, you must implement your own efficient prime factorization method.",
  "solution_code": "def prime_factors(n):\n    \"\"\"Return the list of prime factors of n.\"\"\"\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef liouville_lambda(value):\n    \"\"\"\n    Returns the Liouville Lambda value for a given integer or a list of integers.\n    \"\"\"\n    if not isinstance(value, list):\n        value = [value]  # Wrap single value in a list for consistency\n\n    results = []\n    for val in value:\n        if val <= 0:\n            results.append(0)  # Return 0 for non-positive values\n        else:\n            factors = prime_factors(val)\n            unique_factors = set(factors)\n            if len(unique_factors) % 2 == 0:\n                results.append(1)\n            else:\n                results.append(-1)\n    return results if len(value) > 1 else results[0]",
  "test_code": "``\nfrom solution import liouville_lambda\n\ndef test_liouville_lambda_single():\n    assert liouville_lambda(10) == 1\n    assert liouville_lambda(11) == -1\n    assert liouville_lambda(12) == -1\n\ndef test_liouville_lambda_list():\n    assert liouville_lambda([10, 11, 12]) == [1, -1, -1]\n    assert liouville_lambda([1, 2, 3, 4, 5, 6]) == [1, -1, -1, 1, -1, -1]\n    assert liouville_lambda([100]) == 1\n    assert liouville_lambda([]) == 0\n\ndef test_liouville_lambda_edge_cases():\n    assert liouville_lambda(-10) == 0\n    assert liouville_lambda(0) == 0\n    assert liouville_lambda(1) == 1\n\ndef test_liouville_lambda_input_type():\n    assert liouville_lambda([10]) == 1\n    assert liouville_lambda(10) == 1",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}