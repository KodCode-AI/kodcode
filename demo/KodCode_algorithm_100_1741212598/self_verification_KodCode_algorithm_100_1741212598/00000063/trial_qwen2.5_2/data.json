{
  "metadata": {
    "prompt_id": "00000063",
    "row_id": 63,
    "seed_ids": [
      429
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with extending the functionality of a 3D rendering system. Your goal is to implement a function that combines the functionalities of the `convert_to_2d` and `rotate` functions to convert a 3D point to a 2D drawable point after applying a specified rotation. Additionally, you need to handle invalid input cases and provide clear error messages.\n\n### Function Signature\n```python\ndef rotate_and_project(x: float, y: float, z: float, axis: str, angle: float, scale: float, distance: float) -> tuple[float, float]:\n    \"\"\"\n    Rotate a 3D point around a specified axis and then convert it to a 2D point for rendering.\n\n    :param x: x-coordinate of the 3D point.\n    :param y: y-coordinate of the 3D point.\n    :param z: z-coordinate of the 3D point.\n    :param axis: Axis around which to rotate ('x', 'y', 'z').\n    :param angle: Angle of rotation in degrees.\n    :param scale: Scale factor for the 2D projection.\n    :param distance: Viewing distance for the perspective projection.\n    :return: A tuple (projected_x, projected_y) representing the 2D point.\n\n    Example:\n    >>> rotate_and_project(1.0, 2.0, 3.0, 'y', 90.0, 10.0, 10.0)\n    (7.6923076923076925, 15.384615384615385)\n    \"\"\"\n```\n\n### Constraints\n* The input values must be within the following ranges:\n  - \\(-1000 \\leq x, y, z \\leq 1000\\)\n  - \\(0 \\leq angle \\leq 360\\)\n  - \\(1 \\leq scale, distance \\leq 1000\\)\n\n### Edge Cases\n- Handle invalid input types (must be float or int) and values (e.g., out-of-range angles).\n- Handle the case when the rotation axis is not one of 'x', 'y', or 'z'.\n- Ensure that the function returns correct results even for large or small input values.\n\n### Performance Requirements\n- The function should be efficient and handle the input values within the specified constraints without performance issues.\n\n### Example\n```python\n# Example usage\nprint(rotate_and_project(1.0, 2.0, 3.0, 'y', 90.0, 10.0, 10.0))\n# Output: (7.6923076923076925, 15.384615384615385)\n```",
  "solution_code": "import math\n\ndef rotate_and_project(x: float, y: float, z: float, axis: str, angle: float, scale: float, distance: float) -> tuple[float, float]:\n    \"\"\"\n    Rotate a 3D point around a specified axis and then convert it to a 2D point for rendering.\n    \"\"\"\n    # Validate input types and ranges\n    if not all(isinstance(val, (int, float)) for val in [x, y, z, angle, scale, distance]):\n        raise ValueError(\"All input values must be integers or floats.\")\n    if not -1000 <= x <= 1000 or not -1000 <= y <= 1000 or not -1000 <= z <= 1000:\n        raise ValueError(\"3D point coordinates must be between -1000 and 1000.\")\n    if not 0 <= angle <= 360:\n        raise ValueError(\"Angle must be between 0 and 360 degrees.\")\n    if not 1 <= scale <= 1000 or not 1 <= distance <= 1000:\n        raise ValueError(\"Scale and distance must be between 1 and 1000.\")\n\n    # Normalize angle to be in the range [0, 360]\n    angle = angle % 360\n\n    # Handle rotation around x-axis\n    if axis == 'x':\n        rotation_matrix = [\n            [1, 0, 0],\n            [0, math.cos(math.radians(angle)), -math.sin(math.radians(angle))],\n            [0, math.sin(math.radians(angle)), math.cos(math.radians(angle))]\n        ]\n    # Handle rotation around y-axis\n    elif axis == 'y':\n        rotation_matrix = [\n            [math.cos(math.radians(angle)), 0, math.sin(math.radians(angle))],\n            [0, 1, 0],\n            [-math.sin(math.radians(angle)), 0, math.cos(math.radians(angle))]\n        ]\n    # Handle rotation around z-axis\n    elif axis == 'z':\n        rotation_matrix = [\n            [math.cos(math.radians(angle)), -math.sin(math.radians(angle)), 0],\n            [math.sin(math.radians(angle)), math.cos(math.radians(angle)), 0],\n            [0, 0, 1]\n        ]\n    else:\n        raise ValueError(\"Rotation axis must be 'x', 'y', or 'z'.\")\n\n    # Apply rotation\n    rotated_point = [\n        rotation_matrix[0][0] * x + rotation_matrix[0][1] * y + rotation_matrix[0][2] * z,\n        rotation_matrix[1][0] * x + rotation_matrix[1][1] * y + rotation_matrix[1][2] * z,\n        rotation_matrix[2][0] * x + rotation_matrix[2][1] * y + rotation_matrix[2][2] * z\n    ]\n\n    # Apply perspective projection\n    z_prime = distance - rotated_point[2]\n    projected_x = scale * (rotated_point[0] / z_prime)\n    projected_y = scale * (rotated_point[1] / z_prime)\n\n    return (projected_x, projected_y)",
  "test_code": "import pytest\n\ndef test_rotate_and_project_positive_values():\n    assert rotate_and_project(1.0, 2.0, 3.0, 'y', 90.0, 10.0, 10.0) == pytest.approx((7.6923076923076925, 15.384615384615385))\n\ndef test_rotate_and_project_zero_values():\n    assert rotate_and_project(0.0, 0.0, 1.0, 'z', 0.0, 10.0, 10.0) == pytest.approx((0.0, 0.0))\n\ndef test_rotate_and_project_negative_values():\n    assert rotate_and_project(-1.0, -2.0, -3.0, 'x', 180.0, 10.0, 10.0) == pytest.approx((2.3076923076923075, 4.615384615384615))\n\ndef test_rotate_and_project_invalid_angle():\n    with pytest.raises(ValueError, match=\"Angle must be between 0 and 360 degrees.\"):\n        rotate_and_project(1.0, 2.0, 3.0, 'y', 361.0, 10.0, 10.0)\n\ndef test_rotate_and_project_invalid_axis():\n    with pytest.raises(ValueError, match=\"Rotation axis must be 'x', 'y', or 'z'.\"):\n        rotate_and_project(1.0, 2.0, 3.0, 'a', 90.0, 10.0, 10.0)\n\ndef test_rotate_and_project_invalid_scale():\n    with pytest.raises(ValueError, match=\"Scale and distance must be between 1 and 1000.\"):\n        rotate_and_project(1.0, 2.0, 3.0, 'y', 90.0, 1001.0, 10.0)\n\ndef test_rotate_and_project_invalid_distance():\n    with pytest.raises(ValueError, match=\"Scale and distance must be between 1 and 1000.\"):\n        rotate_and_project(1.0, 2.0, 3.0, 'y', 90.0, 10.0, 0.99)\n\ndef test_rotate_and_project_invalid_input_type():\n    with pytest.raises(ValueError, match=\"All input values must be integers or floats.\"):\n        rotate_and_project(1, 2, '3', 'y', 90.0, 10.0, 10.0)",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}