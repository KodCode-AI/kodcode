{
  "metadata": {
    "prompt_id": "00000063",
    "row_id": 63,
    "seed_ids": [
      429
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with extending the functionality of a 3D rendering system. Your goal is to implement a function that combines the functionalities of the `convert_to_2d` and `rotate` functions to convert a 3D point to a 2D drawable point after applying a specified rotation. Additionally, you need to handle invalid input cases and provide clear error messages.\n\n### Function Signature\n```python\ndef rotate_and_project(x: float, y: float, z: float, axis: str, angle: float, scale: float, distance: float) -> tuple[float, float]:\n    \"\"\"\n    Rotate a 3D point around a specified axis and then convert it to a 2D point for rendering.\n\n    :param x: x-coordinate of the 3D point.\n    :param y: y-coordinate of the 3D point.\n    :param z: z-coordinate of the 3D point.\n    :param axis: Axis around which to rotate ('x', 'y', 'z').\n    :param angle: Angle of rotation in degrees.\n    :param scale: Scale factor for the 2D projection.\n    :param distance: Viewing distance for the perspective projection.\n    :return: A tuple (projected_x, projected_y) representing the 2D point.\n\n    Example:\n    >>> rotate_and_project(1.0, 2.0, 3.0, 'y', 90.0, 10.0, 10.0)\n    (7.6923076923076925, 15.384615384615385)\n    \"\"\"\n```\n\n### Constraints\n* The input values must be within the following ranges:\n  - \\(-1000 \\leq x, y, z \\leq 1000\\)\n  - \\(0 \\leq angle \\leq 360\\)\n  - \\(1 \\leq scale, distance \\leq 1000\\)\n\n### Edge Cases\n- Handle invalid input types (must be float or int) and values (e.g., out-of-range angles).\n- Handle the case when the rotation axis is not one of 'x', 'y', or 'z'.\n- Ensure that the function returns correct results even for large or small input values.\n\n### Performance Requirements\n- The function should be efficient and handle the input values within the specified constraints without performance issues.\n\n### Example\n```python\n# Example usage\nprint(rotate_and_project(1.0, 2.0, 3.0, 'y', 90.0, 10.0, 10.0))\n# Output: (7.6923076923076925, 15.384615384615385)\n```",
  "solution_code": "import math\n\ndef rotate_and_project(x: float, y: float, z: float, axis: str, angle: float, scale: float, distance: float) -> tuple[float, float]:\n    \"\"\"\n    Rotate a 3D point around a specified axis and then convert it to a 2D point for rendering.\n\n    :param x: x-coordinate of the 3D point.\n    :param y: y-coordinate of the 3D point.\n    :param z: z-coordinate of the 3D point.\n    :param axis: Axis around which to rotate ('x', 'y', 'z').\n    :param angle: Angle of rotation in degrees.\n    :param scale: Scale factor for the 2D projection.\n    :param distance: Viewing distance for the perspective projection.\n    :return: A tuple (projected_x, projected_y) representing the 2D point.\n    \"\"\"\n    if not (isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))):\n        raise ValueError(\"Coordinates must be int or float.\")\n    if not (isinstance(angle, (int, float))) or not (0 <= angle <= 360):\n        raise ValueError(\"Angle must be a float between 0 and 360 degrees.\")\n    if not (isinstance(scale, (int, float))) or not (1 <= scale <= 1000):\n        raise ValueError(\"Scale must be a float between 1 and 1000.\")\n    if not (isinstance(distance, (int, float))) or not (1 <= distance <= 1000):\n        raise ValueError(\"Distance must be a float between 1 and 1000.\")\n    \n    angle_rad = math.radians(angle)\n\n    if axis not in ('x', 'y', 'z'):\n        raise ValueError(\"Invalid axis. Must be one of 'x', 'y', 'z'.\")\n\n    if axis == 'x':\n        rotation_matrix = [\n            [1, 0, 0],\n            [0, math.cos(angle_rad), -math.sin(angle_rad)],\n            [0, math.sin(angle_rad), math.cos(angle_rad)]\n        ]\n    elif axis == 'y':\n        rotation_matrix = [\n            [math.cos(angle_rad), 0, math.sin(angle_rad)],\n            [0, 1, 0],\n            [-math.sin(angle_rad), 0, math.cos(angle_rad)]\n        ]\n    elif axis == 'z':\n        rotation_matrix = [\n            [math.cos(angle_rad), -math.sin(angle_rad), 0],\n            [math.sin(angle_rad), math.cos(angle_rad), 0],\n            [0, 0, 1]\n        ]\n\n    # Rotate the 3D point\n    rotated_point = [\n        rotation_matrix[0][0] * x + rotation_matrix[0][1] * y + rotation_matrix[0][2] * z,\n        rotation_matrix[1][0] * x + rotation_matrix[1][1] * y + rotation_matrix[1][2] * z,\n        rotation_matrix[2][0] * x + rotation_matrix[2][1] * y + rotation_matrix[2][2] * z\n    ]\n\n    # Project to 2D screen space using perspective projection\n    projected_x = rotated_point[0] / (rotated_point[2] + distance) * scale + scale\n    projected_y = rotated_point[1] / (rotated_point[2] + distance) * scale + scale\n\n    return (projected_x, projected_y)",
  "test_code": "import pytest\n\ndef test_rotate_and_project():\n    # Test case with rotation around y axis\n    assert rotate_and_project(1.0, 2.0, 3.0, 'y', 90.0, 10.0, 10.0) == pytest.approx((7.6923076923076925, 15.384615384615385), abs=1e-6)\n    \n    # Test case with rotation around x axis\n    assert rotate_and_project(1.0, 2.0, 3.0, 'x', 90.0, 10.0, 10.0) == pytest.approx((2.9802322387695317, 17.060701905662994), abs=1e-6)\n    \n    # Test case with rotation around z axis\n    assert rotate_and_project(-1.0, -1.0, 1.0, 'z', 180.0, 1.0, 1.0) == pytest.approx((-1.0, -1.0), abs=1e-6)\n    \n    # Test case with invalid axis\n    with pytest.raises(ValueError):\n        rotate_and_project(1.0, 1.0, 1.0, 'w', 90.0, 10.0, 10.0)\n\n    # Test case with invalid angle\n    with pytest.raises(ValueError):\n        rotate_and_project(1.0, 1.0, 1.0, 'x', -1.0, 10.0, 10.0)\n    \n    # Test case with invalid scale\n    with pytest.raises(ValueError):\n        rotate_and_project(1.0, 1.0, 1.0, 'x', 90.0, 0.0, 10.0)\n    \n    # Test case with invalid distance\n    with pytest.raises(ValueError):\n        rotate_and_project(1.0, 1.0, 1.0, 'x', 90.0, 10.0, 0.0)\n    \n    # Test case with non-numeric coordinates\n    with pytest.raises(ValueError):\n        rotate_and_project('a', 1.0, 1.0, 'x', 90.0, 10.0, 10.0)",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}