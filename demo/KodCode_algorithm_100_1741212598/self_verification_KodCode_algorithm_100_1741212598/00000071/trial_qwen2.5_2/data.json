{
  "metadata": {
    "prompt_id": "00000071",
    "row_id": 71,
    "seed_ids": [
      464
    ],
    "mode": "algorithm"
  },
  "instruction": "### Scenario\nYou are developing an application that requires access to astronomical images and data from NASA's API. Your application should be able to fetch and save these images locally. To ensure robustness, you need to implement error handling and retry mechanisms.\n\n### Requirement\nWrite a Python function `download_and_save_apod` that fetches the \"Astronomical Picture of the Day\" (APOD) from NASA's APOD API and saves it to a specified directory. The function should handle the following requirements:\n\n1. **Error Handling**: Implement error handling to gracefully deal with network failures, HTTP errors, and file I/O errors.\n2. **Retry Mechanism**: Implement a retry mechanism to attempt downloading the image up to 3 times if the initial attempt fails.\n3. **Input and Output**: The function should take an `api_key` and a `save_path` as arguments and return the APOD data as a dictionary.\n4. **Performance**: Ensure that the function does not hog the system resources and handles large images efficiently.\n5. **Documentation**: Add appropriate comments and docstring to the function for clarity.\n\n### Example\n```python\ndef download_and_save_apod(api_key: str, save_path: str) -> dict:\n    # Your implementation here\n    pass\n\n# Example usage\napi_key = \"YOUR_API_KEY\"\nsave_path = \"./apod_images\"\ndata = download_and_save_apod(api_key, save_path)\nprint(data)\n```\n\n### Constraints\n- The `api_key` is a valid NASA API key.\n- The `save_path` is a valid directory path.\n- The image URLs provided by the APOD API are always valid.\n\n### Performance Requirements\n- The function should be able to handle APOD images up to 10MB in size.\n- The function should not block the main thread for long periods during the download process.\n\n### Note\n- Use `requests` and `shutil` to handle HTTP requests and file I/O operations, respectively.\n- Use the `shutil.copyfileobj` method to copy the image data to a file.",
  "solution_code": "import requests\nimport os\nimport shutil\nfrom urllib3.exceptions import MaxRetryError, NewConnectionError\n\ndef download_and_save_apod(api_key: str, save_path: str) -> dict:\n    \"\"\"\n    Fetches the APOD from NASA's APOD API and saves it to the specified directory.\n    Implements error handling and retry mechanism.\n    \n    Args:\n    api_key (str): NASA API key.\n    save_path (str): Path where the image will be saved.\n    \n    Returns:\n    dict: Dictionary containing APOD information.\n    \"\"\"\n    base_url = \"https://api.nasa.gov/planetary/apod\"\n    url = f\"{base_url}?api_key={api_key}\"\n    \n    for attempt in range(3):\n        try:\n            response = requests.get(url, timeout=10)\n            response.raise_for_status()\n            data = response.json()\n            image_url = data[\"hdurl\"] if \"hdurl\" in data else data[\"url\"]\n            \n            image_data = requests.get(image_url, stream=True)\n            image_data.raise_for_status()\n            \n            with open(os.path.join(save_path, f\"apod_{data['date']}.jpg\"), 'wb') as file:\n                shutil.copyfileobj(image_data.raw, file)\n                \n            return data\n        except (MaxRetryError, NewConnectionError) as e:\n            print(f\"Connection error on attempt {attempt + 1}: {e}\")\n            continue\n        except requests.exceptions.HTTPError as e:\n            print(f\"HTTP error on attempt {attempt + 1}: {e}\")\n            break\n        except requests.exceptions.RequestException as e:\n            print(f\"Error on attempt {attempt + 1}: {e}\")\n            break\n        except Exception as e:\n            print(f\"An unexpected error occurred on attempt {attempt + 1}: {e}\")\n            break\n            \n    return {}",
  "test_code": "import os\nfrom unittest.mock import patch\nfrom solution import download_and_save_apod\n\ndef test_download_and_save_apod():\n    api_key = \"YOUR_API_KEY\"\n    save_path = \"./test_apod_images\"\n    data = download_and_save_apod(api_key, save_path)\n\n    assert \"url\" in data\n    assert \"date\" in data\n    assert \"title\" in data\n    assert \"Explanation\" in data\n    \n    image_path = os.path.join(save_path, f\"apod_{data['date']}.jpg\")\n    assert os.path.exists(image_path)\n    \n    # Clean up\n    os.remove(image_path)\n    os.rmdir(save_path)\n\n# Mock the APOD API response\ndef mock_apod_api_response(*args, **kwargs):\n    class MockResponse:\n        @staticmethod\n        def json():\n            return {\n                \"date\": \"2023-03-01\",\n                \"title\": \"A beautiful cosmic sight\",\n                \"url\": \"https://apod.nasa.gov/apod/image/2003/PC_Small.jpg\",\n                \"hdurl\": \"https://apod.nasa.gov/apod/image/2003/PC_Small_HD.jpg\"\n            }\n    return MockResponse()\n\n@patch('requests.get', side_effect=mock_apod_api_response)\ndef test_download_and_save_apod_mocked(mock_get):\n    api_key = \"YOUR_API_KEY\"\n    save_path = \"./test_apod_images\"\n    data = download_and_save_apod(api_key, save_path)\n\n    assert \"url\" in data\n    assert \"date\" in data\n    assert \"title\" in data\n    assert \"Explanation\" in data\n\n    image_path = os.path.join(save_path, f\"apod_{data['date']}.jpg\")\n    assert os.path.exists(image_path)\n    \n    # Clean up\n    os.remove(image_path)\n    os.rmdir(save_path)",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}