{
  "metadata": {
    "prompt_id": "00000071",
    "row_id": 71,
    "seed_ids": [
      464
    ],
    "mode": "algorithm"
  },
  "instruction": "### Scenario\nYou are developing an application that requires access to astronomical images and data from NASA's API. Your application should be able to fetch and save these images locally. To ensure robustness, you need to implement error handling and retry mechanisms.\n\n### Requirement\nWrite a Python function `download_and_save_apod` that fetches the \"Astronomical Picture of the Day\" (APOD) from NASA's APOD API and saves it to a specified directory. The function should handle the following requirements:\n\n1. **Error Handling**: Implement error handling to gracefully deal with network failures, HTTP errors, and file I/O errors.\n2. **Retry Mechanism**: Implement a retry mechanism to attempt downloading the image up to 3 times if the initial attempt fails.\n3. **Input and Output**: The function should take an `api_key` and a `save_path` as arguments and return the APOD data as a dictionary.\n4. **Performance**: Ensure that the function does not hog the system resources and handles large images efficiently.\n5. **Documentation**: Add appropriate comments and docstring to the function for clarity.\n\n### Example\n```python\ndef download_and_save_apod(api_key: str, save_path: str) -> dict:\n    # Your implementation here\n    pass\n\n# Example usage\napi_key = \"YOUR_API_KEY\"\nsave_path = \"./apod_images\"\ndata = download_and_save_apod(api_key, save_path)\nprint(data)\n```\n\n### Constraints\n- The `api_key` is a valid NASA API key.\n- The `save_path` is a valid directory path.\n- The image URLs provided by the APOD API are always valid.\n\n### Performance Requirements\n- The function should be able to handle APOD images up to 10MB in size.\n- The function should not block the main thread for long periods during the download process.\n\n### Note\n- Use `requests` and `shutil` to handle HTTP requests and file I/O operations, respectively.\n- Use the `shutil.copyfileobj` method to copy the image data to a file.",
  "solution_code": "import requests\nimport shutil\nimport os\n\ndef download_and_save_apod(api_key: str, save_path: str) -> dict:\n    \"\"\"\n    Fetches the \"Astronomical Picture of the Day\" (APOD) from NASA's APOD API and saves it to a specified directory.\n    \n    :param api_key: A valid NASA API key.\n    :param save_path: A valid directory path where the APOD image will be saved.\n    :return: A dictionary containing the APOD data.\n    \"\"\"\n    url = f\"https://api.nasa.gov/planetary/apod?api_key={api_key}\"\n    \n    max_retries = 3\n    for attempt in range(max_retries):\n        try:\n            response = requests.get(url, stream=True)\n            response.raise_for_status()\n            \n            # Ensure the save directory exists\n            os.makedirs(save_path, exist_ok=True)\n            \n            # Save the image to a file\n            with requests.get(url, stream=True) as r:\n                r.raise_for_status()\n                with open(os.path.join(save_path, \"apod.jpg\"), 'wb') as f:\n                    shutil.copyfileobj(r.raw, f)\n            \n            # Parse the response JSON\n            apod_data = response.json()\n            return apod_data\n        except (requests.exceptions.RequestException, IOError) as e:\n            print(f\"Attempt {attempt + 1} failed: {e}\")\n            if attempt < max_retries - 1:\n                print(\"Retrying...\")\n            else:\n                print(\"All attempts failed. Aborting.\")\n                return None",
  "test_code": "import pytest\nfrom unittest.mock import Mock, patch\nfrom io import BytesIO\nfrom PIL import Image\nimport requests\n\n@pytest.fixture\ndef mock_response():\n    response = Mock()\n    response.status_code = 200\n    response.json.return_value = {\n        \"date\": \"2023-09-01\",\n        \"title\": \"Cool APOD\",\n        \"url\": \"https://apod.nasa.gov/apod/image/2023/cool_apod.jpg\"\n    }\n    response.raw = BytesIO(b\"dummy image data\")\n    return response\n\n@pytest.fixture\ndef mock_session():\n    session = Mock()\n    session.get.return_value = mock_response()\n    return session\n\ndef test_download_and_save_apod(mock_session, tmp_path):\n    api_key = \"YOUR_API_KEY\"\n    save_path = tmp_path\n    with patch(\"requests.Session\", return_value=mock_session):\n        data = download_and_save_apod(api_key, save_path)\n    assert data == {\n        \"date\": \"2023-09-01\",\n        \"title\": \"Cool APOD\",\n        \"url\": \"https://apod.nasa.gov/apod/image/2023/cool_apod.jpg\"\n    }\n    assert os.path.exists(os.path.join(save_path, \"apod.jpg\"))\n    img = Image.open(os.path.join(save_path, \"apod.jpg\"))\n    assert img.format == \"JPEG\"\n\ndef test_download_and_save_apod_with_error(mock_session):\n    # Mock a failed request\n    mock_session.get.side_effect = requests.exceptions.RequestException(\"Network error\")\n    with pytest.raises(requests.exceptions.RequestException):\n        download_and_save_apod(\"invalid_api_key\", \"./\")",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}