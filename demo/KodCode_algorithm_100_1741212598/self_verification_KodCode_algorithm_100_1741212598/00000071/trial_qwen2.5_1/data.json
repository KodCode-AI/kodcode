{
  "metadata": {
    "prompt_id": "00000071",
    "row_id": 71,
    "seed_ids": [
      464
    ],
    "mode": "algorithm"
  },
  "instruction": "### Scenario\nYou are developing an application that requires access to astronomical images and data from NASA's API. Your application should be able to fetch and save these images locally. To ensure robustness, you need to implement error handling and retry mechanisms.\n\n### Requirement\nWrite a Python function `download_and_save_apod` that fetches the \"Astronomical Picture of the Day\" (APOD) from NASA's APOD API and saves it to a specified directory. The function should handle the following requirements:\n\n1. **Error Handling**: Implement error handling to gracefully deal with network failures, HTTP errors, and file I/O errors.\n2. **Retry Mechanism**: Implement a retry mechanism to attempt downloading the image up to 3 times if the initial attempt fails.\n3. **Input and Output**: The function should take an `api_key` and a `save_path` as arguments and return the APOD data as a dictionary.\n4. **Performance**: Ensure that the function does not hog the system resources and handles large images efficiently.\n5. **Documentation**: Add appropriate comments and docstring to the function for clarity.\n\n### Example\n```python\ndef download_and_save_apod(api_key: str, save_path: str) -> dict:\n    # Your implementation here\n    pass\n\n# Example usage\napi_key = \"YOUR_API_KEY\"\nsave_path = \"./apod_images\"\ndata = download_and_save_apod(api_key, save_path)\nprint(data)\n```\n\n### Constraints\n- The `api_key` is a valid NASA API key.\n- The `save_path` is a valid directory path.\n- The image URLs provided by the APOD API are always valid.\n\n### Performance Requirements\n- The function should be able to handle APOD images up to 10MB in size.\n- The function should not block the main thread for long periods during the download process.\n\n### Note\n- Use `requests` and `shutil` to handle HTTP requests and file I/O operations, respectively.\n- Use the `shutil.copyfileobj` method to copy the image data to a file.",
  "solution_code": "import requests\nimport shutil\nimport os\nfrom urllib.parse import urlparse\n\ndef download_and_save_apod(api_key: str, save_path: str) -> dict:\n    \"\"\"\n    Downloads and saves the APOD (Astronomical Picture of the Day) image from NASA's APOD API to the specified save_path.\n    \n    Parameters:\n    api_key (str): NASA APOD API key.\n    save_path (str): Path where the image will be saved.\n    \n    Returns:\n    dict: APOD data as a dictionary.\n    \"\"\"\n    base_url = \"https://api.nasa.gov/planetary/apod\"\n    headers = {\"Accept\": \"application/json\"}\n    params = {\"api_key\": api_key}\n    \n    attempt = 1\n    max_attempts = 3\n    while attempt <= max_attempts:\n        response = requests.get(base_url, headers=headers, params=params)\n        if response.status_code == 200:\n            apod_data = response.json()\n            url = apod_data.get(\"hdurl\", apod_data.get(\"url\"))\n            if url:\n                image_url = url\n                filename = os.path.basename(urlparse(image_url).path)\n                image_path = os.path.join(save_path, filename)\n                try:\n                    os.makedirs(save_path, exist_ok=True)\n                    with requests.get(image_url, stream=True) as r:\n                        if r.status_code == 200:\n                            with open(image_path, 'wb') as f:\n                                shutil.copyfileobj(r.raw, f)\n                                apod_data[\"path\"] = image_path\n                                return apod_data\n                        else:\n                            print(f\"Failed to download image, received status code {r.status_code}.\")\n                except IOError as e:\n                    print(f\"File write error: {e}\")\n        else:\n            print(f\"Failed to fetch APOD data, received status code {response.status_code}.\")\n        \n        attempt += 1\n    \n    return {}\n\n# Example usage\napi_key = \"YOUR_API_KEY\"\nsave_path = \"./apod_images\"\ndata = download_and_save_apod(api_key, save_path)\nprint(data)",
  "test_code": "import os\nfrom unittest.mock import patch, mock_open, MagicMock\n\ndef test_download_and_save_apod(mocker):\n    api_key = \"YOUR_API_KEY\"\n    save_path = \"./apod_images\"\n    apod_data = {\n        \"hdurl\": \"https://apod.nasa.gov/apod/image/2303/CrabNebula_Hubble_2009_900.jpg\",\n        \"title\": \"Crab Nebula\",\n        \"date\": \"2023-03-22\",\n        \"explanation\": \"A giant explosion...\",\n        \"service_version\": \"1.0\",\n        \"pi\": \"Astronomy Picture of the Day\",\n        \"citation\": \"NASA/STScI/A. Loll/CXC/SAO\",\n        \"url\": \"https://apod.nasa.gov/apod/image/2303/CrabNebula_Hubble_2009.jpg\"\n    }\n    \n    # Mock requests.get\n    mock_response = MagicMock()\n    mock_response.status_code = 200\n    mock_response.json.return_value = apod_data\n    mocker.patch('requests.get', return_value=mock_response)\n    \n    # Mock os.makedirs\n    os.makedirs(save_path, exist_ok=True)\n    \n    # Mock open file for writing\n    mock_open_file = mock_open()\n    with patch('shutil.copyfileobj', return_value=None):\n        with patch('builtins.open', mock_open_file):\n            data = download_and_save_apod(api_key, save_path)\n            assert data == apod_data\n\ndef test_error_handling(mocker):\n    mock_response = MagicMock()\n    mock_response.status_code = 404\n    mocker.patch('requests.get', return_value=mock_response)\n    \n    # Assert error is handled\n    data = download_and_save_apod(\"invalid_api_key\", \"./apod_images\")\n    assert data is not None  # Still returns the error\n\ndef test_retry_mechanism(mocker):\n    os.makedirs(\"./apod_images\", exist_ok=True)\n    mock_requests_get = mocker.patch('requests.get')\n    mock_requests_get.side_effect = [requests.exceptions.RequestException] * 2 + [MagicMock(status_code=200)]\n    apod_data = {\n        \"hdurl\": \"https://apod.nasa.gov/apod/image/2303/CrabNebula_Hubble_2009_900.jpg\",\n        \"title\": \"Crab Nebula\",\n        \"date\": \"2023-03-22\",\n    }\n    mock_response = MagicMock()\n    mock_response.status_code = 200\n    mock_response.json.return_value = apod_data\n    mock_requests_get.return_value = mock_response\n    \n    data = download_and_save_apod(\"valid_api_key\", \"./apod_images\")\n    assert data == apod_data",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}