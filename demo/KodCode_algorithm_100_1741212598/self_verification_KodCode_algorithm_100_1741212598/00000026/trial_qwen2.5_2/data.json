{
  "metadata": {
    "prompt_id": "00000026",
    "row_id": 26,
    "seed_ids": [
      66
    ],
    "mode": "algorithm"
  },
  "instruction": "### Context\nYou are developing a simple text processing application that includes basic text encryption and decryption functionalities. The application should support a custom ROT13 variant where the shift value is configurable. Your task is to extend the provided code to include a function that can handle this custom ROT13 variant and a main function to test the functionality.\n\n### Requirements\n\n1. Implement a function `custom_dencrypt(s: str, n: int = 13) -> str` that takes a string `s` and a positive integer `n` as input and returns the string encrypted or decrypted using the ROT13 variant with a shift of `n`.\n2. The function should handle both uppercase and lowercase letters correctly, and non-alphabetic characters should remain unchanged.\n3. Include a `main` function to test the `custom_dencrypt` function with the following requirements:\n   - It should prompt the user to enter a message.\n   - It should display the encrypted message using a specified shift value.\n   - It should display the decrypted message after applying the encryption again with the same shift value.\n4. Ensure that the shift value `n` is positive and does not exceed 26. If the shift value is invalid, your function should handle it gracefully and provide a meaningful error message.\n\n### Example\n\n```python\nif __name__ == \"__main__\":\n    s0 = input(\"Enter message: \")\n\n    try:\n        shift = int(input(\"Enter shift value (1-26): \"))\n        if 1 <= shift <= 26:\n            s1 = custom_dencrypt(s0, shift)\n            print(\"Encryption:\", s1)\n\n            s2 = custom_dencrypt(s1, shift)\n            print(\"Decryption: \", s2)\n        else:\n            print(\"Shift value must be between 1 and 26.\")\n    except ValueError:\n        print(\"Invalid input. Please enter a number between 1 and 26.\")\n```\n\n### Constraints\n\n- The input string can contain up to \\(10^5\\) characters.\n- The shift value \\(n\\) should be a positive integer between 1 and 26, inclusive.\n\n### Performance Requirements\n\n- The solution should be able to handle the encryption and decryption of a string of up to \\(10^5\\) characters within a reasonable amount of time.",
  "solution_code": "def custom_dencrypt(s: str, n: int = 13) -> str:\n    \"\"\"\n    Returns the string encrypted or decrypted using the custom ROT13 variant with a shift of n.\n    \"\"\"\n    if n < 1 or n > 26:\n        return \"Invalid shift value. It must be between 1 and 26.\"\n    \n    def shift_char(c: str, base: int) -> str:\n        offset = ord(c) - base\n        shifted_offset = (offset + n) % 26\n        return chr(base + shifted_offset)\n\n    encrypted = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted.append(shift_char(char, ord('a')))\n        elif 'A' <= char <= 'Z':\n            encrypted.append(shift_char(char, ord('A')))\n        else:\n            encrypted.append(char)\n    return ''.join(encrypted)\n\ndef main():\n    s0 = input(\"Enter message: \")\n\n    try:\n        shift = int(input(\"Enter shift value (1-26): \"))\n        if 1 <= shift <= 26:\n            s1 = custom_dencrypt(s0, shift)\n            print(\"Encryption:\", s1)\n\n            s2 = custom_dencrypt(s1, shift)\n            print(\"Decryption: \", s2)\n        else:\n            print(\"Shift value must be between 1 and 26.\")\n    except ValueError:\n        print(\"Invalid input. Please enter a number between 1 and 26.\")",
  "test_code": "from solution import custom_dencrypt, main\n\n# Test custom_dencrypt function\ndef test_custom_dencrypt():\n    assert custom_dencrypt(\"Hello, World!\", 13) == \"Uryyb, Jbeyq!\"\n    assert custom_dencrypt(\"Uryyb, Jbeyq!\", 13) == \"Hello, World!\"\n    assert custom_dencrypt(\"abc\", 3) == \"def\"\n    assert custom_dencrypt(\"Abc\", 3) == \"Def\"\n    assert custom_dencrypt(\"123\", 5) == \"123\"\n    assert custom_dencrypt(\"AaBbCc\", 26) == \"AaBbCc\"\n    assert custom_dencrypt(\"AaBbCc\", 0) == \"Invalid shift value. It must be between 1 and 26.\"\n    assert custom_dencrypt(\"AaBbCc\", 27) == \"Invalid shift value. It must be between 1 and 26.\"\n\n# Test main function\ndef test_main():\n    # Redirect input and output for testing\n    from io import StringIO\n    import sys\n    inputs = [\"Hello, World!\\n\", \"13\\n\"]\n    outputs = [\"Encryption: Uryyb, Jbeyq!\\nDecryption:  Hello, World!\\n\"]\n\n    sys.stdin = StringIO(\"\".join(inputs))\n    sys.stdout = StringIO()\n\n    main()\n    sys.stdout.seek(0)\n    assert sys.stdout.read() == \"\".join(outputs)\n\n    sys.stdin.seek(0)\n    sys.stdout.seek(0)\n    sys.stdout.truncate(0)\n    inputs[1] = \"27\\n\"\n    main()\n    sys.stdout.seek(0)\n    assert sys.stdout.read() == \"Shift value must be between 1 and 26.\\n\"\n    \n    sys.stdin.seek(0)\n    sys.stdout.seek(0)\n    sys.stdout.truncate(0)\n    inputs[1] = \"-5\\n\"\n    main()\n    sys.stdout.seek(0)\n    assert sys.stdout.read() == \"Shift value must be between 1 and 26.\\n\"\n\n    sys.stdin.seek(0)\n    sys.stdout.seek(0)\n    sys.stdout.truncate(0)\n    inputs[1] = \"a\\n\"\n    main()\n    sys.stdout.seek(0)\n    assert sys.stdout.read() == \"Invalid input. Please enter a number between 1 and 26.\\n\"\n\n    sys.stdin.seek(0)\n    sys.stdout.seek(0)\n    sys.stdout.truncate(0)\n    inputs[1] = \"1\\n\"\n    main()\n    sys.stdout.seek(0)\n    assert sys.stdout.read() == \"Encryption: Ifmmp, Xpsme!\\nDecryption:  Hello, World!\\n\"",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}