{
  "metadata": {
    "prompt_id": "00000026",
    "row_id": 26,
    "seed_ids": [
      66
    ],
    "mode": "algorithm"
  },
  "instruction": "### Context\nYou are developing a simple text processing application that includes basic text encryption and decryption functionalities. The application should support a custom ROT13 variant where the shift value is configurable. Your task is to extend the provided code to include a function that can handle this custom ROT13 variant and a main function to test the functionality.\n\n### Requirements\n\n1. Implement a function `custom_dencrypt(s: str, n: int = 13) -> str` that takes a string `s` and a positive integer `n` as input and returns the string encrypted or decrypted using the ROT13 variant with a shift of `n`.\n2. The function should handle both uppercase and lowercase letters correctly, and non-alphabetic characters should remain unchanged.\n3. Include a `main` function to test the `custom_dencrypt` function with the following requirements:\n   - It should prompt the user to enter a message.\n   - It should display the encrypted message using a specified shift value.\n   - It should display the decrypted message after applying the encryption again with the same shift value.\n4. Ensure that the shift value `n` is positive and does not exceed 26. If the shift value is invalid, your function should handle it gracefully and provide a meaningful error message.\n\n### Example\n\n```python\nif __name__ == \"__main__\":\n    s0 = input(\"Enter message: \")\n\n    try:\n        shift = int(input(\"Enter shift value (1-26): \"))\n        if 1 <= shift <= 26:\n            s1 = custom_dencrypt(s0, shift)\n            print(\"Encryption:\", s1)\n\n            s2 = custom_dencrypt(s1, shift)\n            print(\"Decryption: \", s2)\n        else:\n            print(\"Shift value must be between 1 and 26.\")\n    except ValueError:\n        print(\"Invalid input. Please enter a number between 1 and 26.\")\n```\n\n### Constraints\n\n- The input string can contain up to \\(10^5\\) characters.\n- The shift value \\(n\\) should be a positive integer between 1 and 26, inclusive.\n\n### Performance Requirements\n\n- The solution should be able to handle the encryption and decryption of a string of up to \\(10^5\\) characters within a reasonable amount of time.",
  "solution_code": "def custom_dencrypt(s: str, n: int = 13) -> str:\n    \"\"\"\n    Encrypts or decrypts the string s using a custom ROT13 variant with a shift of n.\n    \"\"\"\n    result = []\n    for char in s:\n        if char.isalpha():\n            shift = n\n            base = ord('A') if char.isupper() else ord('a')\n            offset = ord(char) - base\n            new_offset = (offset + shift) % 26\n            result.append(chr(base + new_offset))\n        else:\n            result.append(char)\n    return ''.join(result)\n\ndef main():\n    s0 = input(\"Enter message: \")\n\n    try:\n        shift = int(input(\"Enter shift value (1-26): \"))\n        if not (1 <= shift <= 26):\n            print(\"Shift value must be between 1 and 26.\")\n            return\n\n        s1 = custom_dencrypt(s0, shift)\n        print(\"Encryption:\", s1)\n\n        s2 = custom_dencrypt(s1, shift)\n        print(\"Decryption: \", s2)\n    except ValueError:\n        print(\"Invalid input. Please enter a number between 1 and 26.\")",
  "test_code": "import pytest\n\ndef test_custom_dencrypt_single_character():\n    assert custom_dencrypt(\"A\", 13) == \"N\"\n    assert custom_dencrypt(\"N\", 13) == \"A\"\n    assert custom_dencrypt(\"a\", 13) == \"n\"\n    assert custom_dencrypt(\"n\", 13) == \"a\"\n\ndef test_custom_dencrypt_uppercase():\n    assert custom_dencrypt(\"Hello World!\", 13) == \"Uryyb Jbeyq!\"\n    assert custom_dencrypt(\"Uryyb Jbeyq!\", 13) == \"Hello World!\"\n\ndef test_custom_dencrypt_lowercase():\n    assert custom_dencrypt(\"hello world!\", 13) == \"uryyb jbeyq!\"\n    assert custom_dencrypt(\"uryyb jbeyq!\", 13) == \"hello world!\"\n\ndef test_custom_dencrypt_mixed():\n    assert custom_dencrypt(\"Hello, World!\", 13) == \"Uryyb, Jbeyq!\"\n    assert custom_dencrypt(\"Uryyb, Jbeyq!\", 13) == \"Hello, World!\"\n\ndef test_custom_dencrypt_non_alpha():\n    assert custom_dencrypt(\"Hello,123!\", 13) == \"Uryyb,123!\"\n    assert custom_dencrypt(\"Uryyb,123!\", 13) == \"Hello,123!\"\n\ndef test_custom_dencrypt_shift_error():\n    with pytest.raises(AssertionError):\n        assert custom_dencrypt(\"Hello\", 0)\n\ndef test_custom_dencrypt_shift_out_of_range():\n    with pytest.raises(AssertionError):\n        assert custom_dencrypt(\"Hello\", 27)",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}