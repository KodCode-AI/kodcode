{
  "metadata": {
    "prompt_id": "00000055",
    "row_id": 55,
    "seed_ids": [
      474
    ],
    "mode": "algorithm"
  },
  "instruction": "You are given a 2x2 grid, and you are required to calculate the number of unique paths from the top-left corner to the bottom-right corner, where you can only move right or down. The general solution extends to an \\(n \\times n\\) grid.\n\nWrite a Python function `calculate_paths(n: int) -> int` that returns the number of unique paths in an \\(n \\times n\\) grid.\n\n**Function Signature**: `def calculate_paths(n: int) -> int:`\n\n**Input**\n- `n` (1 <= n <= 100): An integer representing the size of the grid.\n\n**Output**\n- An integer representing the number of unique paths in the \\(n \\times n\\) grid.\n\n**Constraints**\n- The input `n` will be a positive integer.\n\n**Example**\n```python\nprint(calculate_paths(2))  # Output: 6\nprint(calculate_paths(20))  # Output: 137846528820\n```\n\n**Note**\n- Use combinatorial mathematics to solve the problem efficiently.\n- Ensure your function handles edge cases correctly.",
  "solution_code": "def calculate_paths(n: int) -> int:\n    \"\"\"\n    Returns the number of unique paths in an n x n grid.\n    \"\"\"\n    # The number of unique paths in an n x n grid is given by the binomial coefficient C(2n, n)\n    # which is (2n)! / (n! * n!)\n    from math import comb\n\n    return comb(2 * n, n)",
  "test_code": "import pytest\n\ndef test_calculate_paths_small_case():\n    assert calculate_paths(2) == 6\n\ndef test_calculate_paths_large_case():\n    assert calculate_paths(20) == 137846528820\n\ndef test_calculate_paths_edge_case():\n    assert calculate_paths(1) == 2\n\ndef test_calculate_paths_zero_case():\n    with pytest.raises(AssertionError):\n        calculate_paths(0)  # Input should be positive, this should not be reached as per constraint\n\ndef test_calculate_paths_negative_case():\n    with pytest.raises(AssertionError):\n        calculate_paths(-5)  # Input should be positive",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}