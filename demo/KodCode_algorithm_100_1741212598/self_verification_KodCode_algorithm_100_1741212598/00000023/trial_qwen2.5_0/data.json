{
  "metadata": {
    "prompt_id": "00000023",
    "row_id": 23,
    "seed_ids": [
      529
    ],
    "mode": "algorithm"
  },
  "instruction": "**Problem Statement**:\nWrite a Python function `count_letters` that converts numbers from 1 to 1000 into their English word representations and counts the total number of letters used, excluding spaces and hyphens. The function should be able to handle numbers up to 1000 and return the total count of letters.\n\n**Function Signature**:\n```python\ndef count_letters(n: int) -> int:\n    pass\n```\n\n**Input**:\n- `n` (1 <= n <= 1000): An integer representing the number to be converted and counted.\n\n**Output**:\n- An integer representing the total number of letters used when the number is written in words.\n\n**Constraints**:\n- The function must handle all numbers from 1 to 1000 inclusively.\n- Do not count spaces or hyphens when counting letters.\n\n**Example**:\n```python\nassert count_letters(100) == 11\nassert count_letters(342) == 23\nassert count_letters(115) == 20\nassert count_letters(1000) == 21124\n```\n\n**Note**:\n- Your solution should be efficient and handle all edge cases as described in the provided snippet.\n\n**Performance Requirement**:\n- The function should be able to process the input within a reasonable time, considering the constraints.",
  "solution_code": "def count_letters(n: int) -> int:\n    \"\"\"\n    Converts numbers from 1 to 1000 into their English word representations and counts the total number of letters used,\n    excluding spaces and hyphens.\n    \"\"\"\n    assert 1 <= n <= 1000, \"Input must be between 1 and 1000\"\n    \n    # Helper words\n    ones = [\"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n    teens = [\"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n    tens = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n    thousands = [\"\", \"thousand\", \"million\", \"billion\"]\n    \n    def number_to_words(num):\n        if num == 0:\n            return \"\"\n        elif num < 10:\n            return ones[num]\n        elif num < 20:\n            return teens[num - 10]\n        elif num < 100:\n            return tens[num // 10] + ('' if num % 10 == 0 else '-' + ones[num % 10])\n        elif num < 1000:\n            return ones[num // 100] + \" hundred\" + ('' if num % 100 == 0 else ' and ' + number_to_words(num % 100))\n        else:\n            return number_to_words(num // 1000) + ' thousand ' + number_to_words(num % 1000)\n    \n    words = number_to_words(n)\n    return len(words.replace(\" \", \"\").replace(\"-\", \"\"))",
  "test_code": "import pytest\n\ndef test_count_letters():\n    assert count_letters(100) == 11\n    assert count_letters(342) == 23\n    assert count_letters(115) == 20\n    assert count_letters(1000) == 11\n    assert count_letters(342) == 23\n    assert count_letters(115) == 20\n    assert count_letters(123) == 20\n    assert count_letters(12345) == 19\n    assert count_letters(999) == 26\n    assert count_letters(1000) == 11\n\ndef test_edge_cases():\n    assert count_letters(1) == 3\n    assert count_letters(0) == 4  # special case for input 0\n    assert count_letters(999) == 26\n    assert count_letters(1000) == 11\n\ndef test_large_numbers():\n    for n in range(1, 1001):\n        assert count_letters(n) == sum(len(number_to_words(i).replace(\" \", \"\").replace(\"-\", \"\")) for i in range(1, n + 1))\n\ndef test_single_digit():\n    for i in range(1, 10):\n        assert count_letters(i) == len(ones[i])\n\ndef test_tens():\n    for i in range(10, 20):\n        assert count_letters(i) == len(teens[i - 10])\n    for i in range(20, 100):\n        if i % 10 != 0:\n            assert count_letters(i) == len(tens[i // 10]) + (2 if i % 10 != 0 else 0) + (len(ones[i % 10]) if i % 10 != 0 else 0)\n        else:\n            assert count_letters(i) == len(tens[i // 10])\n\ndef test_hundreds():\n    for i in range(100, 1000, 100):\n        assert count_letters(i) == len(ones[i // 100]) + 7  # \"hundred\" + 6 chars for \"and\"\n    for i in range(100, 1000):\n        if i % 100 == 0:\n            continue\n        suffix = '' if i % 100 < 10 else (' and ' + number_to_words(i % 100)) if i % 100 > 0 else ''\n        assert count_letters(i) == len(ones[i // 100]) + 7 + (len(suffix) - 3)\n\ndef test_thousands():\n    for i in range(1000, 10000):\n        assert count_letters(i) == count_letters(i // 1000) + 8 + count_letters(i % 1000)",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}