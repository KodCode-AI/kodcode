{
  "metadata": {
    "prompt_id": "00000097",
    "row_id": 97,
    "seed_ids": [
      837
    ],
    "mode": "algorithm"
  },
  "instruction": "## Scenario\nYou are tasked with enhancing the functionality of an image processing application. Your goal is to implement a more advanced color transformation technique that not only applies a sepia tone but also adjusts the brightness and contrast of the image. This will improve the visual appeal and artistic quality of the images processed by the application.\n\n## Requirements\n1. **Input**: The function should accept an image (as a NumPy array) and two parameters: `factor` (an integer representing the sepia effect intensity, where a higher value enhances the sepia tone) and `brightness` (an integer representing the brightness adjustment, where positive values increase brightness and negative values decrease it).\n2. **Output**: Return the modified image as a NumPy array.\n3. **Constraints**:\n   - The input image is represented as a NumPy array of shape \\( (H, W, 3) \\) where \\( H \\) is the height and \\( W \\) is the width of the image.\n   - The `factor` and `brightness` parameters are integers, and valid values for `factor` are in the range \\([0, 100]\\), and for `brightness` are in the range \\([-100, 100]\\).\n4. **Performance**: The solution should be efficient, especially for large images, and should avoid unnecessary memory usage.\n\n## Function Signature\n```python\ndef enhanced_sepia(image: np.ndarray, factor: int, brightness: int) -> np.ndarray:\n    pass\n```\n\n## Example\n```python\nimport numpy as np\n\nimage = np.array([[[255, 255, 255], [0, 0, 0]], [[128, 128, 128], [64, 64, 64]]], dtype=np.uint8)\nresult = enhanced_sepia(image, 50, 10)\nprint(result)\n```\n\n### Expected Output\n```\narray([[[191, 170, 145], [ 23,  12,   0]], [[ 91,  76,  61], [ 44,  41,  34]]], dtype=uint8)\n```\n\n### Explanation\n- The sepia effect is applied with a `factor` of 50, enhancing the sepia tone.\n- The image brightness is increased by 10.\n\n## Evaluation\nYour implementation will be evaluated based on the correctness of the output, efficiency, and adherence to the constraints. Additionally, ensure that the code handles edge cases and performance bottlenecks effectively.",
  "solution_code": "import numpy as np\n\ndef enhanced_sepia(image: np.ndarray, factor: int, brightness: int) -> np.ndarray:\n    \"\"\"\n    Applies a sepia tone to an image while adjusting its brightness and contrast.\n    \n    :param image: NumPy array of shape (H, W, 3) representing an image.\n    :param factor: Integer representing the sepia effect intensity (0 to 100).\n    :param brightness: Integer representing the brightness adjustment (-100 to 100).\n    :return: Modified image as a NumPy array.\n    \"\"\"\n    # Convert to float for easier manipulation\n    image = image.astype(float)\n    \n    # Apply sepia effect\n    sepia_filter = np.array([\n        [0.393, 0.769, 0.189],\n        [0.349, 0.686, 0.168],\n        [0.272, 0.534, 0.131]\n    ])\n    sepia_tone = np.dot(image, sepia_filter.T)\n    \n    # Apply factor to the sepia tone\n    sepia_tone *= (factor / 100.0)\n    \n    # Clip values to keep them within [0, 255]\n    sepia_tone = np.clip(sepia_tone, 0, 255)\n    \n    # Adjust brightness\n    sepia_tone += brightness\n    \n    # Clip brightness values to maintain within [0, 255]\n    sepia_tone = np.clip(sepia_tone, 0, 255)\n    \n    # Convert back to uint8\n    sepia_tone = sepia_tone.astype(np.uint8)\n    \n    return sepia_tone",
  "test_code": "import numpy as np\n\ndef test_enhanced_sepia():\n    # Test with white background and black background\n    image = np.array([[[255, 255, 255], [0, 0, 0]], [[128, 128, 128], [64, 64, 64]]], dtype=np.uint8)\n    result = enhanced_sepia(image, 50, 10)\n    expected_result = np.array([[[191, 170, 145], [23, 12, 0]], [[91, 76, 61], [44, 41, 34]]], dtype=np.uint8)\n    assert np.array_equal(result, expected_result)\n\n    # Test with pure sepia effect and some brightness adjustment\n    image = np.array([[[255, 255, 255], [255, 0, 0]], [[0, 255, 0], [0, 0, 255]]], dtype=np.uint8)\n    result = enhanced_sepia(image, 100, -50)\n    expected_result = np.array([[[138, 119, 81], [234, 17, 30]], [[21, 94, 22], [23, 30, 18]]], dtype=np.uint8)\n    assert np.array_equal(result, expected_result)\n\n    # Test with edge case brightness adjustment\n    image = np.array([[[255, 255, 255], [0, 0, 0]], [[128, 128, 128], [64, 64, 64]]], dtype=np.uint8)\n    result = enhanced_sepia(image, 50, -100)\n    expected_result = np.array([[[0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0]]], dtype=np.uint8)\n    assert np.array_equal(result, expected_result)\n\n    # Test with edge case factor adjustment\n    image = np.array([[[255, 255, 255], [0, 0, 0]], [[128, 128, 128], [64, 64, 64]]], dtype=np.uint8)\n    result = enhanced_sepia(image, 0, 100)\n    expected_result = np.array([[[255, 255, 255], [255, 255, 255]], [[255, 255, 255], [255, 255, 255]]], dtype=np.uint8)\n    assert np.array_equal(result, expected_result)\n\n    print(\"All tests passed!\")\n\n# Run the tests\ntest_enhanced_sepia()",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}