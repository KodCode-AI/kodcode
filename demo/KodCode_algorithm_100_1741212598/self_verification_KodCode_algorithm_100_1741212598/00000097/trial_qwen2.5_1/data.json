{
  "metadata": {
    "prompt_id": "00000097",
    "row_id": 97,
    "seed_ids": [
      837
    ],
    "mode": "algorithm"
  },
  "instruction": "## Scenario\nYou are tasked with enhancing the functionality of an image processing application. Your goal is to implement a more advanced color transformation technique that not only applies a sepia tone but also adjusts the brightness and contrast of the image. This will improve the visual appeal and artistic quality of the images processed by the application.\n\n## Requirements\n1. **Input**: The function should accept an image (as a NumPy array) and two parameters: `factor` (an integer representing the sepia effect intensity, where a higher value enhances the sepia tone) and `brightness` (an integer representing the brightness adjustment, where positive values increase brightness and negative values decrease it).\n2. **Output**: Return the modified image as a NumPy array.\n3. **Constraints**:\n   - The input image is represented as a NumPy array of shape \\( (H, W, 3) \\) where \\( H \\) is the height and \\( W \\) is the width of the image.\n   - The `factor` and `brightness` parameters are integers, and valid values for `factor` are in the range \\([0, 100]\\), and for `brightness` are in the range \\([-100, 100]\\).\n4. **Performance**: The solution should be efficient, especially for large images, and should avoid unnecessary memory usage.\n\n## Function Signature\n```python\ndef enhanced_sepia(image: np.ndarray, factor: int, brightness: int) -> np.ndarray:\n    pass\n```\n\n## Example\n```python\nimport numpy as np\n\nimage = np.array([[[255, 255, 255], [0, 0, 0]], [[128, 128, 128], [64, 64, 64]]], dtype=np.uint8)\nresult = enhanced_sepia(image, 50, 10)\nprint(result)\n```\n\n### Expected Output\n```\narray([[[191, 170, 145], [ 23,  12,   0]], [[ 91,  76,  61], [ 44,  41,  34]]], dtype=uint8)\n```\n\n### Explanation\n- The sepia effect is applied with a `factor` of 50, enhancing the sepia tone.\n- The image brightness is increased by 10.\n\n## Evaluation\nYour implementation will be evaluated based on the correctness of the output, efficiency, and adherence to the constraints. Additionally, ensure that the code handles edge cases and performance bottlenecks effectively.",
  "solution_code": "import numpy as np\n\ndef enhanced_sepia(image: np.ndarray, factor: int, brightness: int) -> np.ndarray:\n    \"\"\"\n    Applies sepia tone and brightness/contrast adjustments to the input image.\n\n    :param image: NumPy array representing the input image of shape (H, W, 3).\n    :param factor: An integer representing the sepia effect intensity.\n    :param brightness: An integer representing the brightness adjustment.\n    :return: NumPy array representing the modified image.\n    \"\"\"\n    # Ensure the factor is within the valid range\n    factor = max(0, min(factor, 100))\n    \n    # Convert RGB to grayscale for the sepia calculation\n    gray = np.dot(image[..., :3], [0.299, 0.587, 0.114])\n    \n    # Apply sepia effect based on the factor\n    sepia_matrix = np.array([[0.393 + 0.607 * (factor / 100), 0.769 - 0.769 * (factor / 100), 0.189 - 0.189 * (factor / 100)],\n                             [0.349 - 0.349 * (factor / 100), 0.686 + 0.314 * (factor / 100), 0.168 - 0.168 * (factor / 100)],\n                             [0.272 - 0.272 * (factor / 100), 0.534 - 0.534 * (factor / 100), 0.131 + 0.869 * (factor / 100)]])\n    \n    # Apply sepia matrix and clip the values to avoid overflow\n    sepia_image = np.clip(np.dot(gray[..., np.newaxis], sepia_matrix.T), 0, 255)\n    \n    # Normalize the sepia image to (0, 255) range\n    sepia_image = (sepia_image / sepia_image.max() * 255).astype(np.uint8)\n    \n    # Apply brightness adjustment\n    sepia_image += brightness\n    \n    # Ensure the brightness adjustment doesn't overflow\n    sepia_image = np.clip(sepia_image, 0, 255)\n    \n    return sepia_image",
  "test_code": "import numpy as np\n\ndef test_enhanced_sepia():\n    # Test case 1: White and black pixels, with sepia effect and brightness increase\n    image = np.array([[[255, 255, 255], [0, 0, 0]], [[128, 128, 128], [64, 64, 64]]], dtype=np.uint8)\n    result = enhanced_sepia(image, 50, 10)\n    expected = np.array([[[191, 170, 145], [23, 12, 0]], [[91, 76, 61], [44, 41, 34]]], dtype=np.uint8)\n    assert np.array_equal(result, expected)\n\ndef test_enhanced_sepia_edge_cases():\n    # Test case 2: Full brightness increase, with sepia effect\n    image = np.full((2, 2, 3), 128, dtype=np.uint8)\n    result = enhanced_sepia(image, 50, 100)\n    expected = np.full((2, 2, 3), 255, dtype=np.uint8)\n    assert np.array_equal(result, expected)\n\n    # Test case 3: Full brightness decrease, with sepia effect\n    image = np.full((2, 2, 3), 128, dtype=np.uint8)\n    result = enhanced_sepia(image, 50, -100)\n    expected = np.zeros((2, 2, 3), dtype=np.uint8)\n    assert np.array_equal(result, expected)\n\ndef test_enhanced_sepia_zero_factor():\n    # Test case 4: No sepia effect, with brightness increase and decrease\n    image = np.full((2, 2, 3), 128, dtype=np.uint8)\n    result = enhanced_sepia(image, 0, 100)\n    expected = np.full((2, 2, 3), 255, dtype=np.uint8)\n    assert np.array_equal(result, expected)\n    \n    result = enhanced_sepia(image, 0, -100)\n    expected = np.zeros((2, 2, 3), dtype=np.uint8)\n    assert np.array_equal(result, expected)\n\ndef test_enhanced_sepia_large_image():\n    # Test case 5: Large image, with sepia effect and brightness increase\n    image = np.full((100, 100, 3), 128, dtype=np.uint8)\n    result = enhanced_sepia(image, 50, 10)\n    expected = np.full((100, 100, 3), 191, dtype=np.uint8)\n    assert np.array_equal(result, expected)",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}