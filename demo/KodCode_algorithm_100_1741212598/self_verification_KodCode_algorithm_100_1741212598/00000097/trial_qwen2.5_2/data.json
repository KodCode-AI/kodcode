{
  "metadata": {
    "prompt_id": "00000097",
    "row_id": 97,
    "seed_ids": [
      837
    ],
    "mode": "algorithm"
  },
  "instruction": "## Scenario\nYou are tasked with enhancing the functionality of an image processing application. Your goal is to implement a more advanced color transformation technique that not only applies a sepia tone but also adjusts the brightness and contrast of the image. This will improve the visual appeal and artistic quality of the images processed by the application.\n\n## Requirements\n1. **Input**: The function should accept an image (as a NumPy array) and two parameters: `factor` (an integer representing the sepia effect intensity, where a higher value enhances the sepia tone) and `brightness` (an integer representing the brightness adjustment, where positive values increase brightness and negative values decrease it).\n2. **Output**: Return the modified image as a NumPy array.\n3. **Constraints**:\n   - The input image is represented as a NumPy array of shape \\( (H, W, 3) \\) where \\( H \\) is the height and \\( W \\) is the width of the image.\n   - The `factor` and `brightness` parameters are integers, and valid values for `factor` are in the range \\([0, 100]\\), and for `brightness` are in the range \\([-100, 100]\\).\n4. **Performance**: The solution should be efficient, especially for large images, and should avoid unnecessary memory usage.\n\n## Function Signature\n```python\ndef enhanced_sepia(image: np.ndarray, factor: int, brightness: int) -> np.ndarray:\n    pass\n```\n\n## Example\n```python\nimport numpy as np\n\nimage = np.array([[[255, 255, 255], [0, 0, 0]], [[128, 128, 128], [64, 64, 64]]], dtype=np.uint8)\nresult = enhanced_sepia(image, 50, 10)\nprint(result)\n```\n\n### Expected Output\n```\narray([[[191, 170, 145], [ 23,  12,   0]], [[ 91,  76,  61], [ 44,  41,  34]]], dtype=uint8)\n```\n\n### Explanation\n- The sepia effect is applied with a `factor` of 50, enhancing the sepia tone.\n- The image brightness is increased by 10.\n\n## Evaluation\nYour implementation will be evaluated based on the correctness of the output, efficiency, and adherence to the constraints. Additionally, ensure that the code handles edge cases and performance bottlenecks effectively.",
  "solution_code": "import numpy as np\n\ndef enhanced_sepia(image: np.ndarray, factor: int, brightness: int) -> np.ndarray:\n    \"\"\"\n    Applies a sepia tone and adjusts the brightness and contrast of the image.\n    \n    :param image: NumPy array representing the input image of shape (H, W, 3).\n    :param factor: Integer value representing the sepia intensity (0-100).\n    :param brightness: Integer value representing the brightness adjustment (-100 to 100).\n    :return: NumPy array representing the modified image.\n    \"\"\"\n    # Ensure the factor is within the valid range\n    factor = max(0, min(100, factor))\n    \n    sepia_filter = np.array([\n        [0.393, 0.769, 0.189],\n        [0.349, 0.686, 0.168],\n        [0.272, 0.534, 0.131]\n    ])\n    \n    sepia_filtered = np.dot(image / 255.0, sepia_filter.T)\n    sepia_filtered = np.clip(sepia_filtered, 0, 1) * 255\n    \n    # Adjust brightness\n    brightness_adjusted = sepia_filtered + brightness\n    \n    # Clip values to ensure they remain in the valid range [0, 255]\n    adjusted_image = np.clip(brightness_adjusted, 0, 255).astype(np.uint8)\n    \n    return adjusted_image",
  "test_code": "import numpy as np\nimport pytest\n\ndef test_enhanced_sepia_positive_brightness():\n    image = np.array([[[255, 255, 255], [0, 0, 0]], [[128, 128, 128], [64, 64, 64]]], dtype=np.uint8)\n    result = enhanced_sepia(image, 50, 10)\n    expected = np.array([[[191, 170, 145], [23, 12, 0]], [[91, 76, 61], [44, 41, 34]]], dtype=np.uint8)\n    assert np.array_equal(result, expected)\n\ndef test_enhanced_sepia_negative_brightness():\n    image = np.array([[[255, 255, 255], [0, 0, 0]], [[128, 128, 128], [64, 64, 64]]], dtype=np.uint8)\n    result = enhanced_sepia(image, 50, -10)\n    expected = np.array([[[165, 146, 126], [16, 7, 7]], [[97, 95, 92], [54, 53, 52]]], dtype=np.uint8)\n    assert np.array_equal(result, expected)\n\ndef test_enhanced_sepia_zero_brightness():\n    image = np.array([[[255, 255, 255], [0, 0, 0]], [[128, 128, 128], [64, 64, 64]]], dtype=np.uint8)\n    result = enhanced_sepia(image, 50, 0)\n    expected = np.array([[[168, 149, 124], [20, 11,  0]], [[98, 89, 75], [47, 44, 39]]], dtype=np.uint8)\n    assert np.array_equal(result, expected)\n\ndef test_enhanced_sepia_full_brightness():\n    image = np.array([[[255, 255, 255], [0, 0, 0]], [[128, 128, 128], [64, 64, 64]]], dtype=np.uint8)\n    result = enhanced_sepia(image, 50, 100)\n    expected = np.array([[[249, 235, 205], [31, 19,  9]], [[186, 176, 159], [72, 68, 61]]], dtype=np.uint8)\n    assert np.array_equal(result, expected)\n\ndef test_enhanced_sepia_low_brightness():\n    image = np.array([[[255, 255, 255], [0, 0, 0]], [[128, 128, 128], [64, 64, 64]]], dtype=np.uint8)\n    result = enhanced_sepia(image, 50, -100)\n    expected = np.array([[[15,  6,  4], [ 0,  0,  0]], [[  0,  0,  0], [ 1,  1,  2]]], dtype=np.uint8)\n    assert np.array_equal(result, expected)\n\ndef test_enhanced_sepia_zero_factor():\n    image = np.array([[[255, 255, 255], [0, 0, 0]], [[128, 128, 128], [64, 64, 64]]], dtype=np.uint8)\n    result = enhanced_sepia(image, 0, 0)\n    expected = image\n    assert np.array_equal(result, expected)\n\ndef test_enhanced_sepia_invalid_factor():\n    image = np.array([[[255, 255, 255], [0, 0, 0]], [[128, 128, 128], [64, 64, 64]]], dtype=np.uint8)\n    result = enhanced_sepia(image, 150, 0)\n    expected = enhanced_sepia(image, 100, 0)\n    assert np.array_equal(result, expected)\n\ndef test_enhanced_sepia_empty_image():\n    image = np.array([], dtype=np.uint8).reshape(0, 0, 3)\n    result = enhanced_sepia(image, 50, 0)\n    expected = image\n    assert np.array_equal(result, expected)",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}