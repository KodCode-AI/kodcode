{
  "metadata": {
    "prompt_id": "00000069",
    "row_id": 69,
    "seed_ids": [
      18
    ],
    "mode": "algorithm"
  },
  "instruction": "### Task: Implement a Simplified K-Means Clustering Algorithm Using TensorFlow\n\nYou are tasked with implementing a simplified version of the K-Means clustering algorithm using TensorFlow for a given dataset. The goal is to partition a set of data points into a specified number of clusters based on their proximity to the cluster centroids.\n\n#### Scenario\nYou are working on a dataset of customer transaction records and need to segment the customers into a specified number of clusters for targeted marketing campaigns. Your task is to implement the K-Means clustering algorithm to achieve this.\n\n#### Input\n- `vectors`: A 2D NumPy array of shape `(n, d)`, where `n` is the number of data points and `d` is the dimensionality of each data point.\n- `noofclusters`: An integer indicating the number of clusters to form.\n\n#### Output\n- `centroids`: A 2D NumPy array of shape `(k, d)`, where `k` is the number of clusters and `d` is the dimensionality of each centroid.\n- `assignments`: A list of integers of length `n`, where each integer represents the cluster assignment of the corresponding data point from `vectors`.\n\n#### Constraints\n- The number of clusters `noofclusters` should be less than the number of data points `n`.\n- The dimensionality `d` of the data points should be greater than 0.\n\n#### Performance Requirements\n- The implementation should be efficient and handle large datasets (e.g., `n` > 10,000 and `d` > 10).\n\n#### Implementation Guidelines\n1. Initialize the centroids randomly from the dataset.\n2. Perform the Expectation step: Assign each data point to the nearest centroid.\n3. Perform the Maximization step: Update the centroids to be the mean of the assigned data points.\n4. Repeat steps 2 and 3 for a fixed number of iterations (e.g., 100).\n5. Return the final centroids and assignments.\n\n#### Example\n```python\nimport numpy as np\nfrom sklearn.datasets import make_blobs\n\n# Generate sample data\nvectors, _ = make_blobs(n_samples=1000, centers=5, n_features=2, random_state=42)\nnoofclusters = 5\n\n# Implement the K-Means clustering algorithm\ncentroids, assignments = simplified_k_means_clustering(vectors, noofclusters)\n\nprint(\"Centroids:\", centroids)\nprint(\"Assignments:\", assignments)\n```\n\n#### Notes\n- You should not use any external packages other than TensorFlow and NumPy.\n- Ensure that your implementation is self-contained and clear.",
  "solution_code": "import numpy as np\nimport tensorflow as tf\n\ndef initialize_centroids(vectors, noofclusters):\n    \"\"\"Initialize centroids randomly from the dataset.\"\"\"\n    idx = np.random.choice(vectors.shape[0], size=noofclusters, replace=False)\n    centroids = vectors[idx]\n    return centroids\n\ndef expectation_step(vectors, centroids):\n    \"\"\"Assign each data point to the nearest centroid.\"\"\"\n    distances = tf.reduce_sum(tf.pow(tf.expand_dims(vectors, 1) - centroids, 2), axis=2)\n    assignments = tf.argmin(distances, axis=1)\n    return assignments\n\ndef maximization_step(vectors, assignments, noofclusters):\n    \"\"\"Update the centroids to be the mean of the assigned data points.\"\"\"\n    new_centroids = tf.dynamic_partition(vectors, assignments, noofclusters)\n    new_centroids = tf.math.reduce_mean(new_centroids, axis=1)\n    return new_centroids\n\ndef simplified_k_means_clustering(vectors, noofclusters, max_iterations=100):\n    \"\"\"\n    Perform K-Means clustering on the given dataset.\n\n    :param vectors: 2D NumPy array of shape (n, d)\n    :param noofclusters: Number of clusters\n    :param max_iterations: Maximum number of iterations\n    :return: Final centroids and assignments\n    \"\"\"\n    # Convert numpy arrays to TensorFlow constants for efficient computation\n    vectors_tf = tf.constant(vectors)\n    noofclusters_tf = tf.constant(noofclusters)\n\n    # Initialize centroids\n    centroids = initialize_centroids(vectors, noofclusters_tf)\n    init_centroids = tf.Variable(centroids, dtype=tf.float32, trainable=False)\n\n    # Perform K-Means iterations\n    for _ in range(max_iterations):\n        with tf.GradientTape() as tape:\n            assignments = expectation_step(vectors_tf, init_centroids)\n            new_centroids = maximization_step(vectors_tf, assignments, noofclusters_tf)\n\n        # Update centroids\n        init_centroids.assign(new_centroids)\n\n    # Convert TensorFlow tensors back to numpy arrays\n    final_centroids = init_centroids.numpy()\n    final_assignments = assignments.numpy()\n\n    return final_centroids, final_assignments",
  "test_code": "import numpy as np\nimport tensorflow as tf\nfrom solution import simplified_k_means_clustering\n\ndef test_simplified_k_means_clustering():\n    # Generate sample data\n    vectors, _ = make_blobs(n_samples=100, centers=5, n_features=2, random_state=42)\n    noofclusters = 5\n\n    # Perform K-Means clustering\n    centroids, assignments = simplified_k_means_clustering(vectors, noofclusters)\n\n    # Check the shape of the centroids\n    assert centroids.shape == (noofclusters, vectors.shape[1])\n\n    # Check the length of the assignments\n    assert len(assignments) == vectors.shape[0]\n\n    # Check that the assignments are within the range of centroids\n    assert np.all(np.logical_and(assignments >= 0, assignments < noofclusters))\n\ndef test_k_means_with_random_data():\n    # Generate random data\n    vectors = np.random.rand(1000, 2)\n    noofclusters = 5\n\n    # Perform K-Means clustering\n    centroids, assignments = simplified_k_means_clustering(vectors, noofclusters)\n\n    # Check the shape of the centroids\n    assert centroids.shape == (noofclusters, vectors.shape[1])\n\n    # Check the length of the assignments\n    assert len(assignments) == vectors.shape[0]\n\n    # Check that the assignments are within the range of centroids\n    assert np.all(np.logical_and(assignments >= 0, assignments < noofclusters))\n\ndef test_k_means_with_zeros():\n    # Construct data with all zeros\n    vectors = np.zeros((100, 2))\n    noofclusters = 5\n\n    # Perform K-Means clustering\n    centroids, assignments = simplified_k_means_clustering(vectors, noofclusters)\n\n    # Check the shape of the centroids\n    assert centroids.shape == (noofclusters, vectors.shape[1])\n\n    # Check the length of the assignments\n    assert len(assignments) == vectors.shape[0]\n\n    # Check that all assignments are zeros\n    assert np.all(assignments == 0)\n\n# Run tests\ntest_simplified_k_means_clustering()\ntest_k_means_with_random_data()\ntest_k_means_with_zeros()",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}