{
  "metadata": {
    "prompt_id": "00000069",
    "row_id": 69,
    "seed_ids": [
      18
    ],
    "mode": "algorithm"
  },
  "instruction": "### Task: Implement a Simplified K-Means Clustering Algorithm Using TensorFlow\n\nYou are tasked with implementing a simplified version of the K-Means clustering algorithm using TensorFlow for a given dataset. The goal is to partition a set of data points into a specified number of clusters based on their proximity to the cluster centroids.\n\n#### Scenario\nYou are working on a dataset of customer transaction records and need to segment the customers into a specified number of clusters for targeted marketing campaigns. Your task is to implement the K-Means clustering algorithm to achieve this.\n\n#### Input\n- `vectors`: A 2D NumPy array of shape `(n, d)`, where `n` is the number of data points and `d` is the dimensionality of each data point.\n- `noofclusters`: An integer indicating the number of clusters to form.\n\n#### Output\n- `centroids`: A 2D NumPy array of shape `(k, d)`, where `k` is the number of clusters and `d` is the dimensionality of each centroid.\n- `assignments`: A list of integers of length `n`, where each integer represents the cluster assignment of the corresponding data point from `vectors`.\n\n#### Constraints\n- The number of clusters `noofclusters` should be less than the number of data points `n`.\n- The dimensionality `d` of the data points should be greater than 0.\n\n#### Performance Requirements\n- The implementation should be efficient and handle large datasets (e.g., `n` > 10,000 and `d` > 10).\n\n#### Implementation Guidelines\n1. Initialize the centroids randomly from the dataset.\n2. Perform the Expectation step: Assign each data point to the nearest centroid.\n3. Perform the Maximization step: Update the centroids to be the mean of the assigned data points.\n4. Repeat steps 2 and 3 for a fixed number of iterations (e.g., 100).\n5. Return the final centroids and assignments.\n\n#### Example\n```python\nimport numpy as np\nfrom sklearn.datasets import make_blobs\n\n# Generate sample data\nvectors, _ = make_blobs(n_samples=1000, centers=5, n_features=2, random_state=42)\nnoofclusters = 5\n\n# Implement the K-Means clustering algorithm\ncentroids, assignments = simplified_k_means_clustering(vectors, noofclusters)\n\nprint(\"Centroids:\", centroids)\nprint(\"Assignments:\", assignments)\n```\n\n#### Notes\n- You should not use any external packages other than TensorFlow and NumPy.\n- Ensure that your implementation is self-contained and clear.",
  "solution_code": "import numpy as np\nimport tensorflow as tf\n\ndef simplified_k_means_clustering(vectors, noofclusters, iterations=100):\n    \"\"\"\n    Simplified K-Means clustering algorithm implementation using TensorFlow.\n    \n    :param vectors: 2D NumPy array of shape (n, d) containing the data points.\n    :param noofclusters: Number of clusters to form.\n    :param iterations: Number of iterations to run the algorithm.\n    :return: centroids (2D NumPy array of shape (k, d)), assignments (list)\n    \"\"\"\n    # Initialize centroids\n    indices = np.random.choice(vectors.shape[0], noofclusters, replace=False)\n    centroids = vectors[indices]\n    \n    for _ in range(iterations):\n        # Expectation step: Compute distances and assign data points to the nearest centroid\n        distances = tf.reduce_sum(tf.square(tf.expand_dims(vectors, axis=1) - centroids), axis=2)\n        assignments = tf.argmin(distances, axis=1).numpy()\n        \n        # Maximization step: Update centroids\n        new_centroids = []\n        for i in range(noofclusters):\n            assigned_points = vectors[assignments == i]\n            if assigned_points.shape[0] > 0:\n                new_centroids.append(tf.reduce_mean(assigned_points, axis=0).numpy())\n            else:\n                new_centroids.append(centroids[i])\n        centroids = np.array(new_centroids)\n    \n    return centroids, assignments",
  "test_code": "import numpy as np\nfrom sklearn.datasets import make_blobs\nimport pytest\n\ndef test_simplified_k_means_clustering():\n    # Generate sample data\n    vectors, _ = make_blobs(n_samples=1000, centers=5, n_features=2, random_state=42)\n    noofclusters = 5\n    \n    # Run the K-Means clustering algorithm\n    centroids, assignments = simplified_k_means_clustering(vectors, noofclusters)\n    \n    # Check the shape of the centroids\n    assert centroids.shape == (noofclusters, vectors.shape[1]), \"Centroids shape is incorrect\"\n    \n    # Check the correctness of the assignments\n    assert len(assignments) == vectors.shape[0], \"Assignments length is incorrect\"\n    \n    # Check if all assignments are valid cluster indices\n    assert np.all(np.isin(assignments, list(range(noofclusters)))), \"Invalid assignments found\"\n    \n    # Check if the centroids are not empty\n    assert np.all(np.not_equal(centroids, 0)), \"Centroids are not properly updated\"\n\n# Run the tests\nif __name__ == \"__main__\":\n    pytest.main()",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}