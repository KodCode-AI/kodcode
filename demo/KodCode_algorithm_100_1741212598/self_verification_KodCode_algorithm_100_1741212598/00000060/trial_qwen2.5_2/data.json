{
  "metadata": {
    "prompt_id": "00000060",
    "row_id": 60,
    "seed_ids": [
      924
    ],
    "mode": "algorithm"
  },
  "instruction": "You are given the implementation of the extended Euclidean algorithm and a function to solve the Diophantine equation \\(a \\cdot x + b \\cdot y = c\\) for integer solutions. Your task is to implement a more generalized version of the `diophantine_all_soln` function, which finds all solutions to the equation within a specified range.\n\n**Problem Statement**:\nWrite a function `diophantine_all_values` that takes four integers \\(a\\), \\(b\\), \\(c\\), and an upper limit `upper_limit` (inclusive). The function should find all pairs \\((x, y)\\) of integers that satisfy the equation \\(a \\cdot x + b \\cdot y = c\\) within the range \\(-\\text{upper_limit} \\leq x, y \\leq \\text{upper_limit}\\).\n\n**Example**:\n```python\n# Example 1\na, b, c, upper_limit = 2, 3, 5, 5\ndiophantine_all_values(a, b, c, upper_limit)\n# Output:\n# [(-5, 5), (-4, 3), (-3, 1), (1, -4), (3, -2), (5, -1)]\n\n# Example 2\na, b, c, upper_limit = 6, 9, 3, 10\ndiophantine_all_values(a, b, c, upper_limit)\n# Output:\n# []\n```\n\n**Function Signature**:\n```python\ndef diophantine_all_values(a: int, b: int, c: int, upper_limit: int) -> List[Tuple[int, int]]:\n```\n\n**Constraints**:\n- \\(1 \\leq a, b, c \\leq 10^5\\)\n- \\(1 \\leq \\text{upper_limit} \\leq 10^3\\)\n\n**Note**:\nEnsure that your implementation is efficient and handles edge cases appropriately.",
  "solution_code": "from typing import List, Tuple\n\ndef diophantine_all_values(a: int, b: int, c: int, upper_limit: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Finds all pairs (x, y) of integers that satisfy the equation a*x + b*y = c\n    within the range -upper_limit <= x, y <= upper_limit.\n    \"\"\"\n    # Check if the equation has solutions\n    if c % gcd(a, b) != 0:\n        return []\n\n    # Find one particular solution using the extended Euclidean algorithm\n    x0, y0 = extended_euclidean_algorithm(a, b, c)\n\n    # Ensure the solution is within the range\n    x0, y0 = ensure_in_range(x0, y0, a, b, upper_limit)\n\n    # Generate all solutions within the specified range\n    solutions = []\n    for k in range(-upper_limit, upper_limit + 1):\n        x = x0 + k * (b // gcd(a, b))\n        y = y0 - k * (a // gcd(a, b))\n        if -upper_limit <= x <= upper_limit and -upper_limit <= y <= upper_limit:\n            solutions.append((x, y))\n    \n    return solutions\n\ndef extended_euclidean_algorithm(a: int, b: int, c: int) -> Tuple[int, int]:\n    \"\"\"\n    Finds one particular solution (x0, y0) to the equation ax + by = c.\n    \"\"\"\n    x0, y0, gcd_value = extended_gcd(a, b)\n    if c % gcd_value != 0:\n        return (0, 0)  # No solution if c is not divisible by gcd(a, b)\n    x0 *= c // gcd_value\n    y0 *= c // gcd_value\n    return (x0, y0)\n\ndef extended_gcd(a: int, b: int) -> Tuple[int, int, int]:\n    \"\"\"\n    Extended Euclidean Algorithm to find x and y such that ax + by = gcd(a, b).\n    \"\"\"\n    if a == 0:\n        return (0, 1, b)\n    else:\n        x1, y1, gcd_value = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return (x, y, gcd_value)\n\ndef ensure_in_range(x: int, y: int, a: int, b: int, upper_limit: int) -> Tuple[int, int]:\n    \"\"\"\n    Adjust the initial solution to ensure it is within the given range if necessary.\n    \"\"\"\n    # Calculate the range adjustment needed for x and y\n    x_adjust = (upper_limit - x) // (b // gcd(a, b))\n    if x + x_adjust * (b // gcd(a, b)) > upper_limit:\n        x_adjust -= 1\n    x_new = x + x_adjust * (b // gcd(a, b))\n    y_new = y - x_adjust * (a // gcd(a, b))\n    return (x_new, y_new)",
  "test_code": "import pytest\n\ndef test_diophantine_all_values():\n    assert diophantine_all_values(2, 3, 5, 5) == [(-5, 5), (-4, 3), (-3, 1), (1, -4), (3, -2), (5, -1)]\n    assert diophantine_all_values(6, 9, 3, 10) == []\n    assert diophantine_all_values(1, 1, 2, 10) == [(0, 2), (2, 0), (-2, -2), (1, 1), (-1, -1), (-1, 0)]\n    assert diophantine_all_values(5, 7, 25, 10) == [(5, -0)]\n    assert diophantine_all_values(10, 15, 50, 10) == [(0, 4), (1, 2)]",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}