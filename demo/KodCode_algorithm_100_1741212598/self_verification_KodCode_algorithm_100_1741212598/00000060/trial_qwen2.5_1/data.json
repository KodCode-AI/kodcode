{
  "metadata": {
    "prompt_id": "00000060",
    "row_id": 60,
    "seed_ids": [
      924
    ],
    "mode": "algorithm"
  },
  "instruction": "You are given the implementation of the extended Euclidean algorithm and a function to solve the Diophantine equation \\(a \\cdot x + b \\cdot y = c\\) for integer solutions. Your task is to implement a more generalized version of the `diophantine_all_soln` function, which finds all solutions to the equation within a specified range.\n\n**Problem Statement**:\nWrite a function `diophantine_all_values` that takes four integers \\(a\\), \\(b\\), \\(c\\), and an upper limit `upper_limit` (inclusive). The function should find all pairs \\((x, y)\\) of integers that satisfy the equation \\(a \\cdot x + b \\cdot y = c\\) within the range \\(-\\text{upper_limit} \\leq x, y \\leq \\text{upper_limit}\\).\n\n**Example**:\n```python\n# Example 1\na, b, c, upper_limit = 2, 3, 5, 5\ndiophantine_all_values(a, b, c, upper_limit)\n# Output:\n# [(-5, 5), (-4, 3), (-3, 1), (1, -4), (3, -2), (5, -1)]\n\n# Example 2\na, b, c, upper_limit = 6, 9, 3, 10\ndiophantine_all_values(a, b, c, upper_limit)\n# Output:\n# []\n```\n\n**Function Signature**:\n```python\ndef diophantine_all_values(a: int, b: int, c: int, upper_limit: int) -> List[Tuple[int, int]]:\n```\n\n**Constraints**:\n- \\(1 \\leq a, b, c \\leq 10^5\\)\n- \\(1 \\leq \\text{upper_limit} \\leq 10^3\\)\n\n**Note**:\nEnsure that your implementation is efficient and handles edge cases appropriately.",
  "solution_code": "from typing import List, Tuple\n\ndef diophantine_all_values(a: int, b: int, c: int, upper_limit: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Find all integer pairs (x, y) that satisfy the equation a*x + b*y = c within the given range [-upper_limit, upper_limit].\n    \"\"\"\n    # First, use the extended Euclidean algorithm to find one particular solution (x0, y0)\n    def extended_gcd(aa, bb):\n        lastremainder, remainder = abs(aa), abs(bb)\n        x, lastx, y, lasty = 0, 1, 1, 0\n        while remainder:\n            lastremainder, (quotient, remainder) = remainder, divmod(lastremainder, remainder)\n            x, lastx = lastx - quotient*x, x\n            y, lasty = lasty - quotient*y, y\n        return lastremainder, lastx * (-1 if aa < 0 else 1), lasty * (-1 if bb < 0 else 1)\n    \n    _, x0, y0 = extended_gcd(a, b)\n    if c % lastremainder != 0:\n        return []  # No solution exists\n    \n    # Scale the solution by c / lastremainder\n    x0 *= c // lastremainder\n    y0 *= c // lastremainder\n    \n    # Find the general solution\n    solutions = []\n    hcf = lastremainder\n    steps_x = b // hcf\n    steps_y = a // hcf\n    \n    # Generate solutions within the given range\n    for k in range((-upper_limit - x0) // steps_x + 1):\n        x = x0 + k * steps_x\n        if -upper_limit <= x <= upper_limit:\n            y = y0 - k * steps_y\n            if -upper_limit <= y <= upper_limit:\n                solutions.append((x, y))\n    \n    return solutions",
  "test_code": "import pytest\nfrom solution import diophantine_all_values\n\n# Test case 1\ndef test_diophantine_all_values_positive():\n    assert diophantine_all_values(2, 3, 5, 5) == [(-5, 5), (-4, 3), (-3, 1), (1, -4), (3, -2), (5, -1)]\n\n# Test case 2\ndef test_diophantine_all_values_with_zero():\n    assert diophantine_all_values(6, 9, 3, 10) == []\n\n# Test case 3\ndef test_diophantine_all_values_mixed_sign():\n    assert diophantine_all_values(1, -1, 0, 4) == [(-4, -4), (0, 0), (4, 4)]\n\n# Test case 4\ndef test_diophantine_all_values_large_numbers():\n    assert diophantine_all_values(7, 2, 100, 10) == [(10, 15), (27, 20), (44, 15), (61, 10), (78, 5)]\n\n# Test case 5\ndef test_diophantine_all_values_no_solution():\n    assert diophantine_all_values(11, 13, 25, 20) == []\n\n# Test case 6\ndef test_diophantine_all_values_single_solution():\n    assert diophantine_all_values(2, 1, 3, 10) == [(1, 1), (3, 1), (5, 1), (7, 1), (9, 1)]",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}