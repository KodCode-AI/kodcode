{
  "metadata": {
    "prompt_id": "00000060",
    "row_id": 60,
    "seed_ids": [
      924
    ],
    "mode": "algorithm"
  },
  "instruction": "You are given the implementation of the extended Euclidean algorithm and a function to solve the Diophantine equation \\(a \\cdot x + b \\cdot y = c\\) for integer solutions. Your task is to implement a more generalized version of the `diophantine_all_soln` function, which finds all solutions to the equation within a specified range.\n\n**Problem Statement**:\nWrite a function `diophantine_all_values` that takes four integers \\(a\\), \\(b\\), \\(c\\), and an upper limit `upper_limit` (inclusive). The function should find all pairs \\((x, y)\\) of integers that satisfy the equation \\(a \\cdot x + b \\cdot y = c\\) within the range \\(-\\text{upper_limit} \\leq x, y \\leq \\text{upper_limit}\\).\n\n**Example**:\n```python\n# Example 1\na, b, c, upper_limit = 2, 3, 5, 5\ndiophantine_all_values(a, b, c, upper_limit)\n# Output:\n# [(-5, 5), (-4, 3), (-3, 1), (1, -4), (3, -2), (5, -1)]\n\n# Example 2\na, b, c, upper_limit = 6, 9, 3, 10\ndiophantine_all_values(a, b, c, upper_limit)\n# Output:\n# []\n```\n\n**Function Signature**:\n```python\ndef diophantine_all_values(a: int, b: int, c: int, upper_limit: int) -> List[Tuple[int, int]]:\n```\n\n**Constraints**:\n- \\(1 \\leq a, b, c \\leq 10^5\\)\n- \\(1 \\leq \\text{upper_limit} \\leq 10^3\\)\n\n**Note**:\nEnsure that your implementation is efficient and handles edge cases appropriately.",
  "solution_code": "from typing import List, Tuple\n\ndef diophantine_all_values(a: int, b: int, c: int, upper_limit: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Find all pairs (x, y) that satisfy the Diophantine equation ax + by = c\n    within the range -upper_limit <= x, y <= upper_limit.\n    \"\"\"\n    # First, find one particular solution using the extended Euclidean algorithm\n    x0, y0, _ = extended_gcd(a, b)\n    if c % gcd(a, b) != 0:\n        return []  # No solutions exist\n\n    # Scale the solution to the constant c\n    x0 *= c // gcd(a, b)\n    y0 *= c // gcd(a, b)\n\n    # Find the formula for the general solution\n    x0, y0 = x0 // b, y0 // a\n\n    # Generate all solutions within the specified range\n    solutions = []\n    for k in range((-upper_limit - x0) // -b + 1):\n        x = x0 + b * k\n        y = y0 - a * k\n        if -upper_limit <= x <= upper_limit and -upper_limit <= y <= upper_limit:\n            solutions.append((x, y))\n        if -upper_limit <= x0 + b * (k + 1) <= upper_limit:\n            break\n    return solutions\n\ndef extended_gcd(a: int, b: int) -> Tuple[int, int, int]:\n    \"\"\"\n    Extended Euclidean Algorithm that returns the gcd of a and b,\n    and the coefficients of B\u00e9zout's identity.\n    \"\"\"\n    s, t, s_old, t_old = 0, 1, 1, 0\n    r, r_old = b, a\n\n    while r != 0:\n        quotient = r_old // r\n        r_old, r = r, r_old - quotient * r\n        s_old, s = s, s_old - quotient * s\n        t_old, t = t, t_old - quotient * t\n\n    return a if a != 0 else b, s_old, t_old\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"\n    Returns the greatest common divisor of a and b.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a",
  "test_code": "import pytest\nfrom solution import diophantine_all_values\n\ndef test_diophantine_all_values():\n    # Example 1\n    a, b, c, upper_limit = 2, 3, 5, 5\n    expected = [(-5, 5), (-4, 3), (-3, 1), (1, -4), (3, -2), (5, -1)]\n    assert sorted(diophantine_all_values(a, b, c, upper_limit)) == sorted(expected)\n    \n    # Example 2\n    a, b, c, upper_limit = 6, 9, 3, 10\n    expected = []\n    assert diophantine_all_values(a, b, c, upper_limit) == expected\n\n    # Additional tests\n    a, b, c, upper_limit = 1, 1, 2, 2\n    expected = [(1, 1)]\n    assert sorted(diophantine_all_values(a, b, c, upper_limit)) == sorted(expected)\n\n    a, b, c, upper_limit = 5, 7, 35, 5\n    expected = [(-5, 5), (0, 5), (5, 5)]\n    assert sorted(diophantine_all_values(a, b, c, upper_limit)) == sorted(expected)\n\n    a, b, c, upper_limit = 10, 15, 20, 3\n    expected = []\n    assert diophantine_all_values(a, b, c, upper_limit) == expected\n\n    a, b, c, upper_limit = 13, 8, 52, 4\n    expected = [(-4, 3), (0, 7), (4, 11)]\n    assert sorted(diophantine_all_values(a, b, c, upper_limit)) == sorted(expected)\n\n    a, b, c, upper_limit = 9, 9, 27, 5\n    expected = [(-3, 1), (0, 3), (3, 5)]\n    assert sorted(diophantine_all_values(a, b, c, upper_limit)) == sorted(expected)\n\n    a, b, c, upper_limit = 7, 11, 35, 6\n    expected = [(-5, 0), (-2, 2), (1, 2), (4, 0)]\n    assert sorted(diophantine_all_values(a, b, c, upper_limit)) == sorted(expected)",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}