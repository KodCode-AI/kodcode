{
  "metadata": {
    "prompt_id": "00000013",
    "row_id": 13,
    "seed_ids": [
      714
    ],
    "mode": "algorithm"
  },
  "instruction": "You are required to implement a function that calculates the Manhattan distance between two points in an n-dimensional space. The function should be efficient and robust, handling various edge cases and providing meaningful error messages.\n\n**Requirements**:\n- Your function should be named `manhattan_distance_improved` and should take two parameters: `point_a` and `point_b`, both of which are lists of numbers representing points in the same n-dimensional space.\n- It should raise a `ValueError` if the points do not have the same number of dimensions.\n- It should raise a `TypeError` if the inputs are not lists of numbers.\n- The function should return a float representing the Manhattan distance.\n\n**Example Usage**:\n```python\n>>> manhattan_distance_improved([1,1], [2,2])\n2.0\n>>> manhattan_distance_improved([1.5,1.5], [2,2])\n1.0\n>>> manhattan_distance_improved([1.5,1.5], [2.5,2])\n1.5\n>>> manhattan_distance_improved([-3, -3, -3], [0, 0, 0])\n9.0\n>>> manhattan_distance_improved([1,1], None)\nTraceback (most recent call last):\n    ...\nValueError: Missing an input\n>>> manhattan_distance_improved([1,1], [2, 2, 2])\nTraceback (most recent call last):\n    ...\nValueError: Both points must be in the same n-dimensional space\n>>> manhattan_distance_improved([1, \"one\"], [2, 2, 2])\nTraceback (most recent call last):\n    ...\nTypeError: Expected a list of numbers as input, found str\n```\n\n**Performance Requirements**:\n- Your implementation should handle points with up to 1000 dimensions efficiently.\n\n**Note**: You are encouraged to use list comprehension and built-in functions for a concise and efficient implementation.",
  "solution_code": "def manhattan_distance_improved(point_a, point_b):\n    \"\"\"\n    Returns the Manhattan distance between two points in an n-dimensional space.\n    Raises ValueError if points do not have the same number of dimensions.\n    Raises TypeError if the inputs are not lists of numbers.\n    \"\"\"\n    if not isinstance(point_a, list) or not isinstance(point_b, list):\n        raise TypeError(\"Expected a list of numbers as input, found {}\".format(type(point_a).__name__))\n    if not all(isinstance(x, (int, float)) for x in point_a + point_b):\n        raise TypeError(\"Expected a list of numbers as input, found invalid elements\")\n    if len(point_a) != len(point_b):\n        raise ValueError(\"Both points must be in the same n-dimensional space\")\n    \n    return sum(abs(a - b) for a, b in zip(point_a, point_b))",
  "test_code": "Rosie\u8214\u4e86\u8214\u5634\u5507\uff0c\u773c\u4e2d\u95ea\u8fc7\u4e00\u4e1d\u4e0d\u6613\u5bdf\u89c9\u7684\u6e34\u671b\u3002\u5979\u8d70\u5230\u5218\u6d0b\u8eab\u8fb9\u5750\u4e0b\uff0c\u8f7b\u58f0\u8bf4\u9053\uff1a\u201c\u5218\u6d0b\uff0c\u6211\u6709\u4ef6\u4e8b\u60f3\u8bf7\u4f60\u5e2e\u5fd9\u3002\u201d\nimport pytest\nfrom solution import manhattan_distance_improved\n\ndef test_manhattan_distance_improved_positive_numbers():\n    assert manhattan_distance_improved([1, 2], [4, 6]) == 7.0\n\ndef test_manhattan_distance_improved_mixed_sign_numbers():\n    assert manhattan_distance_improved([-1, 2], [3, -1]) == 5.0\n\ndef test_manhattan_distance_improved_zero_dimensions():\n    assert manhattan_distance_improved([0], [0]) == 0.0\n\ndef test_manhattan_distance_improved_duplicate_points():\n    assert manhattan_distance_improved([5, 5], [5, 5]) == 0.0\n\ndef test_manhattan_distance_improved_with_floats():\n    assert manhattan_distance_improved([1.5, 2.5], [4.5, 3.5]) == 5.0\n\ndef test_manhattan_distance_improved_edge_case():\n    assert manhattan_distance_improved([-3, -3, -3], [0, 0, 0]) == 9.0\n\ndef test_manhattan_distance_improved_on_single_dim():\n    assert manhattan_distance_improved([1, 1], [2, 2]) == 2.0\n    assert manhattan_distance_improved([1.5, 1.5], [2, 2]) == 1.0\n    assert manhattan_distance_improved([1.5, 1.5], [2.5, 2]) == 1.5\n\ndef test_manhattan_distance_improved_non_numeric_input():\n    with pytest.raises(TypeError):\n        manhattan_distance_improved([1, 'one'], [2, 2])\n    with pytest.raises(TypeError):\n        manhattan_distance_improved(['one', 2], [2, 2])\n\ndef test_manhattan_distance_improved_inconsistent_dimensions():\n    with pytest.raises(ValueError):\n        manhattan_distance_improved([1, 1], [2, 2, 2])\n\ndef test_manhattan_distance_improved_missing_input():\n    with pytest.raises(ValueError):\n        manhattan_distance_improved([1, 1], None)",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}