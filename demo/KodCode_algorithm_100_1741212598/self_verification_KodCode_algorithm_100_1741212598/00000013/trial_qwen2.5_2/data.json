{
  "metadata": {
    "prompt_id": "00000013",
    "row_id": 13,
    "seed_ids": [
      714
    ],
    "mode": "algorithm"
  },
  "instruction": "You are required to implement a function that calculates the Manhattan distance between two points in an n-dimensional space. The function should be efficient and robust, handling various edge cases and providing meaningful error messages.\n\n**Requirements**:\n- Your function should be named `manhattan_distance_improved` and should take two parameters: `point_a` and `point_b`, both of which are lists of numbers representing points in the same n-dimensional space.\n- It should raise a `ValueError` if the points do not have the same number of dimensions.\n- It should raise a `TypeError` if the inputs are not lists of numbers.\n- The function should return a float representing the Manhattan distance.\n\n**Example Usage**:\n```python\n>>> manhattan_distance_improved([1,1], [2,2])\n2.0\n>>> manhattan_distance_improved([1.5,1.5], [2,2])\n1.0\n>>> manhattan_distance_improved([1.5,1.5], [2.5,2])\n1.5\n>>> manhattan_distance_improved([-3, -3, -3], [0, 0, 0])\n9.0\n>>> manhattan_distance_improved([1,1], None)\nTraceback (most recent call last):\n    ...\nValueError: Missing an input\n>>> manhattan_distance_improved([1,1], [2, 2, 2])\nTraceback (most recent call last):\n    ...\nValueError: Both points must be in the same n-dimensional space\n>>> manhattan_distance_improved([1, \"one\"], [2, 2, 2])\nTraceback (most recent call last):\n    ...\nTypeError: Expected a list of numbers as input, found str\n```\n\n**Performance Requirements**:\n- Your implementation should handle points with up to 1000 dimensions efficiently.\n\n**Note**: You are encouraged to use list comprehension and built-in functions for a concise and efficient implementation.",
  "solution_code": "def manhattan_distance_improved(point_a, point_b):\n    \"\"\"\n    Calculate the Manhattan distance between two points in n-dimensional space.\n    \"\"\"\n    # Check if inputs are lists\n    if not isinstance(point_a, list) or not isinstance(point_b, list):\n        raise TypeError(\"Expected a list of numbers as input, found {}\".format(type(point_a).__name__))\n    \n    # Check if points are in the same n-dimensional space\n    if len(point_a) != len(point_b):\n        raise ValueError(\"Both points must be in the same n-dimensional space\")\n    \n    # Calculate Manhattan distance\n    distance = sum(abs(a - b) for a, b in zip(point_a, point_b))\n    \n    return float(distance)",
  "test_code": "import pytest\n\ndef test_manhattan_distance_improved():\n    # Test with positive and integer coordinates\n    assert manhattan_distance_improved([1, 1], [2, 2]) == 2.0\n    assert manhattan_distance_improved([1.5, 1.5], [2, 2]) == 1.0\n    assert manhattan_distance_improved([1.5, 1.5], [2.5, 2]) == 1.5\n    assert manhattan_distance_improved([-3, -3, -3], [0, 0, 0]) == 9.0\n\n    # Test with edge cases\n    with pytest.raises(TypeError):\n        manhattan_distance_improved([1, 1], None)\n\n    with pytest.raises(ValueError):\n        manhattan_distance_improved([1, 1], [2, 2, 2])\n\n    with pytest.raises(TypeError):\n        manhattan_distance_improved([1, \"one\"], [2, 2, 2])\n\n# Test with pytest\nif __name__ == \"__main__\":\n    pytest.main([__file__])",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}