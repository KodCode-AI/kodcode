{
  "metadata": {
    "prompt_id": "00000059",
    "row_id": 59,
    "seed_ids": [
      223
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with implementing a modified version of the Selection Sort algorithm. Your goal is to sort a list of integers in ascending order but with a twist: instead of sorting the entire list, you will sort only the even numbers in the list and leave the odd numbers in their original positions.\n\nWrite a function `custom_selection_sort` that takes a list of integers as input and returns a new list where all even numbers are sorted in ascending order, while all odd numbers remain in their original positions.\n\n**Requirements**:\n- The function should handle an empty list and return an empty list.\n- The function should handle a list with only odd numbers and return the same list.\n- The function should handle a list with only even numbers and return the sorted list.\n\n**Constraints**:\n- The input list will contain integers.\n- The input list can have a maximum length of 1000.\n\n**Example**:\n```python\n>>> custom_selection_sort([9, 4, 2, 1, 5, 3])\n[3, 4, 2, 1, 5, 9]\n```\n\n**Explanation**:\n- The odd numbers (9, 1, 5, 3) remain in their original positions.\n- The even numbers (4, 2) are sorted in ascending order (4, 2).",
  "solution_code": "def custom_selection_sort(numbers):\n    \"\"\"\n    Sorts the even numbers in the list while keeping the odd numbers in their original positions.\n    \"\"\"\n    # Extract even numbers and sort them\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    even_numbers.sort()\n    \n    # Create a generator to cycle through sorted even numbers\n    even_it = iter(even_numbers)\n    \n    # Construct the result list\n    result = [next(even_it) if num % 2 == 0 else num for num in numbers]\n    return result",
  "test_code": "import pytest\n\ndef test_custom_selection_sort_empty_list():\n    assert custom_selection_sort([]) == []\n\ndef test_custom_selection_sort_only_odd_numbers():\n    assert custom_selection_sort([9, 1, 5, 3]) == [9, 1, 5, 3]\n\ndef test_custom_selection_sort_only_even_numbers():\n    assert custom_selection_sort([4, 2, 8, 6]) == [2, 4, 6, 8]\n\ndef test_custom_selection_sort_mixed_numbers():\n    assert custom_selection_sort([9, 4, 2, 1, 5, 3]) == [3, 4, 2, 1, 5, 9]\n    assert custom_selection_sort([2, 3, 6, 7, 10, 11]) == [2, 3, 6, 7, 10, 11]\n    assert custom_selection_sort([13, 12, 11, 10, 9, 8]) == [9, 8, 11, 10, 13, 12]\n\ndef test_custom_selection_sort_with_zero():\n    assert custom_selection_sort([0, 1, 3, 5]) == [0, 1, 3, 5]\n    assert custom_selection_sort([1, 0, 3, 5]) == [0, 1, 3, 5]",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}