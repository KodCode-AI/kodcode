{
  "metadata": {
    "prompt_id": "00000075",
    "row_id": 75,
    "seed_ids": [
      979
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with implementing a function that finds the maximum sum of a subsequence in an array. Unlike finding the maximum sum subarray, the subsequence can be non-contiguous. For instance, given the array `[-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the maximum sum of a subsequence is `6` (1 + 4 + 1).\n\nWrite a function `max_subsequence_sum` that takes an array of integers as input and returns the maximum sum of a subsequence. A subsequence is defined as a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.\n\nYour function should meet the following requirements:\n\n- **Input**: A list of integers.\n- **Output**: An integer representing the maximum sum of a subsequence.\n\n**Constraints**:\n- The length of the input list is between 1 and 1000.\n- Each element in the list is an integer between -1000 and 1000.\n\n**Performance Requirement**:\n- The function should have a time complexity of O(n), where n is the length of the input list.\n\n**Example**:\n```python\ndef max_subsequence_sum(nums: list[int]) -> int:\n    # Your implementation here\n    pass\n\n# Test cases\nprint(max_subsequence_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]))  # Output: 6\nprint(max_subsequence_sum([-1, -2, -3, -4]))  # Output: -1\nprint(max_subsequence_sum([1, 2, 3, 4]))  # Output: 10\nprint(max_subsequence_sum([0]))  # Output: 0\n```\n\n**Note**: Ensure your solution handles all edge cases as described in the analysis.",
  "solution_code": "def max_subsequence_sum(nums: list[int]) -> int:\n    \"\"\"\n    Returns the maximum sum of a subsequence in the array.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    max_sum = current_sum = nums[0]\n    \n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
  "test_code": "``\ndef test_max_subsequence_sum():\n    assert max_subsequence_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6\n    assert max_subsequence_sum([-1, -2, -3, -4]) == -1\n    assert max_subsequence_sum([1, 2, 3, 4]) == 10\n    assert max_subsequence_sum([0]) == 0\n    assert max_subsequence_sum([-2, -1, -3, -4, -1, -2, -3, -4]) == -1\n    assert max_subsequence_sum([2, -1, 2, 3, 4, -5]) == 10\n\n# Run tests\ntest_max_subsequence_sum()",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}