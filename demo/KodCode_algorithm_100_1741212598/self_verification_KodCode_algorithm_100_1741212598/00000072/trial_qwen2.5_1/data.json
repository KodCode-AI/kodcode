{
  "metadata": {
    "prompt_id": "00000072",
    "row_id": 72,
    "seed_ids": [
      956
    ],
    "mode": "algorithm"
  },
  "instruction": "### Scenario\nYou are developing a multimedia application where you need to compare the quality of two images to determine the effectiveness of a compression algorithm. Your task is to write a function to calculate the PSNR between two images and a main function to test the implementation.\n\n### Instructions\n1. Implement a function `calculate_psnr(image1: np.ndarray, image2: np.ndarray) -> float` that computes the PSNR between two images.\n2. The function should return the PSNR value in dB.\n3. Ensure the function handles the case where the mean squared error (MSE) is zero.\n4. The images are assumed to be 8-bit grayscale images and are represented as NumPy arrays.\n5. Include a main function `test_psnr()` to test your implementation using the provided images. The main function should:\n   - Compare two images and print the PSNR value.\n   - Compare another pair of images and print the PSNR value, ensuring it matches the expected value of 31.53 dB (from the Wikipedia example).\n\n### Constraints\n- The images are both grayscale and in the range of 0 to 255.\n\n### Example\n```python\nimport numpy as np\n\nimage1 = np.array([[128, 128, 128], [128, 128, 128]], dtype=np.uint8)\nimage2 = np.array([[128, 128, 128], [128, 128, 128]], dtype=np.uint8)\n\npsnr = calculate_psnr(image1, image2)\nprint(f\"PSNR value is {psnr} dB\")\n# Expected output: PSNR value is 100.0 dB\n```\n\n### Expected Output\n- The PSNR value should be printed in dB.\n- Ensure that the PSNR calculation matches the expected values for the provided images.\n\n### Performance Requirements\n- The function should be efficient and handle large images without significant performance degradation.\n\n### Hint\n- Utilize NumPy for efficient array operations to speed up the computation.",
  "solution_code": "import numpy as np\n\ndef calculate_psnr(image1: np.ndarray, image2: np.ndarray) -> float:\n    \"\"\"\n    Calculates the Peak Signal to Noise Ratio (PSNR) between two images.\n    \n    Parameters:\n    image1 (np.ndarray): First image as a NumPy array.\n    image2 (np.ndarray): Second image as a NumPy array.\n    \n    Returns:\n    float: PSNR value in dB.\n    \"\"\"\n    mse = np.mean((image1 - image2) ** 2)\n    max_pixel = 255.0\n    if mse == 0:\n        return float('inf')\n    psnr = 20 * np.log10(max_pixel / np.sqrt(mse))\n    return psnr",
  "test_code": "import numpy as np\nimport pytest\n\ndef test_calculate_psnr():\n    image1 = np.array([[128, 128, 128], [128, 128, 128]], dtype=np.uint8)\n    image2 = np.array([[128, 128, 128], [128, 128, 128]], dtype=np.uint8)\n    psnr = calculate_psnr(image1, image2)\n    assert np.isclose(psnr, 100.0), f\"PSNR value should be 100.0 dB, got {psnr} dB\"\n\n    image3 = np.array([[128, 128, 128], [128, 128, 128]], dtype=np.uint8)\n    image4 = np.array([[127, 128, 129], [128, 128, 128]], dtype=np.uint8)\n    psnr = calculate_psnr(image3, image4)\n    assert np.isclose(psnr, 31.5317, atol=1e-4), f\"PSNR value should be 31.5317 dB, got {psnr} dB\"\n\ndef test_mse_zero():\n    image1 = np.array([[0, 0, 0], [0, 0, 0]], dtype=np.uint8)\n    image2 = np.array([[0, 0, 0], [0, 0, 0]], dtype=np.uint8)\n    psnr = calculate_psnr(image1, image2)\n    assert np.isinf(psnr), \"PSNR should be infinity for zero MSE\"\n\ndef test_mean_squared_error():\n    image1 = np.array([[1, 1, 1], [1, 1, 1]], dtype=np.uint8)\n    image2 = np.array([[1, 2, 1], [1, 1, 1]], dtype=np.uint8)\n    mse = np.mean((image1 - image2) ** 2)\n    assert np.isclose(mse, 1/3), f\"MSE value should be 1/3, got {mse}\"\n\n\n# Run the tests\nif __name__ == \"__main__\":\n    test_calculate_psnr()\n    test_mse_zero()\n    test_mean_squared_error()\n    print(\"All tests passed.\")",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}