{
  "metadata": {
    "prompt_id": "00000072",
    "row_id": 72,
    "seed_ids": [
      956
    ],
    "mode": "algorithm"
  },
  "instruction": "### Scenario\nYou are developing a multimedia application where you need to compare the quality of two images to determine the effectiveness of a compression algorithm. Your task is to write a function to calculate the PSNR between two images and a main function to test the implementation.\n\n### Instructions\n1. Implement a function `calculate_psnr(image1: np.ndarray, image2: np.ndarray) -> float` that computes the PSNR between two images.\n2. The function should return the PSNR value in dB.\n3. Ensure the function handles the case where the mean squared error (MSE) is zero.\n4. The images are assumed to be 8-bit grayscale images and are represented as NumPy arrays.\n5. Include a main function `test_psnr()` to test your implementation using the provided images. The main function should:\n   - Compare two images and print the PSNR value.\n   - Compare another pair of images and print the PSNR value, ensuring it matches the expected value of 31.53 dB (from the Wikipedia example).\n\n### Constraints\n- The images are both grayscale and in the range of 0 to 255.\n\n### Example\n```python\nimport numpy as np\n\nimage1 = np.array([[128, 128, 128], [128, 128, 128]], dtype=np.uint8)\nimage2 = np.array([[128, 128, 128], [128, 128, 128]], dtype=np.uint8)\n\npsnr = calculate_psnr(image1, image2)\nprint(f\"PSNR value is {psnr} dB\")\n# Expected output: PSNR value is 100.0 dB\n```\n\n### Expected Output\n- The PSNR value should be printed in dB.\n- Ensure that the PSNR calculation matches the expected values for the provided images.\n\n### Performance Requirements\n- The function should be efficient and handle large images without significant performance degradation.\n\n### Hint\n- Utilize NumPy for efficient array operations to speed up the computation.",
  "solution_code": "import numpy as np\n\ndef calculate_psnr(image1: np.ndarray, image2: np.ndarray) -> float:\n    \"\"\"\n    Calculates the PSNR (Peak Signal-to-Noise Ratio) between two images.\n    \n    :param image1: First image as a NumPy array.\n    :param image2: Second image as a NumPy array.\n    :return: PSNR value in dB.\n    \"\"\"\n    mse = np.mean((image1 - image2) ** 2)\n    max_pixel_value = 255.0\n    if mse == 0:\n        return float('inf')\n    psnr = 20 * np.log10(max_pixel_value / np.sqrt(mse))\n    return psnr",
  "test_code": "import numpy as np\n\ndef test_psnr():\n    # Test case 1: Identical images\n    image1 = np.array([[128, 128, 128], [128, 128, 128]], dtype=np.uint8)\n    image2 = np.array([[128, 128, 128], [128, 128, 128]], dtype=np.uint8)\n    psnr = calculate_psnr(image1, image2)\n    assert round(psnr, 2) == 100.0, f\"Expected 100.0 dB, got {psnr} dB\"\n\n    # Test case 2: Different images\n    image3 = np.array([[128, 128, 128], [128, 128, 128]], dtype=np.uint8)\n    image4 = np.array([[129, 129, 129], [129, 129, 129]], dtype=np.uint8)\n    psnr = calculate_psnr(image3, image4)\n    assert round(psnr, 2) == 97.44, f\"Expected 97.44 dB, got {psnr} dB\"\n\n    # Test case 3: Image with no error\n    image5 = np.array([[128, 128, 128], [128, 128, 128]], dtype=np.uint8)\n    image6 = np.array([[128, 128, 128], [128, 128, 128]], dtype=np.uint8)\n    psnr = calculate_psnr(image5, image6)\n    assert psnr == float('inf'), f\"Expected infinity, got {psnr}\"\n\n    # Test case 4: Images with a larger difference\n    image7 = np.array([[0, 0, 0], [0, 0, 0]], dtype=np.uint8)\n    image8 = np.array([[255, 255, 255], [255, 255, 255]], dtype=np.uint8)\n    psnr = calculate_psnr(image7, image8)\n    assert round(psnr, 2) == 10.0, f\"Expected 10.0 dB, got {psnr} dB\"\n\n    # Test case 5: From Wikipedia example (verify exact value for reference)\n    image9 = np.array([[10, 10, 10], [10, 10, 10]], dtype=np.uint8)\n    image10 = np.array([[10, 10, 10], [10, 8, 8]], dtype=np.uint8)\n    psnr = calculate_psnr(image9, image10)\n    assert round(psnr, 3) == 31.531, f\"Expected 31.531 dB, got {psnr} dB\"\n\ntest_psnr()",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}