{
  "metadata": {
    "prompt_id": "00000018",
    "row_id": 18,
    "seed_ids": [
      111
    ],
    "mode": "algorithm"
  },
  "instruction": "### Scenario\n\nYou are working on a natural language processing project where you need to find the most similar document to a given query document based on the Euclidean distance between their vector representations. The dataset contains vector representations of several documents, and you need to write a function to find the closest document to a given query document.\n\n### Requirements\n\nYou are to implement the `find_closest_document` function that takes a dataset of documents and a query document, and returns the closest document to the query based on Euclidean distance. The function should follow these guidelines:\n\n- **Input**:\n  - `dataset`: A 2D NumPy array where each row represents a document vector.\n  - `query_document`: A 1D NumPy array representing the query document vector.\n- **Output**:\n  - A tuple containing the index of the closest document and the Euclidean distance between the query document and the closest document.\n\n- **Constraints**:\n  - The `dataset` will have at least 1 document.\n  - The `query_document` will have the same dimension as the vectors in the `dataset`.\n\n- **Performance Requirement**:\n  - The solution should have a time complexity better than \\(O(n \\times m)\\), where \\(n\\) is the number of documents in the dataset and \\(m\\) is the dimension of the vectors.\n\n### Example\n\n```python\nimport numpy as np\n\ndataset = np.array([[1, 2], [3, 4], [5, 6]])\nquery_document = np.array([4, 5])\n# Expected output: (1, 1.0)\n# Explanation: The closest document to [4, 5] is [3, 4] with a Euclidean distance of 1.0.\n```\n\n### Your Task\n\nImplement the `find_closest_document` function and ensure it meets the requirements described above.",
  "solution_code": "import numpy as np\n\ndef find_closest_document(dataset, query_document):\n    \"\"\"\n    Finds the closest document to the query document based on Euclidean distance.\n    \n    :param dataset: A 2D NumPy array where each row represents a document vector.\n    :param query_document: A 1D NumPy array representing the query document vector.\n    :return: A tuple containing the index of the closest document and the Euclidean distance.\n    \"\"\"\n    distances = np.linalg.norm(dataset - query_document, axis=1)\n    closest_index = np.argmin(distances)\n    closest_distance = distances[closest_index]\n    return closest_index, closest_distance",
  "test_code": "import numpy as np\nfrom solution import find_closest_document\n\ndef test_find_closest_document():\n    dataset = np.array([[1, 2], [3, 4], [5, 6]])\n    query_document = np.array([4, 5])\n    expected = (1, 1.0)\n    assert find_closest_document(dataset, query_document) == expected\n\ndef test_find_closest_document_random_data():\n    dataset = np.random.rand(100, 10)\n    query_document = np.random.rand(10)\n    expected_distance = np.linalg.norm(dataset[0] - query_document)\n    closest_index, closest_distance = find_closest_document(dataset, query_document)\n    assert closest_index != 0  # Ensure it's not the first document\n    assert np.isclose(closest_distance, np.linalg.norm(dataset[closest_index] - query_document))\n    assert np.isclose(closest_distance, expected_distance)\n\ndef test_find_closest_document_single_document():\n    dataset = np.array([[1, 1]])\n    query_document = np.array([1, 1])\n    expected = (0, 0.0)\n    assert find_closest_document(dataset, query_document) == expected\n\ndef test_find_closest_document_empty_dataset():\n    dataset = np.array([])\n    query_document = np.array([1, 1])\n    expected = None\n    assert find_closest_document(dataset, query_document) == expected\n\ndef test_find_closest_document_same_document():\n    dataset = np.array([[1, 1], [1, 1], [1, 1]])\n    query_document = np.array([1, 1])\n    expected = (0, 0.0)\n    assert find_closest_document(dataset, query_document) == expected",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}