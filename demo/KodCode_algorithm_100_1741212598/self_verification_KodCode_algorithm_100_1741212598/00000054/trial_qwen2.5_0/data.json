{
  "metadata": {
    "prompt_id": "00000054",
    "row_id": 54,
    "seed_ids": [
      942
    ],
    "mode": "algorithm"
  },
  "instruction": "**Scenario**: You are given a list of integers, and you need to find the peak element in the list, which is the maximum value in a unimodal list. A unimodal list is defined as a list that increases to a point and then decreases. If the input list does not strictly follow this pattern, the function should return `None`.\n\n**Function Signature**:\n```python\ndef find_peak(lst: List[int]) -> Optional[int]:\n    pass\n```\n\n**Input**:\n- The function takes a list of integers `lst`.\n\n**Output**:\n- The function returns the peak element of the list as an integer. If the list does not follow the unimodal pattern, the function should return `None`.\n\n**Constraints**:\n- \\(1 \\leq \\text{len}(lst) \\leq 10^6\\)\n- The list can contain duplicate values.\n\n**Performance Requirement**:\n- The function should be efficient, aiming for a time complexity of \\(O(\\log n)\\) where \\(n\\) is the length of the list.\n\n**Example**:\n```python\n>>> find_peak([1, 2, 3, 4, 5, 4, 3, 2, 1])\n5\n>>> find_peak([1, 10, 9, 8, 7, 6, 5, 4])\n10\n>>> find_peak([1, 9, 8, 7])\n9\n>>> find_peak([1, 2, 3, 4, 5, 6, 7, 0])\n7\n>>> find_peak([1, 2, 3, 4, 3, 2, 1, 0, -1, -2])\n4\n>>> find_peak([1, 2, 2, 1, 0, -1, -2])\n2\n>>> find_peak([1, 1])\n1\n>>> find_peak([1])\n1\n>>> find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 11, 10])\n12\n>>> find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 11, 10, 9])\n12\n```\n\n**Note**: Ensure that your implementation handles edge cases correctly and efficiently.",
  "solution_code": "from typing import List, Optional\n\ndef find_peak(lst: List[int]) -> Optional[int]:\n    \"\"\"\n    Find the peak element in a unimodal list.\n    \"\"\"\n    if not lst:\n        return None\n\n    left, right = 0, len(lst) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        # Check if mid is the peak element\n        if (mid == 0 or lst[mid - 1] < lst[mid]) and (mid == len(lst) - 1 or lst[mid] > lst[mid + 1]):\n            return lst[mid]\n        # If the middle element is smaller than the next element, the peak lies on the right half\n        elif mid < len(lst) - 1 and lst[mid + 1] > lst[mid]:\n            left = mid + 1\n        # Otherwise, the peak lies on the left half\n        else:\n            right = mid - 1\n\n    return None",
  "test_code": "from typing import Optional\nfrom solution import find_peak\n\ndef test_find_peak():\n    assert find_peak([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 5\n    assert find_peak([1, 10, 9, 8, 7, 6, 5, 4]) == 10\n    assert find_peak([1, 9, 8, 7]) == 9\n    assert find_peak([1, 2, 3, 4, 5, 6, 7, 0]) == 7\n    assert find_peak([1, 2, 3, 4, 3, 2, 1, 0, -1, -2]) == 4\n    assert find_peak([1, 2, 2, 1, 0, -1, -2]) == 2\n    assert find_peak([1, 1]) == 1\n    assert find_peak([1]) == 1\n    assert find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 11, 10]) == 12\n    assert find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 11, 10, 9]) == 12\n    assert find_peak([]) is None\n    assert find_peak([1, 2, 2, 2, 2, 2, 1]) is None",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}