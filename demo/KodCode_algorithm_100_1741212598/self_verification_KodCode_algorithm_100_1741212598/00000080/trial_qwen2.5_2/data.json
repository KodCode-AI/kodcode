{
  "metadata": {
    "prompt_id": "00000080",
    "row_id": 80,
    "seed_ids": [
      802
    ],
    "mode": "algorithm"
  },
  "instruction": "The task is to implement a function that checks if a given number is an automorphic number. An automorphic number is defined as a number whose square ends in the same digits as the number itself.\n\n### Function Signature\n```python\ndef is_automorphic_number(number: int) -> bool:\n    pass\n```\n\n### Input and Output\n- **Input**: An integer number.\n- **Output**: A boolean indicating whether the number is an automorphic number.\n\n### Constraints\n- The input number will be within the range \\([-10^{18}, 10^{18} - 1]\\).\n\n### Performance Requirements\n- The function should be efficient and run within a reasonable time for the given constraints.\n\n### Additional Notes\n- The function should handle both positive and negative numbers correctly, but negative numbers are not considered automorphic.\n- The function should raise a `TypeError` if the input is not an integer.\n\n### Example Cases\n```python\n# Example 1\nassert is_automorphic_number(76) == True\n# Example 2\nassert is_automorphic_number(25) == True\n# Example 3\nassert is_automorphic_number(9376) == True\n# Example 4\nassert is_automorphic_number(7) == False\n# Example 5\nassert is_automorphic_number(-25) == False\n# Example 6\nassert is_automorphic_number(5.0) == TypeError\n```\n\n### Implementation\n\n1. Validate the input to ensure it is an integer.\n2. Handle negative numbers by returning `False`.\n3. Compare the last digits of the square of the number with the number itself.\n4. Return `True` if the last digits match, otherwise return `False`.\n\n### Function to Test\n```python\ndef test_is_automorphic_number():\n    assert is_automorphic_number(76) == True\n    assert is_automorphic_number(25) == True\n    assert is_automorphic_number(9376) == True\n    assert is_automorphic_number(7) == False\n    assert is_automorphic_number(-25) == False\n    try:\n        is_automorphic_number(5.0)\n    except TypeError:\n        pass\n    else:\n        raise AssertionError(\"TypeError not raised for non-integer input\")\n```\n\nImplement the `is_automorphic_number` function following the above requirements and guidelines.",
  "solution_code": "def is_automorphic_number(number: int) -> bool:\n    \"\"\"\n    Returns True if the number is an automorphic number, otherwise False.\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    if number < 0:\n        return False\n    \n    str_number = str(number)\n    str_square = str(number ** 2)\n    \n    return str_square.endswith(str_number)",
  "test_code": "def test_is_automorphic_number():\n    assert is_automorphic_number(76) == True\n    assert is_automorphic_number(25) == True\n    assert is_automorphic_number(9376) == True\n    assert is_automorphic_number(7) == False\n    assert is_automorphic_number(-25) == False\n    try:\n        is_automorphic_number(5.0)\n    except TypeError:\n        pass\n    else:\n        raise AssertionError(\"TypeError not raised for non-integer input\")\n\n\ndef test_positive_numbers():\n    assert is_automorphic_number(1) == False\n    assert is_automorphic_number(5) == True\n    assert is_automorphic_number(6) == True\n    assert is_automorphic_number(25) == True\n    assert is_automorphic_number(76) == True\n\ndef test_large_automorphic_numbers():\n    assert is_automorphic_number(9376) == True\n    assert is_automorphic_number(890625) == True\n\ndef test_non_automorphic_numbers():\n    assert is_automorphic_number(12) == False\n    assert is_automorphic_number(13) == False\n    assert is_automorphic_number(23) == False\n\ndef test_edge_cases():\n    assert is_automorphic_number(0) == True\n    assert is_automorphic_number(11) == True\n    assert is_automorphic_number(100) == False",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}