{
  "metadata": {
    "prompt_id": "00000076",
    "row_id": 76,
    "seed_ids": [
      650
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with implementing a function `hex_to_bin_v2` that converts a hexadecimal value to its binary equivalent. The function should handle the following cases:\n\n* Leading and trailing whitespace in the input string should be stripped.\n* The input string must represent a valid hexadecimal number. If the input string contains invalid characters or is not a valid hexadecimal number, the function should raise a `ValueError` with an appropriate message.\n* The function should handle negative numbers correctly by preserving the sign during conversion.\n\nYour function should meet the following requirements:\n\n* Input: A string representing a hexadecimal number (optionally with leading/trailing whitespace).\n* Output: A string representing the binary equivalent of the input hexadecimal number.\n* Constraints:\n  - The input string will be between 1 and 1000 characters long.\n  - The input string will contain only hexadecimal digits (0-9, a-f, A-F) and optional leading/trailing whitespace.\n\nExample usage:\n\n```python\nprint(hex_to_bin_v2(\"AC\"))  # Output: \"10101100\"\nprint(hex_to_bin_v2(\"9A4\"))  # Output: \"100110100100\"\nprint(hex_to_bin_v2(\"   12f   \"))  # Output: \"100101111\"\nprint(hex_to_bin_v2(\"FfFf\"))  # Output: \"1111111111111111\"\nprint(hex_to_bin_v2(\"-fFfF\"))  # Output: \"-1111111111111111\"\n```\n\nIf the input string contains invalid characters or is not a valid hexadecimal number, your function should raise a `ValueError` with a message indicating the issue.\n\n```python\nprint(hex_to_bin_v2(\"G1\"))  # ValueError: Invalid value was passed to the function\nprint(hex_to_bin_v2(\"\"))  # ValueError: No value was passed to the function\n```",
  "solution_code": "def hex_to_bin_v2(hex_val):\n    \"\"\"\n    Converts a hexadecimal value to its binary equivalent.\n    \n    :param hex_val: A string representing a hexadecimal number (optional whitespace).\n    :return: A string representing the binary equivalent of the input hexadecimal number.\n    :raises ValueError: If the input string is invalid or empty.\n    \"\"\"\n    # Strip leading and trailing whitespace\n    hex_val = hex_val.strip()\n    \n    # Validate the input\n    if not hex_val or not set(hex_val).issubset(set('0123456789abcdefABCDEF')):\n        raise ValueError(\"Invalid value was passed to the function\")\n    \n    # Handle negative numbers\n    negative = hex_val.startswith('-')\n    if negative:\n        hex_val = hex_val[1:]\n    \n    # Convert hexadecimal to binary\n    bin_val = bin(int(hex_val, 16))[2:]\n    \n    # Add sign back if necessary\n    if negative:\n        bin_val = '-' + bin_val\n    \n    return bin_val",
  "test_code": "import pytest\n\ndef test_hex_to_bin_v2():\n    # Test valid hexadecimal numbers\n    assert hex_to_bin_v2(\"AC\") == \"10101100\"\n    assert hex_to_bin_v2(\"9A4\") == \"100110100100\"\n    assert hex_to_bin_v2(\"12f\") == \"100101111\"\n    assert hex_to_bin_v2(\"FF\") == \"11111111\"\n    assert hex_to_bin_v2(\"-FfF\") == \"-1111111111111111\"\n\n    # Test with leading/trailing whitespace\n    assert hex_to_bin_v2(\"   12f   \") == \"100101111\"\n    assert hex_to_bin_v2(\" FfFf   \") == \"1111111111111111\"\n    assert hex_to_bin_v2(\"- fFfF   \") == \"-1111111111111111\"\n\n    # Test negative number correctly preserved\n    assert hex_to_bin_v2(\"-fFfF\") == \"-1111111111111111\"\n\n    # Test invalid input\n    with pytest.raises(ValueError, match=\"Invalid value was passed to the function\"):\n        hex_to_bin_v2(\"G1\")\n\n    with pytest.raises(ValueError, match=\"Invalid value was passed to the function\"):\n        hex_to_bin_v2(\"\")\n\n    with pytest.raises(ValueError, match=\"Invalid value was passed to the function\"):\n        hex_to_bin_v2(\"I234.\")",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}