{
  "metadata": {
    "prompt_id": "00000034",
    "row_id": 34,
    "seed_ids": [
      1073
    ],
    "mode": "algorithm"
  },
  "instruction": "Design a function `check_opposite_signs` that determines if two given integers have opposite signs using bitwise operations. The function should meet the following requirements:\n\n- **Input**: Two integers `num1` and `num2`.\n- **Output**: A boolean value `True` if the integers have opposite signs, and `False` otherwise.\n- **Constraints**:\n  - The function should use bitwise operations and not rely on arithmetic operations or conditional statements.\n  - The function should handle edge cases where the input integers are zero.\n- **Performance Requirement**: Ensure that the function runs in constant time \\(O(1)\\).\n\n**Example Usage**:\n```python\n>>> check_opposite_signs(1, -1)\nTrue\n>>> check_opposite_signs(100, 200)\nFalse\n>>> check_opposite_signs(-100, -200)\nFalse\n>>> check_opposite_signs(0, 1)\nTrue\n>>> check_opposite_signs(-1, 0)\nFalse\n```\n\n**Additional Note**: Your function should be self-contained and clear. Ensure that the function handles all edge cases as described.",
  "solution_code": "def check_opposite_signs(num1, num2):\n    \"\"\"\n    Determines if two integers have opposite signs using bitwise operations.\n    \"\"\"\n    # Mask to check the sign bit (32nd bit for int32)\n    mask = 0x80000000\n    \n    # XOR the sign bits of both numbers, if the result's sign bit is set, then numbers have opposite signs\n    return (num1 & mask) ^ (num2 & mask) == mask",
  "test_code": "pytest\nfrom solution import check_opposite_signs\n\ndef test_opposite_signs():\n    assert check_opposite_signs(1, -1) == True\n    assert check_opposite_signs(100, 200) == False\n    assert check_opposite_signs(-100, -200) == False\n    assert check_opposite_signs(0, 1) == True\n    assert check_opposite_signs(-1, 0) == False\n    assert check_opposite_signs(0, -1) == True\n    assert check_opposite_signs(-1, -1) == False\n    assert check_opposite_signs(0x80000000, -0x80000000) == True\n    assert check_opposite_signs(-0x80000000, 0x80000000) == True\n    assert check_opposite_signs(0x7fffffff, -0x80000000) == True\n    assert check_opposite_signs(-0x7fffffff, 0x7fffffff) == False\n\ndef test_zero():\n    assert check_opposite_signs(0, 0) == False\n    assert check_opposite_signs(-0, 0) == True\n    assert check_opposite_signs(0, -0) == True\n    assert check_opposite_signs(-0, -0) == False",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}