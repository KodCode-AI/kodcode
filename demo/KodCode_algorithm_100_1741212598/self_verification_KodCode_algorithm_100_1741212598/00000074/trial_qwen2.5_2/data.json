{
  "metadata": {
    "prompt_id": "00000074",
    "row_id": 74,
    "seed_ids": [
      578
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with optimizing the given Python code to efficiently count the number of reversible numbers below a given power of 10. A reversible number is a positive integer such that the sum of the number and its reverse consists entirely of odd (decimal) digits. Leading zeros are not allowed.\n\n### Problem Description\nImplement a function `count_reversible_numbers(max_power: int) -> int` that returns the number of reversible numbers below \\(10^{max_power}\\).\n\n### Constraints\n- \\(1 \\leq max_power \\leq 9\\)\n\n### Input and Output Formats\n- **Input**:\n  - `max_power`: An integer representing the power of 10 to which the upper limit is set.\n- **Output**:\n  - An integer representing the count of reversible numbers below \\(10^{max_power}\\).\n\n### Example\n\n```python\nassert count_reversible_numbers(3) == 120\nassert count_reversible_numbers(6) == 18720\nassert count_reversible_numbers(7) == 68720\n```\n\n### Performance Requirements\n- The solution should be efficient and able to handle the maximum input size within a reasonable time.\n\n### Optimized Solution\nYou are required to optimize the given code to improve its performance. You can use memoization, dynamic programming, or any other technique to achieve this.\n\n### Code Snippet\n```python\nEVEN_DIGITS = [0, 2, 4, 6, 8]\nODD_DIGITS = [1, 3, 5, 7, 9]\n\ndef count_reversible_numbers(max_power: int) -> int:\n    # Your optimized implementation goes here\n    pass\n\n# Example usage\nprint(count_reversible_numbers(3))  # Output: 120\n```\n\n### Explanation\nThe function `count_reversible_numbers` should efficiently count the number of reversible numbers for the given `max_power`. You should consider edge cases and ensure that the sum of the number and its reverse consists entirely of odd digits.",
  "solution_code": "def count_reversible_numbers(max_power: int) -> int:\n    \"\"\"\n    Returns the number of reversible numbers below 10^max_power.\n    \"\"\"\n    if max_power == 1:\n        return 5  # There are 5 reversible numbers below 10: 1, 2, 3, 4, 5\n\n    # Precompute the count for smaller powers of 10\n    counts = [0] * (max_power + 1)\n    counts[1] = 5\n    for i in range(2, max_power + 1):\n        if i % 2 == 0:\n            # For even powers of 10, the count is 5 * 5 * 5 * 2\n            half_power = i // 2\n            counts[i] = 5 * 5 * 5 * 2\n        else:\n            # For odd powers of 10, the count is 5 * 5 * 5 * 5\n            half_power = (i - 1) // 2\n            counts[i] = 5 * 5 * 5 * 5\n\n    return counts[max_power]",
  "test_code": "python\r\ndef count_reversible_numbers(max_power: int) -> int:\r\n    if max_power == 1:\r\n        return 5\r\n    counts = [0] * (max_power + 1)\r\n    counts[1] = 5\r\n    for i in range(2, max_power + 1):\r\n        if i % 2 == 0:\r\n            half_power = i // 2\r\n            counts[i] = 5 * 5 * 5 * 2\r\n        else:\r\n            half_power = (i - 1) // 2\r\n            counts[i] = 5 * 5 * 5 * 5\r\n    return counts[max_power]\r\n\r\n# Unit Tests\r\ndef test_count_reversible_numbers():\r\n    assert count_reversible_numbers(1) == 5\r\n    assert count_reversible_numbers(2) == 5 * 5 * 2\r\n    assert count_reversible_numbers(3) == 5 * 5 * 5 * 5\r\n    assert count_reversible_numbers(4) == 5 * 5 * 5 * 2\r\n    assert count_reversible_numbers(5) == 5 * 5 * 5 * 5\r\n    assert count_reversible_numbers(6) == 5 * 5 * 5 * 2\r\n    assert count_reversible_numbers(7) == 5 * 5 * 5 * 5\r\n    assert count_reversible_numbers(8) == 5 * 5 * 5 * 2\r\n    assert count_reversible_numbers(9) == 5 * 5 * 5 * 5\r\n\r\ntest_count_reversible_numbers()",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}