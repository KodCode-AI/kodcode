{
  "metadata": {
    "prompt_id": "00000074",
    "row_id": 74,
    "seed_ids": [
      578
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with optimizing the given Python code to efficiently count the number of reversible numbers below a given power of 10. A reversible number is a positive integer such that the sum of the number and its reverse consists entirely of odd (decimal) digits. Leading zeros are not allowed.\n\n### Problem Description\nImplement a function `count_reversible_numbers(max_power: int) -> int` that returns the number of reversible numbers below \\(10^{max_power}\\).\n\n### Constraints\n- \\(1 \\leq max_power \\leq 9\\)\n\n### Input and Output Formats\n- **Input**:\n  - `max_power`: An integer representing the power of 10 to which the upper limit is set.\n- **Output**:\n  - An integer representing the count of reversible numbers below \\(10^{max_power}\\).\n\n### Example\n\n```python\nassert count_reversible_numbers(3) == 120\nassert count_reversible_numbers(6) == 18720\nassert count_reversible_numbers(7) == 68720\n```\n\n### Performance Requirements\n- The solution should be efficient and able to handle the maximum input size within a reasonable time.\n\n### Optimized Solution\nYou are required to optimize the given code to improve its performance. You can use memoization, dynamic programming, or any other technique to achieve this.\n\n### Code Snippet\n```python\nEVEN_DIGITS = [0, 2, 4, 6, 8]\nODD_DIGITS = [1, 3, 5, 7, 9]\n\ndef count_reversible_numbers(max_power: int) -> int:\n    # Your optimized implementation goes here\n    pass\n\n# Example usage\nprint(count_reversible_numbers(3))  # Output: 120\n```\n\n### Explanation\nThe function `count_reversible_numbers` should efficiently count the number of reversible numbers for the given `max_power`. You should consider edge cases and ensure that the sum of the number and its reverse consists entirely of odd digits.",
  "solution_code": "from functools import lru_cache\n\nEVEN_DIGITS = [0, 2, 4, 6, 8]\nODD_DIGITS = [1, 3, 5, 7, 9]\n\n@lru_cache(None)\ndef is_reversible(num: int) -> bool:\n    str_num = str(num)\n    if str_num[0] == '0':  # Leading zero is not allowed\n        return False\n    for i in range(len(str_num)):\n        if (int(str_num[i]) in EVEN_DIGITS) and (i != len(str_num) - 1):\n            return False\n    for i in range(len(str_num) // 2):\n        if (int(str_num[i]) + int(str_num[~i]) in EVEN_DIGITS):\n            return False\n    return True\n\ndef count_reversible_numbers(max_power: int) -> int:\n    total_count = 0\n    for length in range(1, max_power + 1):\n        if length == 1:\n            total_count += 5  # Single digit: 1, 3, 5, 7, 9\n        elif length % 2 == 1:\n            counts = [0] * 10\n            for i in ODD_DIGITS:\n                counts[i] = 1\n            for _ in range(length // 2):\n                new_counts = [0] * 10\n                for i in ODD_DIGITS:\n                    for j in ODD_DIGITS:\n                        new_counts[(i + j) % 10] += counts[i]\n                counts = new_counts\n            total_count += sum(counts[i] for i in ODD_DIGITS) * 5\n        else:\n            counts = [0] * 10\n            for i in ODD_DIGITS:\n                counts[i] = 1\n            for _ in range(length // 2 - 1):\n                new_counts = [0] * 10\n                for i in ODD_DIGITS:\n                    for j in ODD_DIGITS:\n                        if is_reversible((i * 10 + j) % 100):\n                            new_counts[(i + j) % 10] += counts[i]\n                counts = new_counts\n            total_count += sum(counts[i] for i in ODD_DIGITS) * 5 * 2\n    return total_count\n\n# Example usage\nprint(count_reversible_numbers(3))  # Output: 120",
  "test_code": "import pytest\n\n@lru_cache(None)\ndef is_reversible(num: int) -> bool:\n    str_num = str(num)\n    if str_num[0] == '0':  # Leading zero is not allowed\n        return False\n    for i in range(len(str_num)):\n        if (int(str_num[i]) in [0, 2, 4, 6, 8]) and (i != len(str_num) - 1):\n            return False\n    for i in range(len(str_num) // 2):\n        if (int(str_num[i]) + int(str_num[~i]) in [0, 2, 4, 6, 8]):\n            return False\n    return True\n\ndef count_reversible_numbers(max_power: int) -> int:\n    total_count = 0\n    for length in range(1, max_power + 1):\n        if length == 1:\n            total_count += 5  # Single digit: 1, 3, 5, 7, 9\n        elif length % 2 == 1:\n            counts = [0] * 10\n            for i in [1, 3, 5, 7, 9]:\n                counts[i] = 1\n            for _ in range(length // 2):\n                new_counts = [0] * 10\n                for i in [1, 3, 5, 7, 9]:\n                    for j in [1, 3, 5, 7, 9]:\n                        new_counts[(i + j) % 10] += counts[i]\n                counts = new_counts\n            total_count += sum(counts[i] for i in [1, 3, 5, 7, 9]) * 5\n        else:\n            counts = [0] * 10\n            for i in [1, 3, 5, 7, 9]:\n                counts[i] = 1\n            for _ in range(length // 2 - 1):\n                new_counts = [0] * 10\n                for i in [1, 3, 5, 7, 9]:\n                    for j in [1, 3, 5, 7, 9]:\n                        if is_reversible((i * 10 + j) % 100):\n                            new_counts[(i + j) % 10] += counts[i]\n                counts = new_counts\n            total_count += sum(counts[i] for i in [1, 3, 5, 7, 9]) * 5 * 2\n    return total_count\n\ndef test_count_reversible_numbers():\n    assert count_reversible_numbers(3) == 120\n    assert count_reversible_numbers(6) == 18720\n    assert count_reversible_numbers(7) == 68720\n    assert count_reversible_numbers(1) == 5\n    assert count_reversible_numbers(2) == 45\n\ntest_count_reversible_numbers()",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}