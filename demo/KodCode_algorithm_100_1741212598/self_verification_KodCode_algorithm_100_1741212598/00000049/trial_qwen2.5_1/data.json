{
  "metadata": {
    "prompt_id": "00000049",
    "row_id": 49,
    "seed_ids": [
      784
    ],
    "mode": "algorithm"
  },
  "instruction": "The sigmoid function is a fundamental building block in machine learning and neural networks. Your task is to implement a modified version of the sigmoid function that can handle a batch of input vectors efficiently. Additionally, you need to optimize the function to avoid numerical instability and ensure it works correctly with different data types.\n\n#### Requirements\n- Implement a function `batch_sigmoid` that takes a 2D numpy array as input and returns a 2D numpy array with the sigmoid function applied element-wise.\n- Ensure the function works correctly with large and small input values to avoid numerical instability.\n- Optimize the function for performance and ensure it can handle large input arrays efficiently.\n- The function should return a numpy array of the same shape as the input array.\n- Add appropriate error handling to ensure the input is a 2D numpy array of the correct type.\n\n#### Constraints\n- The input array can have a maximum shape of (1000, 1000).\n- The elements of the input array can range from -1000 to 1000.\n\n#### Performance Requirements\n- The function should be efficient and not take more than 1 second to process an array of shape (1000, 1000).\n\n#### Example\n```python\nimport numpy as np\n\ninput_array = np.array([[0, -1, 1], [100, -100, 0]])\noutput_array = batch_sigmoid(input_array)\nprint(output_array)\n```\nExpected output:\n```python\n[[0.5       0.26894142 0.73105858]\n [1.         2.06115362e-45  0.5      ]]\n```\n\n#### Additional Information\n- You can use the `numpy` library to perform the computations.\n\n#### Scoring\n- Correct implementation: 70%\n- Performance and optimization: 20%\n- Error handling: 10%",
  "solution_code": "import numpy as np\n\ndef batch_sigmoid(x):\n    \"\"\"\n    Applies the sigmoid function element-wise to a 2D numpy array.\n    Args:\n        x (np.ndarray): A 2D numpy array of shape (N, M).\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as x, with the sigmoid function applied element-wise.\n    \"\"\"\n    if not isinstance(x, np.ndarray) or x.ndim != 2:\n        raise ValueError(\"Input must be a 2D numpy array.\")\n    \n    # To avoid numerical instability with large input values, subtract the max of x from x.\n    x_max = np.max(x)\n    result = 1 / (1 + np.exp(- (x - x_max)))\n    return result",
  "test_code": "import numpy as np\nimport pytest\n\ndef test_batch_sigmoid_positive_numbers():\n    input_array = np.array([[0, -1, 1], [10, -10, 0]])\n    expected_output = np.array([[0.5, 0.26894142, 0.73105858], \n                                [0.9999546, 0.0000454, 0.5]])\n    np.testing.assert_almost_equal(batch_sigmoid(input_array), expected_output, decimal=7)\n\ndef test_batch_sigmoid_large_input_values():\n    input_array = np.array([[100, -100, 0]])\n    expected_output = np.array([[1., 2.0611536e-45, 0.5]])\n    np.testing.assert_almost_equal(batch_sigmoid(input_array), expected_output, decimal=5)\n\ndef test_batch_sigmoid_zero_input():\n    input_array = np.zeros((1000, 1000))\n    expected_output = np.full((1000, 1000), 0.5)\n    np.testing.assert_equal(batch_sigmoid(input_array), expected_output)\n\ndef test_batch_sigmoid_with_negative_values():\n    input_array = np.array([[-1000, 1000]])\n    expected_output = np.array([[1.78179747e-437, 5.19681036e+432]])\n    np.testing.assert_almost_equal(batch_sigmoid(input_array), expected_output, decimal=5)\n\ndef test_batch_sigmoid_shape():\n    input_array = np.random.rand(1000, 1000)\n    output_array = batch_sigmoid(input_array)\n    assert output_array.shape == input_array.shape\n\ndef test_batch_sigmoid_type():\n    input_array = np.random.rand(1000, 1000)\n    with pytest.raises(ValueError):\n        batch_sigmoid(input_array[0, :])  # Should raise an error for 1D array\n    with pytest.raises(ValueError):\n        batch_sigmoid(np.random.rand(1000, 1000, 1000))  # Should raise an error for 3D array\n\ndef test_batch_sigmoid_input_type():\n    with pytest.raises(ValueError):\n        batch_sigmoid([1, 2, 3])  # Should raise an error for list input\n    with pytest.raises(ValueError):\n        batch_sigmoid(np.random.rand())  # Should raise an error for scalar input",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}