{
  "metadata": {
    "prompt_id": "00000049",
    "row_id": 49,
    "seed_ids": [
      784
    ],
    "mode": "algorithm"
  },
  "instruction": "The sigmoid function is a fundamental building block in machine learning and neural networks. Your task is to implement a modified version of the sigmoid function that can handle a batch of input vectors efficiently. Additionally, you need to optimize the function to avoid numerical instability and ensure it works correctly with different data types.\n\n#### Requirements\n- Implement a function `batch_sigmoid` that takes a 2D numpy array as input and returns a 2D numpy array with the sigmoid function applied element-wise.\n- Ensure the function works correctly with large and small input values to avoid numerical instability.\n- Optimize the function for performance and ensure it can handle large input arrays efficiently.\n- The function should return a numpy array of the same shape as the input array.\n- Add appropriate error handling to ensure the input is a 2D numpy array of the correct type.\n\n#### Constraints\n- The input array can have a maximum shape of (1000, 1000).\n- The elements of the input array can range from -1000 to 1000.\n\n#### Performance Requirements\n- The function should be efficient and not take more than 1 second to process an array of shape (1000, 1000).\n\n#### Example\n```python\nimport numpy as np\n\ninput_array = np.array([[0, -1, 1], [100, -100, 0]])\noutput_array = batch_sigmoid(input_array)\nprint(output_array)\n```\nExpected output:\n```python\n[[0.5       0.26894142 0.73105858]\n [1.         2.06115362e-45  0.5      ]]\n```\n\n#### Additional Information\n- You can use the `numpy` library to perform the computations.\n\n#### Scoring\n- Correct implementation: 70%\n- Performance and optimization: 20%\n- Error handling: 10%",
  "solution_code": "import numpy as np\n\ndef batch_sigmoid(x):\n    \"\"\"\n    Applies the sigmoid function element-wise to a 2D numpy array.\n    The function is optimized to avoid numerical instability for large and small input values.\n    \"\"\"\n    if not isinstance(x, np.ndarray) or x.ndim != 2:\n        raise ValueError(\"Input must be a 2D numpy array\")\n    \n    # Avoid numerical instability for large input values\n    x = np.clip(x, -500, 500)\n    \n    return 1 / (1 + np.exp(-x))",
  "test_code": "`python\nimport numpy as np\nimport pytest\n\ndef batch_sigmoid(x):\n    \"\"\"\n    Applies the sigmoid function element-wise to a 2D numpy array.\n    The function is optimized to avoid numerical instability for large and small input values.\n    \"\"\"\n    if not isinstance(x, np.ndarray) or x.ndim != 2:\n        raise ValueError(\"Input must be a 2D numpy array\")\n    \n    # Avoid numerical instability for large input values\n    x = np.clip(x, -500, 500)\n    \n    return 1 / (1 + np.exp(-x))\n\ndef test_batch_sigmoid_with_small_values():\n    input_array = np.array([[0, -1, 1], [100, -100, 0]])\n    output_array = batch_sigmoid(input_array)\n    expected_output = np.array([[0.5        , 0.26894142 , 0.73105858 ],\n                                [1.         , 2.06115362e-45 , 0.5       ]])\n    assert np.allclose(output_array, expected_output)\n\ndef test_batch_sigmoid_with_large_values():\n    input_array = np.array([[1000, -1000], [1000, -1000]])\n    output_array = batch_sigmoid(input_array)\n    expected_output = np.array([[1.        , 1.1164171e-435],\n                                [1.        , 1.1164171e-435]])\n    assert np.allclose(output_array, expected_output)\n\ndef test_batch_sigmoid_with_negative_zero():\n    input_array = np.array([[1, -1, 0], [0, -1, 0]])\n    output_array = batch_sigmoid(input_array)\n    expected_output = np.array([[0.73105858 , 0.26894142 , 0.5       ],\n                                [0.5       , 0.26894142 , 0.5       ]])\n    assert np.allclose(output_array, expected_output)\n\ndef test_batch_sigmoid_with_edge_cases():\n    input_array = np.array([[np.inf, -np.inf, 0], [-np.inf, np.inf, 0]])\n    output_array = batch_sigmoid(input_array)\n    expected_output = np.array([[1., 0., 0.5], [0., 1., 0.5]])\n    assert np.allclose(output_array, expected_output)\n\ndef test_batch_sigmoid_type_error():\n    with pytest.raises(ValueError):\n        batch_sigmoid([1, 2, 3])\n\ndef test_batch_sigmoid_non_2d_array():\n    with pytest.raises(ValueError):\n        batch_sigmoid(np.array([1, 2, 3]).reshape(3, 1, 1))",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}