{
  "metadata": {
    "prompt_id": "00000066",
    "row_id": 66,
    "seed_ids": [
      193
    ],
    "mode": "algorithm"
  },
  "instruction": "### Context\nYou are working on a project to simulate the behavior of an astable 555 timer circuit. The objective is to implement a function that not only calculates the frequency and duty cycle of the timer but also logs the calculation details.\n\n### Requirements\nWrite a Python function `simulate_555_timer` that takes the values of R1, R2, and C1 as inputs and returns a dictionary containing the calculated frequency, duty cycle, and a formatted string detailing the calculation steps. Additionally, the function should handle edge cases where the input values are not positive.\n\n#### Function Signature\n```python\ndef simulate_555_timer(resistance_1: float, resistance_2: float, capacitance: float) -> dict:\n    \"\"\"\n    Calculate the frequency and duty cycle of an astable 555 timer and log the calculation steps.\n\n    :param resistance_1: First resistance value (in ohms)\n    :param resistance_2: Second resistance value (in ohms)\n    :param capacitance: Capacitance value (in Microfarads)\n    :return: A dictionary containing 'frequency', 'duty_cycle', and 'details' keys.\n             'frequency' and 'duty_cycle' will be the calculated values.\n             'details' will be a string detailing the calculation steps.\n\n    Usage examples:\n    >>> simulate_555_timer(resistance_1=45, resistance_2=45, capacitance=7)\n    {\n        'frequency': 1523809.5238095239,\n        'duty_cycle': 66.66666666666666,\n        'details': 'Frequency: 1.44 / [(45 + 2 * 45) * 7] * 10^6 = 1523809.5238095239 Hz, Duty Cycle: (45 + 45) / (45 + 2 * 45) * 100 = 66.66666666666666 %'\n    }\n    >>> simulate_555_timer(resistance_1=356, resistance_2=234, capacitance=976)\n    {\n        'frequency': 1790.5459175553078,\n        'duty_cycle': 71.60194174757282,\n        'details': 'Frequency: 1.44 / [(356 + 2 * 234) * 976] * 10^6 = 1790.5459175553078 Hz, Duty Cycle: (356 + 234) / (356 + 2 * 234) * 100 = 71.60194174757282 %'\n    }\n    >>> simulate_555_timer(resistance_1=-1, resistance_2=45, capacitance=7)\n    {\n        'error': 'All values must be positive'\n    }\n    >>> simulate_555_timer(resistance_1=0, resistance_2=0, capacitance=0)\n    {\n        'error': 'All values must be positive'\n    }\n    \"\"\"\n```\n\n#### Input and Output Formats\n- **Input**:\n  - `resistance_1`: A float representing the first resistance value.\n  - `resistance_2`: A float representing the second resistance value.\n  - `capacitance`: A float representing the capacitance value.\n- **Output**:\n  - If all values are positive, the function returns a dictionary with the calculated frequency and duty cycle, and a formatted details string.\n  - If any value is not positive, the function returns a dictionary with an error message.\n\n#### Constraints\n- All input values are positive floating-point numbers.\n\n#### Performance Requirements\n- The function should perform the calculation in constant time, O(1).\n\n### Implementation\n```python\nfrom typing import Dict\n\ndef simulate_555_timer(resistance_1: float, resistance_2: float, capacitance: float) -> Dict[str, float or str]:\n    if resistance_1 <= 0 or resistance_2 <= 0 or capacitance <= 0:\n        return {'error': 'All values must be positive'}\n\n    frequency = (1.44 / ((resistance_1 + 2 * resistance_2) * capacitance)) * 10**6\n    duty_cycle = (resistance_1 + resistance_2) / (resistance_1 + 2 * resistance_2) * 100\n\n    details = f'Frequency: 1.44 / [( {resistance_1} + 2 * {resistance_2} ) * {capacitance}] * 10^6 = {frequency:.6f} Hz, Duty Cycle: ( {resistance_1} + {resistance_2} ) / ( {resistance_1} + 2 * {resistance_2} ) * 100 = {duty_cycle:.6f} %'\n\n    return {'frequency': frequency, 'duty_cycle': duty_cycle, 'details': details}\n\n```",
  "solution_code": "from typing import Dict\n\ndef simulate_555_timer(resistance_1: float, resistance_2: float, capacitance: float) -> Dict[str, float or str]:\n    \"\"\"\n    Calculate the frequency and duty cycle of an astable 555 timer and log the calculation steps.\n\n    :param resistance_1: First resistance value (in ohms)\n    :param resistance_2: Second resistance value (in ohms)\n    :param capacitance: Capacitance value (in Microfarads)\n    :return: A dictionary containing 'frequency', 'duty_cycle', and 'details' keys.\n             'frequency' and 'duty_cycle' will be the calculated values.\n             'details' will be a string detailing the calculation steps.\n\n    Usage examples:\n    >>> simulate_555_timer(resistance_1=45, resistance_2=45, capacitance=7)\n    {\n        'frequency': 1523809.5238095239,\n        'duty_cycle': 66.66666666666666,\n        'details': 'Frequency: 1.44 / [(45 + 2 * 45) * 7] * 10^6 = 1523809.5238095239 Hz, Duty Cycle: (45 + 45) / (45 + 2 * 45) * 100 = 66.66666666666666 %'\n    }\n    >>> simulate_555_timer(resistance_1=356, resistance_2=234, capacitance=976)\n    {\n        'frequency': 1790.5459175553078,\n        'duty_cycle': 71.60194174757282,\n        'details': 'Frequency: 1.44 / [(356 + 2 * 234) * 976] * 10^6 = 1790.5459175553078 Hz, Duty Cycle: (356 + 234) / (356 + 2 * 234) * 100 = 71.60194174757282 %'\n    }\n    >>> simulate_555_timer(resistance_1=-1, resistance_2=45, capacitance=7)\n    {\n        'error': 'All values must be positive'\n    }\n    >>> simulate_555_timer(resistance_1=0, resistance_2=0, capacitance=0)\n    {\n        'error': 'All values must be positive'\n    }\n    \"\"\"\n    if resistance_1 <= 0 or resistance_2 <= 0 or capacitance <= 0:\n        return {'error': 'All values must be positive'}\n\n    frequency = (1.44 / ((resistance_1 + 2 * resistance_2) * capacitance)) * 10**6\n    duty_cycle = (resistance_1 + resistance_2) / (resistance_1 + 2 * resistance_2) * 100\n\n    details = f'Frequency: 1.44 / [( {resistance_1} + 2 * {resistance_2} ) * {capacitance}] * 10^6 = {frequency:.6f} Hz, Duty Cycle: ( {resistance_1} + {resistance_2} ) / ( {resistance_1} + 2 * {resistance_2} ) * 100 = {duty_cycle:.6f} %'\n\n    return {'frequency': frequency, 'duty_cycle': duty_cycle, 'details': details}",
  "test_code": "import pytest\n\ndef test_simulate_555_timer():\n    # Test with positive values\n    result = simulate_555_timer(resistance_1=45, resistance_2=45, capacitance=7)\n    assert 'error' not in result\n    assert result['frequency'] == pytest.approx(1523809.5238095239, rel=1e-2)\n    assert result['duty_cycle'] == pytest.approx(66.66666666666666, rel=1e-2)\n    assert result['details'] == 'Frequency: 1.44 / [(45 + 2 * 45) * 7] * 10^6 = 1523809.5238095239 Hz, Duty Cycle: (45 + 45) / (45 + 2 * 45) * 100 = 66.66666666666666 %'\n\n    # Test with floating point precision\n    result = simulate_555_timer(resistance_1=356, resistance_2=234, capacitance=976)\n    assert 'error' not in result\n    assert result['frequency'] == pytest.approx(1790.5459175553078, rel=1e-2)\n    assert result['duty_cycle'] == pytest.approx(71.60194174757282, rel=1e-2)\n    assert result['details'] == 'Frequency: 1.44 / [(356 + 2 * 234) * 976] * 10^6 = 1790.5459175553078 Hz, Duty Cycle: (356 + 234) / (356 + 2 * 234) * 100 = 71.60194174757282 %'\n\n    # Test with negative values\n    result = simulate_555_timer(resistance_1=-1, resistance_2=45, capacitance=7)\n    assert result == {'error': 'All values must be positive'}\n\n    # Test with zero values\n    result = simulate_555_timer(resistance_1=0, resistance_2=0, capacitance=0)\n    assert result == {'error': 'All values must be positive'}",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}