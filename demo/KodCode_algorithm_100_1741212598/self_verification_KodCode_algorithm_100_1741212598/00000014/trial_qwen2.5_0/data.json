{
  "metadata": {
    "prompt_id": "00000014",
    "row_id": 14,
    "seed_ids": [
      150
    ],
    "mode": "algorithm"
  },
  "instruction": "### Scenario\nYou are working on a project that involves converting between mass and energy based on Einstein's famous equation, \\(E = mc^2\\). Your task is to implement a more robust version of the provided functions to handle a wider range of input values and to ensure that the results are accurate within a certain tolerance.\n\n### Problem Description\nImplement a function `calculate_energy_from_mass` that calculates the energy equivalent of a given mass \\(m\\) using the formula \\(E = mc^2\\), and a function `calculate_mass_from_energy` that calculates the mass equivalent of a given energy \\(E\\) using the formula \\(m = \\frac{E}{c^2}\\). Both functions should handle the following requirements:\n\n1. **Input Validation**: Both functions should raise a `ValueError` if the input is negative, indicating that the input is not physically meaningful.\n2. **Accuracy**: The functions should return results accurate to at least 15 decimal places.\n3. **Error Handling**: The functions should handle very small or very large input values to avoid floating-point precision issues.\n\n### Function Signatures\n```python\ndef calculate_energy_from_mass(mass: float) -> float:\n    \"\"\"\n    Calculates the energy (in Joules) equivalent of the given mass (in kilograms).\n    \n    mass (float): The mass in kilograms.\n    \n    Returns:\n    float: The energy in Joules.\n    \n    Raises:\n    ValueError: If the mass is negative.\n    \"\"\"\n    # Your implementation here\n\ndef calculate_mass_from_energy(energy: float) -> float:\n    \"\"\"\n    Calculates the mass (in kilograms) equivalent of the given energy (in Joules).\n    \n    energy (float): The energy in Joules.\n    \n    Returns:\n    float: The mass in kilograms.\n    \n    Raises:\n    ValueError: If the energy is negative.\n    \"\"\"\n    # Your implementation here\n```\n\n### Constraints\n- The input values for `mass` and `energy` can be very large or very small, but they must be within the range of valid floating-point numbers.\n- The output should be accurate to at least 15 decimal places.\n\n### Example Usage\n```python\n# Example 1\n>>> calculate_energy_from_mass(1.0)\n8.987551787368176e+16\n>>> calculate_mass_from_energy(8.987551787368176e+16)\n1.0\n\n# Example 2\n>>> calculate_energy_from_mass(124.56)\n1.11948945063458e+19\n>>> calculate_mass_from_energy(1.11948945063458e+19)\n124.56\n\n# Example 3\n>>> calculate_energy_from_mass(0)\n0.0\n>>> calculate_mass_from_energy(0)\n0.0\n\n# Example 4\n>>> calculate_energy_from_mass(-1.0)\nTraceback (most recent call last):\n    ...\nValueError: Mass can't be negative.\n\n# Example 5\n>>> calculate_mass_from_energy(-1.0)\nTraceback (most recent call last):\n    ...\nValueError: Energy can't be negative.\n```\n\n### Additional Constraints\n- The implementation should not rely on any external libraries for calculations. Use only the basic arithmetic operations and standard Python functions.\n\n### Performance Requirements\nThe functions should perform efficiently and should not have significant performance bottlenecks.",
  "solution_code": "def calculate_energy_from_mass(mass: float) -> float:\n    \"\"\"\n    Calculates the energy (in Joules) equivalent of the given mass (in kilograms).\n    \n    mass (float): The mass in kilograms.\n    \n    Returns:\n    float: The energy in Joules.\n    \n    Raises:\n    ValueError: If the mass is negative.\n    \"\"\"\n    if mass < 0:\n        raise ValueError(\"Mass can't be negative.\")\n    c = 299792458  # Speed of light in meters per second\n    energy = mass * (c ** 2)\n    return energy\n\ndef calculate_mass_from_energy(energy: float) -> float:\n    \"\"\"\n    Calculates the mass (in kilograms) equivalent of the given energy (in Joules).\n    \n    energy (float): The energy in Joules.\n    \n    Returns:\n    float: The mass in kilograms.\n    \n    Raises:\n    ValueError: If the energy is negative.\n    \"\"\"\n    if energy < 0:\n        raise ValueError(\"Energy can't be negative.\")\n    c = 299792458  # Speed of light in meters per second\n    mass = energy / (c ** 2)\n    return mass",
  "test_code": "`python\ndef test_calculate_energy_from_mass():\n    assert round(calculate_energy_from_mass(1.0), 15) == 89875517873681760.0\n    assert round(calculate_energy_from_mass(124.56), 15) == 111948945063458048.0\n    assert round(calculate_energy_from_mass(0), 15) == 0.0\n    with pytest.raises(ValueError):\n        calculate_energy_from_mass(-1.0)\n\ndef test_calculate_mass_from_energy():\n    assert round(calculate_mass_from_energy(89875517873681760.0), 15) == 1.0\n    assert round(calculate_mass_from_energy(111948945063458048.0), 15) == 124.56\n    assert round(calculate_mass_from_energy(0), 15) == 0.0\n    with pytest.raises(ValueError):\n        calculate_mass_from_energy(-1.0)\n\ndef test_large_values():\n    large_value = 1e-30\n    assert round(calculate_energy_from_mass(large_value), 15) == 0.0\n    assert round(calculate_mass_from_energy(1e-60), 15) == 0.0\n\ndef test_small_values():\n    small_value = 1e30\n    assert round(calculate_energy_from_mass(small_value), 15) == 89875517873681760.0\n    assert round(calculate_mass_from_energy(89875517873681760000000000000000000.0), 15) == small_value",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}