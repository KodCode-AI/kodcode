{
  "metadata": {
    "prompt_id": "00000008",
    "row_id": 8,
    "seed_ids": [
      327
    ],
    "mode": "algorithm"
  },
  "instruction": "You are given a singly linked list, and your task is to implement a function `detect_cycle` that detects whether a cycle exists in the linked list using Floyd's cycle detection algorithm.\n\n#### Function Signature\n\n```python\ndef detect_cycle(linked_list: LinkedList) -> bool:\n    pass\n```\n\n#### Input\n- `linked_list` (LinkedList): A singly linked list instance.\n\n#### Output\n- `bool`: `True` if a cycle exists in the linked list, otherwise `False`.\n\n#### Constraints\n- The linked list can contain up to \\(10^5\\) nodes.\n- Each node's data is an integer ranging from \\(-10^6\\) to \\(10^6\\).\n\n#### Performance Requirements\n- The function should run in \\(O(n)\\) time complexity.\n- The function should use \\(O(1)\\) space complexity.\n\n#### Example\n\n```python\nlinked_list = LinkedList()\nlinked_list.add_node(1)\nlinked_list.add_node(2)\nlinked_list.add_node(3)\nlinked_list.add_node(4)\n\n# Create a cycle in the linked list\nlinked_list.head.next_node.next_node.next_node = linked_list.head.next_node\n\nassert detect_cycle(linked_list) == True\n\nlinked_list2 = LinkedList()\nlinked_list2.add_node(1)\n\nassert detect_cycle(linked_list2) == False\n```\n\n### Additional Requirements\n\n- Ensure your implementation handles edge cases such as an empty list and a list with only one node.\n- Avoid any potential type errors by checking for `None` values before accessing `next_node`.",
  "solution_code": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next_node = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def add_node(self, value):\n        if not self.head:\n            self.head = Node(value)\n        else:\n            current = self.head\n            while current.next_node:\n                current = current.next_node\n            current.next_node = Node(value)\n\ndef detect_cycle(linked_list: LinkedList) -> bool:\n    \"\"\"\n    Detects whether a cycle exists in the linked list using Floyd's cycle detection algorithm.\n    \"\"\"\n    if not linked_list.head or not linked_list.head.next_node:\n        return False\n\n    slow_pointer = linked_list.head\n    fast_pointer = linked_list.head\n\n    while fast_pointer and fast_pointer.next_node:\n        slow_pointer = slow_pointer.next_node\n        fast_pointer = fast_pointer.next_node.next_node\n        if slow_pointer == fast_pointer:\n            return True\n\n    return False",
  "test_code": "def test_detect_cycle_with_cycle():\n    linked_list = LinkedList()\n    linked_list.add_node(1)\n    linked_list.add_node(2)\n    linked_list.add_node(3)\n    linked_list.add_node(4)\n\n    # Create a cycle in the linked list\n    linked_list.head.next_node.next_node.next_node = linked_list.head.next_node\n\n    assert detect_cycle(linked_list) == True\n\ndef test_detect_cycle_without_cycle():\n    linked_list2 = LinkedList()\n    linked_list2.add_node(1)\n\n    assert detect_cycle(linked_list2) == False\n\ndef test_detect_cycle_empty_list():\n    assert detect_cycle(LinkedList()) == False\n\ndef test_detect_cycle_single_node_list():\n    assert detect_cycle(LinkedList()) == False\n    linked_list = LinkedList()\n    linked_list.head = Node(1)\n    assert detect_cycle(linked_list) == False",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}