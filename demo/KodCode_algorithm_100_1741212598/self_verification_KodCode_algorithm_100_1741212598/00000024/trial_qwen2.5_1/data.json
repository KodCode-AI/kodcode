{
  "metadata": {
    "prompt_id": "00000024",
    "row_id": 24,
    "seed_ids": [
      650
    ],
    "mode": "algorithm"
  },
  "instruction": "Design a function `hex_to_bin_optimized` that converts a given hexadecimal string to its binary representation. The function should handle the following:\n\n- **Input**: A string representing a hexadecimal number (potentially with leading/trailing whitespace).\n- **Output**: A string representing the binary equivalent of the hexadecimal number.\n- **Constraints**:\n  - The input string can be in the range `1 <= len(input_string) <= 1000`.\n  - The input string may contain leading and trailing whitespace, and may be prefixed with a `-` for negative numbers.\n- **Performance Requirements**: Optimize the function for better performance, especially for large input strings.\n\nYour task is to implement the function `hex_to_bin_optimized` which should be more efficient than the provided `hex_to_bin` function.\n\n```python\ndef hex_to_bin_optimized(hex_num: str) -> str:\n    \"\"\"\n    Convert a hexadecimal value to its binary equivalent, optimized for performance.\n    >>> hex_to_bin_optimized(\"AC\")\n    \"10101100\"\n    >>> hex_to_bin_optimized(\"9A4\")\n    \"100110100100\"\n    >>> hex_to_bin_optimized(\"   12f   \")\n    \"100101111\"\n    >>> hex_to_bin_optimized(\"FfFf\")\n    \"1111111111111111\"\n    >>> hex_to_bin_optimized(\"-fFfF\")\n    \"-1111111111111111\"\n    >>> hex_to_bin_optimized(\"F-f\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid value was passed to the function\n    >>> hex_to_bin_optimized(\"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: No value was passed to the function\n    \"\"\"\n\n    # Your implementation here\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n```\n\nNote: You should aim to use bitwise operations to enhance performance and handle the conversion more efficiently.",
  "solution_code": "def hex_to_bin_optimized(hex_num: str) -> str:\n    \"\"\"\n    Convert a hexadecimal value to its binary equivalent, optimized for performance.\n    >>> hex_to_bin_optimized(\"AC\")\n    \"10101100\"\n    >>> hex_to_bin_optimized(\"9A4\")\n    \"100110100100\"\n    >>> hex_to_bin_optimized(\"   12f   \")\n    \"100101111\"\n    >>> hex_to_bin_optimized(\"FfFf\")\n    \"1111111111111111\"\n    >>> hex_to_bin_optimized(\"-fFfF\")\n    \"-1111111111111111\"\n    >>> hex_to_bin_optimized(\"F-f\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid value was passed to the function\n    >>> hex_to_bin_optimized(\"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: No value was passed to the function\n    \"\"\"\n    hex_num = hex_num.strip().lstrip('-')\n    if not hex_num or not all(c in '0123456789abcdefABCDEF' for c in hex_num):\n        raise ValueError(\"Invalid value was passed to the function\")\n    \n    # Map hex digits to their binary representations\n    hex_to_bin = {\n        '0': '0000', '1': '0001', '2': '0010', '3': '0011',\n        '4': '0100', '5': '0101', '6': '0110', '7': '0111',\n        '8': '1000', '9': '1001', 'A': '1010', 'B': '1011',\n        'C': '1100', 'D': '1101', 'E': '1110', 'F': '1111'\n    }\n    \n    # Convert to binary\n    bin_num = ''.join(hex_to_bin[c] for c in hex_num)\n    if hex_num.startswith('-'):\n        bin_num = '-' + bin_num\n    \n    return bin_num",
  "test_code": "``\nfrom solution import hex_to_bin_optimized\n\ndef test_hex_to_bin_optimized():\n    assert hex_to_bin_optimized(\"AC\") == \"10101100\"\n    assert hex_to_bin_optimized(\"9A4\") == \"100110100100\"\n    assert hex_to_bin_optimized(\"   12f   \") == \"100101111\"\n    assert hex_to_bin_optimized(\"FfFf\") == \"1111111111111111\"\n    assert hex_to_bin_optimized(\"-fFfF\") == \"-1111111111111111\"\n    try:\n        hex_to_bin_optimized(\"F-f\")\n    except ValueError as e:\n        assert str(e) == \"Invalid value was passed to the function\"\n    try:\n        hex_to_bin_optimized(\"\")\n    except ValueError as e:\n        assert str(e) == \"No value was passed to the function\"",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}