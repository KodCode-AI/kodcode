{
  "metadata": {
    "prompt_id": "00000000",
    "row_id": 0,
    "seed_ids": [
      648
    ],
    "mode": "algorithm"
  },
  "instruction": "You are given a function `energy_conversion` that converts energy units. The function uses a dictionary to map different energy units to their corresponding values in joules. Your task is to extend this function to handle more complex cases and improve its robustness.\n\n**Task**:\n1. Modify the `energy_conversion` function to handle a new unit: \"electronvolt_per_photon\". The conversion factor for this unit is defined as `1 electronvolt_per_photon = 6.241509074460763e+15 joules`.\n2. Add a feature to allow users to convert from \"electronvolt_per_photon\" to any other unit and vice versa.\n3. Improve error handling to provide more informative error messages when invalid units are provided.\n4. Ensure that the function correctly handles the conversion of \"electronvolt_per_photon\" and includes appropriate test cases in the docstrings.\n\n**Input and Output**:\n- **Parameters**:\n  - `from_type`: A string representing the unit to convert from.\n  - `to_type`: A string representing the unit to convert to.\n  - `value`: A numeric value to convert.\n\n- **Output**:\n  - A float representing the converted value.\n\n**Constraints**:\n- The function must support the new unit \"electronvolt_per_photon\" in both directions (from and to).\n- The function must provide an informative error message when invalid units are provided.\n\n**Performance Requirements**:\n- The function should handle conversions efficiently with a time complexity of O(1).\n\n**Scenario**:\nYou are working on a project to convert energy values between various units, and you need to incorporate the conversion of \"electronvolt_per_photon\". The function should be robust and provide clear error messages for any invalid unit conversions.\n\n**Example**:\n```python\n>>> energy_conversion(\"electronvolt_per_photon\", \"joule\", 1)\n6.241509074460763e+15\n>>> energy_conversion(\"joule\", \"electronvolt_per_photon\", 6.241509074460763e+15)\n1.0\n>>> energy_conversion(\"electronvolt_per_photon\", \"wattsecond\", 1)\n0.00016402208664101444\n>>> energy_conversion(\"wattsecond\", \"electronvolt_per_photon\", 0.00016402208664101444)\n1.0\n```\n\n**Note**:\n- You must include appropriate test cases in the docstrings to demonstrate the functionality of the updated `energy_conversion` function.\n- Ensure that the function raises a `ValueError` with a descriptive message when an invalid unit is provided.",
  "solution_code": "def energy_conversion(from_type, to_type, value):\n    \"\"\"\n    Convert energy from one unit to another.\n    \n    Parameters:\n    - from_type: The unit to convert from. Supports 'joule', 'wattsecond', 'electronvolt_per_photon'.\n    - to_type: The unit to convert to. Supports 'joule', 'wattsecond', 'electronvolt_per_photon'.\n    - value: The numeric value to convert.\n    \n    Returns:\n    - A float representing the converted value.\n    \n    Raises:\n    - ValueError: If invalid units are provided.\n    \"\"\"\n    units_to_joules = {\n        'joule': 1,\n        'wattsecond': 1,\n        'electronvolt_per_photon': 6.241509074460763e+15\n    }\n    \n    if from_type not in units_to_joules or to_type not in units_to_joules:\n        raise ValueError(f\"Invalid units provided. Supported units: {list(units_to_joules.keys())}\")\n    \n    if from_type == to_type:\n        return value\n    \n    conversion_factor_from = units_to_joules[from_type]\n    conversion_factor_to = units_to_joules[to_type]\n    \n    converted_value = value * (conversion_factor_to / conversion_factor_from)\n    return converted_value\n\n# Add unit tests in the docstring",
  "test_code": "def test_energy_conversion():\n    assert energy_conversion(\"electronvolt_per_photon\", \"joule\", 1) == 6.241509074460763e+15\n    assert energy_conversion(\"joule\", \"electronvolt_per_photon\", 6.241509074460763e+15) == 1.0\n    assert energy_conversion(\"electronvolt_per_photon\", \"wattsecond\", 1) == 0.00016402208664101444\n    assert energy_conversion(\"wattsecond\", \"electronvolt_per_photon\", 0.00016402208664101444) == 1.0\n    assert energy_conversion(\"joule\", \"joule\", 10.0) == 10.0\n    assert energy_conversion(\"wattsecond\", \"wattsecond\", 5.0) == 5.0\n    assert energy_conversion(\"electronvolt_per_photon\", \"electronvolt_per_photon\", 2.0) == 2.0\n    \n    # Test error handling\n    try:\n        energy_conversion(\"unknown_unit\", \"joule\", 1)\n    except ValueError as e:\n        assert str(e) == \"Invalid units provided. Supported units: ['joule', 'wattsecond', 'electronvolt_per_photon']\"\n\n    try:\n        energy_conversion(\"joule\", \"unknown_unit\", 1)\n    except ValueError as e:\n        assert str(e) == \"Invalid units provided. Supported units: ['joule', 'wattsecond', 'electronvolt_per_photon']\"",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}