{
  "metadata": {
    "prompt_id": "00000098",
    "row_id": 98,
    "seed_ids": [
      142
    ],
    "mode": "algorithm"
  },
  "instruction": "**Question:**\n\nIn a fluid dynamics simulation, you are given the mass of a sphere, the density of the fluid, the cross-sectional area of the sphere, and its drag coefficient. Your task is to implement a function to calculate the terminal velocity of the sphere using the provided data.\n\nThe terminal velocity is calculated using the formula:\n\\[ V_t = \\left( \\frac{2 \\cdot m \\cdot g}{p \\cdot A \\cdot C_d} \\right)^{0.5} \\]\n\nWhere:\n- \\( V_t \\) is the terminal velocity (m/s)\n- \\( m \\) is the mass of the sphere (Kg)\n- \\( g \\) is the acceleration due to gravity (9.81 m/s\u00b2)\n- \\( p \\) is the fluid density (Kg/m\u00b3)\n- \\( A \\) is the cross-sectional area of the sphere (m\u00b2)\n- \\( C_d \\) is the drag coefficient (dimensionless)\n\nYour function should:\n- Accept four parameters: `mass`, `density`, `area`, and `drag_coefficient`.\n- Validate that all inputs are positive. If any input is non-positive, raise a `ValueError` with a clear message.\n- Return the terminal velocity as a float.\n\n**Constraints:**\n- \\( 1 \\leq \\text{mass} \\leq 1000 \\)\n- \\( 1 \\leq \\text{density} \\leq 1000 \\)\n- \\( 0.001 \\leq \\text{area} \\leq 1 \\)\n- \\( 0.1 \\leq \\text{drag_coefficient} \\leq 1 \\)\n\n**Function Signature:**\n```python\ndef terminal_velocity(mass: float, density: float, area: float, drag_coefficient: float) -> float:\n    pass\n```\n\n**Example:**\n```python\nassert terminal_velocity(0.5, 750, 0.05, 0.47) == 1.6416094135332785\nassert terminal_velocity(1, 1000, 0.1, 0.5) == 1.9843136660766868\n```\n\n**Note:**\nEnsure your function handles all edge cases as specified.",
  "solution_code": "def terminal_velocity(mass: float, density: float, area: float, drag_coefficient: float) -> float:\n    \"\"\"\n    Calculates the terminal velocity of a sphere given its mass, fluid density, cross-sectional area, and drag coefficient.\n    \"\"\"\n    if mass <= 0 or density <= 0 or area <= 0 or drag_coefficient <= 0:\n        raise ValueError(\"All input parameters must be positive.\")\n\n    g = 9.81  # Acceleration due to gravity\n    terminal_velocity = (2 * mass * g / (density * area * drag_coefficient))**0.5\n    return terminal_velocity",
  "test_code": "``\nimport pytest\n\ndef test_terminal_velocity_positive_values():\n    result = terminal_velocity(0.5, 750, 0.05, 0.47)\n    assert round(result, 8) == 1.6416094135332785\n\ndef test_terminal_velocity_positive_values_2():\n    result = terminal_velocity(1, 1000, 0.1, 0.5)\n    assert round(result, 8) == 1.9843136660766868\n\ndef test_terminal_velocity_zero_mass():\n    with pytest.raises(ValueError, match=\"All input parameters must be positive.\"):\n        terminal_velocity(0, 750, 0.05, 0.47)\n\ndef test_terminal_velocity_zero_density():\n    with pytest.raises(ValueError, match=\"All input parameters must be positive.\"):\n        terminal_velocity(0.5, 0, 0.05, 0.47)\n\ndef test_terminal_velocity_zero_area():\n    with pytest.raises(ValueError, match=\"All input parameters must be positive.\"):\n        terminal_velocity(0.5, 750, 0, 0.47)\n\ndef test_terminal_velocity_zero_drag_coefficient():\n    with pytest.raises(ValueError, match=\"All input parameters must be positive.\"):\n        terminal_velocity(0.5, 750, 0.05, 0)\n\ndef test_terminal_velocity_min_values():\n    result = terminal_velocity(1, 1, 0.001, 0.1)\n    assert round(result, 8) == 1.9843136660766868\n\ndef test_terminal_velocity_max_values():\n    result = terminal_velocity(1000, 1000, 1, 1)\n    assert round(result, 8) == 31.30495168499705\n\ndef test_terminal_velocity_mixed_sign_values():\n    with pytest.raises(ValueError, match=\"All input parameters must be positive.\"):\n        terminal_velocity(-1, 750, 0.05, 0.47)",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}