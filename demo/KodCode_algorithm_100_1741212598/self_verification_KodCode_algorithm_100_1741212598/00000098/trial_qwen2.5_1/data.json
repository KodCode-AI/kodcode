{
  "metadata": {
    "prompt_id": "00000098",
    "row_id": 98,
    "seed_ids": [
      142
    ],
    "mode": "algorithm"
  },
  "instruction": "**Question:**\n\nIn a fluid dynamics simulation, you are given the mass of a sphere, the density of the fluid, the cross-sectional area of the sphere, and its drag coefficient. Your task is to implement a function to calculate the terminal velocity of the sphere using the provided data.\n\nThe terminal velocity is calculated using the formula:\n\\[ V_t = \\left( \\frac{2 \\cdot m \\cdot g}{p \\cdot A \\cdot C_d} \\right)^{0.5} \\]\n\nWhere:\n- \\( V_t \\) is the terminal velocity (m/s)\n- \\( m \\) is the mass of the sphere (Kg)\n- \\( g \\) is the acceleration due to gravity (9.81 m/s\u00b2)\n- \\( p \\) is the fluid density (Kg/m\u00b3)\n- \\( A \\) is the cross-sectional area of the sphere (m\u00b2)\n- \\( C_d \\) is the drag coefficient (dimensionless)\n\nYour function should:\n- Accept four parameters: `mass`, `density`, `area`, and `drag_coefficient`.\n- Validate that all inputs are positive. If any input is non-positive, raise a `ValueError` with a clear message.\n- Return the terminal velocity as a float.\n\n**Constraints:**\n- \\( 1 \\leq \\text{mass} \\leq 1000 \\)\n- \\( 1 \\leq \\text{density} \\leq 1000 \\)\n- \\( 0.001 \\leq \\text{area} \\leq 1 \\)\n- \\( 0.1 \\leq \\text{drag_coefficient} \\leq 1 \\)\n\n**Function Signature:**\n```python\ndef terminal_velocity(mass: float, density: float, area: float, drag_coefficient: float) -> float:\n    pass\n```\n\n**Example:**\n```python\nassert terminal_velocity(0.5, 750, 0.05, 0.47) == 1.6416094135332785\nassert terminal_velocity(1, 1000, 0.1, 0.5) == 1.9843136660766868\n```\n\n**Note:**\nEnsure your function handles all edge cases as specified.",
  "solution_code": "def terminal_velocity(mass: float, density: float, area: float, drag_coefficient: float) -> float:\n    \"\"\"\n    Calculates the terminal velocity of a sphere based on given parameters.\n    \n    :param mass: Mass of the sphere in kilograms (Kg).\n    :param density: Density of the fluid in kilograms per cubic meter (Kg/m\u00b3).\n    :param area: Cross-sectional area of the sphere in square meters (m\u00b2).\n    :param drag_coefficient: Drag coefficient (dimensionless).\n    :return: Terminal velocity in meters per second (m/s).\n    \n    Raises ValueError for non-positive inputs.\n    \"\"\"\n    if mass <= 0 or density <= 0 or area <= 0 or drag_coefficient <= 0:\n        raise ValueError(\"All inputs must be positive.\")\n    \n    g = 9.81  # acceleration due to gravity (m/s\u00b2)\n    numerator = 2 * mass * g\n    denominator = density * area * drag_coefficient\n    vt = (numerator / denominator) ** 0.5\n    return vt",
  "test_code": "import pytest\n\ndef test_terminal_velocity_positive_values():\n    assert round(terminal_velocity(0.5, 750, 0.05, 0.47), 10) == 1.6416094135\n    assert round(terminal_velocity(1, 1000, 0.1, 0.5), 10) == 1.9843136661\n\ndef test_terminal_velocity_zero_value():\n    with pytest.raises(ValueError):\n        terminal_velocity(0.5, 750, 0.05, 0.47)\n        terminal_velocity(0, 750, 0.05, 0.47)\n        terminal_velocity(0.5, 0, 0.05, 0.47)\n        terminal_velocity(0.5, 750, 0, 0.47)\n        terminal_velocity(0.5, 750, 0.05, 0)\n\ndef test_terminal_velocity_negative_values():\n    with pytest.raises(ValueError):\n        terminal_velocity(-0.5, 750, 0.05, 0.47)\n        terminal_velocity(0.5, -750, 0.05, 0.47)\n        terminal_velocity(0.5, 750, -0.05, 0.47)\n        terminal_velocity(0.5, 750, 0.05, -0.47)\n\ndef test_terminal_velocity_out_of_range():\n    with pytest.raises(ValueError):\n        terminal_velocity(1001, 750, 0.05, 0.47)\n        terminal_velocity(0.5, 1001, 0.05, 0.47)\n        terminal_velocity(0.5, 750, 0.00099, 0.47)\n        terminal_velocity(0.5, 750, 0.05, 0.099)",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}