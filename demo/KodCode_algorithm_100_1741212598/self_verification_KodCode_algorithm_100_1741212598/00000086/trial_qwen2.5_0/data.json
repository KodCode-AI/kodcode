{
  "metadata": {
    "prompt_id": "00000086",
    "row_id": 86,
    "seed_ids": [
      181
    ],
    "mode": "algorithm"
  },
  "instruction": "You are working on a project that requires calculating various electrical properties in an electrical circuit. Your task is to extend the given `ind_reactance` function to handle an additional property, `capacitive reactance` (\\(X_C\\)), which is the reactance of a capacitor and is defined as \\(X_C = \\frac{1}{2\\pi fC}\\), where \\(f\\) is the frequency and \\(C\\) is the capacitance.\n\nYou need to implement a function `electrical_properties` that can calculate any one of the four properties: inductance (\\(L\\)), frequency (\\(f\\)), inductive reactance (\\(X_L\\)), or capacitive reactance (\\(X_C\\)), given the other three properties. Your function should validate the inputs and raise a `ValueError` if the inputs are invalid.\n\n**Function Signature**:\n```python\nfrom typing import Union\n\ndef electrical_properties(\n    l: float = None,\n    f: float = None,\n    x_l: float = None,\n    x_c: float = None,\n) -> Union[float, dict[str, float]]:\n    \"\"\"\n    Calculate one of the electrical properties (inductance, frequency, inductive reactance, or capacitive reactance)\n    given the other three properties. Exactly one property must be `None`.\n\n    Parameters:\n    l (float): Inductance in Henries.\n    f (float): Frequency in Hertz.\n    x_l (float): Inductive reactance in Ohms.\n    x_c (float): Capacitive reactance in Ohms.\n    \n    Returns:\n    Union[float, dict[str, float]]: The calculated property as a float or a dictionary with the calculated property.\n    \n    Raises:\n    ValueError: If more than one property is `None` or if any of the given values are negative.\n    \"\"\"\n```\n\n**Example Usage**:\n```python\n# Calculate inductance given frequency and inductive reactance\nprint(electrical_properties(f=1000, x_l=219.9, l=None))  # {'inductance': 35.0e-6}\n\n# Calculate frequency given inductance and inductive reactance\nprint(electrical_properties(l=35e-6, x_l=219.9, f=None))  # {'frequency': 1000.0}\n\n# Calculate inductive reactance given inductance and frequency\nprint(electrical_properties(l=35e-6, f=1000, x_l=None))  # {'inductive reactance': 219.9}\n\n# Calculate capacitance given frequency and capacitive reactance\nprint(electrical_properties(f=1000, x_c=50, c=None))  # {'capacitance': 636619.7723675814e-9}\n\n# Example with invalid inputs\n# print(electrical_properties(f=-1000, x_c=50, c=None))  # Raises ValueError: Frequency cannot be negative\n```\n\n**Constraints**:\n- The input values should be within the range of typical electrical values.\n- The function should handle edge cases such as negative values and ensure only one property is `None`.",
  "solution_code": "from typing import Union\n\ndef electrical_properties(\n    l: float = None,\n    f: float = None,\n    x_l: float = None,\n    x_c: float = None,\n) -> Union[float, dict[str, float]]:\n    \"\"\"\n    Calculate one of the electrical properties (inductance, frequency, inductive reactance, or capacitive reactance)\n    given the other three properties. Exactly one property must be `None`.\n\n    Parameters:\n    l (float): Inductance in Henries.\n    f (float): Frequency in Hertz.\n    x_l (float): Inductive reactance in Ohms.\n    x_c (float): Capacitive reactance in Ohms.\n    \n    Returns:\n    Union[float, dict[str, float]]: The calculated property as a float or a dictionary with the calculated property.\n    \n    Raises:\n    ValueError: If more than one property is `None` or if any of the given values are negative.\n    \"\"\"\n    if l is not None and f is not None and x_l is not None and x_c is not None:\n        raise ValueError(\"Exactly one property must be None\")\n    \n    if l is not None and f is not None and x_l is None and x_c is None:\n        x_l = 2 * 3.14159 * f * l\n        return {'inductive reactance': x_l}\n    elif l is not None and f is None and x_l is not None and x_c is None:\n        f = x_l / (2 * 3.14159 * l)\n        return {'frequency': f}\n    elif l is not None and f is None and x_l is None and x_c is not None:\n        l = 1 / (2 * 3.14159 * f * x_c)\n        return {'inductance': l}\n    elif f is not None and x_c is not None and l is None and x_l is None:\n        c = 1 / (2 * 3.14159 * f * x_c)\n        return {'capacitance': c}\n    else:\n        raise ValueError(\"Invalid input configuration\")",
  "test_code": "from solution import electrical_properties\n\ndef test_electrical_properties_valid_input():\n    # Test calculating inductance given frequency and inductive reactance\n    assert electrical_properties(f=1000, x_l=219.9, l=None) == {'inductance': 35.0e-6}\n    \n    # Test calculating frequency given inductance and inductive reactance\n    assert electrical_properties(l=35e-6, x_l=219.9, f=None) == {'frequency': 1000.0}\n    \n    # Test calculating inductive reactance given inductance and frequency\n    assert electrical_properties(l=35e-6, f=1000, x_l=None) == {'inductive reactance': 219.9}\n    \n    # Test calculating capacitance given frequency and capacitive reactance\n    assert electrical_properties(f=1000, x_c=50, c=None) == {'capacitance': 636619.7723675814e-9}\n\ndef test_electrical_properties_invalid_input():\n    # Invalid input with more than one property as None\n    try:\n        electrical_properties(l=35e-6, f=1000, x_l=219.9, x_c=None)\n    except ValueError as e:\n        assert str(e) == \"Exactly one property must be None\"\n\n    # Invalid input with negative values\n    try:\n        electrical_properties(l=-35e-6, f=1000, x_l=219.9, x_c=None)\n    except ValueError as e:\n        assert str(e) == \"Invalid input configuration\"\n\n    try:\n        electrical_properties(l=35e-6, f=-1000, x_l=219.9, x_c=None)\n    except ValueError as e:\n        assert str(e) == \"Frequency cannot be negative\"\n\n    try:\n        electrical_properties(l=35e-6, f=1000, x_l=-219.9, x_c=None)\n    except ValueError as e:\n        assert str(e) == \"Invalid input configuration\"",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}