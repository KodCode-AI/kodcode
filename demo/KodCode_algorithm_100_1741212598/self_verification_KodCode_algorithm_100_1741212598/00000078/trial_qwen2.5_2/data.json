{
  "metadata": {
    "prompt_id": "00000078",
    "row_id": 78,
    "seed_ids": [
      455
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with enhancing the `convert_currency` function to handle a more complex scenario. The function should be able to convert multiple currency amounts in one API call and return the results in a formatted string. Additionally, the function should handle invalid inputs and provide appropriate error messages.\n\n**Function Signature**:\n```python\ndef convert_currency_multiple(\n    api_key: str,\n    from_currency: str,\n    to_currency: str,\n    amounts: List[float],\n) -> str:\n    \"\"\"\n    Convert multiple currency amounts from one currency to another using the Amdoren Currency API.\n\n    :param api_key: API key for the Amdoren Currency API.\n    :param from_currency: Currency to convert from.\n    :param to_currency: Currency to convert to.\n    :param amounts: List of amounts to convert.\n    :return: A formatted string containing the converted amounts or an error message.\n\n    Example:\n    >>> convert_currency_multiple(\"your_api_key\", \"USD\", \"INR\", [1.0, 2.5, 3.0])\n    '1.0: 74.65 INR, 2.5: 186.63 INR, 3.0: 223.98 INR'\n    \"\"\"\n```\n\n**Constraints**:\n- The `from_currency`, `to_currency`, and `amounts` parameters must be provided.\n- The `from_currency` and `to_currency` must be valid currency codes.\n- The `amounts` list can contain up to 100 elements.\n- The API key is valid and provided.\n\n**Edge Cases**:\n- Handle cases where the currency codes are invalid.\n- Handle cases where the amounts list is empty.\n- Handle the case where the API fails to respond or returns an error.\n\n**Performance Requirements**:\n- The function should make the minimum number of API calls to convert the amounts.\n- The function should return a formatted string with the converted amounts or an error message.\n\nImplement the `convert_currency_multiple` function to meet the requirements.",
  "solution_code": "from typing import List\n\ndef convert_currency_multiple(\n    api_key: str,\n    from_currency: str,\n    to_currency: str,\n    amounts: List[float],\n) -> str:\n    \"\"\"\n    Convert multiple currency amounts from one currency to another using the Amdoren Currency API.\n\n    :param api_key: API key for the Amdoren Currency API.\n    :param from_currency: Currency to convert from.\n    :param to_currency: Currency to convert to.\n    :param amounts: List of amounts to convert.\n    :return: A formatted string containing the converted amounts or an error message.\n    \"\"\"\n    if not amounts:\n        return \"Error: No amounts provided\"\n\n    try:\n        import requests\n    except ImportError:\n        return \"Error: Missing required package 'requests'\"\n\n    base_url = \"https://api.amdoren.com/api/v1/convert\"\n    params = {\n        \"apikey\": api_key,\n        \"from\": from_currency,\n        \"to\": to_currency,\n        \"amounts\": \",\".join(map(str, amounts))\n    }\n\n    response = requests.get(base_url, params=params)\n    if response.status_code != 200:\n        return f\"Error: API request failed with status {response.status_code}\"\n\n    data = response.json()\n    if data.get(\"error\"):\n        return data[\"error\"]\n\n    converted_amounts = []\n    for amount, converted in zip(amounts, data[\"converted\"]):\n        converted_amounts.append(f\"{amount}: {converted} {to_currency}\")\n\n    return \", \".join(converted_amounts)",
  "test_code": "import pytest\nfrom unittest.mock import patch, MagicMock\n\ndef test_convert_currency_multiple_positive():\n    with patch('requests.get') as mock_get:\n        mock_response = MagicMock()\n        mock_response.status_code = 200\n        mock_response.json.return_value = {\n            \"converted\": [74.65, 186.63, 223.98]\n        }\n        mock_get.return_value = mock_response\n        result = convert_currency_multiple(\"api_key\", \"USD\", \"INR\", [1.0, 2.5, 3.0])\n        assert result == \"1.0: 74.65 INR, 2.5: 186.63 INR, 3.0: 223.98 INR\"\n\ndef test_convert_currency_multiple_no_amounts():\n    result = convert_currency_multiple(\"api_key\", \"USD\", \"INR\", [])\n    assert result == \"Error: No amounts provided\"\n\ndef test_convert_currency_multiple_api_failure():\n    with patch('requests.get') as mock_get:\n        mock_response = MagicMock()\n        mock_response.status_code = 500\n        mock_get.return_value = mock_response\n        result = convert_currency_multiple(\"api_key\", \"USD\", \"INR\", [1.0])\n        assert result == \"Error: API request failed with status 500\"\n\ndef test_convert_currency_multiple_api_failure_with_error_message():\n    with patch('requests.get') as mock_get:\n        mock_response = MagicMock()\n        mock_response.status_code = 500\n        mock_response.json.return_value = {\"error\": \"API failure\"}\n        mock_get.return_value = mock_response\n        result = convert_currency_multiple(\"api_key\", \"USD\", \"INR\", [1.0])\n        assert result == \"API failure\"\n\ndef test_convert_currency_multiple_missing_package():\n    with patch.dict('sys.modules', requests=None):\n        result = convert_currency_multiple(\"api_key\", \"USD\", \"INR\", [1.0])\n        assert result == \"Error: Missing required package 'requests'\"\n\ndef test_convert_currency_multiple_invalid_currency_codes():\n    result = convert_currency_multiple(\"api_key\", \"XXX\", \"YYY\", [1.0])\n    assert \"Invalid currency code\" in result",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}