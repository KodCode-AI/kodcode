{
  "metadata": {
    "prompt_id": "00000078",
    "row_id": 78,
    "seed_ids": [
      455
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with enhancing the `convert_currency` function to handle a more complex scenario. The function should be able to convert multiple currency amounts in one API call and return the results in a formatted string. Additionally, the function should handle invalid inputs and provide appropriate error messages.\n\n**Function Signature**:\n```python\ndef convert_currency_multiple(\n    api_key: str,\n    from_currency: str,\n    to_currency: str,\n    amounts: List[float],\n) -> str:\n    \"\"\"\n    Convert multiple currency amounts from one currency to another using the Amdoren Currency API.\n\n    :param api_key: API key for the Amdoren Currency API.\n    :param from_currency: Currency to convert from.\n    :param to_currency: Currency to convert to.\n    :param amounts: List of amounts to convert.\n    :return: A formatted string containing the converted amounts or an error message.\n\n    Example:\n    >>> convert_currency_multiple(\"your_api_key\", \"USD\", \"INR\", [1.0, 2.5, 3.0])\n    '1.0: 74.65 INR, 2.5: 186.63 INR, 3.0: 223.98 INR'\n    \"\"\"\n```\n\n**Constraints**:\n- The `from_currency`, `to_currency`, and `amounts` parameters must be provided.\n- The `from_currency` and `to_currency` must be valid currency codes.\n- The `amounts` list can contain up to 100 elements.\n- The API key is valid and provided.\n\n**Edge Cases**:\n- Handle cases where the currency codes are invalid.\n- Handle cases where the amounts list is empty.\n- Handle the case where the API fails to respond or returns an error.\n\n**Performance Requirements**:\n- The function should make the minimum number of API calls to convert the amounts.\n- The function should return a formatted string with the converted amounts or an error message.\n\nImplement the `convert_currency_multiple` function to meet the requirements.",
  "solution_code": "from typing import List\nimport requests\n\ndef convert_currency_multiple(\n    api_key: str,\n    from_currency: str,\n    to_currency: str,\n    amounts: List[float],\n) -> str:\n    \"\"\"\n    Convert multiple currency amounts from one currency to another using the Amdoren Currency API.\n\n    :param api_key: API key for the Amdoren Currency API.\n    :param from_currency: Currency to convert from.\n    :param to_currency: Currency to convert to.\n    :param amounts: List of amounts to convert.\n    :return: A formatted string containing the converted amounts or an error message.\n    \"\"\"\n    try:\n        # Check if the list is empty\n        if not amounts:\n            return \"Error: The list of amounts is empty.\"\n\n        # Make the API call with the minimum number of calls\n        url = f\"https://api.amdoren.com/currency/v1/convert\"\n        response = requests.post(\n            url,\n            params={\n                \"apikey\": api_key,\n                \"from\": from_currency,\n                \"to\": to_currency\n            },\n            json={\"amounts\": amounts}\n        )\n\n        if response.status_code != 200:\n            return \"Error: The API call failed. Please check your internet connection or try again later.\"\n\n        data = response.json()\n        if 'results' not in data:\n            return \"Error: Invalid response from the API.\"\n\n        # Format the output\n        formatted_output = \", \".join([f\"{amount}: {converted_amount} {to_currency}\" for amount, converted_amount in zip(amounts, data['results'])])\n        return formatted_output\n    except Exception as e:\n        return f\"Error: {str(e)}\"",
  "test_code": "import pytest\nfrom pytest_mock import MockerFixture\nfrom requests.models import Response\n\ndef mock_api_response(mocker, status_code=200, json_data=None):\n    response = Response()\n    response.status_code = status_code\n    response.json = lambda: json_data if json_data else {}\n    return mocker.patch('requests.post', return_value=response)\n\ntest_data = [\n    (\n        \"your_api_key\",\n        \"USD\",\n        \"INR\",\n        [1.0, 2.5, 3.0],\n        \"1.0: 74.65 INR, 2.5: 186.63 INR, 3.0: 223.98 INR\"\n    ),\n    (\n        \"wrong_api_key\",\n        \"USD\",\n        \"EUR\",\n        [1.0, 2.5, 3.0],\n        \"Error: The API call failed. Please check your internet connection or try again later.\"\n    ),\n    (\n        \"your_api_key\",\n        \"INVALID_CURRENCY\",\n        \"EUR\",\n        [1.0, 2.5, 3.0],\n        \"Error: Invalid response from the API.\"\n    ),\n    (\n        \"your_api_key\",\n        \"USD\",\n        \"EUR\",\n        [],\n        \"Error: The list of amounts is empty.\"\n    ),\n    (\n        \"your_api_key\",\n        \"USD\",\n        \"EUR\",\n        [1.0, 2.5, 3.0, 101.0],  # More than 100 elements\n        \"Error: The list of amounts is empty.\"\n    ),\n]\n\n@pytest.mark.parametrize(\"api_key, from_currency, to_currency, amounts, expected_output\", test_data)\ndef test_convert_currency_multiple(\n    api_key: str,\n    from_currency: str,\n    to_currency: str,\n    amounts: List[float],\n    expected_output: str,\n    mocker: MockerFixture\n) -> None:\n    mock_api_response(mocker)\n    result = convert_currency_multiple(api_key, from_currency, to_currency, amounts)\n    assert result == expected_output",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}