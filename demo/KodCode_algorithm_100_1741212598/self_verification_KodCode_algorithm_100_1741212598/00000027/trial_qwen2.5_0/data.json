{
  "metadata": {
    "prompt_id": "00000027",
    "row_id": 27,
    "seed_ids": [
      63
    ],
    "mode": "algorithm"
  },
  "instruction": "### Context:\nYou are tasked with enhancing a Vigen\u00e8re Cipher implementation to support both encryption and decryption. Your goal is to handle a larger set of characters, including spaces and punctuation, and to ensure the function is robust against edge cases.\n\n### Problem Statement:\nImplement the `encrypt_message` and `decrypt_message` functions to correctly handle a message that may contain uppercase and lowercase letters, spaces, and punctuation marks as defined in the `LETTERS` string. Your implementation should maintain the case of the original message and should correctly handle the keyword wrapping for each character.\n\n### Requirements:\n- **Input**:\n  - `key`: A string representing the encryption/decryption key.\n  - `message`: A string representing the message to be encrypted or decrypted.\n  - `mode`: A string that is either `\"encrypt\"` or `\"decrypt\"`.\n\n- **Output**:\n  - Return the translated message as a string.\n\n- **Constraints**:\n  - The key can consist of any alphanumeric characters.\n  - The message can contain uppercase and lowercase letters, spaces, and punctuation marks.\n  - The `LETTERS` string includes all uppercase and lowercase English letters, as well as digits.\n\n### Example:\n```python\n# Example 1: Encryption\nkey = 'HDarji'\nmessage = 'This is Harshil Darji from Dharmaj.'\nmode = 'encrypt'\ntranslate_message(key, message, mode)  # Output: 'Akij ra Odrjqqs Gaisq muod Mphumrs.'\n\n# Example 2: Decryption\nkey = 'HDarji'\nmessage = 'Akij ra Odrjqqs Gaisq muod Mphumrs.'\nmode = 'decrypt'\ntranslate_message(key, message, mode)  # Output: 'This is Harshil Darji from Dharmaj.'\n```\n\n### Implementation:\n```python\nLETTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 .,!?\"\n\ndef encrypt_message(key: str, message: str) -> str:\n    return translate_message(key, message, \"encrypt\")\n\ndef decrypt_message(key: str, message: str) -> str:\n    return translate_message(key, message, \"decrypt\")\n\ndef translate_message(key: str, message: str, mode: str) -> str:\n    # Your implementation here\n```\n\n### Submission:\n- Ensure your implementation is efficient and handles all specified requirements and examples correctly.",
  "solution_code": "def encrypt_message(key: str, message: str) -> str:\n    return translate_message(key, message, \"encrypt\")\n\ndef decrypt_message(key: str, message: str) -> str:\n    return translate_message(key, message, \"decrypt\")\n\ndef translate_message(key: str, message: str, mode: str) -> str:\n    # Build encrypted/decrypted message string\n    translated = []\n\n    key_index = 0\n    for symbol in message:\n        num = LETTERS.find(symbol)\n        if num != -1:\n            if mode == 'encrypt':\n                num += LETTERS.find(key[key_index % len(key)])\n            elif mode == 'decrypt':\n                num -= LETTERS.find(key[key_index % len(key)])\n            \n            num %= len(LETTERS)\n            \n            if symbol.isupper():\n                translated.append(LETTERS[num].upper())\n            elif symbol.islower():\n                translated.append(LETTERS[num].lower())\n            elif symbol in ' .,!?':\n                translated.append(symbol)\n            else:\n                translated.append(LETTERS[num])\n            \n            key_index += 1\n        else:\n            translated.append(symbol)  # For non-letter characters\n\n    return ''.join(translated)",
  "test_code": "def test_encrypt_decrypt_cycle():\n    key = 'HDarji'\n    message = 'This is Harshil Darji from Dharmaj.'\n    encrypted_message = encrypt_message(key, message)\n    decrypted_message = decrypt_message(key, encrypted_message)\n    assert decrypted_message == message\n\ndef test_case_maintenance():\n    key = 'HDarji'\n    message = 'T3st, MiXed! 123'\n    translated_message = translate_message(key, message, 'encrypt')\n    assert translated_message.isalnum() or translated_message.isalpha() or all(c in ' ,!?' for c in translated_message)\n\ndef test_punctuation():\n    key = 'HDarji'\n    message = 'Hello, World!'\n    encrypted_message = translate_message(key, message, 'encrypt')\n    assert encrypted_message.startswith('Akij, Lloq!')\n\ndef testspecialchars():\n    key = 'HDarji'\n    message = 'Special $%^&*() Characters'\n    encrypted_message = translate_message(key, message, 'encrypt')\n    assert encrypted_message.startswith('Dnqrbt $%^&*() Characters')\n\ndef test_long_message():\n    key = 'SimpleKey'\n    message = 'A quick brown fox jumps over the lazy dog. 0123456789'\n    encrypted_message = translate_message(key, message, 'encrypt')\n    decrypted_message = translate_message(key, encrypted_message, 'decrypt')\n    assert decrypted_message == message\n\ndef test_empty_message():\n    key = 'HDarji'\n    message = ''\n    assert translate_message(key, message, 'encrypt') == ''\n    assert translate_message(key, message, 'decrypt') == ''\n\ndef test_spaces():\n    key = 'HDarji'\n    message = 'Some Random Text   Spaces    '\n    translated_message = translate_message(key, message, 'encrypt')\n    assert 'J vlu Ftvzvh Ayow     )vkhq      ' in translated_message",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}