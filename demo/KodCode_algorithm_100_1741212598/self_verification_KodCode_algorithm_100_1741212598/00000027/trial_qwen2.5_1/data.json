{
  "metadata": {
    "prompt_id": "00000027",
    "row_id": 27,
    "seed_ids": [
      63
    ],
    "mode": "algorithm"
  },
  "instruction": "### Context:\nYou are tasked with enhancing a Vigen\u00e8re Cipher implementation to support both encryption and decryption. Your goal is to handle a larger set of characters, including spaces and punctuation, and to ensure the function is robust against edge cases.\n\n### Problem Statement:\nImplement the `encrypt_message` and `decrypt_message` functions to correctly handle a message that may contain uppercase and lowercase letters, spaces, and punctuation marks as defined in the `LETTERS` string. Your implementation should maintain the case of the original message and should correctly handle the keyword wrapping for each character.\n\n### Requirements:\n- **Input**:\n  - `key`: A string representing the encryption/decryption key.\n  - `message`: A string representing the message to be encrypted or decrypted.\n  - `mode`: A string that is either `\"encrypt\"` or `\"decrypt\"`.\n\n- **Output**:\n  - Return the translated message as a string.\n\n- **Constraints**:\n  - The key can consist of any alphanumeric characters.\n  - The message can contain uppercase and lowercase letters, spaces, and punctuation marks.\n  - The `LETTERS` string includes all uppercase and lowercase English letters, as well as digits.\n\n### Example:\n```python\n# Example 1: Encryption\nkey = 'HDarji'\nmessage = 'This is Harshil Darji from Dharmaj.'\nmode = 'encrypt'\ntranslate_message(key, message, mode)  # Output: 'Akij ra Odrjqqs Gaisq muod Mphumrs.'\n\n# Example 2: Decryption\nkey = 'HDarji'\nmessage = 'Akij ra Odrjqqs Gaisq muod Mphumrs.'\nmode = 'decrypt'\ntranslate_message(key, message, mode)  # Output: 'This is Harshil Darji from Dharmaj.'\n```\n\n### Implementation:\n```python\nLETTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 .,!?\"\n\ndef encrypt_message(key: str, message: str) -> str:\n    return translate_message(key, message, \"encrypt\")\n\ndef decrypt_message(key: str, message: str) -> str:\n    return translate_message(key, message, \"decrypt\")\n\ndef translate_message(key: str, message: str, mode: str) -> str:\n    # Your implementation here\n```\n\n### Submission:\n- Ensure your implementation is efficient and handles all specified requirements and examples correctly.",
  "solution_code": "def encrypt_message(key: str, message: str) -> str:\n    return translate_message(key, message, \"encrypt\")\n\ndef decrypt_message(key: str, message: str) -> str:\n    return translate_message(key, message, \"decrypt\")\n\ndef translate_message(key: str, message: str, mode: str) -> str:\n    translated = []\n    key_index = 0\n    for char in message:\n        num = LETTERS.find(char)\n        if num != -1:\n            if mode == \"encrypt\":\n                new_index = (num + LETTERS.find(key[key_index])) % 63\n            elif mode == \"decrypt\":\n                new_index = (num - LETTERS.find(key[key_index])) % 63\n            translated.append(LETTERS[new_index])\n            key_index = (key_index + 1) % len(key)\n        else:\n            translated.append(char)\n    return \"\".join(translated)",
  "test_code": "from solution import encrypt_message, decrypt_message, LETTERS\n\ndef test_encrypt_decrypt_roundtrip():\n    key = 'HDarji'\n    message = 'This is Harshil Darji from Dharmaj.'\n    encrypted = encrypt_message(key, message)\n    decrypted = decrypt_message(key, encrypted)\n    assert decrypted == message\n\ndef test_encryption():\n    key = 'HDarji'\n    message = 'Akij ra Odrjqqs Gaisq muod Mphumrs.'\n    encrypted = encrypt_message(key, message)\n    assert encrypted == 'This is Harshil Darji from Dharmaj.'\n\ndef test_decryption():\n    key = 'HDarji'\n    message = 'This is Harshil Darji from Dharmaj.'\n    encrypted = encrypt_message(key, message)\n    decrypted = decrypt_message(key, encrypted)\n    assert decrypted == message\n\ndef test_spaces_and_punctuation():\n    key = 'HDarji'\n    message = 'Hello, World!'\n    encrypted = encrypt_message(key, message)\n    decrypted = decrypt_message(key, encrypted)\n    assert decrypted == message\n\ndef test_case_maintenance():\n    key = 'HDarji'\n    message = 'This Is Test Message!'\n    encrypted = encrypt_message(key, message)\n    decrypted = decrypt_message(key, encrypted)\n    assert decrypted == message\n\ndef test_caps_and_special_chars():\n    key = 'HDarji'\n    message = 'This Is A Test Message!!!'\n    encrypted = encrypt_message(key, message)\n    decrypted = decrypt_message(key, encrypted)\n    assert decrypted == message\n\ndef test_small_key():\n    key = 'A'\n    message = 'This is a test message.'\n    encrypted = encrypt_message(key, message)\n    decrypted = decrypt_message(key, encrypted)\n    assert decrypted == message\n\ndef test_large_key():\n    key = 'HDarjiHDarjiHDarji'\n    message = 'This is another test message.'\n    encrypted = encrypt_message(key, message)\n    decrypted = decrypt_message(key, encrypted)\n    assert decrypted == message\n\ndef test_empty_key():\n    key = ''\n    message = 'This is an empty key message.'\n    encrypted = encrypt_message(key, message)\n    decrypted = decrypt_message(key, encrypted)\n    assert decrypted == message",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}