{
  "metadata": {
    "prompt_id": "00000081",
    "row_id": 81,
    "seed_ids": [
      611
    ],
    "mode": "algorithm"
  },
  "instruction": "Given the following code for checking and counting right triangles on a grid from the origin, you are to optimize the solution to compute the number of right triangles more efficiently.\n\n#### Function Description\n\nYou need to implement a function `optimized_solution` that returns the number of right triangles \\( \\Delta OPQ \\) that can be formed by points \\( P(x1, y1) \\) and \\( Q(x2, y2) \\) with coordinates between 0 and a given limit `limit` inclusive.\n\n#### Constraints\n\n- \\(0 \\leq x1, y1, x2, y2 \\leq \\text{limit}\\)\n- \\(0 \\leq \\text{limit} \\leq 50\\)\n\n#### Example\n\n```python\ndef optimized_solution(limit: int) -> int:\n    # Your implementation goes here\n```\n\n#### Expected Output\n\nThe function should return the number of right triangles that can be formed.\n\n#### Performance Requirements\n\nOptimize the solution to handle the maximum limit of 50 efficiently.",
  "solution_code": "def optimized_solution(limit: int) -> int:\n    \"\"\"\n    Returns the number of right triangles that can be formed with the given limit.\n    \"\"\"\n    total_triangles = 0\n    max_x = limit + 1\n    max_y = limit + 1\n\n    # Counting triangles with horizontal or vertical legs\n    for x in range(max_x):\n        for y in range(max_y):\n            total_triangles += x * y * (limit - x + 1) * (limit - y + 1)\n\n    return total_triangles",
  "test_code": "def test_optimized_solution():\n    assert optimized_solution(1) == 4\n    assert optimized_solution(2) == 32\n    assert optimized_solution(5) == 1200\n    assert optimized_solution(10) == 120000\n    assert optimized_solution(50) == 3125000000",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}