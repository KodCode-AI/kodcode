{
  "metadata": {
    "prompt_id": "00000085",
    "row_id": 85,
    "seed_ids": [
      721
    ],
    "mode": "algorithm"
  },
  "instruction": "Design a Python function `real_quadratic_roots` that calculates the real roots of a quadratic equation based on the given coefficients \\(a\\), \\(b\\), and \\(c\\). The function should return the roots as a tuple of real numbers. If the roots are not real, the function should return an empty tuple. Additionally, if the coefficient \\(a\\) is zero, the function should raise a `ValueError` with the message \"Coefficient 'a' must not be zero.\".\n\n**Function Signature**:\n```python\ndef real_quadratic_roots(a: int, b: int, c: int) -> tuple[float, ...]:\n    pass\n```\n\n**Input and Output**:\n- **Input**: Three integers \\(a\\), \\(b\\), and \\(c\\) representing the coefficients of the quadratic equation \\(ax^2 + bx + c = 0\\).\n- **Output**: A tuple of two real numbers representing the real roots of the equation. If the equation has no real roots, return an empty tuple `()`.\n\n**Constraints**:\n- \\(a\\), \\(b\\), and \\(c\\) are integers.\n- \\(-1000 \\leq a, b, c \\leq 1000\\).\n\n**Example**:\n```python\nassert real_quadratic_roots(1, -3, 2) == (1.0, 2.0)\nassert real_quadratic_roots(1, 2, 1) == (-1.0, -1.0)\nassert real_quadratic_roots(1, -5, 6) == (2.0, 3.0)\nassert real_quadratic_roots(1, -5, 7) == ()\n```\n\n**Performance Requirement**:\n- The function should be efficient and handle the given constraints effectively.",
  "solution_code": "def real_quadratic_roots(a: int, b: int, c: int) -> tuple[float, ...]:\n    \"\"\"\n    Calculate the real roots of a quadratic equation based on given coefficients a, b, and c.\n    Returns a tuple of real roots (if there are any) or an empty tuple if the roots are not real.\n    Raises ValueError if a is zero.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must not be zero.\")\n    \n    discriminant = b**2 - 4*a*c\n\n    if discriminant < 0:\n        return ()\n    elif discriminant == 0:\n        return (-b / (2*a),)\n    else:\n        sqrt_discriminant = discriminant**0.5\n        root1 = (-b + sqrt_discriminant) / (2*a)\n        root2 = (-b - sqrt_discriminant) / (2*a)\n        return (root1, root2)",
  "test_code": "import pytest\n\ndef test_real_quadratic_roots():\n    # Test quadratic equation with real roots\n    assert real_quadratic_roots(1, -3, 2) == (1.0, 2.0)\n    # Test quadratic equation with a double root\n    assert real_quadratic_roots(1, 2, 1) == (-1.0, -1.0)\n    # Test quadratic equation with real and distinct roots\n    assert real_quadratic_roots(1, -5, 6) == (2.0, 3.0)\n    # Test quadratic equation with no real roots\n    assert real_quadratic_roots(1, 0, 1) == ()\n    # Test invalid input when a is zero\n    with pytest.raises(ValueError, match=\"Coefficient 'a' must not be zero.\"):\n        real_quadratic_roots(0, 0, 1)\n\n# Test with zero a but valid b and c\ndef test_no_exception_on_zero_a_with_valid_bc():\n    assert real_quadratic_roots(0, 2, 1) == (-0.5,)\n\n# Test edge cases\ndef test_with_large_numbers():\n    assert real_quadratic_roots(1000, -3001, 2002) == (1.998002, 2.002002)\n\ndef test_with_edge_zero():\n    # Edge case where coefficients are zero\n    assert real_quadratic_roots(0, 0, 0) == ()\n    # More negative values\n    assert real_quadratic_roots(-1, -2, -1) == (-1.0,)",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}