{
  "metadata": {
    "prompt_id": "00000087",
    "row_id": 87,
    "seed_ids": [
      651
    ],
    "mode": "algorithm"
  },
  "instruction": "You are given a function `bin_to_octal` that converts a binary string to its octal equivalent. The provided function already handles some edge cases and errors. Your task is to optimize the function to handle large binary strings more efficiently and to minimize the creation of intermediate data structures.\n\n**Function Signature**:\n```python\ndef bin_to_octal(bin_string: str) -> str:\n    # Your code here\n```\n\n**Input**:\n- `bin_string` (str): A binary string (composed of '0's and '1's).\n\n**Output**:\n- Return the octal equivalent of the binary string as a string.\n\n**Constraints**:\n- `1 <= len(bin_string) <= 10^6`\n\n**Performance Requirement**:\n- Optimize the function to handle large binary strings efficiently and minimize the use of additional data structures.\n\n**Example**:\n```python\n>>> bin_to_octal(\"1111\")\n'17'\n>>> bin_to_octal(\"101010101010011\")\n'52523'\n>>> bin_to_octal(\"\")\n''\n>>> bin_to_octal(\"a-1\")\nValueError: Non-binary value was passed to the function\n```\n\n**Note**: Ensure that your implementation handles all edge cases, including empty strings and non-binary strings, and performs optimally for large inputs.",
  "solution_code": "def bin_to_octal(bin_string: str) -> str:\n    \"\"\"\n    Converts a binary string to its octal equivalent.\n    \"\"\"\n    if not all(c in '01' for c in bin_string):\n        raise ValueError(\"Non-binary value was passed to the function\")\n    \n    octal_string = ''\n    groups = [bin_string[i:i+3] for i in range(0, len(bin_string), 3)]\n    for group in groups:\n        group += '0' * (3 - len(group))  # Pad with zeros if necessary\n        octal_digit = int(group, 2)\n        octal_string += str(octal_digit)\n    return octal_string.lstrip('0') or '0'  # Remove leading zeros, return '0' if empty",
  "test_code": "from solution import bin_to_octal\n\ndef test_bin_to_octal_with_small_bin_strings():\n    assert bin_to_octal(\"1111\") == \"17\"\n    assert bin_to_octal(\"101010101010011\") == \"52523\"\n\ndef test_bin_to_octal_with_empty_string():\n    assert bin_to_octal(\"\") == \"0\"\n\ndef test_bin_to_octal_with_non_binary_input():\n    with pytest.raises(ValueError):\n        bin_to_octal(\"a-1\")\n\ndef test_bin_to_octal_with_large_bin_string():\n    bin_str = '1' * 1000000  # Large binary string\n    assert bin_to_octal(bin_str) == '3' * 333333  # Expected octal output\n\ndef test_bin_to_octal_with_repeated_padded_groups():\n    assert bin_to_octal(\"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\") == '4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}