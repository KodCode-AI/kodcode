{
  "metadata": {
    "prompt_id": "00000058",
    "row_id": 58,
    "seed_ids": [
      586
    ],
    "mode": "algorithm"
  },
  "instruction": "### Problem Description\n\nA number is considered **semidivisible** if it is divisible by the largest prime less than or equal to its square root (lps) or the smallest prime greater than or equal to its square root (ups), but not both.\n\nFor a given integer \\( n \\geq 4 \\), the **lower prime square root** (lps) is the largest prime \\( p \\) such that \\( p \\leq \\sqrt{n} \\), and the **upper prime square root** (ups) is the smallest prime \\( p \\) such that \\( p \\geq \\sqrt{n} \\).\n\nWrite a function `semidivisible_sum` that computes the sum of all semidivisible numbers not exceeding a given limit \\( N \\).\n\n#### Function Signature\n```python\ndef semidivisible_sum(limit: int) -> int:\n    ...\n```\n\n#### Constraints\n- \\( 4 \\leq limit \\leq 999,966,663,333 \\)\n- The function should return the sum of all semidivisible numbers up to the given limit.\n\n#### Example\n```python\nassert semidivisible_sum(15) == 30  # 8, 10, and 12 are semidivisible\nassert semidivisible_sum(1000) == 34825  # Sum of semidivisible numbers up to 1000\nassert semidivisible_sum(999_966_663_333) == 2480389586872  # Compute the sum for the given limit\n```\n\n#### Performance Requirement\nThe function should be efficient and should not take more than 1 minute to compute the result for the maximum input size.\n\n### Implementation Tips\n- Use the Sieve of Eratosthenes to generate prime numbers efficiently.\n- Ensure the function handles edge cases correctly, such as when the input is a perfect square.",
  "solution_code": "from math import sqrt, ceil\n\ndef semidivisible_sum(limit: int) -> int:\n    def lps(n):\n        # Find the largest prime less than or equal to the square root of n\n        root = int(sqrt(n))\n        for i in range(root, 1, -1):\n            if all(i % p != 0 for p in range(2, int(sqrt(i)) + 1)):\n                return i\n        return 1  # if no prime found, return 1, this will never happen for n >= 4\n\n    def ups(n):\n        # Find the smallest prime greater than or equal to the square root of n\n        root = ceil(sqrt(n))\n        while True:\n            if all(root % p != 0 for p in range(2, int(sqrt(root)) + 1)):\n                return root\n            root += 1\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        return all(n % i != 0 for i in range(3, int(sqrt(n)) + 1, 2))\n\n    def find_primes(limit):\n        primes = []\n        checked = [False] * (limit + 1)\n        for i in range(2, limit + 1):\n            if not checked[i]:\n                if is_prime(i):\n                    primes.append(i)\n                for j in range(i, limit + 1, i):\n                    checked[j] = True\n        return primes\n\n    primes = find_primes(int(sqrt(limit)) + 1)\n    semidivisible_sum = 0\n\n    for n in range(4, limit + 1):\n        lps_val = lps(n)\n        ups_val = ups(n)\n        if (n % lps_val == 0 and n % ups_val != 0) or (n % lps_val != 0 and n % ups_val == 0):\n            semidivisible_sum += n\n\n    return semidivisible_sum",
  "test_code": "from solution import semidivisible_sum\n\ndef test_semidivisible_sum():\n    assert semidivisible_sum(15) == 30, \"Test case 15 failed\"\n    assert semidivisible_sum(1000) == 34825, \"Test case 1000 failed\"\n    assert semidivisible_sum(999_966_663_333) == 2480389586872, \"Test case 999_966_663_333 failed\"\n    assert semidivisible_sum(4) == 4, \"Test case 4 failed\"\n    assert semidivisible_sum(5) == 5, \"Test case 5 failed\"\n    assert semidivisible_sum(6) == 10, \"Test case 6 failed\"\n    assert semidivisible_sum(7) == 10, \"Test case 7 failed\"\n    assert semidivisible_sum(8) == 16, \"Test case 8 failed\"\n    assert semidivisible_sum(9) == 16, \"Test case 9 failed\"\n    assert semidivisible_sum(10) == 30, \"Test case 10 failed\"\n\ntest_semidivisible_sum()",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}