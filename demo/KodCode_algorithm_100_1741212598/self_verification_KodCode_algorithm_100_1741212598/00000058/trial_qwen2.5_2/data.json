{
  "metadata": {
    "prompt_id": "00000058",
    "row_id": 58,
    "seed_ids": [
      586
    ],
    "mode": "algorithm"
  },
  "instruction": "### Problem Description\n\nA number is considered **semidivisible** if it is divisible by the largest prime less than or equal to its square root (lps) or the smallest prime greater than or equal to its square root (ups), but not both.\n\nFor a given integer \\( n \\geq 4 \\), the **lower prime square root** (lps) is the largest prime \\( p \\) such that \\( p \\leq \\sqrt{n} \\), and the **upper prime square root** (ups) is the smallest prime \\( p \\) such that \\( p \\geq \\sqrt{n} \\).\n\nWrite a function `semidivisible_sum` that computes the sum of all semidivisible numbers not exceeding a given limit \\( N \\).\n\n#### Function Signature\n```python\ndef semidivisible_sum(limit: int) -> int:\n    ...\n```\n\n#### Constraints\n- \\( 4 \\leq limit \\leq 999,966,663,333 \\)\n- The function should return the sum of all semidivisible numbers up to the given limit.\n\n#### Example\n```python\nassert semidivisible_sum(15) == 30  # 8, 10, and 12 are semidivisible\nassert semidivisible_sum(1000) == 34825  # Sum of semidivisible numbers up to 1000\nassert semidivisible_sum(999_966_663_333) == 2480389586872  # Compute the sum for the given limit\n```\n\n#### Performance Requirement\nThe function should be efficient and should not take more than 1 minute to compute the result for the maximum input size.\n\n### Implementation Tips\n- Use the Sieve of Eratosthenes to generate prime numbers efficiently.\n- Ensure the function handles edge cases correctly, such as when the input is a perfect square.",
  "solution_code": "import math\n\ndef semidivisible_sum(limit: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(num)) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    sum_semidivisible = 0\n    for n in range(4, limit + 1):\n        sqrt_n = math.isqrt(n)\n        lps = sqrt_n\n        while not is_prime(lps):\n            lps -= 1\n        ups = sqrt_n\n        while not is_prime(ups):\n            ups += 1\n        if lps != ups and (n % lps == 0 or n % ups == 0):\n            sum_semidivisible += n\n    return sum_semidivisible",
  "test_code": "``\nimport pytest\n\ndef test_semidivisible_sum():\n    assert semidivisible_sum(15) == 30\n    assert semidivisible_sum(1000) == 34825\n    assert semidivisible_sum(999_966_663_333) == 2480389586872\n    assert semidivisible_sum(4) == 4\n    assert semidivisible_sum(5) == 4\n    assert semidivisible_sum(6) == 10\n    assert semidivisible_sum(10) == 22\n    assert semidivisible_sum(11) == 10\n    assert semidivisible_sum(12) == 32\n    assert semidivisible_sum(13) == 10\n    assert semidivisible_sum(14) == 44\n    assert semidivisible_sum(15) == 30\n    assert semidivisible_sum(16) == 68\n    assert semidivisible_sum(17) == 10",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}