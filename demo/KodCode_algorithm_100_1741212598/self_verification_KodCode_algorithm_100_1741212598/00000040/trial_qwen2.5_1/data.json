{
  "metadata": {
    "prompt_id": "00000040",
    "row_id": 40,
    "seed_ids": [
      318
    ],
    "mode": "algorithm"
  },
  "instruction": "**Scenario**: You are working on a network analysis project where you need to manage a group of network nodes and their connections. The network nodes can form various clusters, and you need to efficiently manage these clusters using a disjoint set data structure.\n\n**Task**: Implement a function `analyze_network_connections` that takes a list of network nodes and their connections and returns the number of unique clusters in the network. Each node is represented by an integer, and each connection is a tuple of two integers representing nodes that are connected.\n\n**Function Signature**: \n```python\ndef analyze_network_connections(connections: List[Tuple[int, int]]) -> int:\n    pass\n```\n\n**Input**:\n- `connections` (1 <= len(connections) <= 10^5): A list of tuples, where each tuple (u, v) represents a connection between nodes u and v.\n\n**Output**:\n- An integer representing the number of unique clusters in the network.\n\n**Constraints**:\n- Each node can appear in multiple connections.\n- The nodes are 0-indexed and range from 0 to 10^4.\n\n**Performance Requirement**:\n- The function should be efficient and able to handle the maximum input size in a reasonable amount of time.\n\n**Example**:\n```python\nconnections = [(0, 1), (1, 2), (3, 4), (4, 5), (2, 6)]\nassert analyze_network_connections(connections) == 3\n```\n\n**Explanation**:\n- Initially, there are 7 nodes.\n- After processing the connections, the network will have 3 unique clusters: {0, 1, 2, 6}, {3, 4, 5}, and {7}.\n\n**Additional Information**:\n- You can assume the disjoint set data structure will be provided as a module or class with the necessary methods (`merge` and `get_parent`).",
  "solution_code": "from typing import List, Tuple\n\ndef analyze_network_connections(connections: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Analyzes network connections and returns the number of unique clusters.\n    \"\"\"\n    def find_parent(parent: List[int], node: int) -> int:\n        if parent[node] != node:\n            parent[node] = find_parent(parent, parent[node])\n        return parent[node]\n    \n    def union(parent: List[int], u: int, v: int):\n        u_root = find_parent(parent, u)\n        v_root = find_parent(parent, v)\n        if u_root < v_root:\n            parent[v_root] = u_root\n        else:\n            parent[u_root] = v_root\n    \n    # Initialize parent array\n    parent = list(range(max(max(connections), 1) + 1))\n    \n    # Process each connection\n    for u, v in connections:\n        union(parent, u, v)\n    \n    # Count the number of unique roots\n    unique_clusters = sum(parent[i] == i for i in range(len(parent)))\n    return unique_clusters",
  "test_code": "import pytest\nfrom typing import List, Tuple\n\ndef analyze_network_connections(connections: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Analyzes network connections and returns the number of unique clusters.\n    \"\"\"\n    def find_parent(parent: List[int], node: int) -> int:\n        if parent[node] != node:\n            parent[node] = find_parent(parent, parent[node])\n        return parent[node]\n    \n    def union(parent: List[int], u: int, v: int):\n        u_root = find_parent(parent, u)\n        v_root = find_parent(parent, v)\n        if u_root < v_root:\n            parent[v_root] = u_root\n        else:\n            parent[u_root] = v_root\n    \n    # Initialize parent array\n    parent = list(range(max(max(connections), 1) + 1))\n    \n    # Process each connection\n    for u, v in connections:\n        union(parent, u, v)\n    \n    # Count the number of unique roots\n    unique_clusters = sum(parent[i] == i for i in range(len(parent)))\n    return unique_clusters\n\n@pytest.mark.parametrize(\"connections, expected\", [\n    ([(0, 1), (1, 2), (3, 4), (4, 5), (2, 6)], 3),\n    ([(0, 2), (1, 2), (2, 3), (3, 0), (3, 1)], 1),\n    ([(0, 1), (1, 0), (1, 2)], 1),\n    ([(0, 1), (4, 5), (1, 2), (1, 3), (2, 3), (2, 4)], 1),\n    ([(0, 1), (2, 3), (4, 5), (6, 7)], 4),\n    ([(0, 1), (2, 3), (0, 3), (1, 2)], 1),\n    ([], 0)\n])\ndef test_analyze_network_connections(connections, expected):\n    assert analyze_network_connections(connections) == expected",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}