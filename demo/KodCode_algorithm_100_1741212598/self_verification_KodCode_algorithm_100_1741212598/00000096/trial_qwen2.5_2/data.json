{
  "metadata": {
    "prompt_id": "00000096",
    "row_id": 96,
    "seed_ids": [
      975
    ],
    "mode": "algorithm"
  },
  "instruction": "**Problem Statement**:\nYou are tasked with implementing an LFU Cache that supports the following operations:\n- `put(key, value)`: Insert a key-value pair into the cache. If the cache is at capacity, it should evict the least frequently used item first.\n- `get(key)`: Retrieve the value associated with the given key. If the key is not found, return `None`.\n\n**Cache Operations**:\n- The cache should maintain a doubly linked list to order nodes based on their frequency.\n- Nodes should be repositioned in the list to maintain the correct order.\n- The cache should use a dictionary to map keys to their corresponding nodes.\n\n**Constraints**:\n- The capacity of the LFU Cache will be an integer between 1 and 1000 (inclusive).\n- The key and value types can be any valid Python objects.\n\n**Example**:\n```python\ncache = LFUCache(2)\ncache.put(1, 1)\ncache.put(2, 2)\nprint(cache.get(1))  # Output: 1\ncache.put(3, 3)\nprint(cache.get(2))  # Output: None\ncache.put(4, 4)\nprint(cache.get(1))  # Output: None\nprint(cache.get(3))  # Output: 3\nprint(cache.get(4))  # Output: 4\n```\n\n**Function Signature**:\n```python\nclass LFUCache(Generic[T, U]):\n    def __init__(self, capacity: int):\n        pass\n\n    def get(self, key: T) -> U | None:\n        pass\n\n    def put(self, key: T, value: U) -> None:\n        pass\n```\n\n**Note**:\n- Ensure the cache operations are efficient and handle edge cases correctly.\n- The provided code snippet includes a `DoubleLinkedList` class and a `LFUCache` class with some methods implemented. You need to implement the `get` and `put` methods.",
  "solution_code": "from typing import Generic, TypeVar, Optional\nimport collections\n\nT = TypeVar('T')\nU = TypeVar('U')\n\nclass Node:\n    def __init__(self, key: T, value: U, freq: int = 0):\n        self.key = key\n        self.value = value\n        self.freq = freq\n        self.prev = None\n        self.next = None\n\nclass DoubleLinkedList:\n    def __init__(self):\n        self.head = Node(None, None)\n        self.tail = Node(None, None)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n        self.size = 0\n\n    def add_to_head(self, node: Node):\n        node.prev = self.head\n        node.next = self.head.next\n        self.head.next.prev = node\n        self.head.next = node\n        self.size += 1\n\n    def remove(self, node: Node):\n        node.prev.next = node.next\n        node.next.prev = node.prev\n        self.size -= 1\n\n    def remove_least_frequent(self):\n        last_node = self.tail.prev\n        self.remove(last_node)\n        return last_node\n\n    def __len__(self):\n        return self.size\n\nclass LFUCache(Generic[T, U]):\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.key_to_node = {}\n        self.freq_to_linked_list = collections.defaultdict(DoubleLinkedList)\n        self.min_freq = 0\n\n    def get(self, key: T) -> U | None:\n        if key not in self.key_to_node:\n            return None\n        node = self.key_to_node[key]\n        self._increase_freq(node)\n        return node.value\n\n    def put(self, key: T, value: U) -> None:\n        if self.capacity == 0:\n            return\n        if key in self.key_to_node:\n            node = self.key_to_node[key]\n            node.value = value\n            self._increase_freq(node)\n        else:\n            if len(self.key_to_node) == self.capacity:\n                removed_node = self.freq_to_linked_list[self.min_freq].remove_least_frequent()\n                del self.key_to_node[removed_node.key]\n            new_node = Node(key, value, freq=1)\n            self.key_to_node[key] = new_node\n            self.freq_to_linked_list[1].add_to_head(new_node)\n            self.min_freq = 1\n\n    def _increase_freq(self, node: Node):\n        old_freq = node.freq\n        self.freq_to_linked_list[old_freq].remove(node)\n        if old_freq == self.min_freq and not self.freq_to_linked_list[old_freq]:\n            self.min_freq += 1\n        node.freq += 1\n        self.freq_to_linked_list[node.freq].add_to_head(node)",
  "test_code": "import pytest\n\ndef test_lfu_cache():\n    cache = LFUCache(2)\n    cache.put(1, 1)\n    cache.put(2, 2)\n    assert cache.get(1) == 1\n    cache.put(3, 3)\n    assert cache.get(2) is None\n    cache.put(4, 4)\n    assert cache.get(1) is None\n    assert cache.get(3) == 3\n    assert cache.get(4) == 4\n\ndef test_lfu_cache_with_duplicates():\n    cache = LFUCache(1)\n    cache.put(2, 1)\n    assert cache.get(2) == 1\n    cache.put(2, 2)\n    assert cache.get(2) == 2\n    cache.put(1, 1)\n    assert cache.get(2) is None\n    assert cache.get(1) == 1\n    cache.put(4, 1)\n    assert cache.get(1) is None\n    assert cache.get(2) is None\n    assert cache.get(3) is None\n    assert cache.get(4) == 1\n\ndef test_lfu_cache_with_empty_cache():\n    cache = LFUCache(0)\n    assert cache.get(1) is None\n    cache.put(1, 1)\n    assert cache.get(1) is None\n\ndef test_lfu_cache_with_large_capacity():\n    cache = LFUCache(1000)\n    for i in range(1000):\n        cache.put(i, i)\n        assert cache.get(i) == i\n    cache.put(1001, 1001)\n    assert cache.get(0) is None\n    assert cache.get(1000) is None\n    assert cache.get(1001) == 1001",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}