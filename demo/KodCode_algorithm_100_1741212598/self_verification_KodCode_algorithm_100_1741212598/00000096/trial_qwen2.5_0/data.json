{
  "metadata": {
    "prompt_id": "00000096",
    "row_id": 96,
    "seed_ids": [
      975
    ],
    "mode": "algorithm"
  },
  "instruction": "**Problem Statement**:\nYou are tasked with implementing an LFU Cache that supports the following operations:\n- `put(key, value)`: Insert a key-value pair into the cache. If the cache is at capacity, it should evict the least frequently used item first.\n- `get(key)`: Retrieve the value associated with the given key. If the key is not found, return `None`.\n\n**Cache Operations**:\n- The cache should maintain a doubly linked list to order nodes based on their frequency.\n- Nodes should be repositioned in the list to maintain the correct order.\n- The cache should use a dictionary to map keys to their corresponding nodes.\n\n**Constraints**:\n- The capacity of the LFU Cache will be an integer between 1 and 1000 (inclusive).\n- The key and value types can be any valid Python objects.\n\n**Example**:\n```python\ncache = LFUCache(2)\ncache.put(1, 1)\ncache.put(2, 2)\nprint(cache.get(1))  # Output: 1\ncache.put(3, 3)\nprint(cache.get(2))  # Output: None\ncache.put(4, 4)\nprint(cache.get(1))  # Output: None\nprint(cache.get(3))  # Output: 3\nprint(cache.get(4))  # Output: 4\n```\n\n**Function Signature**:\n```python\nclass LFUCache(Generic[T, U]):\n    def __init__(self, capacity: int):\n        pass\n\n    def get(self, key: T) -> U | None:\n        pass\n\n    def put(self, key: T, value: U) -> None:\n        pass\n```\n\n**Note**:\n- Ensure the cache operations are efficient and handle edge cases correctly.\n- The provided code snippet includes a `DoubleLinkedList` class and a `LFUCache` class with some methods implemented. You need to implement the `get` and `put` methods.",
  "solution_code": "from collections import defaultdict\nfrom typing import Dict, Any\n\nclass Node:\n    def __init__(self, key: int, value: int, freq: int = 1):\n        self.key = key\n        self.value = value\n        self.freq = freq\n        self.prev = None\n        self.next = None\n\nclass DoubleLinkedList:\n    def __init__(self):\n        self.head = Node(0, 0)\n        self.tail = Node(0, 0)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n        self.size = 0\n\n    def append(self, node: Node) -> None:\n        node.prev = self.tail.prev\n        node.next = self.tail\n        self.tail.prev.next = node\n        self.tail.prev = node\n        self.size += 1\n\n    def remove(self, node: Node) -> None:\n        node.prev.next = node.next\n        node.next.prev = node.prev\n        self.size -= 1\n\n    def pop_left(self) -> Node:\n        if self.head.next == self.tail:\n            return None\n        node = self.head.next\n        self.remove(node)\n        return node\n\nclass LFUCache(Generic[int, int]):\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.node_dict: Dict[int, Node] = {}\n        self.freq_map: Dict[int, DoubleLinkedList] = defaultdict(DoubleLinkedList)\n        self.min_freq = 0\n\n    def get(self, key: int) -> int | None:\n        if key not in self.node_dict:\n            return None\n        node = self.node_dict[key]\n        self.freq_map[node.freq].remove(node)\n        if self.min_freq == node.freq and not self.freq_map[node.freq].size:\n            self.min_freq += 1\n        node.freq += 1\n        self.freq_map[node.freq].append(node)\n        return node.value\n\n    def put(self, key: int, value: int) -> None:\n        if self.capacity == 0:\n            return\n        if key in self.node_dict:\n            node = self.node_dict[key]\n            node.value = value\n            self.get(key)\n            return\n        if len(self.node_dict) == self.capacity:\n            node_to_evict = self.freq_map[self.min_freq].pop_left()\n            del self.node_dict[node_to_evict.key]\n        new_node = Node(key, value)\n        self.node_dict[key] = new_node\n        self.freq_map[1].append(new_node)\n        self.min_freq = 1",
  "test_code": "def test_lfu_cache():\n    cache = LFUCache(2)\n    cache.put(1, 1)\n    cache.put(2, 2)\n    assert cache.get(1) == 1\n    cache.put(3, 3)\n    assert cache.get(2) is None\n    cache.put(4, 4)\n    assert cache.get(1) is None\n    assert cache.get(3) == 3\n    assert cache.get(4) == 4\n\ndef test_init():\n    cache = LFUCache(0)\n    assert cache.capacity == 0\n    assert cache.node_dict == {}\n    assert cache.freq_map == defaultdict(DoubleLinkedList)\n    assert cache.min_freq == 0\n\ndef test_put():\n    cache = LFUCache(2)\n    cache.put(1, 1)\n    cache.put(2, 2)\n    cache.put(3, 3)\n    assert cache.node_dict == {1: Node(1, 1, 2), 3: Node(3, 3, 1)}\n    assert cache.min_freq == 1\n    cache.put(4, 4)\n    assert cache.node_dict == {3: Node(3, 3, 2), 4: Node(4, 4, 1)}  # 1 is evicted\n    assert cache.min_freq == 1\n\ndef test_get():\n    cache = LFUCache(2)\n    cache.put(1, 1)\n    cache.put(2, 2)\n    assert cache.get(1) == 1\n    cache.put(3, 3)\n    assert cache.get(2) is None\n    cache.put(4, 4)\n    assert cache.get(1) is None\n    assert cache.get(3) == 3\n    assert cache.get(4) == 4",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}