{
  "metadata": {
    "prompt_id": "00000009",
    "row_id": 9,
    "seed_ids": [
      21
    ],
    "mode": "algorithm"
  },
  "instruction": "You are given a list of integers and need to partition it into two subsets such that the difference between the sums of the subsets is minimized. Implement a function that returns the minimum possible difference.\n\n**Function Signature**: \n```python\ndef find_min_difference(numbers: list[int]) -> int:\n    pass\n```\n\n**Input**:\n- `numbers` (1 <= len(numbers) <= 100): A list of integers.\n\n**Output**:\n- Return an integer representing the minimum possible difference between the sums of the two subsets.\n\n**Examples**:\n```python\nassert find_min_difference([1, 2, 3, 4, 5]) == 1\nassert find_min_difference([5, 5, 5, 5, 5]) == 5\nassert find_min_difference([5, 5, 5, 5]) == 0\nassert find_min_difference([3]) == 3\nassert find_min_difference([]) == 0\nassert find_min_difference([1, 2, 3, 4]) == 0\nassert find_min_difference([-1, -5, 5, 1]) == 0\nassert find_min_difference([9, 9, 9, 9, 9]) == 9\nassert find_min_difference([1, 5, 10, 3]) == 1\nassert find_min_difference([-1, 0, 1]) == 0\nassert find_min_difference(range(10, 0, -1)) == 1\nassert find_min_difference([-1]) == 1\nassert find_min_difference([0, 0, 0, 1, 2, -4]) == 2\nassert find_min_difference([-1, -5, -10, -3]) == 3\n```\n\n**Constraints**:\n- The list can contain both positive and negative integers.\n- The list can be empty or contain a single element.\n- The list will not contain more than 100 elements.\n\n**Performance**:\n- Aim for a solution with a time complexity of \\(O(n \\times s)\\) and a space complexity of \\(O(n \\times s)\\).",
  "solution_code": "def find_min_difference(numbers: list[int]) -> int:\n    \"\"\"\n    Returns the minimum possible difference between the sums of two subsets.\n    \"\"\"\n    total_sum = sum(numbers)\n    n = len(numbers)\n    dp = [[False] * (total_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(total_sum + 1):\n            if dp[i - 1][j]:\n                dp[i][j] = True\n            elif j >= numbers[i - 1]:\n                dp[i][j] = dp[i - 1][j - numbers[i - 1]]\n\n    target = total_sum // 2\n    while target >= 0 and not dp[n][target]:\n        target -= 1\n\n    return total_sum - 2 * target",
  "test_code": "``\nimport pytest\n\n# Test cases\ntest_cases = [\n    ([1, 2, 3, 4, 5], 1),\n    ([5, 5, 5, 5, 5], 5),\n    ([5, 5, 5, 5], 0),\n    ([3], 3),\n    ([], 0),\n    ([1, 2, 3, 4], 0),\n    ([-1, -5, 5, 1], 0),\n    ([9, 9, 9, 9, 9], 9),\n    ([1, 5, 10, 3], 1),\n    ([-1, 0, 1], 0),\n    (list(range(10, 0, -1)), 1),\n    ([-1], 1),\n    ([0, 0, 0, 1, 2, -4], 2),\n    ([-1, -5, -10, -3], 3)\n]\n\n@pytest.mark.parametrize(\"numbers, expected\", test_cases)\ndef test_find_min_difference(numbers, expected):\n    assert find_min_difference(numbers) == expected",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}