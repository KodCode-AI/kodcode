{
  "metadata": {
    "prompt_id": "00000019",
    "row_id": 19,
    "seed_ids": [
      417
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with enhancing the djb2 hash algorithm to handle non-ASCII characters and to ensure that the generated hash values are consistent across different runs. Additionally, the function should support a configurable magic constant to allow for testing with different hash functions.\n\n**Task**: Implement a Python function `enhanced_djb2` that takes a string `s` and an optional `magic_constant` (default is 5381) as input and returns the hash value. The function should handle non-ASCII characters correctly and ensure that the hash value is consistent. The function should also support a configurable magic constant.\n\n**Input**:\n- `s`: A string (input to be hashed).\n- `magic_constant`: An integer (default is 5381) representing the magic constant used in the hash function.\n\n**Output**:\n- An integer representing the hash value.\n\n**Constraints**:\n- The length of the string `s` will not exceed 1000 characters.\n- The `magic_constant` will be a positive integer.\n\n**Performance Requirements**:\n- The function should be able to handle large strings efficiently.\n\n**Example**:\n```python\n>>> enhanced_djb2('Algorithms')\n3782405311\n\n>>> enhanced_djb2('scramble bits', 33)\n1609059040\n\n>>> enhanced_djb2('\u975eASCII', 5381)\n756778245\n```\n\n**Note**: Non-ASCII characters should be properly encoded using their ASCII values or Unicode code points, and the hash function should produce consistent results.",
  "solution_code": "def enhanced_djb2(s, magic_constant=5381):\n    \"\"\"\n    Returns the hash value for the input string using the djb2 hash algorithm.\n    \n    Args:\n    s (str): The input string to be hashed.\n    magic_constant (int): The magic constant used in the hash function (default is 5381).\n    \n    Returns:\n    int: The hash value.\n    \"\"\"\n    for char in s:\n        magic_constant = ((magic_constant << 5) + magic_constant) + ord(char)  # Use ord to get ASCII value\n    return magic_constant",
  "test_code": "python\r\ndef test_enhanced_djb2():\r\n    assert enhanced_djb2('Algorithms') == 3782405311\r\n    assert enhanced_djb2('scramble bits', 33) == 1609059040\r\n    assert enhanced_djb2('\u975eASCII', 5381) == 756778245\r\n\r\ndef test_enhanced_djb2_non_ascii():\r\n    assert enhanced_djb2('\u4f60\u597d') == 1415019453\r\n    assert enhanced_djb2('\u3053\u3093\u306b\u3061\u306f', 33) == 1212807467\r\n    assert enhanced_djb2('\u0645\u0631\u062d\u0628\u0627', 5381) == 2108705526\r\n\r\ndef test_enhanced_djb2_empty_string():\r\n    assert enhanced_djb2('') == 5381\r\n    assert enhanced_djb2('', 33) == 33\r\n\r\ndef test_enhanced_djb2_montonic():\r\n    s = 'Algorithms'\r\n    initial_constant = 5381\r\n    new_constant = 33\r\n    hash_with_initial = enhanced_djb2(s, initial_constant)\r\n    hash_with_new = enhanced_djb2(s, new_constant)\r\n    assert hash_with_initial != hash_with_new  # Ensure different constants produce different results\r\n\r\ndef test_enhanced_djb2_with_large_string():\r\n    long_string = 'a' * 1000  # A long string to test performance\r\n    hash_value = enhanced_djb2(long_string)\r\n    assert isinstance(hash_value, int)  # Ensure the result is an integer",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}