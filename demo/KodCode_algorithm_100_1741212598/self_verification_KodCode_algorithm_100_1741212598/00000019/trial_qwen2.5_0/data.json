{
  "metadata": {
    "prompt_id": "00000019",
    "row_id": 19,
    "seed_ids": [
      417
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with enhancing the djb2 hash algorithm to handle non-ASCII characters and to ensure that the generated hash values are consistent across different runs. Additionally, the function should support a configurable magic constant to allow for testing with different hash functions.\n\n**Task**: Implement a Python function `enhanced_djb2` that takes a string `s` and an optional `magic_constant` (default is 5381) as input and returns the hash value. The function should handle non-ASCII characters correctly and ensure that the hash value is consistent. The function should also support a configurable magic constant.\n\n**Input**:\n- `s`: A string (input to be hashed).\n- `magic_constant`: An integer (default is 5381) representing the magic constant used in the hash function.\n\n**Output**:\n- An integer representing the hash value.\n\n**Constraints**:\n- The length of the string `s` will not exceed 1000 characters.\n- The `magic_constant` will be a positive integer.\n\n**Performance Requirements**:\n- The function should be able to handle large strings efficiently.\n\n**Example**:\n```python\n>>> enhanced_djb2('Algorithms')\n3782405311\n\n>>> enhanced_djb2('scramble bits', 33)\n1609059040\n\n>>> enhanced_djb2('\u975eASCII', 5381)\n756778245\n```\n\n**Note**: Non-ASCII characters should be properly encoded using their ASCII values or Unicode code points, and the hash function should produce consistent results.",
  "solution_code": "def enhanced_djb2(s, magic_constant=5381):\n    \"\"\"\n    Returns the hash value of the given string 's' using the djb2 hash algorithm\n    with a configurable magic constant.\n    \"\"\"\n    for char in s:\n        if isinstance(char, str):\n            magic_constant = (magic_constant * 33) + ord(char)\n        else:\n            magic_constant = (magic_constant * 33) + char\n    return magic_constant",
  "test_code": "import pytest\n\ndef test_enhanced_djb2():\n    assert enhanced_djb2('Algorithms') == 3782405311\n    assert enhanced_djb2('scramble bits', 33) == 1609059040\n    assert enhanced_djb2('\u975eASCII', 5381) == 756778245\n\ndef test_enhanced_djb2_non_ascii():\n    assert enhanced_djb2('\u4f60\u597d', 5381) == 632538182\n    assert enhanced_djb2('\u3053\u3093\u306b\u3061\u306f', 33) == 581382360\n    assert enhanced_djb2('\uc548\ub155\ud558\uc138\uc694', 5381) == 623096277\n\ndef test_enhanced_djb2_empty_string():\n    assert enhanced_djb2('') == 5381\n    assert enhanced_djb2('', 33) == 33\n\ndef test_enhanced_djb2_single_character():\n    assert enhanced_djb2('A') == 2239020883\n    assert enhanced_djb2('A', 5381) == 2239020883\n\ndef test_enhanced_djb2_large_string():\n    assert enhanced_djb2('a' * 1000, 5381) == 3410771441763555825\n    assert enhanced_djb2('abc' * 333, 33) == 1427915927173384407",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}