{
  "metadata": {
    "prompt_id": "00000083",
    "row_id": 83,
    "seed_ids": [
      599
    ],
    "mode": "algorithm"
  },
  "instruction": "<|Analysis Begin|>\n\n### Core Identification\n\n#### Algorithm/Data Structure\n- **Algorithm/Data Structure**: `PokerHand` Class\n- **Type**: This class implements various poker hand evaluation operations, such as checking for flushes, straights, pairs, and calculating the hand type.\n- **Main Purpose**: The class is designed to evaluate and compare poker hands based on standard poker rules.\n\n#### Characteristics & Applications\n\n##### Properties\n- The class uses the `PokerHand` constructor to parse the hand string and store the card values.\n- It includes methods for checking specific poker hand types like flush, straight, pairs, and calculating the hand type.\n- The `compare_with` method is used to compare two hands and determine the winner.\n\n##### Common Use Cases\n- The class is used in scenarios where poker hands need to be evaluated and sorted.\n- It is particularly useful in applications that involve poker games or simulations.\n\n##### Strengths/Limitations\n- **Strengths**: The class is thoroughly tested and covers a wide range of edge cases. It is flexible and can be extended to include more poker hand types.\n- **Limitations**: The implementation relies on string parsing, which can be error-prone. It does not handle invalid input robustly.\n\n#### Implementation Challenges\n\n##### Edge Cases\n- The class should handle invalid hand strings, such as those with invalid characters or incorrect card ranks.\n\n##### Performance Bottlenecks\n- The `compare_with` method may be slow if it involves multiple evaluations, especially when comparing hands with many cards.\n- The `_is_five_high_straight` method may be inefficient if it involves sorting or complex list operations",
  "solution_code": "import re\n\nclass Card:\n    def __init__(self, value):\n        self.value = value\n\nclass PokerHand:\n    CARD_RANKS = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n\n    def __init__(self, hand):\n        self.cards = sorted([self._parse_card(card) for card in re.findall(r'([2-9TJKQA][SDCH])', hand)], key=lambda card: self.CARD_RANKS[card.value], reverse=True)\n\n    def _parse_card(self, card):\n        return Card(self.CARD_RANKS[card[0]])\n\n    def _is_flush(self):\n        return all(card.suit == self.cards[0].suit for card in self.cards)\n\n    def _is_straight(self):\n        values = [card.value for card in self.cards]\n        return values == list(range(values[0], values[0] - 5, -1)) or values == [14, 5, 4, 3, 2]\n\n    def _is_five_high_straight(self):\n        values = [card.value for card in self.cards]\n        return sorted(values) == [10, 11, 12, 13, 14]\n\n    def _count_pairs(self):\n        counts = [0] * 15\n        for card in self.cards:\n            counts[card.value] += 1\n        return [value for value, count in enumerate(counts, 2) if count >= 2]\n\n    def _is\u3fe0nhand(self):\n        return self._is_five_high_straight()\n\n    def get_hand_type(self):\n        if self._is_five_high_straight() and self._is_flush():\n            return 'Straight Flush'\n        pairs = self._count_pairs()\n        if len(pairs) == 2 and pairs[0] - pairs[1] == 2:\n            return 'Four of a Kind'\n        if len(pairs) == 2:\n            return 'Full House'\n        if self._is_flush():\n            return 'Flush'\n        if self._is_straight():\n            return 'Straight'\n        if len(pairs) == 1:\n            return 'Three of a Kind'\n        if len(pairs) == 3:\n            return 'Two Pair'\n        if len(pairs) == 0:\n            return 'High Card'\n        return 'Two of a Kind'\n\n    def compare_with(self, other):\n        hand_a = self.get_hand_type()\n        hand_b = other.get_hand_type()\n        if hand_a != hand_b:\n            return -1 if PokerHand.HAND_RANKS.index(hand_a) > PokerHand.HAND_RANKS.index(hand_b) else 1\n        for a, b in zip(self.cards, other.cards):\n            if a.value != b.value:\n                return -1 if a.value > b.value else 1\n        return 0\n\nPokerHand.HAND_RANKS = ['High Card', 'Two of a Kind', 'Two Pair', 'Three of a Kind', 'Straight', 'Flush', 'Full House', 'Four of a Kind', 'Straight Flush']",
  "test_code": "import pytest\nfrom solution import PokerHand\n\ndef test_parse_card():\n    hand = PokerHand('2H 3D 4S 5H 6C')\n    assert len(hand.cards) == 5\n    assert hand.cards[0].value == 6\n    assert hand.cards[1].value == 5\n\ndef test_is_flush():\n    hand = PokerHand('2H 3H 4H 5H 6H')\n    assert hand._is_flush()\n    hand = PokerHand('2H 3D 4S 5H 6C')\n    assert not hand._is_flush()\n\ndef test_is_straight():\n    hand = PokerHand('2H 3D 4S 5H 6C')\n    assert hand._is_straight()\n    hand = PokerHand('2H 3D 5S 6H 7C')\n    assert hand._is_straight()\n    hand = PokerHand('2H 3D 5S 7H 8C')\n    assert hand._is_straight()\n    hand = PokerHand('2H 3D 5S 6H 7C')\n    assert hand._is_straight()\n    hand = PokerHand('AS KH QH JH TH')\n    assert hand._is_flush()\n    hand = PokerHand('2H 3D 4S 5H 6C')\n    assert not hand._is_straight()\n\ndef test_is_five_high_straight():\n    hand = PokerHand('AH KH QH JH TH')\n    assert hand._is_five_high_straight()\n    hand = PokerHand('AH KH QH JH 6H')\n    assert not hand._is_five_high_straight()\n\ndef test_count_pairs():\n    hand = PokerHand('2H 2D 4S 5H 6C')\n    assert hand._count_pairs() == [2]\n    hand = PokerHand('2H 2D 4S 5H 5C')\n    assert hand._count_pairs() == [2, 5]\n    hand = PokerHand('2H 3D 4S 5H 6C')\n    assert hand._count_pairs() == []\n\ndef test_get_hand_type():\n    hand = PokerHand('2H 2D 4S 5H 6C')\n    assert hand.get_hand_type() == 'Two of a Kind'\n    hand = PokerHand('2H 2D 4S 4H 6C')\n    assert hand.get_hand_type() == 'Two Pair'\n    hand = PokerHand('2H 2D 4S 5H 5C')\n    assert hand.get_hand_type() == 'Three of a Kind'\n    hand = PokerHand('2H 3D 4S 5H 6C')\n    assert hand.get_hand_type() == 'Straight'\n    hand = PokerHand('2H 3H 4S 5H 6H')\n    assert hand.get_hand_type() == 'Flush'\n    hand = PokerHand('2H 3H 4H 5H 6H')\n    assert hand.get_hand_type() == 'Straight Flush'\n    hand = PokerHand('2H 3D 4S 5H 5C')\n    assert hand.get_hand_type() == 'Full House'\n    hand = PokerHand('2H 2D 4S 4H 6C')\n    assert hand.get_hand_type() == 'Two Pair'\n    hand = PokerHand('2H 2D 2S 2H 3C')\n    assert hand.get_hand_type() == 'Four of a Kind'\n    hand = PokerHand('2H 3H 4H 5H 6H')\n    assert hand.get_hand_type() == 'Straight Flush'\n    hand = PokerHand('2H 3H 4H 5H 6H')\n    assert hand.get_hand_type() == 'Straight Flush'\n\ndef test_compare_with():\n    assert PokerHand('2H 3D 4S 5H 6C').compare_with(PokerHand('2H 3D 4S 5H 6C')) == 0\n    assert PokerHand('2H 3D 4S 5H 6C').compare_with(PokerHand('AH 2D 4S 5H 7C')) == 1\n    assert PokerHand('AH 2D 4S 5H 7C').compare_with(PokerHand('2H 3D 4S 5H 6C')) == -1\n    assert PokerHand('2H 3D 4S 5H 6C').compare_with(PokerHand('2H 2D 4S 5H 6C')) == -1\n    assert PokerHand('2H 3D 4S 5H 6C').compare_with(PokerHand('2H 2D 4S 5H 5C')) == -1\n    assert PokerHand('2H 3D 4S 5H 6C').compare_with(PokerHand('2H 2D 4S 4H 6C')) == -1",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}