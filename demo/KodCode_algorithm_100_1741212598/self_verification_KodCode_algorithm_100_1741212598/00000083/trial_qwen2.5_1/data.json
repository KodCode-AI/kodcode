{
  "metadata": {
    "prompt_id": "00000083",
    "row_id": 83,
    "seed_ids": [
      599
    ],
    "mode": "algorithm"
  },
  "instruction": "<|Analysis Begin|>\n\n### Core Identification\n\n#### Algorithm/Data Structure\n- **Algorithm/Data Structure**: `PokerHand` Class\n- **Type**: This class implements various poker hand evaluation operations, such as checking for flushes, straights, pairs, and calculating the hand type.\n- **Main Purpose**: The class is designed to evaluate and compare poker hands based on standard poker rules.\n\n#### Characteristics & Applications\n\n##### Properties\n- The class uses the `PokerHand` constructor to parse the hand string and store the card values.\n- It includes methods for checking specific poker hand types like flush, straight, pairs, and calculating the hand type.\n- The `compare_with` method is used to compare two hands and determine the winner.\n\n##### Common Use Cases\n- The class is used in scenarios where poker hands need to be evaluated and sorted.\n- It is particularly useful in applications that involve poker games or simulations.\n\n##### Strengths/Limitations\n- **Strengths**: The class is thoroughly tested and covers a wide range of edge cases. It is flexible and can be extended to include more poker hand types.\n- **Limitations**: The implementation relies on string parsing, which can be error-prone. It does not handle invalid input robustly.\n\n#### Implementation Challenges\n\n##### Edge Cases\n- The class should handle invalid hand strings, such as those with invalid characters or incorrect card ranks.\n\n##### Performance Bottlenecks\n- The `compare_with` method may be slow if it involves multiple evaluations, especially when comparing hands with many cards.\n- The `_is_five_high_straight` method may be inefficient if it involves sorting or complex list operations",
  "solution_code": "class PokerHand:\n    def __init__(self, hand):\n        \"\"\"\n        Initializes a PokerHand object with a given hand string.\n        The hand string is expected to be in the format '2H 3D TD KC AS', where\n        AH represents an Ace of Hearts, 2H represents a 2 of Hearts, etc.\n        \"\"\"\n        self.hand = hand\n        self.cards = sorted([card[:-1] for card in hand.split()])\n        self.ranks = sorted([int(card[:-1]) if card[:-1].isdigit() else 14 for card in hand.split()])\n\n    def is_flush(self):\n        \"\"\"\n        Checks if the hand is a flush.\n        \"\"\"\n        suits = [card[-1] for card in self.hand.split()]\n        return len(set(suits)) == 1\n\n    def is_straight(self):\n        \"\"\"\n        Checks if the hand is a straight.\n        \"\"\"\n        card_values = [5, 4, 3, 2, 1] + list(range(6, 15))\n        return all(self.ranks[i] == self.ranks[i-1] + 1 for i in range(4)) or self._is_five_high_straight()\n\n    def _is_five_high_straight(self):\n        \"\"\"\n        Checks if the hand is a 5-high straight (ace, 2, 3, 4, 5).\n        \"\"\"\n        return all(self.ranks[i] in [9, 10, 11, 12, 13] for i in range(4)) and self.ranks[-1] == 14\n\n    def count_pairs(self):\n        \"\"\"\n        Counts the number of pairs in the hand.\n        \"\"\"\n        pairs = sum(self.ranks[i] == self.ranks[i+1] for i in range(4))\n        return pairs\n\n    def hand_type(self):\n        \"\"\"\n        Determines the type of the poker hand based on the given rules.\n        \"\"\"\n        if self.is_flush() and self.is_straight():\n            return 'Royal Flush'\n        if self.is_straight() and self.ranks[0] == 10:\n            return 'Straight Flush'\n        if self.is_flush():\n            return 'Flush'\n        if self.is_straight():\n            return 'Straight'\n        pairs = self.count_pairs()\n        if pairs == 4:\n            return 'Four of a Kind'\n        if pairs == 3:\n            return 'Full House'\n        if self.is_flush():\n            return 'Flush'\n        if self.is_straight():\n            return 'Straight'\n        return 'High Card'\n\n    def compare_with(self, other):\n        \"\"\"\n        Compares the hand with another hand and returns -1, 0, or 1 based on the comparison.\n        \"\"\"\n        hand_type = self.hand_type()\n        other_type = other.hand_type()\n        if hand_type == other_type:\n            self_ranks = sorted([self.ranks[4-i*2] for i in range(5)])\n            other_ranks = sorted([other.ranks[4-i*2] for i in range(5)])\n            for r, other_r in zip(self_ranks, other_ranks):\n                if r > other_r:\n                    return 1\n                elif r < other_r:\n                    return -1\n            return 0\n        hand_types = ['High Card', 'Pair', 'Two Pairs', 'Three of a Kind', 'Straight', 'Flush', 'Full House', 'Four of a Kind', 'Straight Flush', 'Royal Flush']\n        return 1 if hand_types.index(hand_type) > hand_types.index(other_type) else -1",
  "test_code": "import pytest\n\ndef test_poker_hand_init():\n    hand = PokerHand('2H 3D TD KC AS')\n    assert hand.cards == ['2', '3', 'T', 'K', 'A']\n    assert hand.ranks == [2, 3, 10, 13, 14]\n\ndef test_is_flush():\n    assert PokerHand('2H 3H TH KH AH').is_flush()\n    assert not PokerHand('2H 3D TD KC AS').is_flush()\n\ndef test_is_straight():\n    assert PokerHand('2H 3D TH KD AC').is_straight()\n    assert not PokerHand('2H 3D TD KC AS').is_straight()\n\ndef test_is_five_high_straight():\n    assert PokerHand('AS 2S 3S 4S 5S')._is_five_high_straight()\n    assert not PokerHand('2H 3D TH KD AC')._is_five_high_straight()\n\ndef test_count_pairs():\n    hand = PokerHand('2H 2D TH KD AC')\n    assert hand.count_pairs() == 2\n\ndef test_hand_type_royal_flush():\n    assert PokerHand('10H JH QH KH AH').hand_type() == 'Royal Flush'\n\ndef test_hand_type_straight_flush():\n    assert PokerHand('2H 3H TH KH AH').hand_type() == 'Straight Flush'\n\ndef test_hand_type_four_of_a_kind():\n    assert PokerHand('2H 2D 2S 2C KH').hand_type() == 'Four of a Kind'\n\ndef test_hand_type_full_house():\n    assert PokerHand('2H 2D TD TH AC').hand_type() == 'Full House'\n\ndef test_hand_type_straight():\n    assert PokerHand('2H 3D TH KD AC').hand_type() == 'Straight'\n\ndef test_hand_type_flush():\n    assert PokerHand('2H 3H TH KH AH').hand_type() == 'Flush'\n\ndef test_hand_type_high_card():\n    assert PokerHand('2H 3D TH KD AC').hand_type() == 'High Card'",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}