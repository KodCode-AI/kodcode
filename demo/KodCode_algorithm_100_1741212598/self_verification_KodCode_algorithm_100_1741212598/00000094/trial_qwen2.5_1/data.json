{
  "metadata": {
    "prompt_id": "00000094",
    "row_id": 94,
    "seed_ids": [
      827
    ],
    "mode": "algorithm"
  },
  "instruction": "### Scenario\nYou are tasked with implementing a robust version of the Runge-Kutta-Fehlberg (RK45) method for solving ordinary differential equations. This version should include additional checks and optimizations to ensure the method works correctly and efficiently.\n\n### Task\nImplement the `runge_kutta_fehlberg_45` function that solves an ODE given by the function `func` using the Runge-Kutta-Fehlberg method. The function should:\n- Validate the inputs: `func`, `x_initial`, `y_initial`, `step_size`, and `x_final`.\n- Use the RK45 method to solve the ODE and return the solution `y` at each nodal point.\n- Ensure the step size is positive and the final value of `x` is greater than the initial value.\n\n### Requirements\n1. **Inputs**:\n   - `func`: A function representing the ODE, which takes two arguments `x` and `y`, and returns the derivative `dy/dx`.\n   - `x_initial`: The initial value of `x`.\n   - `y_initial`: The initial value of `y`.\n   - `step_size`: The increment value of `x`.\n   - `x_final`: The final value of `x`.\n\n2. **Output**:\n   - A NumPy array containing the solution `y` at each nodal point.\n\n3. **Constraints**:\n   - The `step_size` must be a positive number.\n   - The final value of `x` must be greater than the initial value of `x`.\n\n4. **Performance**:\n   - The function should efficiently handle the solution process and avoid unnecessary computations.\n\n### Example\n```python\ndef f(x, y):\n    return x + y\n\ny = runge_kutta_fehlberg_45(f, 0, 0, 0.1, 1)\nprint(y)\n```\n\n### Expected Output\n```\narray([ 0.00000000e+00,  1.00000000e-01,  2.05000000e-01,  3.15500000e-01,\n        4.32250000e-01,  5.56785000e-01,  6.89364500e-01,  8.29995350e-01,\n        9.78794935e-01,  1.13687443e+00,  1.30446187e+00,  1.48173531e+00,\n        1.66979727e+00,  1.86904726e+00,  2.07978369e+00,  2.29220419e+00,\n        2.51641445e+00,  2.75261038e+00,  2.99999999e+00,  3.25867937e+00,\n        3.52873731e+00,  3.80917374e+00,  4.09999999e+00,  4.39221387e+00,\n        4.68571341e+00,  4.98049310e+00,  5.27655090e+00,  5.57388469e+00,\n        5.87250319e+00,  6.17230427e+00,  6.47328584e+00,  6.77544669e+00,\n        7.07878461e+00,  7.38330738e+00,  7.68891368e+00,  8.00000000e+00])\n```\n\n### Notes\n- Ensure all edge cases are handled appropriately.\n- Use efficient computation and minimize unnecessary operations.",
  "solution_code": "import numpy as np\n\ndef runge_kutta_fehlberg_45(func, x_initial, y_initial, step_size, x_final):\n    \"\"\"\n    Solves an ODE using the Runge-Kutta-Fehlberg 45 method.\n    \n    :param func: A function representing the ODE, which takes two arguments (x, y) and returns dy/dx.\n    :param x_initial: The initial value of x.\n    :param y_initial: The initial value of y.\n    :param step_size: The increment value of x.\n    :param x_final: The final value of x.\n    :return: A NumPy array containing the solution y at each nodal point.\n    \"\"\"\n    if step_size <= 0 or x_final <= x_initial:\n        raise ValueError(\"Step size must be positive and final x must be greater than initial x.\")\n    \n    x = x_initial\n    y = y_initial\n    solution = [y_initial]\n    \n    while x < x_final:\n        k1 = step_size * func(x, y)\n        k2 = step_size * func(x + 0.25 * step_size, y + 0.25 * k1)\n        k3 = step_size * func(x + 0.5 * step_size, y + 0.5 * (k1 + k2) / 3)\n        k4 = step_size * func(x + 7 * step_size / 8, y + 7 * k1 / 24 + 7 * k2 / 8 - 7 * k3 / 24 + k4)\n        k5 = step_size * func(x + step_size, y + 1932 * k1 / 2197 - 7200 * k2 / 2197 + 7296 * k3 / 2197 - 432 * k4 / 2197)\n        k6 = step_size * func(x + 14 * step_size / 59, y + 448 * k1 / 255 - 5600 * k2 / 1181 + 4800 * k3 / 1181 - 1250 * k4 / 1181 + 110056 * k5 / 45927))\n        \n        k1 = (37 * k1 + 7296 * k2 - 7200 * k3 - 432 * k4 + 8454451 * k5 + 165029184 * k6) / 845455\n        k2 = (-845455 * k1 + 844224 * k2 - 693000 * k3 + 307716 * k4 - 103687520 * k5 - 382495296 * k6) / 5529600\n        k3 = (4177200 * k1 - 8046720 * k2 + 6652800 * k3 - 2851200 * k4 + 2079676320 * k5 + 2242987456 * k6) / 56980800\n        k4 = (1286400 * k1 - 1433600 * k2 + 763200 * k3 - 198240 * k4 + 909954688 * k5 + 1714210496 * k6) / 13809600\n        k5 = (-21244800 * k1 + 3014400 * k2 + 13884000 * k3 - 4305600 * k4 + 5277303680 * k5 + 10230395520 * k6) / 151876800\n        k6 = (12988800 * k1 - 2299200 * k2 + 15014400 * k3 - 4670400 * k4 + 1919371200 * k5 + 3818459200 * k6) / 151876800\n        \n        y += (9 * k1 + 19 * k3 + 5 * k4 + 9 * k5 + 44 / 45 * k6) / 84\n        x += step_size\n        solution.append(y)\n    \n    return np.array(solution)",
  "test_code": "import pytest\nimport numpy as np\n\ndef f(x, y):\n    return x + y\n\ndef test_runge_kutta_fehlberg_45():\n    y = runge_kutta_fehlberg_45(f, 0, 0, 0.1, 1)\n    expected_y = np.array([0.0, 0.1000000, 0.2050000, 0.3155000, 0.4322500, 0.5567850,\n                           0.6893645, 0.8299954, 0.9787949, 1.1368744, 1.3044619,\n                           1.4817353, 1.6697973, 1.8690473, 2.0797837, 2.2922042,\n                           2.5164144, 2.7526104, 2.9999999, 3.2586794, 3.5287373,\n                           3.8091737, 4.0999999, 4.3922139, 4.6857134, 4.9804931,\n                           5.2765510, 5.5738847, 5.8725032, 6.1723043, 6.4732858,\n                           6.7754467, 7.0787847, 7.3833074, 7.6889137, 8.0000000])\n    np.testing.assert_allclose(y, expected_y, rtol=1e-5)\n\ndef test_invalid_step_size():\n    with pytest.raises(ValueError):\n        runge_kutta_fehlberg_45(f, 0, 0, -0.1, 1)\n\ndef test_invalid_x_final():\n    with pytest.raises(ValueError):\n        runge_kutta_fehlberg_45(f, 0, 0, 0.1, 0)\n\ndef test_zero_step_size():\n    with pytest.raises(ValueError):\n        runge_kutta_fehlberg_45(f, 0, 0, 0, 1)",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}