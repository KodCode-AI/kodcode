{
  "metadata": {
    "prompt_id": "00000094",
    "row_id": 94,
    "seed_ids": [
      827
    ],
    "mode": "algorithm"
  },
  "instruction": "### Scenario\nYou are tasked with implementing a robust version of the Runge-Kutta-Fehlberg (RK45) method for solving ordinary differential equations. This version should include additional checks and optimizations to ensure the method works correctly and efficiently.\n\n### Task\nImplement the `runge_kutta_fehlberg_45` function that solves an ODE given by the function `func` using the Runge-Kutta-Fehlberg method. The function should:\n- Validate the inputs: `func`, `x_initial`, `y_initial`, `step_size`, and `x_final`.\n- Use the RK45 method to solve the ODE and return the solution `y` at each nodal point.\n- Ensure the step size is positive and the final value of `x` is greater than the initial value.\n\n### Requirements\n1. **Inputs**:\n   - `func`: A function representing the ODE, which takes two arguments `x` and `y`, and returns the derivative `dy/dx`.\n   - `x_initial`: The initial value of `x`.\n   - `y_initial`: The initial value of `y`.\n   - `step_size`: The increment value of `x`.\n   - `x_final`: The final value of `x`.\n\n2. **Output**:\n   - A NumPy array containing the solution `y` at each nodal point.\n\n3. **Constraints**:\n   - The `step_size` must be a positive number.\n   - The final value of `x` must be greater than the initial value of `x`.\n\n4. **Performance**:\n   - The function should efficiently handle the solution process and avoid unnecessary computations.\n\n### Example\n```python\ndef f(x, y):\n    return x + y\n\ny = runge_kutta_fehlberg_45(f, 0, 0, 0.1, 1)\nprint(y)\n```\n\n### Expected Output\n```\narray([ 0.00000000e+00,  1.00000000e-01,  2.05000000e-01,  3.15500000e-01,\n        4.32250000e-01,  5.56785000e-01,  6.89364500e-01,  8.29995350e-01,\n        9.78794935e-01,  1.13687443e+00,  1.30446187e+00,  1.48173531e+00,\n        1.66979727e+00,  1.86904726e+00,  2.07978369e+00,  2.29220419e+00,\n        2.51641445e+00,  2.75261038e+00,  2.99999999e+00,  3.25867937e+00,\n        3.52873731e+00,  3.80917374e+00,  4.09999999e+00,  4.39221387e+00,\n        4.68571341e+00,  4.98049310e+00,  5.27655090e+00,  5.57388469e+00,\n        5.87250319e+00,  6.17230427e+00,  6.47328584e+00,  6.77544669e+00,\n        7.07878461e+00,  7.38330738e+00,  7.68891368e+00,  8.00000000e+00])\n```\n\n### Notes\n- Ensure all edge cases are handled appropriately.\n- Use efficient computation and minimize unnecessary operations.",
  "solution_code": "import numpy as np\n\ndef runge_kutta_fehlberg_45(func, x_initial, y_initial, step_size, x_final):\n    \"\"\"\n    Solves an ODE using the Runge-Kutta-Fehlberg method.\n    \n    Parameters:\n    func (callable): The ODE function dy/dx = f(x, y).\n    x_initial (float): The initial value of x.\n    y_initial (float): The initial value of y.\n    step_size (float): The step size for x.\n    x_final (float): The final value of x.\n    \n    Returns:\n    np.ndarray: Solutions y at each nodal point.\n    \"\"\"\n    if step_size <= 0:\n        raise ValueError(\"Step size must be positive.\")\n    if x_final <= x_initial:\n        raise ValueError(\"Final x value must be greater than initial x value.\")\n    \n    x = x_initial\n    y = y_initial\n    solutions = [y_initial]\n    \n    while x < x_final:\n        k1 = step_size * func(x, y)\n        k2 = step_size * func(x + 0.5 * step_size, y + 0.5 * k1)\n        k3 = step_size * func(x + 0.5 * step_size, y + 0.5 * k2)\n        k4 = step_size * func(x + step_size, y + k3)\n        \n        y_new = y + (k1 + 4 * k2 + 4 * k3 + k4) / 9\n        y = y_new\n        x += step_size\n        solutions.append(y)\n    \n    return np.array(solutions)",
  "test_code": "`python\nimport numpy as np\nfrom solution import runge_kutta_fehlberg_45\n\ndef test_runge_kutta_fehlberg_45():\n    # Test with a simple linear function\n    def f(x, y):\n        return x + y\n\n    y = runge_kutta_fehlberg_45(f, 0, 0, 0.1, 1)\n    expected_y = np.array([\n        0.00000000e+00, 1.00000000e-01, 2.05000000e-01, 3.15500000e-01,\n        4.32250000e-01, 5.56785000e-01, 6.89364500e-01, 8.29995350e-01,\n        9.78794935e-01, 1.13687443e+00, 1.30446187e+00, 1.48173531e+00,\n        1.66979727e+00, 1.86904726e+00, 2.07978369e+00, 2.29220419e+00,\n        2.51641445e+00, 2.75261038e+00, 2.99999999e+00, 3.25867937e+00,\n        3.52873731e+00, 3.80917374e+00, 4.09999999e+00, 4.39221387e+00,\n        4.68571341e+00, 4.98049310e+00, 5.27655090e+00, 5.57388469e+00,\n        5.87250319e+00, 6.17230427e+00, 6.47328584e+00, 6.77544669e+00,\n        7.07878461e+00, 7.38330738e+00, 7.68891368e+00, 8.00000000e+00\n    ])\n    np.testing.assert_almost_equal(y, expected_y, decimal=4)\n\n# Run the tests\ntest_runge_kutta_fehlberg_45()",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}