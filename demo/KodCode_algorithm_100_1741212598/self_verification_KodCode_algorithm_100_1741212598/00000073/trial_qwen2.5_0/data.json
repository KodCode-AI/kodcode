{
  "metadata": {
    "prompt_id": "00000073",
    "row_id": 73,
    "seed_ids": [
      449
    ],
    "mode": "algorithm"
  },
  "instruction": "### Scenario\nYou are developing a horoscope application that fetches daily horoscopes for users based on their zodiac sign. The application needs to be robust and handle various edge cases.\n\n### Task\nImplement a function `fetch_horoscope` that interacts with a horoscope website to fetch daily horoscopes. The function should take a zodiac sign and a day as input and return the horoscope text. Ensure the function handles invalid inputs and network-related issues gracefully.\n\n### Requirements\n1. **Input**:\n   - `zodiac_sign`: An integer representing the zodiac sign (1 for Aries, 2 for Taurus, ..., 12 for Pisces).\n   - `day`: A string representing the day for which the horoscope is requested (e.g., \"yesterday\", \"today\", \"tomorrow\").\n\n2. **Output**:\n   - A string containing the horoscope text.\n\n3. **Constraints**:\n   - The zodiac sign must be an integer between 1 and 12.\n   - The day must be one of \"yesterday\", \"today\", or \"tomorrow\".\n\n4. **Performance**:\n   - The function should handle network errors and retry once if the request fails.\n   - The function should avoid making unnecessary requests, such as requesting the same horoscope multiple times within the same day.\n\n5. **Error Handling**:\n   - If the zodiac sign is invalid, the function should return a user-friendly error message.\n   - If the day is invalid, the function should return a user-friendly error message.\n   - If the network request fails, the function should retry once and then return a generic error message if the retry fails.\n\n### Example\n```python\ndef fetch_horoscope(zodiac_sign: int, day: str) -> str:\n    # Your implementation here\n    pass\n\n# Example usage\nprint(fetch_horoscope(1, \"today\"))  # Example output: \"Your daily horoscope for today...\"\nprint(fetch_horoscope(13, \"today\"))  # Example output: \"Invalid zodiac sign.\"\nprint(fetch_horoscope(1, \"next week\"))  # Example output: \"Invalid day.\"\n```\n\n### Notes\n- You can use `requests` and `BeautifulSoup` for web scraping if needed. Ensure you handle potential exceptions and errors gracefully.",
  "solution_code": "import requests\nfrom bs4 import BeautifulSoup\n\ndef fetch_horoscope(zodiac_sign: int, day: str) -> str:\n    \"\"\"\n    Fetches the daily horoscope for the given zodiac sign and day.\n    \n    :param zodiac_sign: An integer representing the zodiac sign (1 for Aries, 2 for Taurus, ..., 12 for Pisces).\n    :param day: A string representing the day for which the horoscope is requested (e.g., \"yesterday\", \"today\", \"tomorrow\").\n    :return: The horoscope text as a string.\n    \"\"\"\n    if zodiac_sign not in range(1, 13):\n        return \"Invalid zodiac sign.\"\n    if day not in [\"yesterday\", \"today\", \"tomorrow\"]:\n        return \"Invalid day.\"\n\n    url = f\"https://www.examplehoroscope.com/horoscope/{zodiac_sign}/{day}.html\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.RequestException:\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n        except requests.RequestException:\n            return \"Failed to fetch the horoscope.\"\n\n    soup = BeautifulSoup(response.text, 'html.parser')\n    horoscope_text = soup.find('div', class_='horoscope-text').get_text()\n    return horoscope_text.strip()\n\n# Example usage\nprint(fetch_horoscope(1, \"today\"))\nprint(fetch_horoscope(13, \"today\"))\nprint(fetch_horoscope(1, \"next week\"))",
  "test_code": "``\nfrom solution import fetch_horoscope\n\ndef test_fetch_horoscope_valid_input():\n    horoscope_text = fetch_horoscope(1, \"today\")\n    assert horoscope_text.startswith(\"Your daily horoscope for today\")\n\ndef test_fetch_horoscope_invalid_zodiac_sign():\n    horoscope_text = fetch_horoscope(13, \"today\")\n    assert horoscope_text == \"Invalid zodiac sign.\"\n\ndef test_fetch_horoscope_invalid_day():\n    horoscope_text = fetch_horoscope(1, \"next week\")\n    assert horoscope_text == \"Invalid day.\"\n\ndef test_fetch_horoscope_network_error_retry():\n    # Simulate a network error by returning a status code other than 200\n    with requests_mock.Mocker() as m:\n        m.get(\"https://www.examplehoroscope.com/horoscope/1/today.html\", status_code=404)\n        horoscope_text = fetch_horoscope(1, \"today\")\n        assert horoscope_text == \"Failed to fetch the horoscope.\"",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}