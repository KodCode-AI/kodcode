{
  "metadata": {
    "prompt_id": "00000017",
    "row_id": 17,
    "seed_ids": [
      609
    ],
    "mode": "algorithm"
  },
  "instruction": "You are given a problem to find the first Fibonacci number that is pandigital (contains all digits 1 to 9) both in the first nine digits and the last nine digits. The sequence is defined as:\n\n\\[\nF_n = F_{n-1} + F_{n-2}\n\\]\n\nwith initial conditions \\(F_1 = 1\\) and \\(F_2 = 1\\).\n\n**Task**:\nImplement a function `find_pandigital_fibonacci` that returns the index of the first Fibonacci number that meets the criteria. If no such number exists within the first 1,000,000 Fibonacci numbers, return -1.\n\n#### Constraints:\n- The function should handle large numbers efficiently.\n- The function should be optimized for performance.\n\n#### Input and Output:\n- **Input**: None (the function should use predefined variables and constants).\n- **Output**: An integer representing the index of the first pandigital Fibonacci number.\n\n#### Example:\n```python\n# Example input (no explicit input needed, use predefined values)\nprint(find_pandigital_fibonacci())  # Output: 329468\n```\n\n#### Helper Functions:\nYou are allowed to use helper functions if needed. The provided `check` and `check1` functions can be used but are not mandatory.\n\n#### Implementation:\n```python\ndef find_pandigital_fibonacci() -> int:\n    # Your implementation here\n    pass\n\ndef check(number: int) -> bool:\n    # Check function for pandigital properties\n    pass\n\ndef check1(number: int) -> bool:\n    # Check function for pandigital properties from end\n    pass\n```\n\n### Requirements:\n- The function `find_pandigital_fibonacci` should be efficient and optimized for large inputs.\n- Use modulo arithmetic to handle large numbers.\n- The solution should be able to handle the large number of Fibonacci numbers specified.\n\n### Scoring:\n- Correct implementation and performance: 100 points.\n- Partial implementation: Partial points based on correctness and efficiency.\n- Incorrect or inefficient implementation: 0 points.",
  "solution_code": "def find_pandigital_fibonacci() -> int:\n    def check(number: int) -> bool:\n        return sorted(str(number)) == list('123456789')\n    \n    def check1(number: int) -> bool:\n        return sorted(str(number)) == list('123456789')[::-1]\n    \n    first, second = 1, 1\n    index = 2\n    while index <= 1000000:\n        number = first + second\n        if check(number) and check1(number):\n            return index\n        first, second = second, number\n        index += 1\n    return -1",
  "test_code": "def check(number: int) -> bool:\n    return sorted(str(number)) == list('123456789')\n\ndef check1(number: int) -> bool:\n    return sorted(str(number)) == list('123456789')[::-1]\n\ndef test_find_pandigital_fibonacci():\n    assert find_pandigital_fibonacci() == 329468\n\ndef test_pandigital_properties():\n    assert check(123456789)\n    assert check1(987654321)\n    assert not check(123456788)\n    assert not check1(987654320)\n\ndef test_large_numbers():\n    assert check(123456789123456789) == check(123456789123456789)\n    assert check1(987654321987654321) == check1(987654321987654321)\n\ndef test_no_pandigital_in_range():\n    assert find_pandigital_fibonacci() in range(1, 1000001)\n\ndef test_zero_case():\n    assert find_pandigital_fibonacci(0) is None",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}