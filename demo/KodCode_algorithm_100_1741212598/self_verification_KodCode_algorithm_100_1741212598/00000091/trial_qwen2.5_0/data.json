{
  "metadata": {
    "prompt_id": "00000091",
    "row_id": 91,
    "seed_ids": [
      736
    ],
    "mode": "algorithm"
  },
  "instruction": "### Context\nYou are working on a computational number theory project and need to implement a function to calculate the number of distinct prime factors for a given number. The function should be efficient and handle edge cases properly.\n\n### Problem Description\nWrite a Python function `calculate_distinct_prime_factors` that takes an integer \\( n \\) and returns the number of distinct prime factors of \\( n \\). The function should follow the following specifications:\n\n- **Input**:\n  - A positive integer \\( n \\) where \\( 1 \\leq n \\leq 10^6 \\).\n\n- **Output**:\n  - An integer representing the number of distinct prime factors of \\( n \\).\n\n### Example\n```python\nprint(calculate_distinct_prime_factors(51242183))  # Output: 3\nprint(calculate_distinct_prime_factors(123456789))  # Output: 2\n```\n\n### Constraints\n- \\( 1 \\leq n \\leq 10^6 \\)\n\n### Notes\n- Ensure that your implementation is efficient and handles edge cases correctly.\n\n### Hint\nConsider the provided code snippet for inspiration but do not directly copy the code. Think about how you can optimize the algorithm for better performance.",
  "solution_code": "def calculate_distinct_prime_factors(n):\n    \"\"\"\n    Returns the number of distinct prime factors of n.\n    \"\"\"\n    if n < 2:\n        return 0\n    \n    count = 0\n    # Check for number of 2s that divide n\n    if n % 2 == 0:\n        count += 1\n        while n % 2 == 0:\n            n //= 2\n    \n    # n must be odd at this point, so we can skip even numbers\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, count i and divide n\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n //= i\n    \n    # This condition is to handle the case when n is a prime number\n    # greater than 2\n    if n > 2:\n        count += 1\n    \n    return count",
  "test_code": "``\nfrom solution import calculate_distinct_prime_factors\n\ndef test_calculate_distinct_prime_factors():\n    assert calculate_distinct_prime_factors(51242183) == 3\n    assert calculate_distinct_prime_factors(123456789) == 2\n    assert calculate_distinct_prime_factors(60) == 3  # 2, 3, 5\n    assert calculate_distinct_prime_factors(13) == 1  # Prime number\n    assert calculate_distinct_prime_factors(1) == 0\n    assert calculate_distinct_prime_factors(2) == 1  # Prime number\n    assert calculate_distinct_prime_factors(4) == 1  # 2 is the only prime factor, but we count it once",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}