{
  "metadata": {
    "prompt_id": "00000091",
    "row_id": 91,
    "seed_ids": [
      736
    ],
    "mode": "algorithm"
  },
  "instruction": "### Context\nYou are working on a computational number theory project and need to implement a function to calculate the number of distinct prime factors for a given number. The function should be efficient and handle edge cases properly.\n\n### Problem Description\nWrite a Python function `calculate_distinct_prime_factors` that takes an integer \\( n \\) and returns the number of distinct prime factors of \\( n \\). The function should follow the following specifications:\n\n- **Input**:\n  - A positive integer \\( n \\) where \\( 1 \\leq n \\leq 10^6 \\).\n\n- **Output**:\n  - An integer representing the number of distinct prime factors of \\( n \\).\n\n### Example\n```python\nprint(calculate_distinct_prime_factors(51242183))  # Output: 3\nprint(calculate_distinct_prime_factors(123456789))  # Output: 2\n```\n\n### Constraints\n- \\( 1 \\leq n \\leq 10^6 \\)\n\n### Notes\n- Ensure that your implementation is efficient and handles edge cases correctly.\n\n### Hint\nConsider the provided code snippet for inspiration but do not directly copy the code. Think about how you can optimize the algorithm for better performance.",
  "solution_code": "def calculate_distinct_prime_factors(n: int) -> int:\n    \"\"\"\n    Returns the number of distinct prime factors of n.\n    \"\"\"\n    if n <= 1:\n        return 0\n    \n    distinct_factors = set()\n    # Check divisibility by 2\n    if n % 2 == 0:\n        distinct_factors.add(2)\n        while n % 2 == 0:\n            n //= 2\n    \n    # Check for odd factors\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            distinct_factors.add(i)\n            while n % i == 0:\n                n //= i\n    \n    # If n is a prime number and greater than 2\n    if n > 2:\n        distinct_factors.add(n)\n    \n    return len(distinct_factors)",
  "test_code": "def test_calculate_distinct_prime_factors():\n    assert calculate_distinct_prime_factors(51242183) == 3\n    assert calculate_distinct_prime_factors(123456789) == 2\n    assert calculate_distinct_prime_factors(1) == 0\n    assert calculate_distinct_prime_factors(2) == 1\n    assert calculate_distinct_prime_factors(100) == 2  # 2 and 5 are the prime factors\n    assert calculate_distinct_prime_factors(30) == 3  # 2, 3, and 5 are the prime factors\n    assert calculate_distinct_prime_factors(60) == 3  # 2, 3, and 5 are the prime factors\n    assert calculate_distinct_prime_factors(1099) == 2  # 7 and 157 are the prime factors\n\n# Test with very large numbers\n    assert calculate_distinct_prime_factors(10**6 - 1) == 4  # 109, 3, 3, 7 are prime factors\n    assert calculate_distinct_prime_factors(10**6) == 0  # 10^6 is not a prime and has 1 as a factor which is not considered",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}