{
  "metadata": {
    "prompt_id": "00000095",
    "row_id": 95,
    "seed_ids": [
      970
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with enhancing the `is_balanced` function to handle more complex scenarios involving nested sequences and ensuring robustness against malformed input. Your goal is to extend the functionality to validate more intricate patterns of nested brackets.\n\n**Enhancements**:\n1. **Escaped Characters**: Handle escaped brackets, where a backslash character `\\` before an opening or closing bracket indicates that the next character should be treated as a literal character rather than a bracket.\n2. **Nested Sequences**: Support nested sequences of any depth, ensuring that each sequence of brackets is properly closed.\n3. **Malformed Input Handling**: Improve error handling to provide more informative feedback when the input is malformed.\n\n**Requirements**:\n- **Input**: A string `s` consisting of a sequence of brackets and possibly other characters.\n- **Output**: A boolean value indicating whether the sequence of brackets is properly nested.\n- **Constraints**:\n  - The input string `s` can have a maximum length of \\(10^6\\) characters.\n- **Performance**: The function should handle large inputs efficiently.\n\n**Example**:\n```python\nis_balanced(\"({[\\\\]})\")  # True, with escaped square bracket\nis_balanced(\"({[\\\\[\\\\]})\")  # False, with malformed input\nis_balanced(\"[{()}\\\\{\\\\}[]]\")  # True, with nested sequences and escaped characters\n```\n\n**Your Task**:\nImplement the enhanced `is_balanced` function that meets the above requirements.",
  "solution_code": "def is_balanced(s):\n    \"\"\"\n    Returns True if the input string s has properly nested and balanced brackets, False otherwise.\n    Handles escaped characters and nested sequences.\n    \"\"\"\n    stack = []\n    escape = False\n    for i, char in enumerate(s):\n        if escape:\n            # Skip the character if it's escaped\n            escape = False\n            continue\n\n        if char == '\\\\':\n            # Next character is literal, skip it\n            escape = True\n            continue\n        \n        if char in '([{':\n            # Push opening bracket onto the stack\n            stack.append(char)\n        elif char in ')]}':\n            # If the stack is empty, it means there's no matching opening bracket\n            if not stack:\n                return False\n            # Pop the last opening bracket\n            top = stack.pop()\n            if (char == ')' and top != '(') or (char == ']' and top != '[') or (char == '}' and top != '{'):\n                return False\n    # If the stack is empty, all brackets were properly closed\n    return not stack",
  "test_code": "def test_is_balanced():\n    assert is_balanced(\"({[\\\\]})\") == True, \"Failed on balanced with escaped square bracket\"\n    assert is_balanced(\"({[\\\\[\\\\]})\") == False, \"Failed on malformed input with escaped characters\"\n    assert is_balanced(\"[{()}\\\\{\\\\}[]]\") == True, \"Failed on nested sequences and escaped characters\"\n    assert is_balanced(\"([]{})\") == True, \"Failed on simple nested balance\"\n    assert is_balanced(\"([)]\") == False, \"Failed on improper nesting\"\n    assert is_balanced(\"({[]})\") == True, \"Failed on balanced nested sequence\"\n    assert is_balanced(\"\\\\[\\\\]{}\") == True, \"Failed on balanced with escaped opening and closing brackets\"\n    assert is_balanced(\"\\\\{\\\\[\\\\}\\\\]\") == True, \"Failed on balanced with escaped characters inside nested brackets\"\n    assert is_balanced(\"\\\\{\\\\[\\\\}\") == False, \"Failed on malformed input with escaped characters inside nested brackets\"\n    assert is_balanced(\"\") == True, \"Failed on empty string\"\n    assert is_balanced(\"a({[\\\\]})b\") == True, \"Failed on string with escaped characters in the middle\"",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}