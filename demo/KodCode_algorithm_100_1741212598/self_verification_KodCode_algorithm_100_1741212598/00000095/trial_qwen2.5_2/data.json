{
  "metadata": {
    "prompt_id": "00000095",
    "row_id": 95,
    "seed_ids": [
      970
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with enhancing the `is_balanced` function to handle more complex scenarios involving nested sequences and ensuring robustness against malformed input. Your goal is to extend the functionality to validate more intricate patterns of nested brackets.\n\n**Enhancements**:\n1. **Escaped Characters**: Handle escaped brackets, where a backslash character `\\` before an opening or closing bracket indicates that the next character should be treated as a literal character rather than a bracket.\n2. **Nested Sequences**: Support nested sequences of any depth, ensuring that each sequence of brackets is properly closed.\n3. **Malformed Input Handling**: Improve error handling to provide more informative feedback when the input is malformed.\n\n**Requirements**:\n- **Input**: A string `s` consisting of a sequence of brackets and possibly other characters.\n- **Output**: A boolean value indicating whether the sequence of brackets is properly nested.\n- **Constraints**:\n  - The input string `s` can have a maximum length of \\(10^6\\) characters.\n- **Performance**: The function should handle large inputs efficiently.\n\n**Example**:\n```python\nis_balanced(\"({[\\\\]})\")  # True, with escaped square bracket\nis_balanced(\"({[\\\\[\\\\]})\")  # False, with malformed input\nis_balanced(\"[{()}\\\\{\\\\}[]]\")  # True, with nested sequences and escaped characters\n```\n\n**Your Task**:\nImplement the enhanced `is_balanced` function that meets the above requirements.",
  "solution_code": "def is_balanced(s: str) -> bool:\n    \"\"\"\n    Returns True if the input string s has a properly nested sequence of brackets, considering escaped characters.\n    \"\"\"\n    stack = []\n    escape_next = False\n    \n    for char in s:\n        if escape_next:\n            escape_next = False\n            continue\n        \n        if char == '\\\\':\n            escape_next = True\n            continue\n        \n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack or not is_matching_pair(stack.pop(), char):\n                return False\n    \n    return not stack\n\ndef is_matching_pair(opening: str, closing: str) -> bool:\n    \"\"\"\n    Returns True if the given opening and closing brackets form a matching pair.\n    \"\"\"\n    return (opening == '(' and closing == ')') or \\\n           (opening == '[' and closing == ']') or \\\n           (opening == '{' and closing == '}')",
  "test_code": "def test_is_balanced():\n    assert is_balanced(\"({[\\\\]})\") == True, \"Test with escaped square bracket failed.\"\n    assert is_balanced(\"({[\\\\[\\\\]})\") == False, \"Test with malformed input failed.\"\n    assert is_balanced(\"[{()}\\\\{\\\\}[]]\") == True, \"Test with nested sequences and escaped characters failed.\"\n    assert is_balanced(\"([)]\") == False, \"Test with unbalanced nested sequences failed.\"\n    assert is_balanced(\"\") == True, \"Test with empty string failed.\"\n    assert is_balanced(\"([]{})\") == True, \"Test with well-formed nested sequences failed.\"\n    assert is_balanced(\"([{}])\") == True, \"Test with correctly nested sequences failed.\"\n    assert is_balanced(\"\\\\([{}])\") == True, \"Test with escaped opening and closing brackets failed.\"\n    assert is_balanced(\"\\\\([{}]\") == False, \"Test with malformed input due to unescaped closing bracket failed.\"\n\ntest_is_balanced()",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}