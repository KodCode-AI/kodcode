{
  "metadata": {
    "prompt_id": "00000095",
    "row_id": 95,
    "seed_ids": [
      970
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with enhancing the `is_balanced` function to handle more complex scenarios involving nested sequences and ensuring robustness against malformed input. Your goal is to extend the functionality to validate more intricate patterns of nested brackets.\n\n**Enhancements**:\n1. **Escaped Characters**: Handle escaped brackets, where a backslash character `\\` before an opening or closing bracket indicates that the next character should be treated as a literal character rather than a bracket.\n2. **Nested Sequences**: Support nested sequences of any depth, ensuring that each sequence of brackets is properly closed.\n3. **Malformed Input Handling**: Improve error handling to provide more informative feedback when the input is malformed.\n\n**Requirements**:\n- **Input**: A string `s` consisting of a sequence of brackets and possibly other characters.\n- **Output**: A boolean value indicating whether the sequence of brackets is properly nested.\n- **Constraints**:\n  - The input string `s` can have a maximum length of \\(10^6\\) characters.\n- **Performance**: The function should handle large inputs efficiently.\n\n**Example**:\n```python\nis_balanced(\"({[\\\\]})\")  # True, with escaped square bracket\nis_balanced(\"({[\\\\[\\\\]})\")  # False, with malformed input\nis_balanced(\"[{()}\\\\{\\\\}[]]\")  # True, with nested sequences and escaped characters\n```\n\n**Your Task**:\nImplement the enhanced `is_balanced` function that meets the above requirements.",
  "solution_code": "def is_balanced(s: str) -> bool:\n    \"\"\"\n    Checks if the input string s has balanced brackets, considering escape characters.\n    Escaped characters treat the next character as literal.\n    \"\"\"\n    stack = []\n    escape = False\n    for i, char in enumerate(s):\n        if escape:\n            escape = False\n            continue\n        if char == '\\\\':\n            escape = True\n            continue\n        if char in '([{':\n            stack.append(char)\n        elif char in '}])':\n            if not stack or stack[-1] == '{' and char != '}' or stack[-1] == '(' and char != ')' or stack[-1] == '[' and char != ']':\n                return False\n            stack.pop()\n        else:\n            # Ignore other characters\n            continue\n    return not stack",
  "test_code": "\\\n\ndef test_is_balanced():\n    assert is_balanced(\"({[\\\\]})\") == True, \"Failed with escaped square bracket\"\n    assert is_balanced(\"({[\\\\[\\\\]})\") == False, \"Failed with malformed input\"\n    assert is_balanced(\"[{()}\\\\{\\\\}[]]\") == True, \"Failed with nested sequences and escaped characters\"\n    assert is_balanced(\"abc[def]ghi\") == True, \"Failed with non-bracket characters in between\"\n    assert is_balanced(\"{{{{}])\") == False, \"Failed with imbalanced closing curly braces\"\n    assert is_balanced(\"\\\\[{\\\\}]\") == True, \"Failed with escaped square brackets\"\n    assert is_balanced(\"\\\\[\\\\{\\\\}\\\\]\") == True, \"Failed with properly escaped and nested brackets\"\n    assert is_balanced(\"\\\\[\\\\{\\\\]})\") == False, \"Failed with escape and malformed input\"\n    assert is_balanced(\"\") == True, \"Failed with empty string\"\n    assert is_balanced(\"()[]{}\") == True, \"Failed with properly balanced strings\"\n    assert is_balanced(\"([]{})\") == True, \"Failed with nested balanced strings\"\n    assert is_balanced(\"[]{}\") == True, \"Failed with interleaved balanced strings\"\n    assert is_balanced(\"([)]\") == False, \"Failed with mismatched closing brackets\"\n    assert is_balanced(\"{[}\") == False, \"Failed with mismatched closing brackets\"\n    assert is_balanced(\"({[\\\\]])\") == False, \"Failed with mismatched and escaped closing brackets\"\n    \ntest_is_balanced()",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}