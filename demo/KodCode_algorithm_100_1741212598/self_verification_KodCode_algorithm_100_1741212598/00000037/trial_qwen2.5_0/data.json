{
  "metadata": {
    "prompt_id": "00000037",
    "row_id": 37,
    "seed_ids": [
      526
    ],
    "mode": "algorithm"
  },
  "instruction": "Given the integer partition problem, where \\( p(n) \\) represents the number of different ways \\( n \\) coins can be separated into piles, implement a more optimized solution to find the least value of \\( n \\) for which \\( p(n) \\) is divisible by one million.\n\n**Scenario**:\nYou are required to implement an optimized version of the integer partition algorithm to handle larger values of \\( n \\) more efficiently.\n\n**Input**:\n- A single integer \\( n \\) (1 \u2264 \\( n \\) \u2264 10^6).\n\n**Output**:\n- Return the smallest integer \\( n \\) such that \\( p(n) \\) is divisible by one million.\n\n**Constraints**:\n- \\( 1 \\leq n \\leq 10^6 \\)\n\n**Performance Requirement**:\n- The solution should be efficient and able to handle values up to \\( n = 10^6 \\) within a reasonable time.\n\n**Implementation Challenges**:\n- Consider how to handle large values of \\( n \\) efficiently.\n- Ensure that intermediate results are cached to avoid redundant calculations.\n\n```python\ndef optimized_partition(n: int) -> int:\n    \"\"\"\n    >>> optimized_partition(1)\n    1\n\n    >>> optimized_partition(9)\n    14\n\n    >>> optimized_partition(1000000)\n    55374\n    \"\"\"\n    # Your optimized solution goes here\n```",
  "solution_code": "def optimized_partition(n: int) -> int:\n    \"\"\"\n    >>> optimized_partition(1)\n    1\n\n    >>> optimized_partition(9)\n    14\n\n    >>> optimized_partition(1000000)\n    55374\n    \"\"\"\n    # Initialize a list to store the number of partitions for each value up to n\n    partitions = [0] * (n + 1)\n    partitions[0] = 1  # There's one way to partition 0 coins\n\n    # Use a dynamic programming approach with nested loops to compute the partitions\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            partitions[j] += partitions[j - i]\n\n    # Iterate until we find the smallest n where p(n) is divisible by one million\n    i = 1\n    while True:\n        if partitions[i] % 1000000 == 0:\n            return i\n        i += 1",
  "test_code": "import pytest\n\ndef test_optimized_partition():\n    # Test with smaller values of n to verify the correctness\n    assert optimized_partition(1) == 1\n    assert optimized_partition(9) == 14\n\n    # Test with a large value of n\n    assert optimized_partition(1000000) == 55374\n\ndef test_partitions_zero():\n    # Test the zero case\n    assert optimized_partition(0) == 1\n\ndef test_partitions_divisibility():\n    # Test divisibility for intermediate values\n    assert optimized_partition(999999) != 0  # Should not be divisible by 1000000\n    assert optimized_partition(55373) != 0  # Should not be divisible by 1000000\n    assert optimized_partition(55374) == 0  # Should be divisible by 1000000",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}