{
  "metadata": {
    "prompt_id": "00000037",
    "row_id": 37,
    "seed_ids": [
      526
    ],
    "mode": "algorithm"
  },
  "instruction": "Given the integer partition problem, where \\( p(n) \\) represents the number of different ways \\( n \\) coins can be separated into piles, implement a more optimized solution to find the least value of \\( n \\) for which \\( p(n) \\) is divisible by one million.\n\n**Scenario**:\nYou are required to implement an optimized version of the integer partition algorithm to handle larger values of \\( n \\) more efficiently.\n\n**Input**:\n- A single integer \\( n \\) (1 \u2264 \\( n \\) \u2264 10^6).\n\n**Output**:\n- Return the smallest integer \\( n \\) such that \\( p(n) \\) is divisible by one million.\n\n**Constraints**:\n- \\( 1 \\leq n \\leq 10^6 \\)\n\n**Performance Requirement**:\n- The solution should be efficient and able to handle values up to \\( n = 10^6 \\) within a reasonable time.\n\n**Implementation Challenges**:\n- Consider how to handle large values of \\( n \\) efficiently.\n- Ensure that intermediate results are cached to avoid redundant calculations.\n\n```python\ndef optimized_partition(n: int) -> int:\n    \"\"\"\n    >>> optimized_partition(1)\n    1\n\n    >>> optimized_partition(9)\n    14\n\n    >>> optimized_partition(1000000)\n    55374\n    \"\"\"\n    # Your optimized solution goes here\n```",
  "solution_code": "from functools import lru_cache\n\ndef optimized_partition(n: int) -> int:\n    \"\"\"\n    Returns the smallest integer n such that p(n) is divisible by one million.\n    \"\"\"\n    @lru_cache(maxsize=None)\n    def partition_k(n: int, k: int) -> int:\n        if n == 0:\n            return 1\n        if n < 0 or k == 0:\n            return 0\n        return partition_k(n - k, k) + partition_k(n - 1, k - 1)\n    \n    n = 1\n    while True:\n        count = 0\n        for k in range(1, n + 1):\n            count += partition_k(n, k)\n        if count % 1000000 == 0:\n            return n\n        n += 1",
  "test_code": "import pytest\n\ndef test_optimized_partition():\n    assert optimized_partition(1) == 1\n    assert optimized_partition(9) == 14\n    assert optimized_partition(1000000) == 55374\n\ndef test_partition_k():\n    assert partition_k(4, 2) == 5  # 4 = 2 + 2, 4 = 1 + 1 + 2, 4 = 2 + 1 + 1, 4 = 1 + 2 + 1, 4 = 1 + 1 + 1 + 1\n\ndef partition_k(n: int, k: int) -> int:\n    if n == 0:\n        return 1\n    if n < 0 or k == 0:\n        return 0\n    return partition_k(n - k, k) + partition_k(n - 1, k - 1)\n\n# If you want to disable the lru_cache during the tests\npartition_k.cache_clear()",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}