{
  "metadata": {
    "prompt_id": "00000029",
    "row_id": 29,
    "seed_ids": [
      492
    ],
    "mode": "algorithm"
  },
  "instruction": "Given a prime number \\( p \\), determine if there exists a positive integer \\( n \\) such that \\( n^3 + n^2p \\) is a perfect cube. Your task is to write a function that counts the number of prime numbers below a given limit that satisfy this property.\n\n### Examples\n\n```python\ndef check_primes_with_property(limit: int) -> int:\n    \"\"\"\n    >>> check_primes_with_property(100)\n    4\n    >>> check_primes_with_property(1000)\n    10\n    >>> check_primes_with_property(10000)\n    12\n    >>> check_primes_with_property(100000)\n    13\n    >>> check_primes_with_property(1000000)\n    15\n    \"\"\"\n```\n\n### Constraints\n- \\( 1 \\leq \\text{limit} \\leq 10^6 \\)\n- The solution should be efficient and run within a reasonable time for the given constraints.\n\n### Implementation\n\n1. **Prime Checking Function**: Write a helper function to check if a number is prime.\n2. **Prime Generation and Property Checking**: Write the main function to generate primes below the given limit and check if they satisfy the property.\n3. **Efficiency Considerations**: Ensure the solution is efficient by optimizing the prime-checking process and the loop termination condition.\n\n### Follow-up\n\n- Explain why the provided solution in the code snippet is not the most efficient approach for very large limits.\n- Suggest potential optimizations to improve the performance of your solution.",
  "solution_code": "def is_prime(num: int) -> bool:\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef check_primes_with_property(limit: int) -> int:\n    \"\"\"\n    Counts the number of prime numbers below a given limit that satisfy the property.\n    \"\"\"\n    def property_check(p: int) -> bool:\n        n = 1\n        while n**3 < (n**3 + n**2 * p):\n            if (n**3 + n**2 * p)**(1/3) == int((n**3 + n**2 * p)**(1/3)):\n                return True\n            n += 1\n        return False\n    \n    count = 0\n    for p in range(2, limit):\n        if is_prime(p) and property_check(p):\n            count += 1\n    return count",
  "test_code": "import pytest\nfrom math import isclose\n\ndef is_prime(num: int) -> bool:\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef property_check(p: int) -> bool:\n    n = 1\n    while n**3 < (n**3 + n**2 * p):\n        if isclose((n**3 + n**2 * p)**(1/3), int((n**3 + n**2 * p)**(1/3))):\n            return True\n        n += 1\n    return False\n\ndef test_check_primes_with_property():\n    assert check_primes_with_property(100) == 4\n    assert check_primes_with_property(1000) == 10\n    assert check_primes_with_property(10000) == 12\n    assert check_primes_with_property(100000) == 13\n    assert check_primes_with_property(1000000) == 15\n\ndef test_property_check():\n    assert property_check(2) is True\n    assert property_check(3) is True\n    assert property_check(5) is False\n    assert property_check(7) is False\n    assert property_check(11) is True\n\ndef test_is_prime():\n    assert is_prime(2) is True\n    assert is_prime(3) is True\n    assert is_prime(4) is False\n    assert is_prime(5) is True\n    assert is_prime(29) is True\n    assert is_prime(30) is False\n    assert is_prime(97) is True",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}