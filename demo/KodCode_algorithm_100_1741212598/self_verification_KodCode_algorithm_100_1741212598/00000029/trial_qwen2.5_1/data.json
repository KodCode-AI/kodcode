{
  "metadata": {
    "prompt_id": "00000029",
    "row_id": 29,
    "seed_ids": [
      492
    ],
    "mode": "algorithm"
  },
  "instruction": "Given a prime number \\( p \\), determine if there exists a positive integer \\( n \\) such that \\( n^3 + n^2p \\) is a perfect cube. Your task is to write a function that counts the number of prime numbers below a given limit that satisfy this property.\n\n### Examples\n\n```python\ndef check_primes_with_property(limit: int) -> int:\n    \"\"\"\n    >>> check_primes_with_property(100)\n    4\n    >>> check_primes_with_property(1000)\n    10\n    >>> check_primes_with_property(10000)\n    12\n    >>> check_primes_with_property(100000)\n    13\n    >>> check_primes_with_property(1000000)\n    15\n    \"\"\"\n```\n\n### Constraints\n- \\( 1 \\leq \\text{limit} \\leq 10^6 \\)\n- The solution should be efficient and run within a reasonable time for the given constraints.\n\n### Implementation\n\n1. **Prime Checking Function**: Write a helper function to check if a number is prime.\n2. **Prime Generation and Property Checking**: Write the main function to generate primes below the given limit and check if they satisfy the property.\n3. **Efficiency Considerations**: Ensure the solution is efficient by optimizing the prime-checking process and the loop termination condition.\n\n### Follow-up\n\n- Explain why the provided solution in the code snippet is not the most efficient approach for very large limits.\n- Suggest potential optimizations to improve the performance of your solution.",
  "solution_code": "from math import isqrt\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Returns True if n is a prime number, else False.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef check_primes_with_property(limit: int) -> int:\n    count = 0\n    for p in range(2, limit):\n        if is_prime(p):\n            n = 1\n            while True:\n                value = (n**3 + n**2 * p)\n                if is_cube(value):\n                    count += 1\n                    break\n                n += 1\n    return count\n\ndef is_cube(n: int) -> bool:\n    \"\"\"\n    Returns True if n is a perfect cube, else False.\n    \"\"\"\n    cube_root = round(n ** (1/3))\n    return cube_root ** 3 == n",
  "test_code": "def test_is_prime():\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(4) == False\n    assert is_prime(5) == True\n    assert is_prime(16) == False\n\ndef test_is_cube():\n    assert is_cube(1) == True\n    assert is_cube(8) == True\n    assert is_cube(27) == True\n    assert is_cube(64) == True\n    assert is_cube(5) == False\n\ndef test_check_primes_with_property():\n    assert check_primes_with_property(100) == 4\n    assert check_primes_with_property(1000) == 10\n    assert check_primes_with_property(10000) == 12\n    assert check_primes_with_property(100000) == 13\n    assert check_primes_with_property(1000000) == 15\n\nfrom solution import check_primes_with_property",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}