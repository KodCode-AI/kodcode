{
  "metadata": {
    "prompt_id": "00000082",
    "row_id": 82,
    "seed_ids": [
      28
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with enhancing the existing LCS (Longest Common Subsequence) solution to include additional functionalities. Your task is to modify the provided code to achieve the following:\n\n1. **Return All LCS**: Instead of just the length of the LCS, modify the solution to also return all possible LCS sequences as a list of strings. If there are multiple LCS sequences of the same length, include all of them in the list.\n\n2. **Print All LCS**: Additionally, print all the LCS sequences in a formatted manner, similar to the provided example.\n\n3. **Optimize Space Usage**: Optimize the space complexity of the solution to \\(O(n)\\) by using only two rows of the DP table at a time.\n\n**Constraints**:\n- The length of both input strings will be between 1 and 1000.\n\n**Input**:\n- Two strings `x` and `y` as input.\n\n**Output**:\n- A tuple containing:\n  - The length of the LCS.\n  - A list of all LCS sequences.\n\n**Performance Requirement**:\n- The solution should be efficient and handle large input strings within a reasonable time.\n\n**Example**:\n```python\na = \"AGGTAB\"\nb = \"GXTXAYB\"\nexpected_output = (4, [\"GTAB\", \"GBAB\"])\nprint(longest_common_subsequence(a, b))\n# Output:\n# len = 4, sub-sequence = GTAB\n# len = 4, sub-sequence = GBAB\n# (4, ['GTAB', 'GBAB'])\n```",
  "solution_code": "def longest_common_subsequence(x: str, y: str) -> (int, [str]):\n    \"\"\"\n    Returns the length of the LCS and all LCS sequences in a list of strings.\n    \"\"\"\n    m, n = len(x), len(y)\n    dp_prev = [0] * (n + 1)\n    dp_curr = [0] * (n + 1)\n\n    # Build the DP table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if x[i - 1] == y[j - 1]:\n                dp_curr[j] = dp_prev[j - 1] + 1\n            else:\n                dp_curr[j] = max(dp_prev[j], dp_curr[j - 1])\n\n        # Swap the DP arrays\n        dp_prev, dp_curr = dp_curr, dp_prev\n\n    # Reconstruct all LCS sequences\n    lcs_length = dp_prev[-1]\n    sequences = set()\n\n    def backtrack(i, j, seq):\n        if i == 0 or j == 0:\n            sequences.add(''.join(seq)[::-1])\n            return\n        if x[i - 1] == y[j - 1]:\n            seq.append(x[i - 1])\n            backtrack(i - 1, j - 1, seq)\n            seq.pop()\n        elif dp_prev[j - 1] > dp_prev[j]:\n            backtrack(i, j - 1, seq)\n        else:\n            backtrack(i - 1, j, seq)\n\n    backtrack(m, n, [])\n    return lcs_length, list(sequences)",
  "test_code": "from solution import longest_common_subsequence\n\ndef test_longest_common_subsequence():\n    a = \"AGGTAB\"\n    b = \"GXTXAYB\"\n    expected_output = (4, [\"GTAB\", \"GBAB\"])\n    assert longest_common_subsequence(a, b) == expected_output\n\n    a = \"ABC\"\n    b = \"AC\"\n    expected_output = (2, [\"AC\"])\n    assert longest_common_subsequence(a, b) == expected_output\n\n    a = \"ABCDGH\"\n    b = \"AEDFHR\"\n    expected_output = (3, [\"ADH\"])\n    assert longest_common_subsequence(a, b) == expected_output\n\n    a = \"AGGTAB\"\n    b = \"AGGTAB\"\n    expected_output = (6, [\"AGGTAB\"])\n    assert longest_common_subsequence(a, b) == expected_output\n\n    a = \"ABAC\"\n    b = \"BAC\"\n    expected_output = (2, [\"AB\", \"BA\"])\n    assert longest_common_subsequence(a, b) == expected_output\n\n    a = \"\"\n    b = \"ABCD\"\n    expected_output = (0, [])\n    assert longest_common_subsequence(a, b) == expected_output\n\n    a = \"abcdGH\"\n    b = \"defgh\"\n    expected_output = (0, [])\n    assert longest_common_subsequence(a, b) == expected_output\n\n    a = \"banana\"\n    b = \"bandana\"\n    expected_output = (4, [\"ban\", \"bana\"])\n    assert longest_common_subsequence(a, b) == expected_output",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}