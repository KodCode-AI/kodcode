{
  "metadata": {
    "prompt_id": "00000082",
    "row_id": 82,
    "seed_ids": [
      28
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with enhancing the existing LCS (Longest Common Subsequence) solution to include additional functionalities. Your task is to modify the provided code to achieve the following:\n\n1. **Return All LCS**: Instead of just the length of the LCS, modify the solution to also return all possible LCS sequences as a list of strings. If there are multiple LCS sequences of the same length, include all of them in the list.\n\n2. **Print All LCS**: Additionally, print all the LCS sequences in a formatted manner, similar to the provided example.\n\n3. **Optimize Space Usage**: Optimize the space complexity of the solution to \\(O(n)\\) by using only two rows of the DP table at a time.\n\n**Constraints**:\n- The length of both input strings will be between 1 and 1000.\n\n**Input**:\n- Two strings `x` and `y` as input.\n\n**Output**:\n- A tuple containing:\n  - The length of the LCS.\n  - A list of all LCS sequences.\n\n**Performance Requirement**:\n- The solution should be efficient and handle large input strings within a reasonable time.\n\n**Example**:\n```python\na = \"AGGTAB\"\nb = \"GXTXAYB\"\nexpected_output = (4, [\"GTAB\", \"GBAB\"])\nprint(longest_common_subsequence(a, b))\n# Output:\n# len = 4, sub-sequence = GTAB\n# len = 4, sub-sequence = GBAB\n# (4, ['GTAB', 'GBAB'])\n```",
  "solution_code": "def longest_common_subsequence(x, y):\n    \"\"\"\n    Returns the length of the LCS and all possible LCS sequences.\n    \"\"\"\n    m, n = len(x), len(y)\n    dp = [[\"\"] * (n + 1) for _ in range(2)]\n    dp[0] = [[0] * (n + 1), [c for c in y if c == x[0]]]  # Initialize the first row\n\n    # Fill the DP table\n    for i in range(1, m):\n        for j in range(1, n + 1):\n            if x[i] == y[j - 1]:\n                dp[i % 2][j] = dp[(i - 1) % 2][j - 1] + x[i]\n            else:\n                if len(dp[(i - 1) % 2][j]) > len(dp[i % 2][j - 1]):\n                    dp[i % 2][j] = dp[(i - 1) % 2][j]\n                elif len(dp[(i - 1) % 2][j]) < len(dp[i % 2][j - 1]):\n                    dp[i % 2][j] = dp[i % 2][j - 1]\n                else:\n                    dp[i % 2][j] = dp[(i - 1) % 2][j] + dp[i % 2][j - 1]\n\n    # Gather all LCS sequences\n    lcs_sequences = []\n    current_sequences = [dp[(m - 1) % 2][n]]\n    for seq in current_sequences:\n        if seq in dp[(m - 1) % 2]:\n            lcs_sequences.append(seq)\n    \n    return len(dp[(m - 1) % 2][n]), lcs_sequences\n\ndef print_lcs_sequences(x, y):\n    lcs_length, lcs_sequences = longest_common_subsequence(x, y)\n    print(f\"len = {lcs_length}, sub-sequence = {lcs_sequences[0]}\")\n    for seq in lcs_sequences[1:]:\n        print(f\"len = {lcs_length}, sub-sequence = {seq}\")\n\na = \"AGGTAB\"\nb = \"GXTXAYB\"\nprint_lcs_sequences(a, b)\n# Output:\n# len = 4, sub-sequence = GTAB\n# len = 4, sub-sequence = GBAB\n# (4, ['GTAB', 'GBAB'])",
  "test_code": "import pytest\n\ndef test_lcs_positive():\n    assert longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\") == (4, [\"GTAB\", \"GBAB\"])\n    assert longest_common_subsequence(\"ABCBDAB\", \"BDCAB\") == (4, [\"BCAB\", \"BDAB\"])\n\ndef test_lcs_single_char():\n    assert longest_common_subsequence(\"a\", \"a\") == (1, [\"a\"])\n    assert longest_common_subsequence(\"a\", \"b\") == (0, [])\n\ndef test_lcs_empty_string():\n    assert longest_common_subsequence(\"\", \"a\") == (0, [])\n    assert longest_common_subsequence(\"a\", \"\") == (0, [])\n\ndef test_lcs_all_different():\n    assert longest_common_subsequence(\"abc\", \"def\") == (0, [])\n\ndef test_lcs_common_chars():\n    assert longest_common_subsequence(\"hello\", \"world\") == (2, [\"lo\"])\n    assert longest_common_subsequence(\"helloworld\", \"world\") == (5, [\"world\"])",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}