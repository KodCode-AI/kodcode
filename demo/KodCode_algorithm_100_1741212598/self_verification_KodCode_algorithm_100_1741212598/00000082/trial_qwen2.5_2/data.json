{
  "metadata": {
    "prompt_id": "00000082",
    "row_id": 82,
    "seed_ids": [
      28
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with enhancing the existing LCS (Longest Common Subsequence) solution to include additional functionalities. Your task is to modify the provided code to achieve the following:\n\n1. **Return All LCS**: Instead of just the length of the LCS, modify the solution to also return all possible LCS sequences as a list of strings. If there are multiple LCS sequences of the same length, include all of them in the list.\n\n2. **Print All LCS**: Additionally, print all the LCS sequences in a formatted manner, similar to the provided example.\n\n3. **Optimize Space Usage**: Optimize the space complexity of the solution to \\(O(n)\\) by using only two rows of the DP table at a time.\n\n**Constraints**:\n- The length of both input strings will be between 1 and 1000.\n\n**Input**:\n- Two strings `x` and `y` as input.\n\n**Output**:\n- A tuple containing:\n  - The length of the LCS.\n  - A list of all LCS sequences.\n\n**Performance Requirement**:\n- The solution should be efficient and handle large input strings within a reasonable time.\n\n**Example**:\n```python\na = \"AGGTAB\"\nb = \"GXTXAYB\"\nexpected_output = (4, [\"GTAB\", \"GBAB\"])\nprint(longest_common_subsequence(a, b))\n# Output:\n# len = 4, sub-sequence = GTAB\n# len = 4, sub-sequence = GBAB\n# (4, ['GTAB', 'GBAB'])\n```",
  "solution_code": "def longest_common_subsequence(x, y):\n    \"\"\"\n    Returns the length of the LCS and all possible LCS sequences as a list of strings.\n    \"\"\"\n    m, n = len(x), len(y)\n    dp = [[0] * (n + 1) for _ in range(2)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if x[i - 1] == y[j - 1]:\n                dp[i % 2][j] = dp[(i - 1) % 2][j - 1] + 1\n            else:\n                dp[i % 2][j] = max(dp[(i - 1) % 2][j], dp[i % 2][j - 1])\n    \n    lcs_length = dp[m % 2][n]\n    lcs_sequences = set()\n    i, j = m, n\n    while i > 0 and j > 0:\n        if x[i - 1] == y[j - 1]:\n            lcs_sequences.add(x[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i % 2][j - 1] > dp[(i - 1) % 2][j]:\n            j -= 1\n        else:\n            i -= 1\n    \n    lcs_strs = [\"\"] * lcs_length\n    lcs_sequences = list(lcs_sequences)\n    backtrack(i, j, lcs_strs, lcs_sequences, x, y, lcs_length)\n    \n    for seq in lcs_sequences:\n        print(f\"len = {lcs_length}, sub-sequence = {seq}\")\n    \n    return lcs_length, lcs_sequences\n\ndef backtrack(i, j, lcs_strs, lcs_sequences, x, y, lcs_length):\n    if i == 0 or j == 0:\n        lcs_sequences.append(''.join(reversed(lcs_strs)))\n        return\n    \n    if x[i - 1] == y[j - 1]:\n        lcs_strs[lcs_length - 1] = x[i - 1]\n        backtrack(i - 1, j - 1, lcs_strs, lcs_sequences, x, y, lcs_length - 1)\n    else:\n        backtrack(i, j - 1, lcs_strs, lcs_sequences, x, y, lcs_length)\n        backtrack(i - 1, j, lcs_strs, lcs_sequences, x, y, lcs_length)",
  "test_code": "``\nfrom test_solution import longest_common_subsequence\n\ndef test_longest_common_subsequence():\n    # Test case 1\n    a = \"AGGTAB\"\n    b = \"GXTXAYB\"\n    expected = (4, [\"GTAB\", \"GBAB\"])\n    assert longest_common_subsequence(a, b) == expected\n    \n    # Test case 2\n    a = \"ABCDEF\"\n    b = \"FBDAMN\"\n    expected = (2, [\"BD\"])\n    assert longest_common_subsequence(a, b) == expected\n    \n    # Test case 3\n    a = \"AABAA\"\n    b = \"ABBAA\"\n    expected = (4, [\"AABA\", \"ABAA\"])\n    assert longest_common_subsequence(a, b) == expected\n    \n    # Test case 4\n    a = \"ABCBDAB\"\n    b = \"BDCABA\"\n    expected = (4, [\"BCAB\", \"BDAB\"])\n    assert longest_common_subsequence(a, b) == expected\n    \n    # Test case 5\n    a = \"ABCDGH\"\n    b = \"AEDFHR\"\n    expected = (3, [\"ADH\"])\n    assert longest_common_subsequence(a, b) == expected\n    \n    # Test case 6\n    a = \"\"\n    b = \"abc\"\n    expected = (0, [])\n    assert longest_common_subsequence(a, b) == expected\n    \n    # Test case 7\n    a = \"abc\"\n    b = \"\"\n    expected = (0, [])\n    assert longest_common_subsequence(a, b) == expected\n    \n    # Test case 8\n    a = \"aaa\"\n    b = \"bbb\"\n    expected = (0, [])\n    assert longest_common_subsequence(a, b) == expected\n    \n    # Test case 9\n    a = \"aaa\"\n    b = \"aaa\"\n    expected = (3, [\"aaa\"])\n    assert longest_common_subsequence(a, b) == expected\n\n# Run the tests\ntest_longest_common_subsequence()",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}