{
  "metadata": {
    "prompt_id": "00000084",
    "row_id": 84,
    "seed_ids": [
      503
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with implementing a function to find the value of `n` (1 < n < 10^7) for which the Euler's Totient function (`\u03c6(n)`) is a permutation of `n` and the ratio `n/\u03c6(n)` produces a minimum. The function should return this value of `n`.\n\n### Problem Description\n\nEuler's Totient function, \u03c6(n), is used to determine the number of positive integers less than or equal to n that are relatively prime to n. For example, \u03c6(9) = 6, as 1, 2, 4, 5, 7, and 8 are all relatively prime to 9.\n\nYou need to find the value of `n` in the range 1 < n < 10^7 such that `\u03c6(n)` is a permutation of `n` and the ratio `n/\u03c6(n)` is minimized. A permutation of a number means the digits of the two numbers are the same, but their order may differ.\n\n### Constraints\n\n- 1 < n < 10^7\n- You may use any efficient data structures to store and update values.\n\n### Example\n\n```python\ndef find_min_ratio():\n    # Your implementation here\n    return n\n```\n\n### Expected Functionality\n\n- The function should return the value of `n` that meets the criteria.\n- The function should handle edge cases and perform efficiently within the given constraints.\n\n### Notes\n\n- You should implement the function from scratch without referencing the provided code snippet.\n- You should also include a check function to test your implementation with provided data points.",
  "solution_code": "from sympy import sieve\n\ndef find_min_ratio():\n    \"\"\"\n    Finds the value of n (1 < n < 10^7) for which the Euler's Totient function (\u03c6(n))\n    is a permutation of n and the ratio n/\u03c6(n) is minimized.\n    \"\"\"\n    min_ratio = float('inf')\n    n_value = None\n    \n    for n in range(2, 10000000):\n        phi_n = totient(n)\n        if sorted(str(n)) == sorted(str(phi_n)):\n            current_ratio = n / phi_n\n            if current_ratio < min_ratio:\n                min_ratio = current_ratio\n                n_value = n\n                \n    return n_value\n\ndef totient(n):\n    \"\"\"\n    Computes the Euler's Totient function for a given number n.\n    \"\"\"\n    result = n\n    i = 0\n    while True:\n        p = list(sieve.primerange(0, int(n**0.5) + 1))  # Get primes up to sqrt(n)\n        p.append(n)\n        p = set(p)  # To avoid duplicates and for quick lookup\n        for prime in p:\n            if prime > n:\n                break\n            if n % prime == 0:\n                result -= result // prime\n        if i > 0 and result < 2:\n            break\n        i += 1\n    return result",
  "test_code": "import pytest\n\ndef test_find_min_ratio():\n    assert find_min_ratio() == 13\n\ndef test_totient_function():\n    assert totient(10) == 4\n    assert totient(21) == 12\n    assert totient(15) == 8\n\ndef test_permutation_check():\n    assert sorted(str(13)) == sorted(str(totient(13)))\n    assert sorted(str(21)) != sorted(str(totient(21)))\n    assert sorted(str(15)) != sorted(str(totient(15)))",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}