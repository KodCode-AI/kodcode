{
  "metadata": {
    "prompt_id": "00000084",
    "row_id": 84,
    "seed_ids": [
      503
    ],
    "mode": "algorithm"
  },
  "instruction": "You are tasked with implementing a function to find the value of `n` (1 < n < 10^7) for which the Euler's Totient function (`\u03c6(n)`) is a permutation of `n` and the ratio `n/\u03c6(n)` produces a minimum. The function should return this value of `n`.\n\n### Problem Description\n\nEuler's Totient function, \u03c6(n), is used to determine the number of positive integers less than or equal to n that are relatively prime to n. For example, \u03c6(9) = 6, as 1, 2, 4, 5, 7, and 8 are all relatively prime to 9.\n\nYou need to find the value of `n` in the range 1 < n < 10^7 such that `\u03c6(n)` is a permutation of `n` and the ratio `n/\u03c6(n)` is minimized. A permutation of a number means the digits of the two numbers are the same, but their order may differ.\n\n### Constraints\n\n- 1 < n < 10^7\n- You may use any efficient data structures to store and update values.\n\n### Example\n\n```python\ndef find_min_ratio():\n    # Your implementation here\n    return n\n```\n\n### Expected Functionality\n\n- The function should return the value of `n` that meets the criteria.\n- The function should handle edge cases and perform efficiently within the given constraints.\n\n### Notes\n\n- You should implement the function from scratch without referencing the provided code snippet.\n- You should also include a check function to test your implementation with provided data points.",
  "solution_code": "def find_min_ratio():\n    \"\"\"\n    Finds the value of n (1 < n < 10^7) for which the Euler's Totient function (\u03c6(n)) is a permutation of n\n    and the ratio n/\u03c6(n) is minimized.\n    \"\"\"\n    def euler_phi(n):\n        \"\"\"\n        Calculates the Euler's Totient function \u03c6(n).\n        \"\"\"\n        result = n  # Initialize result as n\n        p = 2\n        # Consider all prime factors\n        while p * p <= n:\n            # Check if p is a prime factor.\n            if n % p == 0:\n                # If yes, then update n and result\n                while n % p == 0:\n                    n //= p\n                result -= result // p\n            p += 1\n        if n > 1:\n            result -= result // n\n        return result\n\n    # A hash map to store the ratio and the corresponding n\n    phi_cache = {}\n    min_ratio = float('inf')\n    min_n = 0\n\n    for n in range(2, 10**7):\n        phi_n = euler_phi(n)\n        ratio = n / phi_n\n        # Check if n and phi(n) are permutations\n        if sorted(str(n)) == sorted(str(phi_n)):\n            if ratio < min_ratio:\n                min_ratio = ratio\n                min_n = n\n                phi_cache[min_n] = min_ratio\n\n    return min_n",
  "test_code": "import pytest\n\ndef test_find_min_ratio():\n    assert find_min_ratio() == 1393331\n\n# Additional test cases to verify the functionality\ndef check_permutation(a, b):\n    return sorted(str(a)) == sorted(str(b))\n\ndef test_euler_phi():\n    assert euler_phi(9) == 6\n    assert euler_phi(36) == 12\n    assert euler_phi(49) == 42\n\ndef test_min_ratio_permutation():\n    n = 1393331\n    phi_n = euler_phi(n)\n    assert check_permutation(n, phi_n)\n\ndef test_min_ratio_value():\n    n = find_min_ratio()\n    phi_n = euler_phi(n)\n    assert n == 1393331\n    assert check_permutation(n, phi_n)\n\n# Run the tests\nif __name__ == \"__main__\":\n    pytest.main()",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}