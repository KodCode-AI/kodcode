{
  "metadata": {
    "prompt_id": "00000065",
    "row_id": 65,
    "seed_ids": [
      203
    ],
    "mode": "algorithm"
  },
  "instruction": "### Question: Optimizing Odd-Even Transposition Sort\n\nYou are given a list of integers that may contain duplicates. Your task is to implement an optimized version of the Odd-Even Transposition Sort (OETS) algorithm that sorts the list in ascending order. The algorithm should be fully parallel and handle the list in a way that minimizes the number of synchronization points and communication overhead.\n\n#### Requirements:\n\n1. **Input**: A list of integers `arr` (1 \u2264 len(arr) \u2264 10^5).\n2. **Output**: Return the sorted list of integers.\n3. **Constraints**:\n   - The list can contain up to 100,000 integers.\n   - The integers can range from -10^9 to 10^9.\n4. **Performance Requirement**: The algorithm should be as efficient as possible in terms of both time and space complexity.\n\n#### Implementation Notes:\n\n- Use Python's `multiprocessing` module to implement the algorithm.\n- Ensure that the algorithm is fully parallel and minimizes synchronization points.\n- Handle edge cases such as an empty list or a list with a single element.\n\n#### Scenario:\n\nYou are part of a high-performance computing team that needs to sort large datasets efficiently. Your task is to optimize the OETS algorithm to handle these large datasets effectively.\n\n#### Example:\n\n```python\ndef optimized_odd_even_transposition(arr):\n    # Your implementation here\n    pass\n\n# Test the function\nprint(optimized_odd_even_transposition([4, 1, 3, 2]))  # Output: [1, 2, 3, 4]\nprint(optimized_odd_even_transposition([-5, 9, -2, 10, -1]))  # Output: [-5, -2, -1, 9, 10]\n```\n\n#### Additional Challenge:\n\n- Optimize the algorithm further by reducing the number of synchronization points and communication overhead.\n\n---\n\nImplement the `optimized_odd_even_transposition` function to meet the requirements.",
  "solution_code": "import multiprocessing as mp\nimport math\n\ndef optimized_odd_even_transposition(arr):\n    \"\"\"\n    Sorts the input list using a parallelized Odd-Even Transposition Sort algorithm.\n    \"\"\"\n    length = len(arr)\n    if length <= 1:\n        return arr\n\n    with mp.Pool(processes=min(mp.cpu_count(), length)) as pool:\n        epoch = int(math.log2(length)) + 1\n        for _ in range(epoch):\n            if epoch % 2 == 0:\n                for i in range(0, length - 1, 2):\n                    if arr[i] > arr[i + 1]:\n                        arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            else:\n                for i in range(1, length - 1, 2):\n                    if arr[i] > arr[i + 1]:\n                        arr[i], arr[i + 1] = arr[i + 1], arr[i]\n\n    return arr",
  "test_code": "import pytest\nfrom solution import optimized_odd_even_transposition\n\ndef test_optimized_odd_even_transposition():\n    assert optimized_odd_even_transposition([4, 1, 3, 2]) == [1, 2, 3, 4]\n    assert optimized_odd_even_transposition([-5, 9, -2, 10, -1]) == [-5, -2, -1, 9, 10]\n    assert optimized_odd_even_transposition([100000, -100000]) == [-100000, 100000]\n    assert optimized_odd_even_transposition([1]) == [1]\n    assert optimized_odd_even_transposition([]) == []\n    assert optimized_odd_even_transposition([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n    assert optimized_odd_even_transposition([2, 3, 1, 4, 5]) == [1, 2, 3, 4, 5]",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}