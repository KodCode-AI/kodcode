{
  "metadata": {
    "prompt_id": "00000065",
    "row_id": 65,
    "seed_ids": [
      203
    ],
    "mode": "algorithm"
  },
  "instruction": "### Question: Optimizing Odd-Even Transposition Sort\n\nYou are given a list of integers that may contain duplicates. Your task is to implement an optimized version of the Odd-Even Transposition Sort (OETS) algorithm that sorts the list in ascending order. The algorithm should be fully parallel and handle the list in a way that minimizes the number of synchronization points and communication overhead.\n\n#### Requirements:\n\n1. **Input**: A list of integers `arr` (1 \u2264 len(arr) \u2264 10^5).\n2. **Output**: Return the sorted list of integers.\n3. **Constraints**:\n   - The list can contain up to 100,000 integers.\n   - The integers can range from -10^9 to 10^9.\n4. **Performance Requirement**: The algorithm should be as efficient as possible in terms of both time and space complexity.\n\n#### Implementation Notes:\n\n- Use Python's `multiprocessing` module to implement the algorithm.\n- Ensure that the algorithm is fully parallel and minimizes synchronization points.\n- Handle edge cases such as an empty list or a list with a single element.\n\n#### Scenario:\n\nYou are part of a high-performance computing team that needs to sort large datasets efficiently. Your task is to optimize the OETS algorithm to handle these large datasets effectively.\n\n#### Example:\n\n```python\ndef optimized_odd_even_transposition(arr):\n    # Your implementation here\n    pass\n\n# Test the function\nprint(optimized_odd_even_transposition([4, 1, 3, 2]))  # Output: [1, 2, 3, 4]\nprint(optimized_odd_even_transposition([-5, 9, -2, 10, -1]))  # Output: [-5, -2, -1, 9, 10]\n```\n\n#### Additional Challenge:\n\n- Optimize the algorithm further by reducing the number of synchronization points and communication overhead.\n\n---\n\nImplement the `optimized_odd_even_transposition` function to meet the requirements.",
  "solution_code": "from multiprocessing import Pool\nfrom functools import partial\n\ndef optimized_odd_even_transposition(arr):\n    \"\"\"\n    Sorts the input list using the optimized Odd-Even Transposition Sort algorithm.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return arr\n    \n    def pairwise_swap(arr, i, two_pass):\n        ai, bi = i * 2, i * 2 + 1\n        if arr[ai] > arr[bi]:\n            arr[ai], arr[bi] = arr[bi], arr[ai]\n    \n    def odd_even_transposition(arr):\n        n = len(arr)\n        for pass_num in range(n):\n            if pass_num % 2 == 0 and any(part[i] > part[i+1] for i in range(0, n-1, 2)):\n                with Pool() as pool:\n                    part1 = arr[0:n//2]\n                    part2 = arr[n//2:]\n                    pool.starmap(pairwise_swap, [(part1, i, True) for i in range(n//2-1)])\n                    pool.starmap(pairwise_swap, [(part2, i, True) for i in range(n//2-1)])\n            else:\n                with Pool() as pool:\n                    pool.starmap(pairwise_swap, [(arr, i, False) for i in range(1, n-1, 2)])\n    \n    odd_even_transposition(arr)\n    return arr",
  "test_code": "from solution import optimized_odd_even_transposition\n\ndef test_optimized_odd_even_transposition():\n    assert optimized_odd_even_transposition([4, 1, 3, 2]) == [1, 2, 3, 4]\n    assert optimized_odd_even_transposition([-5, 9, -2, 10, -1]) == [-5, -2, -1, 9, 10]\n    assert optimized_odd_even_transposition([100]) == [100]\n    assert optimized_odd_even_transposition([]) == []\n    assert optimized_odd_even_transposition([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert optimized_odd_even_transposition([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]\n    assert optimized_odd_even_transposition([1, 2, 2, 1]) == [1, 1, 2, 2]",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}