{
  "metadata": {
    "prompt_id": "00000020",
    "row_id": 20,
    "seed_ids": [
      554
    ],
    "mode": "algorithm"
  },
  "instruction": "### Problem Description\n\nYou are provided with a piece of code that generates a list of non-trivial digit-cancelling fractions with two-digit numerators and denominators. A digit-cancelling fraction is one where a digit in the numerator and the denominator can be incorrectly cancelled, yet the resulting fraction still equals the original fraction (e.g., 49/98 = 4/8).\n\nYour task is to extend this functionality to generate a list of such non-trivial digit-cancelling fractions for fractions with three-digit numerators and denominators. Additionally, compute the product of the denominators of these fractions in their lowest terms.\n\n### Input and Output Formats\n\n- **Input**: An integer `n` (2 or 3) representing the number of digits in the numerator and denominator.\n- **Output**: A single integer representing the product of the denominators of the valid non-trivial digit-cancelling fractions, in their lowest terms.\n\n### Constraints and Limitations\n\n- The input `n` will be either 2 or 3.\n\n### Performance Requirements\n\n- The solution should be efficient and handle the specified constraints within a reasonable time frame.\n\n### Example\n\n```python\ndef solution(n: int) -> int:\n    # Your implementation here\n    pass\n\n# Example usage\nprint(solution(2))  # Output: 90\nprint(solution(3))  # Output: [Your output]\n```\n\n### Additional Instructions\n\n- Ensure the logic for digit cancellation is correct.\n- Handle edge cases such as fractions where the digit cancellation leads to zero denominators.\n- Simplify the final product of denominators to its lowest terms.",
  "solution_code": "from math import gcd\n\ndef is_digit_cancelling_fraction(numerator, denominator):\n    \"\"\"\n    Checks if the given fraction is a digit-cancelling fraction.\n    \"\"\"\n    num_str = str(numerator)\n    den_str = str(denominator)\n    for digit in num_str:\n        if digit in den_str:\n            num_str = num_str.replace(digit, '', 1)\n            den_str = den_str.replace(digit, '', 1)\n            if den_str:\n                new_numerator = int(num_str)\n                new_denominator = int(den_str)\n                if numerator * new_denominator == denominator * new_numerator:\n                    return True\n    return False\n\ndef product_of_denominators(n: int) -> int:\n    \"\"\"\n    Generates non-trivial digit-cancelling fractions for fractions with n digits\n    in the numerator and denominator and returns the product of the denominators\n    in their lowest terms.\n    \"\"\"\n    product = 1\n    for numerator in range(10**(n-1), 10**n):\n        for denominator in range(numerator + 1, 10**n):\n            if is_digit_cancelling_fraction(numerator, denominator):\n                product *= denominator\n                product //= gcd(product, denominator)  # Simplify the product\n    return product",
  "test_code": "def test_is_digit_cancelling_fraction():\n    assert is_digit_cancelling_fraction(49, 98)\n    assert not is_digit_cancelling_fraction(45, 90)\n    assert is_digit_cancelling_fraction(16, 64)\n    assert is_digit_cancelling_fraction(49, 98)\n    assert not is_digit_cancelling_fraction(50, 100)\n    assert is_digit_cancelling_fraction(19, 95)  # 1/5\n\ndef test_product_of_denominators():\n    assert product_of_denominators(2) == 90\n    assert product_of_denominators(3) == 100100\n\n# Running the tests\nif __name__ == \"__main__\":\n    import pytest\n    pytest.main([\"-s\", \"test.py\"])",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}