{
  "metadata": {
    "prompt_id": "00000016",
    "row_id": 16,
    "seed_ids": [
      185
    ],
    "mode": "algorithm"
  },
  "instruction": "**Problem Statement**:\nYou are required to implement a function to calculate the Builtin Voltage of a pn junction diode. The function should validate input parameters and handle edge cases appropriately. Additionally, you need to extend the functionality by allowing the user to specify the temperature in the function call.\n\n**Function Signature**:\n```python\nfrom typing import Tuple\n\ndef enhanced_builtin_voltage(\n    donor_conc: float, \n    acceptor_conc: float, \n    intrinsic_conc: float, \n    temperature: float = 300.0\n) -> float:\n    \"\"\"\n    Calculate the Builtin Voltage of a pn junction diode with given donor, acceptor, and intrinsic concentrations.\n    \n    :param donor_conc: Donor concentration (unit = 1/cm\u00b3)\n    :param acceptor_conc: Acceptor concentration (unit = 1/cm\u00b3)\n    :param intrinsic_conc: Intrinsic concentration (unit = 1/cm\u00b3)\n    :param temperature: Temperature in Kelvin (unit = K), default is 300 K\n    :return: Builtin Voltage (unit = V)\n    \n    Constraints:\n    - 1e10 <= donor_conc, acceptor_conc, intrinsic_conc <= 1e18\n    - 100 <= temperature <= 1000\n    \n    Examples:\n    >>> enhanced_builtin_voltage(donor_conc=1e17, acceptor_conc=1e17, intrinsic_conc=1e10, temperature=300)\n    0.833370010652644\n    >>> enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=3000, intrinsic_conc=2000, temperature=400)\n    1.7257443376740775\n    >>> enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=0, intrinsic_conc=1000, temperature=300)\n    Traceback (most recent call last):\n      ...\n    ValueError: Acceptor concentration should be positive\n    \"\"\"\n```\n\n**Requirements**:\n1. Validate that all input parameters are positive and within the specified constraints.\n2. Ensure that the donor and acceptor concentrations are greater than the intrinsic concentration.\n3. Use the provided constants from the `scipy.constants` module for the Boltzmann constant and the electron volt.\n4. Return the correct Builtin Voltage in volts.\n5. Include a comprehensive docstring with examples and constraints.",
  "solution_code": "from typing import Tuple\nimport math\nfrom scipy.constants import k, e  # Boltzmann constant and elementary charge\n\ndef enhanced_builtin_voltage(\n    donor_conc: float, \n    acceptor_conc: float, \n    intrinsic_conc: float, \n    temperature: float = 300.0\n) -> float:\n    \"\"\"\n    Calculate the Builtin Voltage of a pn junction diode with given donor, acceptor, and intrinsic concentrations.\n    \n    :param donor_conc: Donor concentration (unit = 1/cm\u00b3)\n    :param acceptor_conc: Acceptor concentration (unit = 1/cm\u00b3)\n    :param intrinsic_conc: Intrinsic concentration (unit = 1/cm\u00b3)\n    :param temperature: Temperature in Kelvin (unit = K), default is 300 K\n    :return: Builtin Voltage (unit = V)\n    \n    Constraints:\n    - 1e10 <= donor_conc, acceptor_conc, intrinsic_conc <= 1e18\n    - 100 <= temperature <= 1000\n    \n    Examples:\n    >>> enhanced_builtin_voltage(donor_conc=1e17, acceptor_conc=1e17, intrinsic_conc=1e10, temperature=300)\n    0.833370010652644\n    >>> enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=3000, intrinsic_conc=2000, temperature=400)\n    1.7257443376740775\n    >>> enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=0, intrinsic_conc=1000, temperature=300)\n    Traceback (most recent call last):\n      ...\n    ValueError: Acceptor concentration should be positive\n    \"\"\"\n    if not (1e10 <= donor_conc <= 1e18 and 1e10 <= acceptor_conc <= 1e18 and 1e10 <= intrinsic_conc <= 1e18):\n        raise ValueError(\"Concentrations should be between 1e10 and 1e18\")\n    if acceptor_conc <= intrinsic_conc:\n        raise ValueError(\"Acceptor concentration should be greater than intrinsic concentration\")\n    if donor_conc <= intrinsic_conc:\n        raise ValueError(\"Donor concentration should be greater than intrinsic concentration\")\n    \n    if temperature < 100 or temperature > 1000:\n        raise ValueError(\"Temperature should be between 100 and 1000 K\")\n    \n    n0 = math.sqrt(donor_conc * acceptor_conc)\n    Vp = (k * temperature) / (e * math.log(n0 / intrinsic_conc))\n    \n    return Vp",
  "test_code": "from solution import enhanced_builtin_voltage\n\ndef test_enhanced_builtin_voltage():\n    assert abs(enhanced_builtin_voltage(1e17, 1e17, 1e10) - 0.833370010652644) < 1e-9\n    assert abs(enhanced_builtin_voltage(1000, 3000, 2000, 400) - 1.7257443376740775) < 1e-9\n    with pytest.raises(ValueError):\n        enhanced_builtin_voltage(1000, 0, 1000, 300)\n    with pytest.raises(ValueError):\n        enhanced_builtin_voltage(1e12, 1e16, 1e15, 300)\n    with pytest.raises(ValueError):\n        enhanced_builtin_voltage(1e17, 1e17, 1e10, 50)\n    with pytest.raises(ValueError):\n        enhanced_builtin_voltage(1e17, 1e17, 1e10, 1100)",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}