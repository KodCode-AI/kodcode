{
  "metadata": {
    "prompt_id": "00000016",
    "row_id": 16,
    "seed_ids": [
      185
    ],
    "mode": "algorithm"
  },
  "instruction": "**Problem Statement**:\nYou are required to implement a function to calculate the Builtin Voltage of a pn junction diode. The function should validate input parameters and handle edge cases appropriately. Additionally, you need to extend the functionality by allowing the user to specify the temperature in the function call.\n\n**Function Signature**:\n```python\nfrom typing import Tuple\n\ndef enhanced_builtin_voltage(\n    donor_conc: float, \n    acceptor_conc: float, \n    intrinsic_conc: float, \n    temperature: float = 300.0\n) -> float:\n    \"\"\"\n    Calculate the Builtin Voltage of a pn junction diode with given donor, acceptor, and intrinsic concentrations.\n    \n    :param donor_conc: Donor concentration (unit = 1/cm\u00b3)\n    :param acceptor_conc: Acceptor concentration (unit = 1/cm\u00b3)\n    :param intrinsic_conc: Intrinsic concentration (unit = 1/cm\u00b3)\n    :param temperature: Temperature in Kelvin (unit = K), default is 300 K\n    :return: Builtin Voltage (unit = V)\n    \n    Constraints:\n    - 1e10 <= donor_conc, acceptor_conc, intrinsic_conc <= 1e18\n    - 100 <= temperature <= 1000\n    \n    Examples:\n    >>> enhanced_builtin_voltage(donor_conc=1e17, acceptor_conc=1e17, intrinsic_conc=1e10, temperature=300)\n    0.833370010652644\n    >>> enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=3000, intrinsic_conc=2000, temperature=400)\n    1.7257443376740775\n    >>> enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=0, intrinsic_conc=1000, temperature=300)\n    Traceback (most recent call last):\n      ...\n    ValueError: Acceptor concentration should be positive\n    \"\"\"\n```\n\n**Requirements**:\n1. Validate that all input parameters are positive and within the specified constraints.\n2. Ensure that the donor and acceptor concentrations are greater than the intrinsic concentration.\n3. Use the provided constants from the `scipy.constants` module for the Boltzmann constant and the electron volt.\n4. Return the correct Builtin Voltage in volts.\n5. Include a comprehensive docstring with examples and constraints.",
  "solution_code": "from typing import Tuple\n\ndef enhanced_builtin_voltage(\n    donor_conc: float, \n    acceptor_conc: float, \n    intrinsic_conc: float, \n    temperature: float = 300.0\n) -> float:\n    \"\"\"\n    Calculate the Builtin Voltage of a pn junction diode with given donor, acceptor, and intrinsic concentrations.\n    \n    :param donor_conc: Donor concentration (unit = 1/cm\u00b3)\n    :param acceptor_conc: Acceptor concentration (unit = 1/cm\u00b3)\n    :param intrinsic_conc: Intrinsic concentration (unit = 1/cm\u00b3)\n    :param temperature: Temperature in Kelvin (unit = K), default is 300 K\n    :return: Builtin Voltage (unit = V)\n    \n    Constraints:\n    - 1e10 <= donor_conc, acceptor_conc, intrinsic_conc <= 1e18\n    - 100 <= temperature <= 1000\n    \n    Examples:\n    >>> enhanced_builtin_voltage(donor_conc=1e17, acceptor_conc=1e17, intrinsic_conc=1e10, temperature=300)\n    0.833370010652644\n    >>> enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=3000, intrinsic_conc=2000, temperature=400)\n    1.7257443376740775\n    >>> enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=0, intrinsic_conc=1000, temperature=300)\n    Traceback (most recent call last):\n      ...\n    ValueError: Acceptor concentration should be positive\n    \"\"\"\n    from scipy.constants import k, e\n\n    if donor_conc <= 0 or acceptor_conc <= 0 or intrinsic_conc <= 0:\n        raise ValueError(\"All concentrations must be positive\")\n    if donor_conc > 1e18 or acceptor_conc > 1e18 or intrinsic_conc > 1e18:\n        raise ValueError(\"Concentrations must be within 1e10 to 1e18\")\n    if acceptor_conc <= intrinsic_conc or donor_conc <= intrinsic_conc:\n        raise ValueError(\"Donor and Acceptor concentrations must be greater than Intrinsic concentration\")\n    if temperature < 100 or temperature > 1000:\n        raise ValueError(\"Temperature must be between 100 K and 1000 K\")\n\n    kT = k * temperature\n    nf = (donor_conc - acceptor_conc) / (donor_conc + acceptor_conc)\n    n_i = intrinsic_conc * 2**(-3 * kT / (2 * e * 0.0259))\n\n    return 0.0259 * kT / e * (1 + nf / (n_i + nf))",
  "test_code": "import pytest\nfrom solution import enhanced_builtin_voltage\n\ndef test_enhanced_builtin_voltage_basic():\n    assert pytest.approx(enhanced_builtin_voltage(donor_conc=1e17, acceptor_conc=1e17, intrinsic_conc=1e10, temperature=300), rel=1e-3) == 0.833370010652644\n    assert pytest.approx(enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=3000, intrinsic_conc=2000, temperature=400), rel=1e-3) == 1.7257443376740775\n\ndef test_enhanced_builtin_voltage_acceptor_zero():\n    with pytest.raises(ValueError):\n        enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=0, intrinsic_conc=1000, temperature=300)\n\ndef test_enhanced_builtin_voltage_concentration_outside_range():\n    with pytest.raises(ValueError):\n        enhanced_builtin_voltage(donor_conc=1e19, acceptor_conc=1e18, intrinsic_conc=1e10, temperature=300)\n\ndef test_enhanced_builtin_voltage_temperature_outside_range():\n    with pytest.raises(ValueError):\n        enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=3000, intrinsic_conc=2000, temperature=100)\n    with pytest.raises(ValueError):\n        enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=3000, intrinsic_conc=2000, temperature=1000)\n\ndef test_enhanced_builtin_voltage_concentration_order():\n    with pytest.raises(ValueError):\n        enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=1000, intrinsic_conc=2000, temperature=300)",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}