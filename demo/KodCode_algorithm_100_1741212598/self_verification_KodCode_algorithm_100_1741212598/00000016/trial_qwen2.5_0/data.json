{
  "metadata": {
    "prompt_id": "00000016",
    "row_id": 16,
    "seed_ids": [
      185
    ],
    "mode": "algorithm"
  },
  "instruction": "**Problem Statement**:\nYou are required to implement a function to calculate the Builtin Voltage of a pn junction diode. The function should validate input parameters and handle edge cases appropriately. Additionally, you need to extend the functionality by allowing the user to specify the temperature in the function call.\n\n**Function Signature**:\n```python\nfrom typing import Tuple\n\ndef enhanced_builtin_voltage(\n    donor_conc: float, \n    acceptor_conc: float, \n    intrinsic_conc: float, \n    temperature: float = 300.0\n) -> float:\n    \"\"\"\n    Calculate the Builtin Voltage of a pn junction diode with given donor, acceptor, and intrinsic concentrations.\n    \n    :param donor_conc: Donor concentration (unit = 1/cm\u00b3)\n    :param acceptor_conc: Acceptor concentration (unit = 1/cm\u00b3)\n    :param intrinsic_conc: Intrinsic concentration (unit = 1/cm\u00b3)\n    :param temperature: Temperature in Kelvin (unit = K), default is 300 K\n    :return: Builtin Voltage (unit = V)\n    \n    Constraints:\n    - 1e10 <= donor_conc, acceptor_conc, intrinsic_conc <= 1e18\n    - 100 <= temperature <= 1000\n    \n    Examples:\n    >>> enhanced_builtin_voltage(donor_conc=1e17, acceptor_conc=1e17, intrinsic_conc=1e10, temperature=300)\n    0.833370010652644\n    >>> enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=3000, intrinsic_conc=2000, temperature=400)\n    1.7257443376740775\n    >>> enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=0, intrinsic_conc=1000, temperature=300)\n    Traceback (most recent call last):\n      ...\n    ValueError: Acceptor concentration should be positive\n    \"\"\"\n```\n\n**Requirements**:\n1. Validate that all input parameters are positive and within the specified constraints.\n2. Ensure that the donor and acceptor concentrations are greater than the intrinsic concentration.\n3. Use the provided constants from the `scipy.constants` module for the Boltzmann constant and the electron volt.\n4. Return the correct Builtin Voltage in volts.\n5. Include a comprehensive docstring with examples and constraints.",
  "solution_code": "from typing import Tuple\nimport math\nfrom scipy.constants import boltzmann, elementary_charge  # Assuming these are available in a similar module\n\ndef enhanced_builtin_voltage(\n    donor_conc: float, \n    acceptor_conc: float, \n    intrinsic_conc: float, \n    temperature: float = 300.0\n) -> float:\n    \"\"\"\n    Calculate the Builtin Voltage of a pn junction diode with given donor, acceptor, and intrinsic concentrations.\n    \n    :param donor_conc: Donor concentration (unit = 1/cm\u00b3)\n    :param acceptor_conc: Acceptor concentration (unit = 1/cm\u00b3)\n    :param intrinsic_conc: Intrinsic concentration (unit = 1/cm\u00b3)\n    :param temperature: Temperature in Kelvin (unit = K), default is 300 K\n    :return: Builtin Voltage (unit = V)\n    \n    Constraints:\n    - 1e10 <= donor_conc, acceptor_conc, intrinsic_conc <= 1e18\n    - 100 <= temperature <= 1000\n    \n    Examples:\n    >>> enhanced_builtin_voltage(donor_conc=1e17, acceptor_conc=1e17, intrinsic_conc=1e10, temperature=300)\n    0.833370010652644\n    >>> enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=3000, intrinsic_conc=2000, temperature=400)\n    1.7257443376740775\n    >>> enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=0, intrinsic_conc=1000, temperature=300)\n    Traceback (most recent call last):\n      ...\n    ValueError: Acceptor concentration should be positive\n    \"\"\"\n    \n    if donor_conc <= 0 or acceptor_conc <= 0 or intrinsic_conc <= 0:\n        raise ValueError(\"All concentrations should be positive\")\n    \n    if donor_conc > 1e18 or acceptor_conc > 1e18 or intrinsic_conc > 1e18:\n        raise ValueError(\"Concentrations should not exceed 1e18 1/cm\u00b3\")\n    \n    if donor_conc < intrinsic_conc or acceptor_conc < intrinsic_conc:\n        raise ValueError(\"Donor and acceptor concentrations should be greater than the intrinsic concentration\")\n    \n    if temperature < 100 or temperature > 1000:\n        raise ValueError(\"Temperature should be between 100 and 1000 K\")\n    \n    n_space_charge = math.sqrt(donor_conc * acceptor_conc)\n    a = (n_space_charge / intrinsic_conc) ** (1/3)\n    \n    v_b = (elementary_charge * boltzmann * temperature) / (elementary_charge * intrinsic_conc * math.log(a))\n    \n    return v_b",
  "test_code": "from solution import enhanced_builtin_voltage\n\ndef test_enhanced_builtin_voltage():\n    # Test with default temperature\n    assert abs(enhanced_builtin_voltage(donor_conc=1e17, acceptor_conc=1e17, intrinsic_conc=1e10) - 0.833370010652644) < 1e-6\n    # Test with different temperature\n    assert abs(enhanced_builtin_voltage(donor_conc=1000, acceptor_conc=3000, intrinsic_conc=2000, temperature=400) - 1.7257443376740775) < 1e-6\n    # Test edge case: minimum temperature\n    assert abs(enhanced_builtin_voltage(donor_conc=1e13, acceptor_conc=1e13, intrinsic_conc=1e10, temperature=100) - 0.0742222044226079) < 1e-6\n    # Test edge case: maximum temperature\n    assert abs(enhanced_builtin_voltage(donor_conc=1e13, acceptor_conc=1e13, intrinsic_conc=1e10, temperature=1000) - 0.2562434251524992) < 1e-6\n\ndef test_enhanced_builtin_voltage_invalid_inputs():\n    # Test with invalid donor concentration\n    try:\n        enhanced_builtin_voltage(donor_conc=-1e17, acceptor_conc=1e17, intrinsic_conc=1e10)\n    except ValueError:\n        pass\n    else:\n        assert False, \"Expected ValueError for negative donor_conc\"\n    \n    # Test with invalid acceptor concentration\n    try:\n        enhanced_builtin_voltage(donor_conc=1e17, acceptor_conc=-1e17, intrinsic_conc=1e10)\n    except ValueError:\n        pass\n    else:\n        assert False, \"Expected ValueError for negative acceptor_conc\"\n    \n    # Test with invalid intrinsic concentration\n    try:\n        enhanced_builtin_voltage(donor_conc=1e17, acceptor_conc=1e17, intrinsic_conc=-1e10)\n    except ValueError:\n        pass\n    else:\n        assert False, \"Expected ValueError for negative intrinsic_conc\"\n    \n    # Test with invalid temperature\n    try:\n        enhanced_builtin_voltage(donor_conc=1e17, acceptor_conc=1e17, intrinsic_conc=1e10, temperature=50)\n    except ValueError:\n        pass\n    else:\n        assert False, \"Expected ValueError for temperature < 100 K\"\n    \n    try:\n        enhanced_builtin_voltage(donor_conc=1e17, acceptor_conc=1e17, intrinsic_conc=1e10, temperature=1050)\n    except ValueError:\n        pass\n    else:\n        assert False, \"Expected ValueError for temperature > 1000 K\"\n    \n    # Test with donor and acceptor less than intrinsic concentration\n    try:\n        enhanced_builtin_voltage(donor_conc=1e10, acceptor_conc=1e10, intrinsic_conc=1e10)\n    except ValueError:\n        pass\n    else:\n        assert False, \"Expected ValueError for donor_conc == intrinsic_conc\"\n    \n    # Test with acceptor_conc < intrinsic_conc\n    try:\n        enhanced_builtin_voltage(donor_conc=1e13, acceptor_conc=1e10, intrinsic_conc=1e12)\n    except ValueError:\n        pass\n    else:\n        assert False, \"Expected ValueError for acceptor_conc < intrinsic_conc\"\n\n# Run the tests\ntest_enhanced_builtin_voltage()\ntest_enhanced_builtin_voltage_invalid_inputs()",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}