{
  "metadata": {
    "prompt_id": "00000022",
    "row_id": 22,
    "seed_ids": [
      792
    ],
    "mode": "algorithm"
  },
  "instruction": "You are working on a project that involves identifying weird numbers. A weird number is a natural number that is abundant but not semiperfect. An abundant number is a number for which the sum of its proper divisors is greater than the number itself. A semiperfect number is a number that can be expressed as the sum of some of its divisors (excluding the number itself).\n\nGiven a list of natural numbers, write a function `find_weird_numbers` that returns a list of all weird numbers from the input list. Ensure that your function is efficient and handles edge cases properly.\n\n#### Input and Output Formats\n- **Input**:\n  - A list of integers `numbers` (1 \u2264 len(numbers) \u2264 1000), where each number is in the range 1 \u2264 number \u2264 10000.\n\n- **Output**:\n  - A list of integers representing the weird numbers in the input list.\n\n#### Constraints and Limitations\n- The input list can contain up to 1000 numbers.\n- Each number in the list is in the range 1 to 10000.\n\n#### Performance Requirements\n- Your function should be able to handle the input within a reasonable time, ideally under 1 second for the given constraints.\n\n#### Example\n```python\n>>> find_weird_numbers([69, 70, 71])\n[70]\n>>> find_weird_numbers([12, 18, 20, 24, 25])\n[20, 24]\n```\n\n#### Scenario/Context\nYou are working on a number theory project and need to identify weird numbers in a given list of natural numbers. Your function should be efficient and handle the edge cases properly.",
  "solution_code": "def find_proper_divisors(n):\n    \"\"\"Return a list of proper divisors of n.\"\"\"\n    divisors = [1]  # 1 is a proper divisor of every natural number\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:  # Avoid adding the square root twice for perfect squares\n                divisors.append(n // i)\n    return divisors\n\ndef is_abundant(n):\n    \"\"\"Return True if n is an abundant number.\"\"\"\n    return sum(find_proper_divisors(n)) > n\n\ndef is_semiperfect(n):\n    \"\"\"Return True if n is a semiperfect number.\"\"\"\n    divisors = find_proper_divisors(n)\n    for i in range(1, 1 << len(divisors)):\n        if sum(divisors[j] for j in range(len(divisors)) if (i & (1 << j))) == n:\n            return True\n    return False\n\ndef find_weird_numbers(numbers):\n    \"\"\"Return a list of weird numbers from the input list.\"\"\"\n    return [n for n in numbers if is_abundant(n) and not is_semiperfect(n)]",
  "test_code": "from solution import find_weird_numbers, is_abundant, is_semiperfect\n\ndef test_is_abundant():\n    assert is_abundant(12) == True\n    assert is_abundant(20) == False\n    assert is_abundant(24) == True\n\ndef test_is_semiperfect():\n    assert is_semiperfect(6) == True\n    assert is_semiperfect(8) == True\n    assert is_semiperfect(12) == True\n    assert is_semiperfect(18) == True\n    assert is_semiperfect(20) == False\n\ndef test_find_weird_numbers():\n    assert find_weird_numbers([69, 70, 71]) == [70]\n    assert find_weird_numbers([12, 18, 20, 24, 25]) == [20, 24]\n    assert find_weird_numbers([118, 4030, 5830, 5867]) == [4030]",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results2.jsonl"
}