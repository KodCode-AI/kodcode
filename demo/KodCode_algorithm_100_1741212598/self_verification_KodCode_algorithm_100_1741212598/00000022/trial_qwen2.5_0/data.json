{
  "metadata": {
    "prompt_id": "00000022",
    "row_id": 22,
    "seed_ids": [
      792
    ],
    "mode": "algorithm"
  },
  "instruction": "You are working on a project that involves identifying weird numbers. A weird number is a natural number that is abundant but not semiperfect. An abundant number is a number for which the sum of its proper divisors is greater than the number itself. A semiperfect number is a number that can be expressed as the sum of some of its divisors (excluding the number itself).\n\nGiven a list of natural numbers, write a function `find_weird_numbers` that returns a list of all weird numbers from the input list. Ensure that your function is efficient and handles edge cases properly.\n\n#### Input and Output Formats\n- **Input**:\n  - A list of integers `numbers` (1 \u2264 len(numbers) \u2264 1000), where each number is in the range 1 \u2264 number \u2264 10000.\n\n- **Output**:\n  - A list of integers representing the weird numbers in the input list.\n\n#### Constraints and Limitations\n- The input list can contain up to 1000 numbers.\n- Each number in the list is in the range 1 to 10000.\n\n#### Performance Requirements\n- Your function should be able to handle the input within a reasonable time, ideally under 1 second for the given constraints.\n\n#### Example\n```python\n>>> find_weird_numbers([69, 70, 71])\n[70]\n>>> find_weird_numbers([12, 18, 20, 24, 25])\n[20, 24]\n```\n\n#### Scenario/Context\nYou are working on a number theory project and need to identify weird numbers in a given list of natural numbers. Your function should be efficient and handle the edge cases properly.",
  "solution_code": "def divisors_sum(n):\n    \"\"\"\n    Returns the sum of proper divisors of n.\n    \"\"\"\n    divisors = [1]  # 1 is a proper divisor of every natural number\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            if i == n // i:\n                divisors.append(i)\n            else:\n                divisors.extend([i, n // i])\n    return sum(divisors)\n\ndef is_weird_number(n):\n    \"\"\"\n    Checks if a number is weird, i.e., abundant but not semiperfect.\n    \"\"\"\n    if n < 1 or n > 10000:\n        return False\n    if divisors_sum(n) <= n:\n        return False\n    for i in range(1, n):\n        if sum([j for j in range(1, n) if n % j == 0 and j < i]) + sum([j for j in range(i + 1, n) if n % j == 0]) == n:\n            return False\n    return True\n\ndef find_weird_numbers(numbers):\n    \"\"\"\n    Returns a list of weird numbers from the given list of numbers.\n    \"\"\"\n    return [n for n in numbers if is_weird_number(n)]",
  "test_code": "import pytest\n\ndef test_divisors_sum():\n    assert divisors_sum(12) == 16  # 1 + 2 + 3 + 4 + 6\n    assert divisors_sum(28) == 28  # 1 + 2 + 4 + 7 + 14\n    \ndef test_is_weird_number():\n    assert is_weird_number(70) is True\n    assert is_weird_number(20) is True\n    assert is_weird_number(24) is True\n    assert is_weird_number(71) is False\n    assert is_weird_number(1) is False\n    assert is_weird_number(12) is False\n\ndef test_find_weird_numbers():\n    assert find_weird_numbers([69, 70, 71]) == [70]\n    assert find_weird_numbers([12, 18, 20, 24, 25]) == [20, 24]\n    assert find_weird_numbers([1, 2, 3, 4, 5, 71]) == []",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results0.jsonl"
}