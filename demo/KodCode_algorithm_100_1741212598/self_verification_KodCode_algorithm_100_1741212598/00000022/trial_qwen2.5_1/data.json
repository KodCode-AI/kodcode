{
  "metadata": {
    "prompt_id": "00000022",
    "row_id": 22,
    "seed_ids": [
      792
    ],
    "mode": "algorithm"
  },
  "instruction": "You are working on a project that involves identifying weird numbers. A weird number is a natural number that is abundant but not semiperfect. An abundant number is a number for which the sum of its proper divisors is greater than the number itself. A semiperfect number is a number that can be expressed as the sum of some of its divisors (excluding the number itself).\n\nGiven a list of natural numbers, write a function `find_weird_numbers` that returns a list of all weird numbers from the input list. Ensure that your function is efficient and handles edge cases properly.\n\n#### Input and Output Formats\n- **Input**:\n  - A list of integers `numbers` (1 \u2264 len(numbers) \u2264 1000), where each number is in the range 1 \u2264 number \u2264 10000.\n\n- **Output**:\n  - A list of integers representing the weird numbers in the input list.\n\n#### Constraints and Limitations\n- The input list can contain up to 1000 numbers.\n- Each number in the list is in the range 1 to 10000.\n\n#### Performance Requirements\n- Your function should be able to handle the input within a reasonable time, ideally under 1 second for the given constraints.\n\n#### Example\n```python\n>>> find_weird_numbers([69, 70, 71])\n[70]\n>>> find_weird_numbers([12, 18, 20, 24, 25])\n[20, 24]\n```\n\n#### Scenario/Context\nYou are working on a number theory project and need to identify weird numbers in a given list of natural numbers. Your function should be efficient and handle the edge cases properly.",
  "solution_code": "def find_weird_numbers(numbers):\n    \"\"\"\n    Returns a list of weird numbers from the given list of natural numbers.\n    A weird number is a number that is abundant but not semiperfect.\n    \"\"\"\n    def is_abundant(n):\n        divisors_sum = sum([d for d in range(1, n) if n % d == 0])\n        return divisors_sum > n\n\n    def is_semiperfect(n):\n        divisors = [d for d in range(1, n) if n % d == 0]\n        return any(sum(divisors[:i]) == n for i in range(1, len(divisors)+1))\n\n    weird_numbers = []\n    for number in numbers:\n        if is_abundant(number) and not is_semiperfect(number):\n            weird_numbers.append(number)\n    return weird_numbers",
  "test_code": "``\nimport pytest\n\ndef test_find_weird_numbers():\n    assert find_weird_numbers([69, 70, 71]) == [70]\n    assert find_weird_numbers([12, 18, 20, 24, 25]) == [20, 24]\n    assert find_weird_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []\n    assert find_weird_numbers([70, 8316, 1004, 23190, 28079825]) == [8316, 2016, 2574, 23190, 28079825]\n    assert find_weird_numbers([1560]) == [1560]",
  "file_source": "KodCode_questions2sv_algorithm_100_1741212598_sanitized_prepared_results1.jsonl"
}