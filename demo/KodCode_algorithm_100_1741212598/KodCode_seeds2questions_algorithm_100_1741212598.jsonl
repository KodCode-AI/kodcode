{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nConversion of energy units.\n\nAvailable units: joule, kilojoule, megajoule, gigajoule,\\\n      wattsecond, watthour, kilowatthour, newtonmeter, calorie_nutr,\\\n          kilocalorie_nutr, electronvolt, britishthermalunit_it, footpound\n\nUSAGE :\n-> Import this file into their respective project.\n-> Use the function energy_conversion() for conversion of energy units.\n-> Parameters :\n    -> from_type : From which type you want to convert\n    -> to_type : To which type you want to convert\n    -> value : the value which you want to convert\n\nREFERENCES :\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Units_of_energy\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Joule\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Kilowatt-hour\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Newton-metre\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Calorie\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Electronvolt\n-> Wikipedia reference: https://en.wikipedia.org/wiki/British_thermal_unit\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Foot-pound_(energy)\n-> Unit converter reference: https://www.unitconverters.net/energy-converter.html\n\"\"\"\n\nENERGY_CONVERSION: dict[str, float] = {\n    \"joule\": 1.0,\n    \"kilojoule\": 1_000,\n    \"megajoule\": 1_000_000,\n    \"gigajoule\": 1_000_000_000,\n    \"wattsecond\": 1.0,\n    \"watthour\": 3_600,\n    \"kilowatthour\": 3_600_000,\n    \"newtonmeter\": 1.0,\n    \"calorie_nutr\": 4_186.8,\n    \"kilocalorie_nutr\": 4_186_800.00,\n    \"electronvolt\": 1.602_176_634e-19,\n    \"britishthermalunit_it\": 1_055.055_85,\n    \"footpound\": 1.355_818,\n}\n\n\ndef energy_conversion(from_type: str, to_type: str, value: float) -> float:\n    \"\"\"\n    Conversion of energy units.\n    >>> energy_conversion(\"joule\", \"joule\", 1)\n    1.0\n    >>> energy_conversion(\"joule\", \"kilojoule\", 1)\n    0.001\n    >>> energy_conversion(\"joule\", \"megajoule\", 1)\n    1e-06\n    >>> energy_conversion(\"joule\", \"gigajoule\", 1)\n    1e-09\n    >>> energy_conversion(\"joule\", \"wattsecond\", 1)\n    1.0\n    >>> energy_conversion(\"joule\", \"watthour\", 1)\n    0.0002777777777777778\n    >>> energy_conversion(\"joule\", \"kilowatthour\", 1)\n    2.7777777777777776e-07\n    >>> energy_conversion(\"joule\", \"newtonmeter\", 1)\n    1.0\n    >>> energy_conversion(\"joule\", \"calorie_nutr\", 1)\n    0.00023884589662749592\n    >>> energy_conversion(\"joule\", \"kilocalorie_nutr\", 1)\n    2.388458966274959e-07\n    >>> energy_conversion(\"joule\", \"electronvolt\", 1)\n    6.241509074460763e+18\n    >>> energy_conversion(\"joule\", \"britishthermalunit_it\", 1)\n    0.0009478171226670134\n    >>> energy_conversion(\"joule\", \"footpound\", 1)\n    0.7375621211696556\n    >>> energy_conversion(\"joule\", \"megajoule\", 1000)\n    0.001\n    >>> energy_conversion(\"calorie_nutr\", \"kilocalorie_nutr\", 1000)\n    1.0\n    >>> energy_conversion(\"kilowatthour\", \"joule\", 10)\n    36000000.0\n    >>> energy_conversion(\"britishthermalunit_it\", \"footpound\", 1)\n    778.1692306784539\n    >>> energy_conversion(\"watthour\", \"joule\", \"a\") # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n      ...\n    TypeError: unsupported operand type(s) for /: 'str' and 'float'\n    >>> energy_conversion(\"wrongunit\", \"joule\", 1) # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n      ...\n    ValueError: Incorrect 'from_type' or 'to_type' value: 'wrongunit', 'joule'\n    Valid values are: joule, ... footpound\n    >>> energy_conversion(\"joule\", \"wrongunit\", 1) # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n      ...\n    ValueError: Incorrect 'from_type' or 'to_type' value: 'joule', 'wrongunit'\n    Valid values are: joule, ... footpound\n    >>> energy_conversion(\"123\", \"abc\", 1) # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n      ...\n    ValueError: Incorrect 'from_type' or 'to_type' value: '123', 'abc'\n    Valid values are: joule, ... footpound\n    \"\"\"\n    if to_type not in ENERGY_CONVERSION or from_type not in ENERGY_CONVERSION:\n        msg = (\n            f\"Incorrect 'from_type' or 'to_type' value: {from_type!r}, {to_type!r}\\n\"\n            f\"Valid values are: {', '.join(ENERGY_CONVERSION)}\"\n        )\n        raise ValueError(msg)\n    return value * ENERGY_CONVERSION[from_type] / ENERGY_CONVERSION[to_type]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000000", "row_id": 0, "seed_ids": [648], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nIntrospective Sort is a hybrid sort (Quick Sort + Heap Sort + Insertion Sort)\nif the size of the list is under 16, use insertion sort\nhttps://en.wikipedia.org/wiki/Introsort\n\"\"\"\n\nimport math\n\n\ndef insertion_sort(array: list, start: int = 0, end: int = 0) -> list:\n    \"\"\"\n    >>> array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n    >>> insertion_sort(array, 0, len(array))\n    [1, 2, 4, 6, 7, 8, 8, 12, 14, 14, 22, 23, 27, 45, 56, 79]\n    >>> array = [21, 15, 11, 45, -2, -11, 46]\n    >>> insertion_sort(array, 0, len(array))\n    [-11, -2, 11, 15, 21, 45, 46]\n    >>> array = [-2, 0, 89, 11, 48, 79, 12]\n    >>> insertion_sort(array, 0, len(array))\n    [-2, 0, 11, 12, 48, 79, 89]\n    >>> array = ['a', 'z', 'd', 'p', 'v', 'l', 'o', 'o']\n    >>> insertion_sort(array, 0, len(array))\n    ['a', 'd', 'l', 'o', 'o', 'p', 'v', 'z']\n    >>> array = [73.568, 73.56, -45.03, 1.7, 0, 89.45]\n    >>> insertion_sort(array, 0, len(array))\n    [-45.03, 0, 1.7, 73.56, 73.568, 89.45]\n    \"\"\"\n    end = end or len(array)\n    for i in range(start, end):\n        temp_index = i\n        temp_index_value = array[i]\n        while temp_index != start and temp_index_value < array[temp_index - 1]:\n            array[temp_index] = array[temp_index - 1]\n            temp_index -= 1\n        array[temp_index] = temp_index_value\n    return array\n\n\ndef heapify(array: list, index: int, heap_size: int) -> None:  # Max Heap\n    \"\"\"\n    >>> array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n    >>> heapify(array, len(array) // 2, len(array))\n    \"\"\"\n    largest = index\n    left_index = 2 * index + 1  # Left Node\n    right_index = 2 * index + 2  # Right Node\n\n    if left_index < heap_size and array[largest] < array[left_index]:\n        largest = left_index\n\n    if right_index < heap_size and array[largest] < array[right_index]:\n        largest = right_index\n\n    if largest != index:\n        array[index], array[largest] = array[largest], array[index]\n        heapify(array, largest, heap_size)\n\n\ndef heap_sort(array: list) -> list:\n    \"\"\"\n    >>> heap_sort([4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12])\n    [1, 2, 4, 6, 7, 8, 8, 12, 14, 14, 22, 23, 27, 45, 56, 79]\n    >>> heap_sort([-2, -11, 0, 0, 0, 87, 45, -69, 78, 12, 10, 103, 89, 52])\n    [-69, -11, -2, 0, 0, 0, 10, 12, 45, 52, 78, 87, 89, 103]\n    >>> heap_sort(['b', 'd', 'e', 'f', 'g', 'p', 'x', 'z', 'b', 's', 'e', 'u', 'v'])\n    ['b', 'b', 'd', 'e', 'e', 'f', 'g', 'p', 's', 'u', 'v', 'x', 'z']\n    >>> heap_sort([6.2, -45.54, 8465.20, 758.56, -457.0, 0, 1, 2.879, 1.7, 11.7])\n    [-457.0, -45.54, 0, 1, 1.7, 2.879, 6.2, 11.7, 758.56, 8465.2]\n    \"\"\"\n    n = len(array)\n\n    for i in range(n // 2, -1, -1):\n        heapify(array, i, n)\n\n    for i in range(n - 1, 0, -1):\n        array[i], array[0] = array[0], array[i]\n        heapify(array, 0, i)\n\n    return array\n\n\ndef median_of_3(\n    array: list, first_index: int, middle_index: int, last_index: int\n) -> int:\n    \"\"\"\n    >>> array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n    >>> median_of_3(array, 0, ((len(array) - 0) // 2) + 1, len(array) - 1)\n    12\n    >>> array = [13, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n    >>> median_of_3(array, 0, ((len(array) - 0) // 2) + 1, len(array) - 1)\n    13\n    >>> array = [4, 2, 6, 8, 1, 7, 8, 22, 15, 14, 27, 79, 23, 45, 14, 16]\n    >>> median_of_3(array, 0, ((len(array) - 0) // 2) + 1, len(array) - 1)\n    14\n    \"\"\"\n    if (array[first_index] > array[middle_index]) != (\n        array[first_index] > array[last_index]\n    ):\n        return array[first_index]\n    elif (array[middle_index] > array[first_index]) != (\n        array[middle_index] > array[last_index]\n    ):\n        return array[middle_index]\n    else:\n        return array[last_index]\n\n\ndef partition(array: list, low: int, high: int, pivot: int) -> int:\n    \"\"\"\n    >>> array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n    >>> partition(array, 0, len(array), 12)\n    8\n    >>> array = [21, 15, 11, 45, -2, -11, 46]\n    >>> partition(array, 0, len(array), 15)\n    3\n    >>> array = ['a', 'z', 'd', 'p', 'v', 'l', 'o', 'o']\n    >>> partition(array, 0, len(array), 'p')\n    5\n    >>> array = [6.2, -45.54, 8465.20, 758.56, -457.0, 0, 1, 2.879, 1.7, 11.7]\n    >>> partition(array, 0, len(array), 2.879)\n    6\n    \"\"\"\n    i = low\n    j = high\n    while True:\n        while array[i] < pivot:\n            i += 1\n        j -= 1\n        while pivot < array[j]:\n            j -= 1\n        if i >= j:\n            return i\n        array[i], array[j] = array[j], array[i]\n        i += 1\n\n\ndef sort(array: list) -> list:\n    \"\"\"\n    :param collection: some mutable ordered collection with heterogeneous\n    comparable items inside\n    :return: the same collection ordered by ascending\n\n    Examples:\n    >>> sort([4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12])\n    [1, 2, 4, 6, 7, 8, 8, 12, 14, 14, 22, 23, 27, 45, 56, 79]\n    >>> sort([-1, -5, -3, -13, -44])\n    [-44, -13, -5, -3, -1]\n    >>> sort([])\n    []\n    >>> sort([5])\n    [5]\n    >>> sort([-3, 0, -7, 6, 23, -34])\n    [-34, -7, -3, 0, 6, 23]\n    >>> sort([1.7, 1.0, 3.3, 2.1, 0.3 ])\n    [0.3, 1.0, 1.7, 2.1, 3.3]\n    >>> sort(['d', 'a', 'b', 'e', 'c'])\n    ['a', 'b', 'c', 'd', 'e']\n    \"\"\"\n    if len(array) == 0:\n        return array\n    max_depth = 2 * math.ceil(math.log2(len(array)))\n    size_threshold = 16\n    return intro_sort(array, 0, len(array), size_threshold, max_depth)\n\n\ndef intro_sort(\n    array: list, start: int, end: int, size_threshold: int, max_depth: int\n) -> list:\n    \"\"\"\n    >>> array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n    >>> max_depth = 2 * math.ceil(math.log2(len(array)))\n    >>> intro_sort(array, 0, len(array), 16, max_depth)\n    [1, 2, 4, 6, 7, 8, 8, 12, 14, 14, 22, 23, 27, 45, 56, 79]\n    \"\"\"\n    while end - start > size_threshold:\n        if max_depth == 0:\n            return heap_sort(array)\n        max_depth -= 1\n        pivot = median_of_3(array, start, start + ((end - start) // 2) + 1, end - 1)\n        p = partition(array, start, end, pivot)\n        intro_sort(array, p, end, size_threshold, max_depth)\n        end = p\n    return insertion_sort(array, start, end)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    user_input = input(\"Enter numbers separated by a comma : \").strip()\n    unsorted = [float(item) for item in user_input.split(\",\")]\n    print(f\"{sort(unsorted) = }\")\n\n```"}], "metadata": {"prompt_id": "00000001", "row_id": 1, "seed_ids": [206], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nfrom __future__ import annotations\n\nfrom collections import deque\nfrom dataclasses import dataclass, field\n\n\n@dataclass\nclass StackWithQueues:\n    \"\"\"\n    https://www.geeksforgeeks.org/implement-stack-using-queue/\n\n    >>> stack = StackWithQueues()\n    >>> stack.push(1)\n    >>> stack.push(2)\n    >>> stack.push(3)\n    >>> stack.peek()\n    3\n    >>> stack.pop()\n    3\n    >>> stack.peek()\n    2\n    >>> stack.pop()\n    2\n    >>> stack.pop()\n    1\n    >>> stack.peek() is None\n    True\n    >>> stack.pop()\n    Traceback (most recent call last):\n        ...\n    IndexError: pop from an empty deque\n    \"\"\"\n\n    main_queue: deque[int] = field(default_factory=deque)\n    temp_queue: deque[int] = field(default_factory=deque)\n\n    def push(self, item: int) -> None:\n        self.temp_queue.append(item)\n        while self.main_queue:\n            self.temp_queue.append(self.main_queue.popleft())\n        self.main_queue, self.temp_queue = self.temp_queue, self.main_queue\n\n    def pop(self) -> int:\n        return self.main_queue.popleft()\n\n    def peek(self) -> int | None:\n        return self.main_queue[0] if self.main_queue else None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    stack: StackWithQueues | None = StackWithQueues()\n    while stack:\n        print(\"\\nChoose operation:\")\n        print(\"1. Push\")\n        print(\"2. Pop\")\n        print(\"3. Peek\")\n        print(\"4. Quit\")\n\n        choice = input(\"Enter choice (1/2/3/4): \")\n\n        if choice == \"1\":\n            element = int(input(\"Enter an integer to push: \").strip())\n            stack.push(element)\n            print(f\"{element} pushed onto the stack.\")\n        elif choice == \"2\":\n            popped_element = stack.pop()\n            if popped_element is not None:\n                print(f\"Popped element: {popped_element}\")\n            else:\n                print(\"Stack is empty.\")\n        elif choice == \"3\":\n            peeked_element = stack.peek()\n            if peeked_element is not None:\n                print(f\"Top element: {peeked_element}\")\n            else:\n                print(\"Stack is empty.\")\n        elif choice == \"4\":\n            del stack\n            stack = None\n        else:\n            print(\"Invalid choice. Please try again.\")\n\n```"}], "metadata": {"prompt_id": "00000002", "row_id": 2, "seed_ids": [416], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\ndef alternative_string_arrange(first_str: str, second_str: str) -> str:\n    \"\"\"\n    Return the alternative arrangements of the two strings.\n    :param first_str:\n    :param second_str:\n    :return: String\n    >>> alternative_string_arrange(\"ABCD\", \"XY\")\n    'AXBYCD'\n    >>> alternative_string_arrange(\"XY\", \"ABCD\")\n    'XAYBCD'\n    >>> alternative_string_arrange(\"AB\", \"XYZ\")\n    'AXBYZ'\n    >>> alternative_string_arrange(\"ABC\", \"\")\n    'ABC'\n    \"\"\"\n    first_str_length: int = len(first_str)\n    second_str_length: int = len(second_str)\n    abs_length: int = (\n        first_str_length if first_str_length > second_str_length else second_str_length\n    )\n    output_list: list = []\n    for char_count in range(abs_length):\n        if char_count < first_str_length:\n            output_list.append(first_str[char_count])\n        if char_count < second_str_length:\n            output_list.append(second_str[char_count])\n    return \"\".join(output_list)\n\n\nif __name__ == \"__main__\":\n    print(alternative_string_arrange(\"AB\", \"XYZ\"), end=\" \")\n\n```"}], "metadata": {"prompt_id": "00000003", "row_id": 3, "seed_ids": [289], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nInteger Square Root Algorithm -- An efficient method to calculate the square root of a\nnon-negative integer 'num' rounded down to the nearest integer. It uses a binary search\napproach to find the integer square root without using any built-in exponent functions\nor operators.\n* https://en.wikipedia.org/wiki/Integer_square_root\n* https://docs.python.org/3/library/math.html#math.isqrt\nNote:\n    - This algorithm is designed for non-negative integers only.\n    - The result is rounded down to the nearest integer.\n    - The algorithm has a time complexity of O(log(x)).\n    - Original algorithm idea based on binary search.\n\"\"\"\n\n\ndef integer_square_root(num: int) -> int:\n    \"\"\"\n    Returns the integer square root of a non-negative integer num.\n    Args:\n        num: A non-negative integer.\n    Returns:\n        The integer square root of num.\n    Raises:\n        ValueError: If num is not an integer or is negative.\n    >>> [integer_square_root(i) for i in range(18)]\n    [0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4]\n    >>> integer_square_root(625)\n    25\n    >>> integer_square_root(2_147_483_647)\n    46340\n    >>> from math import isqrt\n    >>> all(integer_square_root(i) == isqrt(i) for i in range(20))\n    True\n    >>> integer_square_root(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: num must be non-negative integer\n    >>> integer_square_root(1.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: num must be non-negative integer\n    >>> integer_square_root(\"0\")\n    Traceback (most recent call last):\n        ...\n    ValueError: num must be non-negative integer\n    \"\"\"\n    if not isinstance(num, int) or num < 0:\n        raise ValueError(\"num must be non-negative integer\")\n\n    if num < 2:\n        return num\n\n    left_bound = 0\n    right_bound = num // 2\n\n    while left_bound <= right_bound:\n        mid = left_bound + (right_bound - left_bound) // 2\n        mid_squared = mid * mid\n        if mid_squared == num:\n            return mid\n\n        if mid_squared < num:\n            left_bound = mid + 1\n        else:\n            right_bound = mid - 1\n\n    return right_bound\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000004", "row_id": 4, "seed_ids": [691], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nGiven a sorted array of integers, return indices of the two numbers such\nthat they add up to a specific target using the two pointers technique.\n\nYou may assume that each input would have exactly one solution, and you\nmay not use the same element twice.\n\nThis is an alternative solution of the two-sum problem, which uses a\nmap to solve the problem. Hence can not solve the issue if there is a\nconstraint not use the same index twice. [1]\n\nExample:\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n\n[1]: https://github.com/TheAlgorithms/Python/blob/master/other/two_sum.py\n\"\"\"\n\nfrom __future__ import annotations\n\n\ndef two_pointer(nums: list[int], target: int) -> list[int]:\n    \"\"\"\n    >>> two_pointer([2, 7, 11, 15], 9)\n    [0, 1]\n    >>> two_pointer([2, 7, 11, 15], 17)\n    [0, 3]\n    >>> two_pointer([2, 7, 11, 15], 18)\n    [1, 2]\n    >>> two_pointer([2, 7, 11, 15], 26)\n    [2, 3]\n    >>> two_pointer([1, 3, 3], 6)\n    [1, 2]\n    >>> two_pointer([2, 7, 11, 15], 8)\n    []\n    >>> two_pointer([3 * i for i in range(10)], 19)\n    []\n    >>> two_pointer([1, 2, 3], 6)\n    []\n    \"\"\"\n    i = 0\n    j = len(nums) - 1\n\n    while i < j:\n        if nums[i] + nums[j] == target:\n            return [i, j]\n        elif nums[i] + nums[j] < target:\n            i = i + 1\n        else:\n            j = j - 1\n\n    return []\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(f\"{two_pointer([2, 7, 11, 15], 9) = }\")\n\n```"}], "metadata": {"prompt_id": "00000005", "row_id": 5, "seed_ids": [716], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nalphabet = {\n    \"A\": (\"ABCDEFGHIJKLM\", \"NOPQRSTUVWXYZ\"),\n    \"B\": (\"ABCDEFGHIJKLM\", \"NOPQRSTUVWXYZ\"),\n    \"C\": (\"ABCDEFGHIJKLM\", \"ZNOPQRSTUVWXY\"),\n    \"D\": (\"ABCDEFGHIJKLM\", \"ZNOPQRSTUVWXY\"),\n    \"E\": (\"ABCDEFGHIJKLM\", \"YZNOPQRSTUVWX\"),\n    \"F\": (\"ABCDEFGHIJKLM\", \"YZNOPQRSTUVWX\"),\n    \"G\": (\"ABCDEFGHIJKLM\", \"XYZNOPQRSTUVW\"),\n    \"H\": (\"ABCDEFGHIJKLM\", \"XYZNOPQRSTUVW\"),\n    \"I\": (\"ABCDEFGHIJKLM\", \"WXYZNOPQRSTUV\"),\n    \"J\": (\"ABCDEFGHIJKLM\", \"WXYZNOPQRSTUV\"),\n    \"K\": (\"ABCDEFGHIJKLM\", \"VWXYZNOPQRSTU\"),\n    \"L\": (\"ABCDEFGHIJKLM\", \"VWXYZNOPQRSTU\"),\n    \"M\": (\"ABCDEFGHIJKLM\", \"UVWXYZNOPQRST\"),\n    \"N\": (\"ABCDEFGHIJKLM\", \"UVWXYZNOPQRST\"),\n    \"O\": (\"ABCDEFGHIJKLM\", \"TUVWXYZNOPQRS\"),\n    \"P\": (\"ABCDEFGHIJKLM\", \"TUVWXYZNOPQRS\"),\n    \"Q\": (\"ABCDEFGHIJKLM\", \"STUVWXYZNOPQR\"),\n    \"R\": (\"ABCDEFGHIJKLM\", \"STUVWXYZNOPQR\"),\n    \"S\": (\"ABCDEFGHIJKLM\", \"RSTUVWXYZNOPQ\"),\n    \"T\": (\"ABCDEFGHIJKLM\", \"RSTUVWXYZNOPQ\"),\n    \"U\": (\"ABCDEFGHIJKLM\", \"QRSTUVWXYZNOP\"),\n    \"V\": (\"ABCDEFGHIJKLM\", \"QRSTUVWXYZNOP\"),\n    \"W\": (\"ABCDEFGHIJKLM\", \"PQRSTUVWXYZNO\"),\n    \"X\": (\"ABCDEFGHIJKLM\", \"PQRSTUVWXYZNO\"),\n    \"Y\": (\"ABCDEFGHIJKLM\", \"OPQRSTUVWXYZN\"),\n    \"Z\": (\"ABCDEFGHIJKLM\", \"OPQRSTUVWXYZN\"),\n}\n\n\ndef generate_table(key: str) -> list[tuple[str, str]]:\n    \"\"\"\n    >>> generate_table('marvin')  # doctest: +NORMALIZE_WHITESPACE\n    [('ABCDEFGHIJKLM', 'UVWXYZNOPQRST'), ('ABCDEFGHIJKLM', 'NOPQRSTUVWXYZ'),\n     ('ABCDEFGHIJKLM', 'STUVWXYZNOPQR'), ('ABCDEFGHIJKLM', 'QRSTUVWXYZNOP'),\n     ('ABCDEFGHIJKLM', 'WXYZNOPQRSTUV'), ('ABCDEFGHIJKLM', 'UVWXYZNOPQRST')]\n    \"\"\"\n    return [alphabet[char] for char in key.upper()]\n\n\ndef encrypt(key: str, words: str) -> str:\n    \"\"\"\n    >>> encrypt('marvin', 'jessica')\n    'QRACRWU'\n    \"\"\"\n    cipher = \"\"\n    count = 0\n    table = generate_table(key)\n    for char in words.upper():\n        cipher += get_opponent(table[count], char)\n        count = (count + 1) % len(table)\n    return cipher\n\n\ndef decrypt(key: str, words: str) -> str:\n    \"\"\"\n    >>> decrypt('marvin', 'QRACRWU')\n    'JESSICA'\n    \"\"\"\n    return encrypt(key, words)\n\n\ndef get_position(table: tuple[str, str], char: str) -> tuple[int, int]:\n    \"\"\"\n    >>> get_position(generate_table('marvin')[0], 'M')\n    (0, 12)\n    \"\"\"\n    # `char` is either in the 0th row or the 1st row\n    row = 0 if char in table[0] else 1\n    col = table[row].index(char)\n    return row, col\n\n\ndef get_opponent(table: tuple[str, str], char: str) -> str:\n    \"\"\"\n    >>> get_opponent(generate_table('marvin')[0], 'M')\n    'T'\n    \"\"\"\n    row, col = get_position(table, char.upper())\n    if row == 1:\n        return table[0][col]\n    else:\n        return table[1][col] if row == 0 else char\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()  # Fist ensure that all our tests are passing...\n    \"\"\"\n    Demo:\n\n    Enter key: marvin\n    Enter text to encrypt: jessica\n    Encrypted: QRACRWU\n    Decrypted with key: JESSICA\n    \"\"\"\n    key = input(\"Enter key: \").strip()\n    text = input(\"Enter text to encrypt: \").strip()\n    cipher_text = encrypt(key, text)\n\n    print(f\"Encrypted: {cipher_text}\")\n    print(f\"Decrypted with key: {decrypt(key, cipher_text)}\")\n\n```"}], "metadata": {"prompt_id": "00000006", "row_id": 6, "seed_ids": [65], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\ndef binary_search(array: list, lower_bound: int, upper_bound: int, value: int) -> int:\n    \"\"\"\n    This function carries out Binary search on a 1d array and\n    return -1 if it do not exist\n    array: A 1d sorted array\n    value : the value meant to be searched\n    >>> matrix = [1, 4, 7, 11, 15]\n    >>> binary_search(matrix, 0, len(matrix) - 1, 1)\n    0\n    >>> binary_search(matrix, 0, len(matrix) - 1, 23)\n    -1\n    \"\"\"\n\n    r = int((lower_bound + upper_bound) // 2)\n    if array[r] == value:\n        return r\n    if lower_bound >= upper_bound:\n        return -1\n    if array[r] < value:\n        return binary_search(array, r + 1, upper_bound, value)\n    else:\n        return binary_search(array, lower_bound, r - 1, value)\n\n\ndef mat_bin_search(value: int, matrix: list) -> list:\n    \"\"\"\n    This function loops over a 2d matrix and calls binarySearch on\n    the selected 1d array and returns [-1, -1] is it do not exist\n    value : value meant to be searched\n    matrix = a sorted 2d matrix\n    >>> matrix = [[1, 4, 7, 11, 15],\n    ...           [2, 5, 8, 12, 19],\n    ...           [3, 6, 9, 16, 22],\n    ...           [10, 13, 14, 17, 24],\n    ...           [18, 21, 23, 26, 30]]\n    >>> target = 1\n    >>> mat_bin_search(target, matrix)\n    [0, 0]\n    >>> target = 34\n    >>> mat_bin_search(target, matrix)\n    [-1, -1]\n    \"\"\"\n    index = 0\n    if matrix[index][0] == value:\n        return [index, 0]\n    while index < len(matrix) and matrix[index][0] < value:\n        r = binary_search(matrix[index], 0, len(matrix[index]) - 1, value)\n        if r != -1:\n            return [index, r]\n        index += 1\n    return [-1, -1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000007", "row_id": 7, "seed_ids": [1095], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nFloyd's cycle detection algorithm is a popular algorithm used to detect cycles\nin a linked list. It uses two pointers, a slow pointer and a fast pointer,\nto traverse the linked list. The slow pointer moves one node at a time while the fast\npointer moves two nodes at a time. If there is a cycle in the linked list,\nthe fast pointer will eventually catch up to the slow pointer and they will\nmeet at the same node. If there is no cycle, the fast pointer will reach the end of\nthe linked list and the algorithm will terminate.\n\nFor more information: https://en.wikipedia.org/wiki/Cycle_detection#Floyd's_tortoise_and_hare\n\"\"\"\n\nfrom collections.abc import Iterator\nfrom dataclasses import dataclass\nfrom typing import Any, Self\n\n\n@dataclass\nclass Node:\n    \"\"\"\n    A class representing a node in a singly linked list.\n    \"\"\"\n\n    data: Any\n    next_node: Self | None = None\n\n\n@dataclass\nclass LinkedList:\n    \"\"\"\n    A class representing a singly linked list.\n    \"\"\"\n\n    head: Node | None = None\n\n    def __iter__(self) -> Iterator:\n        \"\"\"\n        Iterates through the linked list.\n\n        Returns:\n            Iterator: An iterator over the linked list.\n\n        Examples:\n        >>> linked_list = LinkedList()\n        >>> list(linked_list)\n        []\n        >>> linked_list.add_node(1)\n        >>> tuple(linked_list)\n        (1,)\n        \"\"\"\n        visited = []\n        node = self.head\n        while node:\n            # Avoid infinite loop in there's a cycle\n            if node in visited:\n                return\n            visited.append(node)\n            yield node.data\n            node = node.next_node\n\n    def add_node(self, data: Any) -> None:\n        \"\"\"\n        Adds a new node to the end of the linked list.\n\n        Args:\n            data (Any): The data to be stored in the new node.\n\n        Examples:\n        >>> linked_list = LinkedList()\n        >>> linked_list.add_node(1)\n        >>> linked_list.add_node(2)\n        >>> linked_list.add_node(3)\n        >>> linked_list.add_node(4)\n        >>> tuple(linked_list)\n        (1, 2, 3, 4)\n        \"\"\"\n        new_node = Node(data)\n\n        if self.head is None:\n            self.head = new_node\n            return\n\n        current_node = self.head\n        while current_node.next_node is not None:\n            current_node = current_node.next_node\n\n        current_node.next_node = new_node\n\n    def detect_cycle(self) -> bool:\n        \"\"\"\n        Detects if there is a cycle in the linked list using\n        Floyd's cycle detection algorithm.\n\n        Returns:\n            bool: True if there is a cycle, False otherwise.\n\n        Examples:\n        >>> linked_list = LinkedList()\n        >>> linked_list.add_node(1)\n        >>> linked_list.add_node(2)\n        >>> linked_list.add_node(3)\n        >>> linked_list.add_node(4)\n\n        >>> linked_list.detect_cycle()\n        False\n\n        # Create a cycle in the linked list\n        >>> linked_list.head.next_node.next_node.next_node = linked_list.head.next_node\n\n        >>> linked_list.detect_cycle()\n        True\n        \"\"\"\n        if self.head is None:\n            return False\n\n        slow_pointer: Node | None = self.head\n        fast_pointer: Node | None = self.head\n\n        while fast_pointer is not None and fast_pointer.next_node is not None:\n            slow_pointer = slow_pointer.next_node if slow_pointer else None\n            fast_pointer = fast_pointer.next_node.next_node\n            if slow_pointer == fast_pointer:\n                return True\n\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    linked_list = LinkedList()\n    linked_list.add_node(1)\n    linked_list.add_node(2)\n    linked_list.add_node(3)\n    linked_list.add_node(4)\n\n    # Create a cycle in the linked list\n    # It first checks if the head, next_node, and next_node.next_node attributes of the\n    # linked list are not None to avoid any potential type errors.\n    if (\n        linked_list.head\n        and linked_list.head.next_node\n        and linked_list.head.next_node.next_node\n    ):\n        linked_list.head.next_node.next_node.next_node = linked_list.head.next_node\n\n    has_cycle = linked_list.detect_cycle()\n    print(has_cycle)  # Output: True\n\n```"}], "metadata": {"prompt_id": "00000008", "row_id": 8, "seed_ids": [327], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nPartition a set into two subsets such that the difference of subset sums is minimum\n\"\"\"\n\n\ndef find_min(numbers: list[int]) -> int:\n    \"\"\"\n    >>> find_min([1, 2, 3, 4, 5])\n    1\n    >>> find_min([5, 5, 5, 5, 5])\n    5\n    >>> find_min([5, 5, 5, 5])\n    0\n    >>> find_min([3])\n    3\n    >>> find_min([])\n    0\n    >>> find_min([1, 2, 3, 4])\n    0\n    >>> find_min([0, 0, 0, 0])\n    0\n    >>> find_min([-1, -5, 5, 1])\n    0\n    >>> find_min([-1, -5, 5, 1])\n    0\n    >>> find_min([9, 9, 9, 9, 9])\n    9\n    >>> find_min([1, 5, 10, 3])\n    1\n    >>> find_min([-1, 0, 1])\n    0\n    >>> find_min(range(10, 0, -1))\n    1\n    >>> find_min([-1])\n    Traceback (most recent call last):\n        --\n    IndexError: list assignment index out of range\n    >>> find_min([0, 0, 0, 1, 2, -4])\n    Traceback (most recent call last):\n        ...\n    IndexError: list assignment index out of range\n    >>> find_min([-1, -5, -10, -3])\n    Traceback (most recent call last):\n        ...\n    IndexError: list assignment index out of range\n    \"\"\"\n    n = len(numbers)\n    s = sum(numbers)\n\n    dp = [[False for x in range(s + 1)] for y in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, s + 1):\n        dp[0][i] = False\n\n    for i in range(1, n + 1):\n        for j in range(1, s + 1):\n            dp[i][j] = dp[i - 1][j]\n\n            if numbers[i - 1] <= j:\n                dp[i][j] = dp[i][j] or dp[i - 1][j - numbers[i - 1]]\n\n    for j in range(int(s / 2), -1, -1):\n        if dp[n][j] is True:\n            diff = s - 2 * j\n            break\n\n    return diff\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n\n```"}], "metadata": {"prompt_id": "00000009", "row_id": 9, "seed_ids": [21], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nLychrel numbers\nProblem 55: https://projecteuler.net/problem=55\n\nIf we take 47, reverse and add, 47 + 74 = 121, which is palindromic.\n\nNot all numbers produce palindromes so quickly. For example,\n349 + 943 = 1292,\n1292 + 2921 = 4213\n4213 + 3124 = 7337\nThat is, 349 took three iterations to arrive at a palindrome.\n\nAlthough no one has proved it yet, it is thought that some numbers, like 196,\nnever produce a palindrome. A number that never forms a palindrome through the\nreverse and add process is called a Lychrel number. Due to the theoretical nature\nof these numbers, and for the purpose of this problem, we shall assume that a number\nis Lychrel until proven otherwise. In addition you are given that for every number\nbelow ten-thousand, it will either (i) become a palindrome in less than fifty\niterations, or, (ii) no one, with all the computing power that exists, has managed\nso far to map it to a palindrome. In fact, 10677 is the first number to be shown\nto require over fifty iterations before producing a palindrome:\n4668731596684224866951378664 (53 iterations, 28-digits).\n\nSurprisingly, there are palindromic numbers that are themselves Lychrel numbers;\nthe first example is 4994.\nHow many Lychrel numbers are there below ten-thousand?\n\"\"\"\n\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\"\n    Returns True if a number is palindrome.\n    >>> is_palindrome(12567321)\n    False\n    >>> is_palindrome(1221)\n    True\n    >>> is_palindrome(9876789)\n    True\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\ndef sum_reverse(n: int) -> int:\n    \"\"\"\n    Returns the sum of n and reverse of n.\n    >>> sum_reverse(123)\n    444\n    >>> sum_reverse(3478)\n    12221\n    >>> sum_reverse(12)\n    33\n    \"\"\"\n    return int(n) + int(str(n)[::-1])\n\n\ndef solution(limit: int = 10000) -> int:\n    \"\"\"\n    Returns the count of all lychrel numbers below limit.\n    >>> solution(10000)\n    249\n    >>> solution(5000)\n    76\n    >>> solution(1000)\n    13\n    \"\"\"\n    lychrel_nums = []\n    for num in range(1, limit):\n        iterations = 0\n        a = num\n        while iterations < 50:\n            num = sum_reverse(num)\n            iterations += 1\n            if is_palindrome(num):\n                break\n        else:\n            lychrel_nums.append(a)\n    return len(lychrel_nums)\n\n\nif __name__ == \"__main__\":\n    print(f\"{solution() = }\")\n\n```"}], "metadata": {"prompt_id": "00000010", "row_id": 10, "seed_ids": [589], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nimport math\n\n\ndef fx(x: float, a: float) -> float:\n    return math.pow(x, 2) - a\n\n\ndef fx_derivative(x: float) -> float:\n    return 2 * x\n\n\ndef get_initial_point(a: float) -> float:\n    start = 2.0\n\n    while start <= a:\n        start = math.pow(start, 2)\n\n    return start\n\n\ndef square_root_iterative(\n    a: float, max_iter: int = 9999, tolerance: float = 1e-14\n) -> float:\n    \"\"\"\n    Square root approximated using Newton's method.\n    https://en.wikipedia.org/wiki/Newton%27s_method\n\n    >>> all(abs(square_root_iterative(i) - math.sqrt(i)) <= 1e-14 for i in range(500))\n    True\n\n    >>> square_root_iterative(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: math domain error\n\n    >>> square_root_iterative(4)\n    2.0\n\n    >>> square_root_iterative(3.2)\n    1.788854381999832\n\n    >>> square_root_iterative(140)\n    11.832159566199232\n    \"\"\"\n\n    if a < 0:\n        raise ValueError(\"math domain error\")\n\n    value = get_initial_point(a)\n\n    for _ in range(max_iter):\n        prev_value = value\n        value = value - fx(value, a) / fx_derivative(value)\n        if abs(prev_value - value) < tolerance:\n            return value\n\n    return value\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n\n```"}], "metadata": {"prompt_id": "00000011", "row_id": 11, "seed_ids": [824], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nAuthor : Syed Faizan ( 3rd Year IIIT Pune )\nGithub : faizan2700\n\nPurpose : You have one function f(x) which takes float integer and returns\nfloat you have to integrate the function in limits a to b.\nThe approximation proposed by Thomas Simpson in 1743 is one way to calculate\nintegration.\n\n( read article : https://cp-algorithms.com/num_methods/simpson-integration.html )\n\nsimpson_integration() takes function,lower_limit=a,upper_limit=b,precision and\nreturns the integration of function in given limit.\n\"\"\"\n\n# constants\n# the more the number of steps the more accurate\nN_STEPS = 1000\n\n\ndef f(x: float) -> float:\n    return x * x\n\n\n\"\"\"\nSummary of Simpson Approximation :\n\nBy simpsons integration :\n1. integration of fxdx with limit a to b is =\n    f(x0) + 4 * f(x1) + 2 * f(x2) + 4 * f(x3) + 2 * f(x4)..... + f(xn)\nwhere x0 = a\nxi = a + i * h\nxn = b\n\"\"\"\n\n\ndef simpson_integration(function, a: float, b: float, precision: int = 4) -> float:\n    \"\"\"\n    Args:\n        function : the function which's integration is desired\n        a : the lower limit of integration\n        b : upper limit of integration\n        precision : precision of the result,error required default is 4\n\n    Returns:\n        result : the value of the approximated integration of function in range a to b\n\n    Raises:\n        AssertionError: function is not callable\n        AssertionError: a is not float or integer\n        AssertionError: function should return float or integer\n        AssertionError: b is not float or integer\n        AssertionError: precision is not positive integer\n\n    >>> simpson_integration(lambda x : x*x,1,2,3)\n    2.333\n\n    >>> simpson_integration(lambda x : x*x,'wrong_input',2,3)\n    Traceback (most recent call last):\n        ...\n    AssertionError: a should be float or integer your input : wrong_input\n\n    >>> simpson_integration(lambda x : x*x,1,'wrong_input',3)\n    Traceback (most recent call last):\n        ...\n    AssertionError: b should be float or integer your input : wrong_input\n\n    >>> simpson_integration(lambda x : x*x,1,2,'wrong_input')\n    Traceback (most recent call last):\n        ...\n    AssertionError: precision should be positive integer your input : wrong_input\n    >>> simpson_integration('wrong_input',2,3,4)\n    Traceback (most recent call last):\n        ...\n    AssertionError: the function(object) passed should be callable your input : ...\n\n    >>> simpson_integration(lambda x : x*x,3.45,3.2,1)\n    -2.8\n\n    >>> simpson_integration(lambda x : x*x,3.45,3.2,0)\n    Traceback (most recent call last):\n        ...\n    AssertionError: precision should be positive integer your input : 0\n\n    >>> simpson_integration(lambda x : x*x,3.45,3.2,-1)\n    Traceback (most recent call last):\n        ...\n    AssertionError: precision should be positive integer your input : -1\n\n    \"\"\"\n    assert callable(\n        function\n    ), f\"the function(object) passed should be callable your input : {function}\"\n    assert isinstance(a, (float, int)), f\"a should be float or integer your input : {a}\"\n    assert isinstance(function(a), (float, int)), (\n        \"the function should return integer or float return type of your function, \"\n        f\"{type(a)}\"\n    )\n    assert isinstance(b, (float, int)), f\"b should be float or integer your input : {b}\"\n    assert (\n        isinstance(precision, int) and precision > 0\n    ), f\"precision should be positive integer your input : {precision}\"\n\n    # just applying the formula of simpson for approximate integration written in\n    # mentioned article in first comment of this file and above this function\n\n    h = (b - a) / N_STEPS\n    result = function(a) + function(b)\n\n    for i in range(1, N_STEPS):\n        a1 = a + h * i\n        result += function(a1) * (4 if i % 2 else 2)\n\n    result *= h / 3\n    return round(result, precision)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000012", "row_id": 12, "seed_ids": [821], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\ndef manhattan_distance(point_a: list, point_b: list) -> float:\n    \"\"\"\n    Expectts two list of numbers representing two points in the same\n    n-dimensional space\n\n    https://en.wikipedia.org/wiki/Taxicab_geometry\n\n    >>> manhattan_distance([1,1], [2,2])\n    2.0\n    >>> manhattan_distance([1.5,1.5], [2,2])\n    1.0\n    >>> manhattan_distance([1.5,1.5], [2.5,2])\n    1.5\n    >>> manhattan_distance([-3, -3, -3], [0, 0, 0])\n    9.0\n    >>> manhattan_distance([1,1], None)\n    Traceback (most recent call last):\n        ...\n    ValueError: Missing an input\n    >>> manhattan_distance([1,1], [2, 2, 2])\n    Traceback (most recent call last):\n        ...\n    ValueError: Both points must be in the same n-dimensional space\n    >>> manhattan_distance([1,\"one\"], [2, 2, 2])\n    Traceback (most recent call last):\n        ...\n    TypeError: Expected a list of numbers as input, found str\n    >>> manhattan_distance(1, [2, 2, 2])\n    Traceback (most recent call last):\n         ...\n    TypeError: Expected a list of numbers as input, found int\n    >>> manhattan_distance([1,1], \"not_a_list\")\n    Traceback (most recent call last):\n         ...\n    TypeError: Expected a list of numbers as input, found str\n    \"\"\"\n\n    _validate_point(point_a)\n    _validate_point(point_b)\n    if len(point_a) != len(point_b):\n        raise ValueError(\"Both points must be in the same n-dimensional space\")\n\n    return float(sum(abs(a - b) for a, b in zip(point_a, point_b)))\n\n\ndef _validate_point(point: list[float]) -> None:\n    \"\"\"\n    >>> _validate_point(None)\n    Traceback (most recent call last):\n         ...\n    ValueError: Missing an input\n    >>> _validate_point([1,\"one\"])\n    Traceback (most recent call last):\n         ...\n    TypeError: Expected a list of numbers as input, found str\n    >>> _validate_point(1)\n    Traceback (most recent call last):\n         ...\n    TypeError: Expected a list of numbers as input, found int\n    >>> _validate_point(\"not_a_list\")\n    Traceback (most recent call last):\n         ...\n    TypeError: Expected a list of numbers as input, found str\n    \"\"\"\n    if point:\n        if isinstance(point, list):\n            for item in point:\n                if not isinstance(item, (int, float)):\n                    msg = (\n                        \"Expected a list of numbers as input, found \"\n                        f\"{type(item).__name__}\"\n                    )\n                    raise TypeError(msg)\n        else:\n            msg = f\"Expected a list of numbers as input, found {type(point).__name__}\"\n            raise TypeError(msg)\n    else:\n        raise ValueError(\"Missing an input\")\n\n\ndef manhattan_distance_one_liner(point_a: list, point_b: list) -> float:\n    \"\"\"\n    Version with one liner\n\n    >>> manhattan_distance_one_liner([1,1], [2,2])\n    2.0\n    >>> manhattan_distance_one_liner([1.5,1.5], [2,2])\n    1.0\n    >>> manhattan_distance_one_liner([1.5,1.5], [2.5,2])\n    1.5\n    >>> manhattan_distance_one_liner([-3, -3, -3], [0, 0, 0])\n    9.0\n    >>> manhattan_distance_one_liner([1,1], None)\n    Traceback (most recent call last):\n         ...\n    ValueError: Missing an input\n    >>> manhattan_distance_one_liner([1,1], [2, 2, 2])\n    Traceback (most recent call last):\n         ...\n    ValueError: Both points must be in the same n-dimensional space\n    >>> manhattan_distance_one_liner([1,\"one\"], [2, 2, 2])\n    Traceback (most recent call last):\n         ...\n    TypeError: Expected a list of numbers as input, found str\n    >>> manhattan_distance_one_liner(1, [2, 2, 2])\n    Traceback (most recent call last):\n         ...\n    TypeError: Expected a list of numbers as input, found int\n    >>> manhattan_distance_one_liner([1,1], \"not_a_list\")\n    Traceback (most recent call last):\n         ...\n    TypeError: Expected a list of numbers as input, found str\n    \"\"\"\n\n    _validate_point(point_a)\n    _validate_point(point_b)\n    if len(point_a) != len(point_b):\n        raise ValueError(\"Both points must be in the same n-dimensional space\")\n\n    return float(sum(abs(x - y) for x, y in zip(point_a, point_b)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000013", "row_id": 13, "seed_ids": [714], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nTitle:\nFinding the energy equivalence of mass and mass equivalence of energy\nby Einstein's equation.\n\nDescription:\nEinstein's mass-energy equivalence is a pivotal concept in theoretical physics.\nIt asserts that energy (E) and mass (m) are directly related by the speed of\nlight in vacuum (c) squared, as described in the equation E = mc\u00b2. This means that\nmass and energy are interchangeable; a mass increase corresponds to an energy increase,\nand vice versa. This principle has profound implications in nuclear reactions,\nexplaining the release of immense energy from minuscule changes in atomic nuclei.\n\nEquations:\nE = mc\u00b2 and m = E/c\u00b2, where m is mass, E is Energy, c is speed of light in vacuum.\n\nReference:\nhttps://en.wikipedia.org/wiki/Mass%E2%80%93energy_equivalence\n\"\"\"\n\nfrom scipy.constants import c  # speed of light in vacuum (299792458 m/s)\n\n\ndef energy_from_mass(mass: float) -> float:\n    \"\"\"\n    Calculates the Energy equivalence of the Mass using E = mc\u00b2\n    in SI units J from Mass in kg.\n\n    mass (float): Mass of body.\n\n    Usage example:\n    >>> energy_from_mass(124.56)\n    1.11948945063458e+19\n    >>> energy_from_mass(320)\n    2.8760165719578165e+19\n    >>> energy_from_mass(0)\n    0.0\n    >>> energy_from_mass(-967.9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Mass can't be negative.\n\n    \"\"\"\n    if mass < 0:\n        raise ValueError(\"Mass can't be negative.\")\n    return mass * c**2\n\n\ndef mass_from_energy(energy: float) -> float:\n    \"\"\"\n    Calculates the Mass equivalence of the Energy using m = E/c\u00b2\n    in SI units kg from Energy in J.\n\n    energy (float): Mass of body.\n\n    Usage example:\n    >>> mass_from_energy(124.56)\n    1.3859169098203872e-15\n    >>> mass_from_energy(320)\n    3.560480179371579e-15\n    >>> mass_from_energy(0)\n    0.0\n    >>> mass_from_energy(-967.9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Energy can't be negative.\n\n    \"\"\"\n    if energy < 0:\n        raise ValueError(\"Energy can't be negative.\")\n    return energy / c**2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000014", "row_id": 14, "seed_ids": [150], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nPure Python implementations of a Fixed Priority Queue and an Element Priority Queue\nusing Python lists.\n\"\"\"\n\n\nclass OverFlowError(Exception):\n    pass\n\n\nclass UnderFlowError(Exception):\n    pass\n\n\nclass FixedPriorityQueue:\n    \"\"\"\n    Tasks can be added to a Priority Queue at any time and in any order but when Tasks\n    are removed then the Task with the highest priority is removed in FIFO order.  In\n    code we will use three levels of priority with priority zero Tasks being the most\n    urgent (high priority) and priority 2 tasks being the least urgent.\n\n    Examples\n    >>> fpq = FixedPriorityQueue()\n    >>> fpq.enqueue(0, 10)\n    >>> fpq.enqueue(1, 70)\n    >>> fpq.enqueue(0, 100)\n    >>> fpq.enqueue(2, 1)\n    >>> fpq.enqueue(2, 5)\n    >>> fpq.enqueue(1, 7)\n    >>> fpq.enqueue(2, 4)\n    >>> fpq.enqueue(1, 64)\n    >>> fpq.enqueue(0, 128)\n    >>> print(fpq)\n    Priority 0: [10, 100, 128]\n    Priority 1: [70, 7, 64]\n    Priority 2: [1, 5, 4]\n    >>> fpq.dequeue()\n    10\n    >>> fpq.dequeue()\n    100\n    >>> fpq.dequeue()\n    128\n    >>> fpq.dequeue()\n    70\n    >>> fpq.dequeue()\n    7\n    >>> print(fpq)\n    Priority 0: []\n    Priority 1: [64]\n    Priority 2: [1, 5, 4]\n    >>> fpq.dequeue()\n    64\n    >>> fpq.dequeue()\n    1\n    >>> fpq.dequeue()\n    5\n    >>> fpq.dequeue()\n    4\n    >>> fpq.dequeue()\n    Traceback (most recent call last):\n        ...\n    data_structures.queue.priority_queue_using_list.UnderFlowError: All queues are empty\n    >>> print(fpq)\n    Priority 0: []\n    Priority 1: []\n    Priority 2: []\n    \"\"\"\n\n    def __init__(self):\n        self.queues = [\n            [],\n            [],\n            [],\n        ]\n\n    def enqueue(self, priority: int, data: int) -> None:\n        \"\"\"\n        Add an element to a queue based on its priority.\n        If the priority is invalid ValueError is raised.\n        If the queue is full an OverFlowError is raised.\n        \"\"\"\n        try:\n            if len(self.queues[priority]) >= 100:\n                raise OverflowError(\"Maximum queue size is 100\")\n            self.queues[priority].append(data)\n        except IndexError:\n            raise ValueError(\"Valid priorities are 0, 1, and 2\")\n\n    def dequeue(self) -> int:\n        \"\"\"\n        Return the highest priority element in FIFO order.\n        If the queue is empty then an under flow exception is raised.\n        \"\"\"\n        for queue in self.queues:\n            if queue:\n                return queue.pop(0)\n        raise UnderFlowError(\"All queues are empty\")\n\n    def __str__(self) -> str:\n        return \"\\n\".join(f\"Priority {i}: {q}\" for i, q in enumerate(self.queues))\n\n\nclass ElementPriorityQueue:\n    \"\"\"\n    Element Priority Queue is the same as Fixed Priority Queue except that the value of\n    the element itself is the priority. The rules for priorities are the same the as\n    Fixed Priority Queue.\n\n    >>> epq = ElementPriorityQueue()\n    >>> epq.enqueue(10)\n    >>> epq.enqueue(70)\n    >>> epq.enqueue(4)\n    >>> epq.enqueue(1)\n    >>> epq.enqueue(5)\n    >>> epq.enqueue(7)\n    >>> epq.enqueue(4)\n    >>> epq.enqueue(64)\n    >>> epq.enqueue(128)\n    >>> print(epq)\n    [10, 70, 4, 1, 5, 7, 4, 64, 128]\n    >>> epq.dequeue()\n    1\n    >>> epq.dequeue()\n    4\n    >>> epq.dequeue()\n    4\n    >>> epq.dequeue()\n    5\n    >>> epq.dequeue()\n    7\n    >>> epq.dequeue()\n    10\n    >>> print(epq)\n    [70, 64, 128]\n    >>> epq.dequeue()\n    64\n    >>> epq.dequeue()\n    70\n    >>> epq.dequeue()\n    128\n    >>> epq.dequeue()\n    Traceback (most recent call last):\n        ...\n    data_structures.queue.priority_queue_using_list.UnderFlowError: The queue is empty\n    >>> print(epq)\n    []\n    \"\"\"\n\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, data: int) -> None:\n        \"\"\"\n        This function enters the element into the queue\n        If the queue is full an Exception is raised saying Over Flow!\n        \"\"\"\n        if len(self.queue) == 100:\n            raise OverFlowError(\"Maximum queue size is 100\")\n        self.queue.append(data)\n\n    def dequeue(self) -> int:\n        \"\"\"\n        Return the highest priority element in FIFO order.\n        If the queue is empty then an under flow exception is raised.\n        \"\"\"\n        if not self.queue:\n            raise UnderFlowError(\"The queue is empty\")\n        else:\n            data = min(self.queue)\n            self.queue.remove(data)\n            return data\n\n    def __str__(self) -> str:\n        \"\"\"\n        Prints all the elements within the Element Priority Queue\n        \"\"\"\n        return str(self.queue)\n\n\ndef fixed_priority_queue():\n    fpq = FixedPriorityQueue()\n    fpq.enqueue(0, 10)\n    fpq.enqueue(1, 70)\n    fpq.enqueue(0, 100)\n    fpq.enqueue(2, 1)\n    fpq.enqueue(2, 5)\n    fpq.enqueue(1, 7)\n    fpq.enqueue(2, 4)\n    fpq.enqueue(1, 64)\n    fpq.enqueue(0, 128)\n    print(fpq)\n    print(fpq.dequeue())\n    print(fpq.dequeue())\n    print(fpq.dequeue())\n    print(fpq.dequeue())\n    print(fpq.dequeue())\n    print(fpq)\n    print(fpq.dequeue())\n    print(fpq.dequeue())\n    print(fpq.dequeue())\n    print(fpq.dequeue())\n    print(fpq.dequeue())\n\n\ndef element_priority_queue():\n    epq = ElementPriorityQueue()\n    epq.enqueue(10)\n    epq.enqueue(70)\n    epq.enqueue(100)\n    epq.enqueue(1)\n    epq.enqueue(5)\n    epq.enqueue(7)\n    epq.enqueue(4)\n    epq.enqueue(64)\n    epq.enqueue(128)\n    print(epq)\n    print(epq.dequeue())\n    print(epq.dequeue())\n    print(epq.dequeue())\n    print(epq.dequeue())\n    print(epq.dequeue())\n    print(epq)\n    print(epq.dequeue())\n    print(epq.dequeue())\n    print(epq.dequeue())\n    print(epq.dequeue())\n    print(epq.dequeue())\n\n\nif __name__ == \"__main__\":\n    fixed_priority_queue()\n    element_priority_queue()\n\n```"}], "metadata": {"prompt_id": "00000015", "row_id": 15, "seed_ids": [386], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nfrom math import log\n\nfrom scipy.constants import Boltzmann, physical_constants\n\nT = 300  # TEMPERATURE (unit = K)\n\n\ndef builtin_voltage(\n    donor_conc: float,  # donor concentration\n    acceptor_conc: float,  # acceptor concentration\n    intrinsic_conc: float,  # intrinsic concentration\n) -> float:\n    \"\"\"\n    This function can calculate the Builtin Voltage of a pn junction diode.\n    This is calculated from the given three values.\n    Examples -\n    >>> builtin_voltage(donor_conc=1e17, acceptor_conc=1e17, intrinsic_conc=1e10)\n    0.833370010652644\n    >>> builtin_voltage(donor_conc=0, acceptor_conc=1600, intrinsic_conc=200)\n    Traceback (most recent call last):\n      ...\n    ValueError: Donor concentration should be positive\n    >>> builtin_voltage(donor_conc=1000, acceptor_conc=0, intrinsic_conc=1200)\n    Traceback (most recent call last):\n      ...\n    ValueError: Acceptor concentration should be positive\n    >>> builtin_voltage(donor_conc=1000, acceptor_conc=1000, intrinsic_conc=0)\n    Traceback (most recent call last):\n      ...\n    ValueError: Intrinsic concentration should be positive\n    >>> builtin_voltage(donor_conc=1000, acceptor_conc=3000, intrinsic_conc=2000)\n    Traceback (most recent call last):\n      ...\n    ValueError: Donor concentration should be greater than intrinsic concentration\n    >>> builtin_voltage(donor_conc=3000, acceptor_conc=1000, intrinsic_conc=2000)\n    Traceback (most recent call last):\n      ...\n    ValueError: Acceptor concentration should be greater than intrinsic concentration\n    \"\"\"\n\n    if donor_conc <= 0:\n        raise ValueError(\"Donor concentration should be positive\")\n    elif acceptor_conc <= 0:\n        raise ValueError(\"Acceptor concentration should be positive\")\n    elif intrinsic_conc <= 0:\n        raise ValueError(\"Intrinsic concentration should be positive\")\n    elif donor_conc <= intrinsic_conc:\n        raise ValueError(\n            \"Donor concentration should be greater than intrinsic concentration\"\n        )\n    elif acceptor_conc <= intrinsic_conc:\n        raise ValueError(\n            \"Acceptor concentration should be greater than intrinsic concentration\"\n        )\n    else:\n        return (\n            Boltzmann\n            * T\n            * log((donor_conc * acceptor_conc) / intrinsic_conc**2)\n            / physical_constants[\"electron volt\"][0]\n        )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000016", "row_id": 16, "seed_ids": [185], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nProject Euler Problem 104 : https://projecteuler.net/problem=104\n\nThe Fibonacci sequence is defined by the recurrence relation:\n\nFn = Fn-1 + Fn-2, where F1 = 1 and F2 = 1.\nIt turns out that F541, which contains 113 digits, is the first Fibonacci number\nfor which the last nine digits are 1-9 pandigital (contain all the digits 1 to 9,\nbut not necessarily in order). And F2749, which contains 575 digits, is the first\nFibonacci number for which the first nine digits are 1-9 pandigital.\n\nGiven that Fk is the first Fibonacci number for which the first nine digits AND\nthe last nine digits are 1-9 pandigital, find k.\n\"\"\"\n\nimport sys\n\nsys.set_int_max_str_digits(0)\n\n\ndef check(number: int) -> bool:\n    \"\"\"\n    Takes a number and checks if it is pandigital both from start and end\n\n\n    >>> check(123456789987654321)\n    True\n\n    >>> check(120000987654321)\n    False\n\n    >>> check(1234567895765677987654321)\n    True\n\n    \"\"\"\n\n    check_last = [0] * 11\n    check_front = [0] * 11\n\n    # mark last 9 numbers\n    for _ in range(9):\n        check_last[int(number % 10)] = 1\n        number = number // 10\n    # flag\n    f = True\n\n    # check last 9 numbers for pandigitality\n\n    for x in range(9):\n        if not check_last[x + 1]:\n            f = False\n    if not f:\n        return f\n\n    # mark first 9 numbers\n    number = int(str(number)[:9])\n\n    for _ in range(9):\n        check_front[int(number % 10)] = 1\n        number = number // 10\n\n    # check first 9 numbers for pandigitality\n\n    for x in range(9):\n        if not check_front[x + 1]:\n            f = False\n    return f\n\n\ndef check1(number: int) -> bool:\n    \"\"\"\n    Takes a number and checks if it is pandigital from END\n\n    >>> check1(123456789987654321)\n    True\n\n    >>> check1(120000987654321)\n    True\n\n    >>> check1(12345678957656779870004321)\n    False\n\n    \"\"\"\n\n    check_last = [0] * 11\n\n    # mark last 9 numbers\n    for _ in range(9):\n        check_last[int(number % 10)] = 1\n        number = number // 10\n    # flag\n    f = True\n\n    # check last 9 numbers for pandigitality\n\n    for x in range(9):\n        if not check_last[x + 1]:\n            f = False\n    return f\n\n\ndef solution() -> int:\n    \"\"\"\n    Outputs the answer is the least Fibonacci number pandigital from both sides.\n    >>> solution()\n    329468\n    \"\"\"\n\n    a = 1\n    b = 1\n    c = 2\n    # temporary Fibonacci numbers\n\n    a1 = 1\n    b1 = 1\n    c1 = 2\n    # temporary Fibonacci numbers mod 1e9\n\n    # mod m=1e9, done for fast optimisation\n    tocheck = [0] * 1000000\n    m = 1000000000\n\n    for x in range(1000000):\n        c1 = (a1 + b1) % m\n        a1 = b1 % m\n        b1 = c1 % m\n        if check1(b1):\n            tocheck[x + 3] = 1\n\n    for x in range(1000000):\n        c = a + b\n        a = b\n        b = c\n        # perform check only if in tocheck\n        if tocheck[x + 3] and check(b):\n            return x + 3  # first 2 already done\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(f\"{solution() = }\")\n\n```"}], "metadata": {"prompt_id": "00000017", "row_id": 17, "seed_ids": [609], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nSimilarity Search : https://en.wikipedia.org/wiki/Similarity_search\nSimilarity search is a search algorithm for finding the nearest vector from\nvectors, used in natural language processing.\nIn this algorithm, it calculates distance with euclidean distance and\nreturns a list containing two data for each vector:\n    1. the nearest vector\n    2. distance between the vector and the nearest vector (float)\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\n\nimport numpy as np\nfrom numpy.linalg import norm\n\n\ndef euclidean(input_a: np.ndarray, input_b: np.ndarray) -> float:\n    \"\"\"\n    Calculates euclidean distance between two data.\n    :param input_a: ndarray of first vector.\n    :param input_b: ndarray of second vector.\n    :return: Euclidean distance of input_a and input_b. By using math.sqrt(),\n             result will be float.\n\n    >>> euclidean(np.array([0]), np.array([1]))\n    1.0\n    >>> euclidean(np.array([0, 1]), np.array([1, 1]))\n    1.0\n    >>> euclidean(np.array([0, 0, 0]), np.array([0, 0, 1]))\n    1.0\n    \"\"\"\n    return math.sqrt(sum(pow(a - b, 2) for a, b in zip(input_a, input_b)))\n\n\ndef similarity_search(\n    dataset: np.ndarray, value_array: np.ndarray\n) -> list[list[list[float] | float]]:\n    \"\"\"\n    :param dataset: Set containing the vectors. Should be ndarray.\n    :param value_array: vector/vectors we want to know the nearest vector from dataset.\n    :return: Result will be a list containing\n            1. the nearest vector\n            2. distance from the vector\n\n    >>> dataset = np.array([[0], [1], [2]])\n    >>> value_array = np.array([[0]])\n    >>> similarity_search(dataset, value_array)\n    [[[0], 0.0]]\n\n    >>> dataset = np.array([[0, 0], [1, 1], [2, 2]])\n    >>> value_array = np.array([[0, 1]])\n    >>> similarity_search(dataset, value_array)\n    [[[0, 0], 1.0]]\n\n    >>> dataset = np.array([[0, 0, 0], [1, 1, 1], [2, 2, 2]])\n    >>> value_array = np.array([[0, 0, 1]])\n    >>> similarity_search(dataset, value_array)\n    [[[0, 0, 0], 1.0]]\n\n    >>> dataset = np.array([[0, 0, 0], [1, 1, 1], [2, 2, 2]])\n    >>> value_array = np.array([[0, 0, 0], [0, 0, 1]])\n    >>> similarity_search(dataset, value_array)\n    [[[0, 0, 0], 0.0], [[0, 0, 0], 1.0]]\n\n    These are the errors that might occur:\n\n    1. If dimensions are different.\n    For example, dataset has 2d array and value_array has 1d array:\n    >>> dataset = np.array([[1]])\n    >>> value_array = np.array([1])\n    >>> similarity_search(dataset, value_array)\n    Traceback (most recent call last):\n        ...\n    ValueError: Wrong input data's dimensions... dataset : 2, value_array : 1\n\n    2. If data's shapes are different.\n    For example, dataset has shape of (3, 2) and value_array has (2, 3).\n    We are expecting same shapes of two arrays, so it is wrong.\n    >>> dataset = np.array([[0, 0], [1, 1], [2, 2]])\n    >>> value_array = np.array([[0, 0, 0], [0, 0, 1]])\n    >>> similarity_search(dataset, value_array)\n    Traceback (most recent call last):\n        ...\n    ValueError: Wrong input data's shape... dataset : 2, value_array : 3\n\n    3. If data types are different.\n    When trying to compare, we are expecting same types so they should be same.\n    If not, it'll come up with errors.\n    >>> dataset = np.array([[0, 0], [1, 1], [2, 2]], dtype=np.float32)\n    >>> value_array = np.array([[0, 0], [0, 1]], dtype=np.int32)\n    >>> similarity_search(dataset, value_array)  # doctest: +NORMALIZE_WHITESPACE\n    Traceback (most recent call last):\n        ...\n    TypeError: Input data have different datatype...\n    dataset : float32, value_array : int32\n    \"\"\"\n\n    if dataset.ndim != value_array.ndim:\n        msg = (\n            \"Wrong input data's dimensions... \"\n            f\"dataset : {dataset.ndim}, value_array : {value_array.ndim}\"\n        )\n        raise ValueError(msg)\n\n    try:\n        if dataset.shape[1] != value_array.shape[1]:\n            msg = (\n                \"Wrong input data's shape... \"\n                f\"dataset : {dataset.shape[1]}, value_array : {value_array.shape[1]}\"\n            )\n            raise ValueError(msg)\n    except IndexError:\n        if dataset.ndim != value_array.ndim:\n            raise TypeError(\"Wrong shape\")\n\n    if dataset.dtype != value_array.dtype:\n        msg = (\n            \"Input data have different datatype... \"\n            f\"dataset : {dataset.dtype}, value_array : {value_array.dtype}\"\n        )\n        raise TypeError(msg)\n\n    answer = []\n\n    for value in value_array:\n        dist = euclidean(value, dataset[0])\n        vector = dataset[0].tolist()\n\n        for dataset_value in dataset[1:]:\n            temp_dist = euclidean(value, dataset_value)\n\n            if dist > temp_dist:\n                dist = temp_dist\n                vector = dataset_value.tolist()\n\n        answer.append([vector, dist])\n\n    return answer\n\n\ndef cosine_similarity(input_a: np.ndarray, input_b: np.ndarray) -> float:\n    \"\"\"\n    Calculates cosine similarity between two data.\n    :param input_a: ndarray of first vector.\n    :param input_b: ndarray of second vector.\n    :return: Cosine similarity of input_a and input_b. By using math.sqrt(),\n             result will be float.\n\n    >>> cosine_similarity(np.array([1]), np.array([1]))\n    1.0\n    >>> cosine_similarity(np.array([1, 2]), np.array([6, 32]))\n    0.9615239476408232\n    \"\"\"\n    return float(np.dot(input_a, input_b) / (norm(input_a) * norm(input_b)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000018", "row_id": 18, "seed_ids": [111], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nThis algorithm (k=33) was first reported by Dan Bernstein many years ago in comp.lang.c\nAnother version of this algorithm (now favored by Bernstein) uses xor:\n    hash(i) = hash(i - 1) * 33 ^ str[i];\n\n    First Magic constant 33:\n    It has never been adequately explained.\n    It's magic because it works better than many other constants, prime or not.\n\n    Second Magic Constant 5381:\n\n    1. odd number\n    2. prime number\n    3. deficient number\n    4. 001/010/100/000/101 b\n\n    source: http://www.cse.yorku.ca/~oz/hash.html\n\"\"\"\n\n\ndef djb2(s: str) -> int:\n    \"\"\"\n    Implementation of djb2 hash algorithm that\n    is popular because of it's magic constants.\n\n    >>> djb2('Algorithms')\n    3782405311\n\n    >>> djb2('scramble bits')\n    1609059040\n    \"\"\"\n    hash_value = 5381\n    for x in s:\n        hash_value = ((hash_value << 5) + hash_value) + ord(x)\n    return hash_value & 0xFFFFFFFF\n\n```"}], "metadata": {"prompt_id": "00000019", "row_id": 19, "seed_ids": [417], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nProblem 33: https://projecteuler.net/problem=33\n\nThe fraction 49/98 is a curious fraction, as an inexperienced\nmathematician in attempting to simplify it may incorrectly believe\nthat 49/98 = 4/8, which is correct, is obtained by cancelling the 9s.\n\nWe shall consider fractions like, 30/50 = 3/5, to be trivial examples.\n\nThere are exactly four non-trivial examples of this type of fraction,\nless than one in value, and containing two digits in the numerator\nand denominator.\n\nIf the product of these four fractions is given in its lowest common\nterms, find the value of the denominator.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom fractions import Fraction\n\n\ndef is_digit_cancelling(num: int, den: int) -> bool:\n    return (\n        num != den and num % 10 == den // 10 and (num // 10) / (den % 10) == num / den\n    )\n\n\ndef fraction_list(digit_len: int) -> list[str]:\n    \"\"\"\n    >>> fraction_list(2)\n    ['16/64', '19/95', '26/65', '49/98']\n    >>> fraction_list(3)\n    ['16/64', '19/95', '26/65', '49/98']\n    >>> fraction_list(4)\n    ['16/64', '19/95', '26/65', '49/98']\n    >>> fraction_list(0)\n    []\n    >>> fraction_list(5)\n    ['16/64', '19/95', '26/65', '49/98']\n    \"\"\"\n    solutions = []\n    den = 11\n    last_digit = int(\"1\" + \"0\" * digit_len)\n    for num in range(den, last_digit):\n        while den <= 99:\n            if (\n                (num != den)\n                and (num % 10 == den // 10)\n                and (den % 10 != 0)\n                and is_digit_cancelling(num, den)\n            ):\n                solutions.append(f\"{num}/{den}\")\n            den += 1\n        num += 1\n        den = 10\n    return solutions\n\n\ndef solution(n: int = 2) -> int:\n    \"\"\"\n    Return the solution to the problem\n    \"\"\"\n    result = 1.0\n    for fraction in fraction_list(n):\n        frac = Fraction(fraction)\n        result *= frac.denominator / frac.numerator\n    return int(result)\n\n\nif __name__ == \"__main__\":\n    print(solution())\n\n```"}], "metadata": {"prompt_id": "00000020", "row_id": 20, "seed_ids": [554], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nConversion of weight units.\n\n__author__ = \"Anubhav Solanki\"\n__license__ = \"MIT\"\n__version__ = \"1.1.0\"\n__maintainer__ = \"Anubhav Solanki\"\n__email__ = \"anubhavsolanki0@gmail.com\"\n\nUSAGE :\n-> Import this file into their respective project.\n-> Use the function weight_conversion() for conversion of weight units.\n-> Parameters :\n    -> from_type : From which type you want to convert\n    -> to_type : To which type you want to convert\n    -> value : the value which you want to convert\n\nREFERENCES :\n\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Kilogram\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Gram\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Millimetre\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Tonne\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Long_ton\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Short_ton\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Pound\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Ounce\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Fineness#Karat\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Dalton_(unit)\n-> Wikipedia reference: https://en.wikipedia.org/wiki/Stone_(unit)\n\"\"\"\n\nKILOGRAM_CHART: dict[str, float] = {\n    \"kilogram\": 1,\n    \"gram\": pow(10, 3),\n    \"milligram\": pow(10, 6),\n    \"metric-ton\": pow(10, -3),\n    \"long-ton\": 0.0009842073,\n    \"short-ton\": 0.0011023122,\n    \"pound\": 2.2046244202,\n    \"stone\": 0.1574731728,\n    \"ounce\": 35.273990723,\n    \"carrat\": 5000,\n    \"atomic-mass-unit\": 6.022136652e26,\n}\n\nWEIGHT_TYPE_CHART: dict[str, float] = {\n    \"kilogram\": 1,\n    \"gram\": pow(10, -3),\n    \"milligram\": pow(10, -6),\n    \"metric-ton\": pow(10, 3),\n    \"long-ton\": 1016.04608,\n    \"short-ton\": 907.184,\n    \"pound\": 0.453592,\n    \"stone\": 6.35029,\n    \"ounce\": 0.0283495,\n    \"carrat\": 0.0002,\n    \"atomic-mass-unit\": 1.660540199e-27,\n}\n\n\ndef weight_conversion(from_type: str, to_type: str, value: float) -> float:\n    \"\"\"\n    Conversion of weight unit with the help of KILOGRAM_CHART\n\n    \"kilogram\" : 1,\n    \"gram\" : pow(10, 3),\n    \"milligram\" : pow(10, 6),\n    \"metric-ton\" : pow(10, -3),\n    \"long-ton\" : 0.0009842073,\n    \"short-ton\" : 0.0011023122,\n    \"pound\" : 2.2046244202,\n    \"stone\": 0.1574731728,\n    \"ounce\" : 35.273990723,\n    \"carrat\" : 5000,\n    \"atomic-mass-unit\" : 6.022136652E+26\n\n    >>> weight_conversion(\"kilogram\",\"kilogram\",4)\n    4\n    >>> weight_conversion(\"kilogram\",\"gram\",1)\n    1000\n    >>> weight_conversion(\"kilogram\",\"milligram\",4)\n    4000000\n    >>> weight_conversion(\"kilogram\",\"metric-ton\",4)\n    0.004\n    >>> weight_conversion(\"kilogram\",\"long-ton\",3)\n    0.0029526219\n    >>> weight_conversion(\"kilogram\",\"short-ton\",1)\n    0.0011023122\n    >>> weight_conversion(\"kilogram\",\"pound\",4)\n    8.8184976808\n    >>> weight_conversion(\"kilogram\",\"stone\",5)\n    0.7873658640000001\n    >>> weight_conversion(\"kilogram\",\"ounce\",4)\n    141.095962892\n    >>> weight_conversion(\"kilogram\",\"carrat\",3)\n    15000\n    >>> weight_conversion(\"kilogram\",\"atomic-mass-unit\",1)\n    6.022136652e+26\n    >>> weight_conversion(\"gram\",\"kilogram\",1)\n    0.001\n    >>> weight_conversion(\"gram\",\"gram\",3)\n    3.0\n    >>> weight_conversion(\"gram\",\"milligram\",2)\n    2000.0\n    >>> weight_conversion(\"gram\",\"metric-ton\",4)\n    4e-06\n    >>> weight_conversion(\"gram\",\"long-ton\",3)\n    2.9526219e-06\n    >>> weight_conversion(\"gram\",\"short-ton\",3)\n    3.3069366000000003e-06\n    >>> weight_conversion(\"gram\",\"pound\",3)\n    0.0066138732606\n    >>> weight_conversion(\"gram\",\"stone\",4)\n    0.0006298926912000001\n    >>> weight_conversion(\"gram\",\"ounce\",1)\n    0.035273990723\n    >>> weight_conversion(\"gram\",\"carrat\",2)\n    10.0\n    >>> weight_conversion(\"gram\",\"atomic-mass-unit\",1)\n    6.022136652e+23\n    >>> weight_conversion(\"milligram\",\"kilogram\",1)\n    1e-06\n    >>> weight_conversion(\"milligram\",\"gram\",2)\n    0.002\n    >>> weight_conversion(\"milligram\",\"milligram\",3)\n    3.0\n    >>> weight_conversion(\"milligram\",\"metric-ton\",3)\n    3e-09\n    >>> weight_conversion(\"milligram\",\"long-ton\",3)\n    2.9526219e-09\n    >>> weight_conversion(\"milligram\",\"short-ton\",1)\n    1.1023122e-09\n    >>> weight_conversion(\"milligram\",\"pound\",3)\n    6.6138732605999995e-06\n    >>> weight_conversion(\"milligram\",\"ounce\",2)\n    7.054798144599999e-05\n    >>> weight_conversion(\"milligram\",\"carrat\",1)\n    0.005\n    >>> weight_conversion(\"milligram\",\"atomic-mass-unit\",1)\n    6.022136652e+20\n    >>> weight_conversion(\"metric-ton\",\"kilogram\",2)\n    2000\n    >>> weight_conversion(\"metric-ton\",\"gram\",2)\n    2000000\n    >>> weight_conversion(\"metric-ton\",\"milligram\",3)\n    3000000000\n    >>> weight_conversion(\"metric-ton\",\"metric-ton\",2)\n    2.0\n    >>> weight_conversion(\"metric-ton\",\"long-ton\",3)\n    2.9526219\n    >>> weight_conversion(\"metric-ton\",\"short-ton\",2)\n    2.2046244\n    >>> weight_conversion(\"metric-ton\",\"pound\",3)\n    6613.8732606\n    >>> weight_conversion(\"metric-ton\",\"ounce\",4)\n    141095.96289199998\n    >>> weight_conversion(\"metric-ton\",\"carrat\",4)\n    20000000\n    >>> weight_conversion(\"metric-ton\",\"atomic-mass-unit\",1)\n    6.022136652e+29\n    >>> weight_conversion(\"long-ton\",\"kilogram\",4)\n    4064.18432\n    >>> weight_conversion(\"long-ton\",\"gram\",4)\n    4064184.32\n    >>> weight_conversion(\"long-ton\",\"milligram\",3)\n    3048138240.0\n    >>> weight_conversion(\"long-ton\",\"metric-ton\",4)\n    4.06418432\n    >>> weight_conversion(\"long-ton\",\"long-ton\",3)\n    2.999999907217152\n    >>> weight_conversion(\"long-ton\",\"short-ton\",1)\n    1.119999989746176\n    >>> weight_conversion(\"long-ton\",\"pound\",3)\n    6720.000000049448\n    >>> weight_conversion(\"long-ton\",\"ounce\",1)\n    35840.000000060514\n    >>> weight_conversion(\"long-ton\",\"carrat\",4)\n    20320921.599999998\n    >>> weight_conversion(\"long-ton\",\"atomic-mass-unit\",4)\n    2.4475073353955697e+30\n    >>> weight_conversion(\"short-ton\",\"kilogram\",3)\n    2721.5519999999997\n    >>> weight_conversion(\"short-ton\",\"gram\",3)\n    2721552.0\n    >>> weight_conversion(\"short-ton\",\"milligram\",1)\n    907184000.0\n    >>> weight_conversion(\"short-ton\",\"metric-ton\",4)\n    3.628736\n    >>> weight_conversion(\"short-ton\",\"long-ton\",3)\n    2.6785713457296\n    >>> weight_conversion(\"short-ton\",\"short-ton\",3)\n    2.9999999725344\n    >>> weight_conversion(\"short-ton\",\"pound\",2)\n    4000.0000000294335\n    >>> weight_conversion(\"short-ton\",\"ounce\",4)\n    128000.00000021611\n    >>> weight_conversion(\"short-ton\",\"carrat\",4)\n    18143680.0\n    >>> weight_conversion(\"short-ton\",\"atomic-mass-unit\",1)\n    5.463186016507968e+29\n    >>> weight_conversion(\"pound\",\"kilogram\",4)\n    1.814368\n    >>> weight_conversion(\"pound\",\"gram\",2)\n    907.184\n    >>> weight_conversion(\"pound\",\"milligram\",3)\n    1360776.0\n    >>> weight_conversion(\"pound\",\"metric-ton\",3)\n    0.001360776\n    >>> weight_conversion(\"pound\",\"long-ton\",2)\n    0.0008928571152432\n    >>> weight_conversion(\"pound\",\"short-ton\",1)\n    0.0004999999954224\n    >>> weight_conversion(\"pound\",\"pound\",3)\n    3.0000000000220752\n    >>> weight_conversion(\"pound\",\"ounce\",1)\n    16.000000000027015\n    >>> weight_conversion(\"pound\",\"carrat\",1)\n    2267.96\n    >>> weight_conversion(\"pound\",\"atomic-mass-unit\",4)\n    1.0926372033015936e+27\n    >>> weight_conversion(\"stone\",\"kilogram\",5)\n    31.751450000000002\n    >>> weight_conversion(\"stone\",\"gram\",2)\n    12700.58\n    >>> weight_conversion(\"stone\",\"milligram\",3)\n    19050870.0\n    >>> weight_conversion(\"stone\",\"metric-ton\",3)\n    0.01905087\n    >>> weight_conversion(\"stone\",\"long-ton\",3)\n    0.018750005325351003\n    >>> weight_conversion(\"stone\",\"short-ton\",3)\n    0.021000006421614002\n    >>> weight_conversion(\"stone\",\"pound\",2)\n    28.00000881870372\n    >>> weight_conversion(\"stone\",\"ounce\",1)\n    224.00007054835967\n    >>> weight_conversion(\"stone\",\"carrat\",2)\n    63502.9\n    >>> weight_conversion(\"ounce\",\"kilogram\",3)\n    0.0850485\n    >>> weight_conversion(\"ounce\",\"gram\",3)\n    85.0485\n    >>> weight_conversion(\"ounce\",\"milligram\",4)\n    113398.0\n    >>> weight_conversion(\"ounce\",\"metric-ton\",4)\n    0.000113398\n    >>> weight_conversion(\"ounce\",\"long-ton\",4)\n    0.0001116071394054\n    >>> weight_conversion(\"ounce\",\"short-ton\",4)\n    0.0001249999988556\n    >>> weight_conversion(\"ounce\",\"pound\",1)\n    0.0625000000004599\n    >>> weight_conversion(\"ounce\",\"ounce\",2)\n    2.000000000003377\n    >>> weight_conversion(\"ounce\",\"carrat\",1)\n    141.7475\n    >>> weight_conversion(\"ounce\",\"atomic-mass-unit\",1)\n    1.70724563015874e+25\n    >>> weight_conversion(\"carrat\",\"kilogram\",1)\n    0.0002\n    >>> weight_conversion(\"carrat\",\"gram\",4)\n    0.8\n    >>> weight_conversion(\"carrat\",\"milligram\",2)\n    400.0\n    >>> weight_conversion(\"carrat\",\"metric-ton\",2)\n    4.0000000000000003e-07\n    >>> weight_conversion(\"carrat\",\"long-ton\",3)\n    5.9052438e-07\n    >>> weight_conversion(\"carrat\",\"short-ton\",4)\n    8.818497600000002e-07\n    >>> weight_conversion(\"carrat\",\"pound\",1)\n    0.00044092488404000004\n    >>> weight_conversion(\"carrat\",\"ounce\",2)\n    0.0141095962892\n    >>> weight_conversion(\"carrat\",\"carrat\",4)\n    4.0\n    >>> weight_conversion(\"carrat\",\"atomic-mass-unit\",4)\n    4.8177093216e+23\n    >>> weight_conversion(\"atomic-mass-unit\",\"kilogram\",4)\n    6.642160796e-27\n    >>> weight_conversion(\"atomic-mass-unit\",\"gram\",2)\n    3.321080398e-24\n    >>> weight_conversion(\"atomic-mass-unit\",\"milligram\",2)\n    3.3210803980000002e-21\n    >>> weight_conversion(\"atomic-mass-unit\",\"metric-ton\",3)\n    4.9816205970000004e-30\n    >>> weight_conversion(\"atomic-mass-unit\",\"long-ton\",3)\n    4.9029473573977584e-30\n    >>> weight_conversion(\"atomic-mass-unit\",\"short-ton\",1)\n    1.830433719948128e-30\n    >>> weight_conversion(\"atomic-mass-unit\",\"pound\",3)\n    1.0982602420317504e-26\n    >>> weight_conversion(\"atomic-mass-unit\",\"ounce\",2)\n    1.1714775914938915e-25\n    >>> weight_conversion(\"atomic-mass-unit\",\"carrat\",2)\n    1.660540199e-23\n    >>> weight_conversion(\"atomic-mass-unit\",\"atomic-mass-unit\",2)\n    1.999999998903455\n    >>> weight_conversion(\"slug\", \"kilogram\", 1)\n    Traceback (most recent call last):\n    ...\n    ValueError: Invalid 'from_type' or 'to_type' value: 'slug', 'kilogram'\n    Supported values are: kilogram, gram, milligram, metric-ton, long-ton, short-ton, \\\npound, stone, ounce, carrat, atomic-mass-unit\n    \"\"\"\n    if to_type not in KILOGRAM_CHART or from_type not in WEIGHT_TYPE_CHART:\n        msg = (\n            f\"Invalid 'from_type' or 'to_type' value: {from_type!r}, {to_type!r}\\n\"\n            f\"Supported values are: {', '.join(WEIGHT_TYPE_CHART)}\"\n        )\n        raise ValueError(msg)\n    return value * KILOGRAM_CHART[to_type] * WEIGHT_TYPE_CHART[from_type]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000021", "row_id": 21, "seed_ids": [637], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nhttps://en.wikipedia.org/wiki/Weird_number\n\nFun fact: The set of weird numbers has positive asymptotic density.\n\"\"\"\n\nfrom math import sqrt\n\n\ndef factors(number: int) -> list[int]:\n    \"\"\"\n    >>> factors(12)\n    [1, 2, 3, 4, 6]\n    >>> factors(1)\n    [1]\n    >>> factors(100)\n    [1, 2, 4, 5, 10, 20, 25, 50]\n\n    # >>> factors(-12)\n    # [1, 2, 3, 4, 6]\n    \"\"\"\n\n    values = [1]\n    for i in range(2, int(sqrt(number)) + 1, 1):\n        if number % i == 0:\n            values.append(i)\n            if int(number // i) != i:\n                values.append(int(number // i))\n    return sorted(values)\n\n\ndef abundant(n: int) -> bool:\n    \"\"\"\n    >>> abundant(0)\n    True\n    >>> abundant(1)\n    False\n    >>> abundant(12)\n    True\n    >>> abundant(13)\n    False\n    >>> abundant(20)\n    True\n\n    # >>> abundant(-12)\n    # True\n    \"\"\"\n    return sum(factors(n)) > n\n\n\ndef semi_perfect(number: int) -> bool:\n    \"\"\"\n    >>> semi_perfect(0)\n    True\n    >>> semi_perfect(1)\n    True\n    >>> semi_perfect(12)\n    True\n    >>> semi_perfect(13)\n    False\n\n    # >>> semi_perfect(-12)\n    # True\n    \"\"\"\n    values = factors(number)\n    r = len(values)\n    subset = [[0 for i in range(number + 1)] for j in range(r + 1)]\n    for i in range(r + 1):\n        subset[i][0] = True\n\n    for i in range(1, number + 1):\n        subset[0][i] = False\n\n    for i in range(1, r + 1):\n        for j in range(1, number + 1):\n            if j < values[i - 1]:\n                subset[i][j] = subset[i - 1][j]\n            else:\n                subset[i][j] = subset[i - 1][j] or subset[i - 1][j - values[i - 1]]\n\n    return subset[r][number] != 0\n\n\ndef weird(number: int) -> bool:\n    \"\"\"\n    >>> weird(0)\n    False\n    >>> weird(70)\n    True\n    >>> weird(77)\n    False\n    \"\"\"\n    return abundant(number) and not semi_perfect(number)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)\n    for number in (69, 70, 71):\n        print(f\"{number} is {'' if weird(number) else 'not '}weird.\")\n\n```"}], "metadata": {"prompt_id": "00000022", "row_id": 22, "seed_ids": [792], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nNumber letter counts\nProblem 17: https://projecteuler.net/problem=17\n\nIf the numbers 1 to 5 are written out in words: one, two, three, four, five,\nthen there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.\n\nIf all the numbers from 1 to 1000 (one thousand) inclusive were written out in\nwords, how many letters would be used?\n\n\nNOTE: Do not count spaces or hyphens. For example, 342 (three hundred and\nforty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20\nletters. The use of \"and\" when writing out numbers is in compliance withBritish\nusage.\n\"\"\"\n\n\ndef solution(n: int = 1000) -> int:\n    \"\"\"Returns the number of letters used to write all numbers from 1 to n.\n    where n is lower or equals to 1000.\n    >>> solution(1000)\n    21124\n    >>> solution(5)\n    19\n    \"\"\"\n    # number of letters in zero, one, two, ..., nineteen (0 for zero since it's\n    # never said aloud)\n    ones_counts = [0, 3, 3, 5, 4, 4, 3, 5, 5, 4, 3, 6, 6, 8, 8, 7, 7, 9, 8, 8]\n    # number of letters in twenty, thirty, ..., ninety (0 for numbers less than\n    # 20 due to inconsistency in teens)\n    tens_counts = [0, 0, 6, 6, 5, 5, 5, 7, 6, 6]\n\n    count = 0\n\n    for i in range(1, n + 1):\n        if i < 1000:\n            if i >= 100:\n                # add number of letters for \"n hundred\"\n                count += ones_counts[i // 100] + 7\n\n                if i % 100 != 0:\n                    # add number of letters for \"and\" if number is not multiple\n                    # of 100\n                    count += 3\n\n            if 0 < i % 100 < 20:\n                # add number of letters for one, two, three, ..., nineteen\n                # (could be combined with below if not for inconsistency in\n                # teens)\n                count += ones_counts[i % 100]\n            else:\n                # add number of letters for twenty, twenty one, ..., ninety\n                # nine\n                count += ones_counts[i % 10]\n                count += tens_counts[(i % 100 - i % 10) // 10]\n        else:\n            count += ones_counts[i // 1000] + 8\n    return count\n\n\nif __name__ == \"__main__\":\n    print(solution(int(input().strip())))\n\n```"}], "metadata": {"prompt_id": "00000023", "row_id": 23, "seed_ids": [529], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\ndef hex_to_bin(hex_num: str) -> int:\n    \"\"\"\n    Convert a hexadecimal value to its binary equivalent\n    #https://stackoverflow.com/questions/1425493/convert-hex-to-binary\n    Here, we have used the bitwise right shift operator: >>\n    Shifts the bits of the number to the right and fills 0 on voids left as a result.\n    Similar effect as of dividing the number with some power of two.\n    Example:\n    a = 10\n    a >> 1 = 5\n\n    >>> hex_to_bin(\"AC\")\n    10101100\n    >>> hex_to_bin(\"9A4\")\n    100110100100\n    >>> hex_to_bin(\"   12f   \")\n    100101111\n    >>> hex_to_bin(\"FfFf\")\n    1111111111111111\n    >>> hex_to_bin(\"-fFfF\")\n    -1111111111111111\n    >>> hex_to_bin(\"F-f\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid value was passed to the function\n    >>> hex_to_bin(\"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: No value was passed to the function\n    \"\"\"\n\n    hex_num = hex_num.strip()\n    if not hex_num:\n        raise ValueError(\"No value was passed to the function\")\n\n    is_negative = hex_num[0] == \"-\"\n    if is_negative:\n        hex_num = hex_num[1:]\n\n    try:\n        int_num = int(hex_num, 16)\n    except ValueError:\n        raise ValueError(\"Invalid value was passed to the function\")\n\n    bin_str = \"\"\n    while int_num > 0:\n        bin_str = str(int_num % 2) + bin_str\n        int_num >>= 1\n\n    return int((\"-\" + bin_str) if is_negative else bin_str)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000024", "row_id": 24, "seed_ids": [650], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nCalculates the Fibonacci sequence using iteration, recursion, memoization,\nand a simplified form of Binet's formula\n\nNOTE 1: the iterative, recursive, memoization functions are more accurate than\nthe Binet's formula function because the Binet formula function  uses floats\n\nNOTE 2: the Binet's formula function is much more limited in the size of inputs\nthat it can handle due to the size limitations of Python floats\nNOTE 3: the matrix function is the fastest and most memory efficient for large n\n\n\nSee benchmark numbers in __main__ for performance comparisons/\nhttps://en.wikipedia.org/wiki/Fibonacci_number for more information\n\"\"\"\n\nimport functools\nfrom collections.abc import Iterator\nfrom math import sqrt\nfrom time import time\n\nimport numpy as np\nfrom numpy import ndarray\n\n\ndef time_func(func, *args, **kwargs):\n    \"\"\"\n    Times the execution of a function with parameters\n    \"\"\"\n    start = time()\n    output = func(*args, **kwargs)\n    end = time()\n    if int(end - start) > 0:\n        print(f\"{func.__name__} runtime: {(end - start):0.4f} s\")\n    else:\n        print(f\"{func.__name__} runtime: {(end - start) * 1000:0.4f} ms\")\n    return output\n\n\ndef fib_iterative_yield(n: int) -> Iterator[int]:\n    \"\"\"\n    Calculates the first n (1-indexed) Fibonacci numbers using iteration with yield\n    >>> list(fib_iterative_yield(0))\n    [0]\n    >>> tuple(fib_iterative_yield(1))\n    (0, 1)\n    >>> tuple(fib_iterative_yield(5))\n    (0, 1, 1, 2, 3, 5)\n    >>> tuple(fib_iterative_yield(10))\n    (0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55)\n    >>> tuple(fib_iterative_yield(-1))\n    Traceback (most recent call last):\n        ...\n    ValueError: n is negative\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n is negative\")\n    a, b = 0, 1\n    yield a\n    for _ in range(n):\n        yield b\n        a, b = b, a + b\n\n\ndef fib_iterative(n: int) -> list[int]:\n    \"\"\"\n    Calculates the first n (0-indexed) Fibonacci numbers using iteration\n    >>> fib_iterative(0)\n    [0]\n    >>> fib_iterative(1)\n    [0, 1]\n    >>> fib_iterative(5)\n    [0, 1, 1, 2, 3, 5]\n    >>> fib_iterative(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    >>> fib_iterative(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n is negative\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n is negative\")\n    if n == 0:\n        return [0]\n    fib = [0, 1]\n    for _ in range(n - 1):\n        fib.append(fib[-1] + fib[-2])\n    return fib\n\n\ndef fib_recursive(n: int) -> list[int]:\n    \"\"\"\n    Calculates the first n (0-indexed) Fibonacci numbers using recursion\n    >>> fib_iterative(0)\n    [0]\n    >>> fib_iterative(1)\n    [0, 1]\n    >>> fib_iterative(5)\n    [0, 1, 1, 2, 3, 5]\n    >>> fib_iterative(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    >>> fib_iterative(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n is negative\n    \"\"\"\n\n    def fib_recursive_term(i: int) -> int:\n        \"\"\"\n        Calculates the i-th (0-indexed) Fibonacci number using recursion\n        >>> fib_recursive_term(0)\n        0\n        >>> fib_recursive_term(1)\n        1\n        >>> fib_recursive_term(5)\n        5\n        >>> fib_recursive_term(10)\n        55\n        >>> fib_recursive_term(-1)\n        Traceback (most recent call last):\n            ...\n        Exception: n is negative\n        \"\"\"\n        if i < 0:\n            raise ValueError(\"n is negative\")\n        if i < 2:\n            return i\n        return fib_recursive_term(i - 1) + fib_recursive_term(i - 2)\n\n    if n < 0:\n        raise ValueError(\"n is negative\")\n    return [fib_recursive_term(i) for i in range(n + 1)]\n\n\ndef fib_recursive_cached(n: int) -> list[int]:\n    \"\"\"\n    Calculates the first n (0-indexed) Fibonacci numbers using recursion\n    >>> fib_iterative(0)\n    [0]\n    >>> fib_iterative(1)\n    [0, 1]\n    >>> fib_iterative(5)\n    [0, 1, 1, 2, 3, 5]\n    >>> fib_iterative(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    >>> fib_iterative(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n is negative\n    \"\"\"\n\n    @functools.cache\n    def fib_recursive_term(i: int) -> int:\n        \"\"\"\n        Calculates the i-th (0-indexed) Fibonacci number using recursion\n        \"\"\"\n        if i < 0:\n            raise ValueError(\"n is negative\")\n        if i < 2:\n            return i\n        return fib_recursive_term(i - 1) + fib_recursive_term(i - 2)\n\n    if n < 0:\n        raise ValueError(\"n is negative\")\n    return [fib_recursive_term(i) for i in range(n + 1)]\n\n\ndef fib_memoization(n: int) -> list[int]:\n    \"\"\"\n    Calculates the first n (0-indexed) Fibonacci numbers using memoization\n    >>> fib_memoization(0)\n    [0]\n    >>> fib_memoization(1)\n    [0, 1]\n    >>> fib_memoization(5)\n    [0, 1, 1, 2, 3, 5]\n    >>> fib_memoization(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    >>> fib_iterative(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n is negative\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n is negative\")\n    # Cache must be outside recursuive function\n    # other it will reset every time it calls itself.\n    cache: dict[int, int] = {0: 0, 1: 1, 2: 1}  # Prefilled cache\n\n    def rec_fn_memoized(num: int) -> int:\n        if num in cache:\n            return cache[num]\n\n        value = rec_fn_memoized(num - 1) + rec_fn_memoized(num - 2)\n        cache[num] = value\n        return value\n\n    return [rec_fn_memoized(i) for i in range(n + 1)]\n\n\ndef fib_binet(n: int) -> list[int]:\n    \"\"\"\n    Calculates the first n (0-indexed) Fibonacci numbers using a simplified form\n    of Binet's formula:\n    https://en.m.wikipedia.org/wiki/Fibonacci_number#Computation_by_rounding\n\n    NOTE 1: this function diverges from fib_iterative at around n = 71, likely\n    due to compounding floating-point arithmetic errors\n\n    NOTE 2: this function doesn't accept n >= 1475 because it overflows\n    thereafter due to the size limitations of Python floats\n    >>> fib_binet(0)\n    [0]\n    >>> fib_binet(1)\n    [0, 1]\n    >>> fib_binet(5)\n    [0, 1, 1, 2, 3, 5]\n    >>> fib_binet(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    >>> fib_binet(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n is negative\n    >>> fib_binet(1475)\n    Traceback (most recent call last):\n        ...\n    ValueError: n is too large\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n is negative\")\n    if n >= 1475:\n        raise ValueError(\"n is too large\")\n    sqrt_5 = sqrt(5)\n    phi = (1 + sqrt_5) / 2\n    return [round(phi**i / sqrt_5) for i in range(n + 1)]\n\n\ndef matrix_pow_np(m: ndarray, power: int) -> ndarray:\n    \"\"\"\n    Raises a matrix to the power of 'power' using binary exponentiation.\n\n    Args:\n        m: Matrix as a numpy array.\n        power: The power to which the matrix is to be raised.\n\n    Returns:\n        The matrix raised to the power.\n\n    Raises:\n        ValueError: If power is negative.\n\n    >>> m = np.array([[1, 1], [1, 0]], dtype=int)\n    >>> matrix_pow_np(m, 0)  # Identity matrix when raised to the power of 0\n    array([[1, 0],\n           [0, 1]])\n\n    >>> matrix_pow_np(m, 1)  # Same matrix when raised to the power of 1\n    array([[1, 1],\n           [1, 0]])\n\n    >>> matrix_pow_np(m, 5)\n    array([[8, 5],\n           [5, 3]])\n\n    >>> matrix_pow_np(m, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: power is negative\n    \"\"\"\n    result = np.array([[1, 0], [0, 1]], dtype=int)  # Identity Matrix\n    base = m\n    if power < 0:  # Negative power is not allowed\n        raise ValueError(\"power is negative\")\n    while power:\n        if power % 2 == 1:\n            result = np.dot(result, base)\n        base = np.dot(base, base)\n        power //= 2\n    return result\n\n\ndef fib_matrix_np(n: int) -> int:\n    \"\"\"\n    Calculates the n-th Fibonacci number using matrix exponentiation.\n    https://www.nayuki.io/page/fast-fibonacci-algorithms#:~:text=\n    Summary:%20The%20two%20fast%20Fibonacci%20algorithms%20are%20matrix\n\n    Args:\n        n: Fibonacci sequence index\n\n    Returns:\n        The n-th Fibonacci number.\n\n    Raises:\n        ValueError: If n is negative.\n\n    >>> fib_matrix_np(0)\n    0\n    >>> fib_matrix_np(1)\n    1\n    >>> fib_matrix_np(5)\n    5\n    >>> fib_matrix_np(10)\n    55\n    >>> fib_matrix_np(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n is negative\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n is negative\")\n    if n == 0:\n        return 0\n\n    m = np.array([[1, 1], [1, 0]], dtype=int)\n    result = matrix_pow_np(m, n - 1)\n    return int(result[0, 0])\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n    # Time on an M1 MacBook Pro -- Fastest to slowest\n    num = 30\n    time_func(fib_iterative_yield, num)  # 0.0012 ms\n    time_func(fib_iterative, num)  # 0.0031 ms\n    time_func(fib_binet, num)  # 0.0062 ms\n    time_func(fib_memoization, num)  # 0.0100 ms\n    time_func(fib_recursive_cached, num)  # 0.0153 ms\n    time_func(fib_recursive, num)  # 257.0910 ms\n    time_func(fib_matrix_np, num)  # 0.0000 ms\n\n```"}], "metadata": {"prompt_id": "00000025", "row_id": 25, "seed_ids": [699], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\ndef dencrypt(s: str, n: int = 13) -> str:\n    \"\"\"\n    https://en.wikipedia.org/wiki/ROT13\n\n    >>> msg = \"My secret bank account number is 173-52946 so don't tell anyone!!\"\n    >>> s = dencrypt(msg)\n    >>> s\n    \"Zl frperg onax nppbhag ahzore vf 173-52946 fb qba'g gryy nalbar!!\"\n    >>> dencrypt(s) == msg\n    True\n    \"\"\"\n    out = \"\"\n    for c in s:\n        if \"A\" <= c <= \"Z\":\n            out += chr(ord(\"A\") + (ord(c) - ord(\"A\") + n) % 26)\n        elif \"a\" <= c <= \"z\":\n            out += chr(ord(\"a\") + (ord(c) - ord(\"a\") + n) % 26)\n        else:\n            out += c\n    return out\n\n\ndef main() -> None:\n    s0 = input(\"Enter message: \")\n\n    s1 = dencrypt(s0, 13)\n    print(\"Encryption:\", s1)\n\n    s2 = dencrypt(s1, 13)\n    print(\"Decryption: \", s2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()\n\n```"}], "metadata": {"prompt_id": "00000026", "row_id": 26, "seed_ids": [66], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nLETTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n\ndef main() -> None:\n    message = input(\"Enter message: \")\n    key = input(\"Enter key [alphanumeric]: \")\n    mode = input(\"Encrypt/Decrypt [e/d]: \")\n\n    if mode.lower().startswith(\"e\"):\n        mode = \"encrypt\"\n        translated = encrypt_message(key, message)\n    elif mode.lower().startswith(\"d\"):\n        mode = \"decrypt\"\n        translated = decrypt_message(key, message)\n\n    print(f\"\\n{mode.title()}ed message:\")\n    print(translated)\n\n\ndef encrypt_message(key: str, message: str) -> str:\n    \"\"\"\n    >>> encrypt_message('HDarji', 'This is Harshil Darji from Dharmaj.')\n    'Akij ra Odrjqqs Gaisq muod Mphumrs.'\n    \"\"\"\n    return translate_message(key, message, \"encrypt\")\n\n\ndef decrypt_message(key: str, message: str) -> str:\n    \"\"\"\n    >>> decrypt_message('HDarji', 'Akij ra Odrjqqs Gaisq muod Mphumrs.')\n    'This is Harshil Darji from Dharmaj.'\n    \"\"\"\n    return translate_message(key, message, \"decrypt\")\n\n\ndef translate_message(key: str, message: str, mode: str) -> str:\n    translated = []\n    key_index = 0\n    key = key.upper()\n\n    for symbol in message:\n        num = LETTERS.find(symbol.upper())\n        if num != -1:\n            if mode == \"encrypt\":\n                num += LETTERS.find(key[key_index])\n            elif mode == \"decrypt\":\n                num -= LETTERS.find(key[key_index])\n\n            num %= len(LETTERS)\n\n            if symbol.isupper():\n                translated.append(LETTERS[num])\n            elif symbol.islower():\n                translated.append(LETTERS[num].lower())\n\n            key_index += 1\n            if key_index == len(key):\n                key_index = 0\n        else:\n            translated.append(symbol)\n    return \"\".join(translated)\n\n\nif __name__ == \"__main__\":\n    main()\n\n```"}], "metadata": {"prompt_id": "00000027", "row_id": 27, "seed_ids": [63], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nLinear regression is the most basic type of regression commonly used for\npredictive analysis. The idea is pretty simple: we have a dataset and we have\nfeatures associated with it. Features should be chosen very cautiously\nas they determine how much our model will be able to make future predictions.\nWe try to set the weight of these features, over many iterations, so that they best\nfit our dataset. In this particular code, I had used a CSGO dataset (ADR vs\nRating). We try to best fit a line through dataset and estimate the parameters.\n\"\"\"\n\nimport numpy as np\nimport requests\n\n\ndef collect_dataset():\n    \"\"\"Collect dataset of CSGO\n    The dataset contains ADR vs Rating of a Player\n    :return : dataset obtained from the link, as matrix\n    \"\"\"\n    response = requests.get(\n        \"https://raw.githubusercontent.com/yashLadha/The_Math_of_Intelligence/\"\n        \"master/Week1/ADRvsRating.csv\",\n        timeout=10,\n    )\n    lines = response.text.splitlines()\n    data = []\n    for item in lines:\n        item = item.split(\",\")\n        data.append(item)\n    data.pop(0)  # This is for removing the labels from the list\n    dataset = np.matrix(data)\n    return dataset\n\n\ndef run_steep_gradient_descent(data_x, data_y, len_data, alpha, theta):\n    \"\"\"Run steep gradient descent and updates the Feature vector accordingly_\n    :param data_x   : contains the dataset\n    :param data_y   : contains the output associated with each data-entry\n    :param len_data : length of the data_\n    :param alpha    : Learning rate of the model\n    :param theta    : Feature vector (weight's for our model)\n    ;param return    : Updated Feature's, using\n                       curr_features - alpha_ * gradient(w.r.t. feature)\n    \"\"\"\n    n = len_data\n\n    prod = np.dot(theta, data_x.transpose())\n    prod -= data_y.transpose()\n    sum_grad = np.dot(prod, data_x)\n    theta = theta - (alpha / n) * sum_grad\n    return theta\n\n\ndef sum_of_square_error(data_x, data_y, len_data, theta):\n    \"\"\"Return sum of square error for error calculation\n    :param data_x    : contains our dataset\n    :param data_y    : contains the output (result vector)\n    :param len_data  : len of the dataset\n    :param theta     : contains the feature vector\n    :return          : sum of square error computed from given feature's\n    \"\"\"\n    prod = np.dot(theta, data_x.transpose())\n    prod -= data_y.transpose()\n    sum_elem = np.sum(np.square(prod))\n    error = sum_elem / (2 * len_data)\n    return error\n\n\ndef run_linear_regression(data_x, data_y):\n    \"\"\"Implement Linear regression over the dataset\n    :param data_x  : contains our dataset\n    :param data_y  : contains the output (result vector)\n    :return        : feature for line of best fit (Feature vector)\n    \"\"\"\n    iterations = 100000\n    alpha = 0.0001550\n\n    no_features = data_x.shape[1]\n    len_data = data_x.shape[0] - 1\n\n    theta = np.zeros((1, no_features))\n\n    for i in range(iterations):\n        theta = run_steep_gradient_descent(data_x, data_y, len_data, alpha, theta)\n        error = sum_of_square_error(data_x, data_y, len_data, theta)\n        print(f\"At Iteration {i + 1} - Error is {error:.5f}\")\n\n    return theta\n\n\ndef mean_absolute_error(predicted_y, original_y):\n    \"\"\"Return sum of square error for error calculation\n    :param predicted_y   : contains the output of prediction (result vector)\n    :param original_y    : contains values of expected outcome\n    :return          : mean absolute error computed from given feature's\n    \"\"\"\n    total = sum(abs(y - predicted_y[i]) for i, y in enumerate(original_y))\n    return total / len(original_y)\n\n\ndef main():\n    \"\"\"Driver function\"\"\"\n    data = collect_dataset()\n\n    len_data = data.shape[0]\n    data_x = np.c_[np.ones(len_data), data[:, :-1]].astype(float)\n    data_y = data[:, -1].astype(float)\n\n    theta = run_linear_regression(data_x, data_y)\n    len_result = theta.shape[1]\n    print(\"Resultant Feature vector : \")\n    for i in range(len_result):\n        print(f\"{theta[0, i]:.5f}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n```"}], "metadata": {"prompt_id": "00000028", "row_id": 28, "seed_ids": [112], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nProject Euler Problem 131: https://projecteuler.net/problem=131\n\nThere are some prime values, p, for which there exists a positive integer, n,\nsuch that the expression n^3 + n^2p is a perfect cube.\n\nFor example, when p = 19, 8^3 + 8^2 x 19 = 12^3.\n\nWhat is perhaps most surprising is that for each prime with this property\nthe value of n is unique, and there are only four such primes below one-hundred.\n\nHow many primes below one million have this remarkable property?\n\"\"\"\n\nfrom math import isqrt\n\n\ndef is_prime(number: int) -> bool:\n    \"\"\"\n    Determines whether number is prime\n\n    >>> is_prime(3)\n    True\n\n    >>> is_prime(4)\n    False\n    \"\"\"\n\n    return all(number % divisor != 0 for divisor in range(2, isqrt(number) + 1))\n\n\ndef solution(max_prime: int = 10**6) -> int:\n    \"\"\"\n    Returns number of primes below max_prime with the property\n\n    >>> solution(100)\n    4\n    \"\"\"\n\n    primes_count = 0\n    cube_index = 1\n    prime_candidate = 7\n    while prime_candidate < max_prime:\n        primes_count += is_prime(prime_candidate)\n\n        cube_index += 1\n        prime_candidate += 6 * cube_index\n\n    return primes_count\n\n\nif __name__ == \"__main__\":\n    print(f\"{solution() = }\")\n\n```"}], "metadata": {"prompt_id": "00000029", "row_id": 29, "seed_ids": [492], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n#!/usr/bin/python\n\n# Logistic Regression from scratch\n\n# In[62]:\n\n# In[63]:\n\n# importing all the required libraries\n\n\"\"\"\nImplementing logistic regression for classification problem\nHelpful resources:\nCoursera ML course\nhttps://medium.com/@martinpella/logistic-regression-from-scratch-in-python-124c5636b8ac\n\"\"\"\n\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom sklearn import datasets\n\n# get_ipython().run_line_magic('matplotlib', 'inline')\n\n\n# In[67]:\n\n# sigmoid function or logistic function is used as a hypothesis function in\n# classification problems\n\n\ndef sigmoid_function(z: float | np.ndarray) -> float | np.ndarray:\n    \"\"\"\n    Also known as Logistic Function.\n\n                1\n    f(x) =   -------\n              1 + e\u207b\u02e3\n\n    The sigmoid function approaches a value of 1 as its input 'x' becomes\n    increasing positive. Opposite for negative values.\n\n    Reference: https://en.wikipedia.org/wiki/Sigmoid_function\n\n    @param z:  input to the function\n    @returns: returns value in the range 0 to 1\n\n    Examples:\n    >>> float(sigmoid_function(4))\n    0.9820137900379085\n    >>> sigmoid_function(np.array([-3, 3]))\n    array([0.04742587, 0.95257413])\n    >>> sigmoid_function(np.array([-3, 3, 1]))\n    array([0.04742587, 0.95257413, 0.73105858])\n    >>> sigmoid_function(np.array([-0.01, -2, -1.9]))\n    array([0.49750002, 0.11920292, 0.13010847])\n    >>> sigmoid_function(np.array([-1.3, 5.3, 12]))\n    array([0.21416502, 0.9950332 , 0.99999386])\n    >>> sigmoid_function(np.array([0.01, 0.02, 4.1]))\n    array([0.50249998, 0.50499983, 0.9836975 ])\n    >>> sigmoid_function(np.array([0.8]))\n    array([0.68997448])\n    \"\"\"\n    return 1 / (1 + np.exp(-z))\n\n\ndef cost_function(h: np.ndarray, y: np.ndarray) -> float:\n    \"\"\"\n    Cost function quantifies the error between predicted and expected values.\n    The cost function used in Logistic Regression is called Log Loss\n    or Cross Entropy Function.\n\n    J(\u03b8) = (1/m) * \u03a3 [ -y * log(h\u03b8(x)) - (1 - y) * log(1 - h\u03b8(x)) ]\n\n    Where:\n       - J(\u03b8) is the cost that we want to minimize during training\n       - m is the number of training examples\n       - \u03a3 represents the summation over all training examples\n       - y is the actual binary label (0 or 1) for a given example\n       - h\u03b8(x) is the predicted probability that x belongs to the positive class\n\n    @param h: the output of sigmoid function. It is the estimated probability\n    that the input example 'x' belongs to the positive class\n\n    @param y: the actual binary label associated with input example 'x'\n\n    Examples:\n    >>> estimations = sigmoid_function(np.array([0.3, -4.3, 8.1]))\n    >>> cost_function(h=estimations,y=np.array([1, 0, 1]))\n    0.18937868932131605\n    >>> estimations = sigmoid_function(np.array([4, 3, 1]))\n    >>> cost_function(h=estimations,y=np.array([1, 0, 0]))\n    1.459999655669926\n    >>> estimations = sigmoid_function(np.array([4, -3, -1]))\n    >>> cost_function(h=estimations,y=np.array([1,0,0]))\n    0.1266663223365915\n    >>> estimations = sigmoid_function(0)\n    >>> cost_function(h=estimations,y=np.array([1]))\n    0.6931471805599453\n\n    References:\n       - https://en.wikipedia.org/wiki/Logistic_regression\n    \"\"\"\n    return float((-y * np.log(h) - (1 - y) * np.log(1 - h)).mean())\n\n\ndef log_likelihood(x, y, weights):\n    scores = np.dot(x, weights)\n    return np.sum(y * scores - np.log(1 + np.exp(scores)))\n\n\n# here alpha is the learning rate, X is the feature matrix,y is the target matrix\ndef logistic_reg(alpha, x, y, max_iterations=70000):\n    theta = np.zeros(x.shape[1])\n\n    for iterations in range(max_iterations):\n        z = np.dot(x, theta)\n        h = sigmoid_function(z)\n        gradient = np.dot(x.T, h - y) / y.size\n        theta = theta - alpha * gradient  # updating the weights\n        z = np.dot(x, theta)\n        h = sigmoid_function(z)\n        j = cost_function(h, y)\n        if iterations % 100 == 0:\n            print(f\"loss: {j} \\t\")  # printing the loss after every 100 iterations\n    return theta\n\n\n# In[68]:\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    iris = datasets.load_iris()\n    x = iris.data[:, :2]\n    y = (iris.target != 0) * 1\n\n    alpha = 0.1\n    theta = logistic_reg(alpha, x, y, max_iterations=70000)\n    print(\"theta: \", theta)  # printing the theta i.e our weights vector\n\n    def predict_prob(x):\n        return sigmoid_function(\n            np.dot(x, theta)\n        )  # predicting the value of probability from the logistic regression algorithm\n\n    plt.figure(figsize=(10, 6))\n    plt.scatter(x[y == 0][:, 0], x[y == 0][:, 1], color=\"b\", label=\"0\")\n    plt.scatter(x[y == 1][:, 0], x[y == 1][:, 1], color=\"r\", label=\"1\")\n    (x1_min, x1_max) = (x[:, 0].min(), x[:, 0].max())\n    (x2_min, x2_max) = (x[:, 1].min(), x[:, 1].max())\n    (xx1, xx2) = np.meshgrid(np.linspace(x1_min, x1_max), np.linspace(x2_min, x2_max))\n    grid = np.c_[xx1.ravel(), xx2.ravel()]\n    probs = predict_prob(grid).reshape(xx1.shape)\n    plt.contour(xx1, xx2, probs, [0.5], linewidths=1, colors=\"black\")\n\n    plt.legend()\n    plt.show()\n\n```"}], "metadata": {"prompt_id": "00000030", "row_id": 30, "seed_ids": [97], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nIf we are presented with the first k terms of a sequence it is impossible to say with\ncertainty the value of the next term, as there are infinitely many polynomial functions\nthat can model the sequence.\n\nAs an example, let us consider the sequence of cube\nnumbers. This is defined by the generating function,\nu(n) = n3: 1, 8, 27, 64, 125, 216, ...\n\nSuppose we were only given the first two terms of this sequence. Working on the\nprinciple that \"simple is best\" we should assume a linear relationship and predict the\nnext term to be 15 (common difference 7). Even if we were presented with the first three\nterms, by the same principle of simplicity, a quadratic relationship should be\nassumed.\n\nWe shall define OP(k, n) to be the nth term of the optimum polynomial\ngenerating function for the first k terms of a sequence. It should be clear that\nOP(k, n) will accurately generate the terms of the sequence for n \u2264 k, and potentially\nthe first incorrect term (FIT) will be OP(k, k+1); in which case we shall call it a\nbad OP (BOP).\n\nAs a basis, if we were only given the first term of sequence, it would be most\nsensible to assume constancy; that is, for n \u2265 2, OP(1, n) = u(1).\n\nHence we obtain the\nfollowing OPs for the cubic sequence:\n\nOP(1, n) = 1            1, 1, 1, 1, ...\nOP(2, n) = 7n-6         1, 8, 15, ...\nOP(3, n) = 6n^2-11n+6   1, 8, 27, 58, ...\nOP(4, n) = n^3          1, 8, 27, 64, 125, ...\n\nClearly no BOPs exist for k \u2265 4.\n\nBy considering the sum of FITs generated by the BOPs (indicated in red above), we\nobtain 1 + 15 + 58 = 74.\n\nConsider the following tenth degree polynomial generating function:\n\n1 - n + n^2 - n^3 + n^4 - n^5 + n^6 - n^7 + n^8 - n^9 + n^10\n\nFind the sum of FITs for the BOPs.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections.abc import Callable\n\nMatrix = list[list[float | int]]\n\n\ndef solve(matrix: Matrix, vector: Matrix) -> Matrix:\n    \"\"\"\n    Solve the linear system of equations Ax = b (A = \"matrix\", b = \"vector\")\n    for x using Gaussian elimination and back substitution. We assume that A\n    is an invertible square matrix and that b is a column vector of the\n    same height.\n    >>> solve([[1, 0], [0, 1]], [[1],[2]])\n    [[1.0], [2.0]]\n    >>> solve([[2, 1, -1],[-3, -1, 2],[-2, 1, 2]],[[8], [-11],[-3]])\n    [[2.0], [3.0], [-1.0]]\n    \"\"\"\n    size: int = len(matrix)\n    augmented: Matrix = [[0 for _ in range(size + 1)] for _ in range(size)]\n    row: int\n    row2: int\n    col: int\n    col2: int\n    pivot_row: int\n    ratio: float\n\n    for row in range(size):\n        for col in range(size):\n            augmented[row][col] = matrix[row][col]\n\n        augmented[row][size] = vector[row][0]\n\n    row = 0\n    col = 0\n    while row < size and col < size:\n        # pivoting\n        pivot_row = max((abs(augmented[row2][col]), row2) for row2 in range(col, size))[\n            1\n        ]\n        if augmented[pivot_row][col] == 0:\n            col += 1\n            continue\n        else:\n            augmented[row], augmented[pivot_row] = augmented[pivot_row], augmented[row]\n\n        for row2 in range(row + 1, size):\n            ratio = augmented[row2][col] / augmented[row][col]\n            augmented[row2][col] = 0\n            for col2 in range(col + 1, size + 1):\n                augmented[row2][col2] -= augmented[row][col2] * ratio\n\n        row += 1\n        col += 1\n\n    # back substitution\n    for col in range(1, size):\n        for row in range(col):\n            ratio = augmented[row][col] / augmented[col][col]\n            for col2 in range(col, size + 1):\n                augmented[row][col2] -= augmented[col][col2] * ratio\n\n    # round to get rid of numbers like 2.000000000000004\n    return [\n        [round(augmented[row][size] / augmented[row][row], 10)] for row in range(size)\n    ]\n\n\ndef interpolate(y_list: list[int]) -> Callable[[int], int]:\n    \"\"\"\n    Given a list of data points (1,y0),(2,y1), ..., return a function that\n    interpolates the data points. We find the coefficients of the interpolating\n    polynomial by solving a system of linear equations corresponding to\n    x = 1, 2, 3...\n\n    >>> interpolate([1])(3)\n    1\n    >>> interpolate([1, 8])(3)\n    15\n    >>> interpolate([1, 8, 27])(4)\n    58\n    >>> interpolate([1, 8, 27, 64])(6)\n    216\n    \"\"\"\n\n    size: int = len(y_list)\n    matrix: Matrix = [[0 for _ in range(size)] for _ in range(size)]\n    vector: Matrix = [[0] for _ in range(size)]\n    coeffs: Matrix\n    x_val: int\n    y_val: int\n    col: int\n\n    for x_val, y_val in enumerate(y_list):\n        for col in range(size):\n            matrix[x_val][col] = (x_val + 1) ** (size - col - 1)\n        vector[x_val][0] = y_val\n\n    coeffs = solve(matrix, vector)\n\n    def interpolated_func(var: int) -> int:\n        \"\"\"\n        >>> interpolate([1])(3)\n        1\n        >>> interpolate([1, 8])(3)\n        15\n        >>> interpolate([1, 8, 27])(4)\n        58\n        >>> interpolate([1, 8, 27, 64])(6)\n        216\n        \"\"\"\n        return sum(\n            round(coeffs[x_val][0]) * (var ** (size - x_val - 1))\n            for x_val in range(size)\n        )\n\n    return interpolated_func\n\n\ndef question_function(variable: int) -> int:\n    \"\"\"\n    The generating function u as specified in the question.\n    >>> question_function(0)\n    1\n    >>> question_function(1)\n    1\n    >>> question_function(5)\n    8138021\n    >>> question_function(10)\n    9090909091\n    \"\"\"\n    return (\n        1\n        - variable\n        + variable**2\n        - variable**3\n        + variable**4\n        - variable**5\n        + variable**6\n        - variable**7\n        + variable**8\n        - variable**9\n        + variable**10\n    )\n\n\ndef solution(func: Callable[[int], int] = question_function, order: int = 10) -> int:\n    \"\"\"\n    Find the sum of the FITs of the BOPS. For each interpolating polynomial of order\n    1, 2, ... , 10, find the first x such that the value of the polynomial at x does\n    not equal u(x).\n    >>> solution(lambda n: n ** 3, 3)\n    74\n    \"\"\"\n    data_points: list[int] = [func(x_val) for x_val in range(1, order + 1)]\n\n    polynomials: list[Callable[[int], int]] = [\n        interpolate(data_points[:max_coeff]) for max_coeff in range(1, order + 1)\n    ]\n\n    ret: int = 0\n    poly: Callable[[int], int]\n    x_val: int\n\n    for poly in polynomials:\n        x_val = 1\n        while func(x_val) == poly(x_val):\n            x_val += 1\n\n        ret += poly(x_val)\n\n    return ret\n\n\nif __name__ == \"__main__\":\n    print(f\"{solution() = }\")\n\n```"}], "metadata": {"prompt_id": "00000031", "row_id": 31, "seed_ids": [617], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nProblem 14: https://projecteuler.net/problem=14\n\nProblem Statement:\nThe following iterative sequence is defined for the set of positive integers:\n\n    n \u2192 n/2 (n is even)\n    n \u2192 3n + 1 (n is odd)\n\nUsing the rule above and starting with 13, we generate the following sequence:\n\n    13 \u2192 40 \u2192 20 \u2192 10 \u2192 5 \u2192 16 \u2192 8 \u2192 4 \u2192 2 \u2192 1\n\nIt can be seen that this sequence (starting at 13 and finishing at 1) contains\n10 terms. Although it has not been proved yet (Collatz Problem), it is thought\nthat all starting numbers finish at 1.\n\nWhich starting number, under one million, produces the longest chain?\n\"\"\"\n\n\ndef solution(n: int = 1000000) -> int:\n    \"\"\"Returns the number under n that generates the longest sequence using the\n    formula:\n    n \u2192 n/2 (n is even)\n    n \u2192 3n + 1 (n is odd)\n\n    >>> solution(1000000)\n    837799\n    >>> solution(200)\n    171\n    >>> solution(5000)\n    3711\n    >>> solution(15000)\n    13255\n    \"\"\"\n    largest_number = 1\n    pre_counter = 1\n    counters = {1: 1}\n\n    for input1 in range(2, n):\n        counter = 0\n        number = input1\n\n        while True:\n            if number in counters:\n                counter += counters[number]\n                break\n            if number % 2 == 0:\n                number //= 2\n                counter += 1\n            else:\n                number = (3 * number) + 1\n                counter += 1\n\n        if input1 not in counters:\n            counters[input1] = counter\n\n        if counter > pre_counter:\n            largest_number = input1\n            pre_counter = counter\n    return largest_number\n\n\nif __name__ == \"__main__\":\n    print(solution(int(input().strip())))\n\n```"}], "metadata": {"prompt_id": "00000032", "row_id": 32, "seed_ids": [537], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nfrom __future__ import annotations\n\n\nclass IIRFilter:\n    r\"\"\"\n    N-Order IIR filter\n    Assumes working with float samples normalized on [-1, 1]\n\n    ---\n\n    Implementation details:\n    Based on the 2nd-order function from\n     https://en.wikipedia.org/wiki/Digital_biquad_filter,\n    this generalized N-order function was made.\n\n    Using the following transfer function\n    H(z)=\\frac{b_{0}+b_{1}z^{-1}+b_{2}z^{-2}+...+b_{k}z^{-k}}{a_{0}+a_{1}z^{-1}+a_{2}z^{-2}+...+a_{k}z^{-k}}\n    we can rewrite this to\n    y[n]={\\frac{1}{a_{0}}}\\left(\\left(b_{0}x[n]+b_{1}x[n-1]+b_{2}x[n-2]+...+b_{k}x[n-k]\\right)-\\left(a_{1}y[n-1]+a_{2}y[n-2]+...+a_{k}y[n-k]\\right)\\right)\n    \"\"\"\n\n    def __init__(self, order: int) -> None:\n        self.order = order\n\n        # a_{0} ... a_{k}\n        self.a_coeffs = [1.0] + [0.0] * order\n        # b_{0} ... b_{k}\n        self.b_coeffs = [1.0] + [0.0] * order\n\n        # x[n-1] ... x[n-k]\n        self.input_history = [0.0] * self.order\n        # y[n-1] ... y[n-k]\n        self.output_history = [0.0] * self.order\n\n    def set_coefficients(self, a_coeffs: list[float], b_coeffs: list[float]) -> None:\n        \"\"\"\n        Set the coefficients for the IIR filter. These should both be of size order + 1.\n        a_0 may be left out, and it will use 1.0 as default value.\n\n        This method works well with scipy's filter design functions\n            >>> # Make a 2nd-order 1000Hz butterworth lowpass filter\n            >>> import scipy.signal\n            >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,\n            ...                                          btype='lowpass',\n            ...                                          fs=48000)\n            >>> filt = IIRFilter(2)\n            >>> filt.set_coefficients(a_coeffs, b_coeffs)\n        \"\"\"\n        if len(a_coeffs) < self.order:\n            a_coeffs = [1.0, *a_coeffs]\n\n        if len(a_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected a_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n\n        if len(b_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected b_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n\n        self.a_coeffs = a_coeffs\n        self.b_coeffs = b_coeffs\n\n    def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate y[n]\n\n        >>> filt = IIRFilter(2)\n        >>> filt.process(0)\n        0.0\n        \"\"\"\n        result = 0.0\n\n        # Start at index 1 and do index 0 at the end.\n        for i in range(1, self.order + 1):\n            result += (\n                self.b_coeffs[i] * self.input_history[i - 1]\n                - self.a_coeffs[i] * self.output_history[i - 1]\n            )\n\n        result = (result + self.b_coeffs[0] * sample) / self.a_coeffs[0]\n\n        self.input_history[1:] = self.input_history[:-1]\n        self.output_history[1:] = self.output_history[:-1]\n\n        self.input_history[0] = sample\n        self.output_history[0] = result\n\n        return result\n\n```"}], "metadata": {"prompt_id": "00000033", "row_id": 33, "seed_ids": [948], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nAuthor  : Alexander Pantyukhin\nDate    : November 30, 2022\n\nTask:\nGiven two int numbers. Return True these numbers have opposite signs\nor False otherwise.\n\nImplementation notes: Use bit manipulation.\nUse XOR for two numbers.\n\"\"\"\n\n\ndef different_signs(num1: int, num2: int) -> bool:\n    \"\"\"\n    Return True if numbers have opposite signs False otherwise.\n\n    >>> different_signs(1, -1)\n    True\n    >>> different_signs(1, 1)\n    False\n    >>> different_signs(1000000000000000000000000000, -1000000000000000000000000000)\n    True\n    >>> different_signs(-1000000000000000000000000000, 1000000000000000000000000000)\n    True\n    >>> different_signs(50, 278)\n    False\n    >>> different_signs(0, 2)\n    False\n    >>> different_signs(2, 0)\n    False\n    \"\"\"\n    return num1 ^ num2 < 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000034", "row_id": 34, "seed_ids": [1073], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nBase32 encoding and decoding\n\nhttps://en.wikipedia.org/wiki/Base32\n\"\"\"\n\nB32_CHARSET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"\n\n\ndef base32_encode(data: bytes) -> bytes:\n    \"\"\"\n    >>> base32_encode(b\"Hello World!\")\n    b'JBSWY3DPEBLW64TMMQQQ===='\n    >>> base32_encode(b\"123456\")\n    b'GEZDGNBVGY======'\n    >>> base32_encode(b\"some long complex string\")\n    b'ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY='\n    \"\"\"\n    binary_data = \"\".join(bin(ord(d))[2:].zfill(8) for d in data.decode(\"utf-8\"))\n    binary_data = binary_data.ljust(5 * ((len(binary_data) // 5) + 1), \"0\")\n    b32_chunks = map(\"\".join, zip(*[iter(binary_data)] * 5))\n    b32_result = \"\".join(B32_CHARSET[int(chunk, 2)] for chunk in b32_chunks)\n    return bytes(b32_result.ljust(8 * ((len(b32_result) // 8) + 1), \"=\"), \"utf-8\")\n\n\ndef base32_decode(data: bytes) -> bytes:\n    \"\"\"\n    >>> base32_decode(b'JBSWY3DPEBLW64TMMQQQ====')\n    b'Hello World!'\n    >>> base32_decode(b'GEZDGNBVGY======')\n    b'123456'\n    >>> base32_decode(b'ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY=')\n    b'some long complex string'\n    \"\"\"\n    binary_chunks = \"\".join(\n        bin(B32_CHARSET.index(_d))[2:].zfill(5)\n        for _d in data.decode(\"utf-8\").strip(\"=\")\n    )\n    binary_data = list(map(\"\".join, zip(*[iter(binary_chunks)] * 8)))\n    return bytes(\"\".join([chr(int(_d, 2)) for _d in binary_data]), \"utf-8\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000035", "row_id": 35, "seed_ids": [76], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nUse an ant colony optimization algorithm to solve the travelling salesman problem (TSP)\nwhich asks the following question:\n\"Given a list of cities and the distances between each pair of cities, what is the\n shortest possible route that visits each city exactly once and returns to the origin\n city?\"\n\nhttps://en.wikipedia.org/wiki/Ant_colony_optimization_algorithms\nhttps://en.wikipedia.org/wiki/Travelling_salesman_problem\n\nAuthor: Clark\n\"\"\"\n\nimport copy\nimport random\n\ncities = {\n    0: [0, 0],\n    1: [0, 5],\n    2: [3, 8],\n    3: [8, 10],\n    4: [12, 8],\n    5: [12, 4],\n    6: [8, 0],\n    7: [6, 2],\n}\n\n\ndef main(\n    cities: dict[int, list[int]],\n    ants_num: int,\n    iterations_num: int,\n    pheromone_evaporation: float,\n    alpha: float,\n    beta: float,\n    q: float,  # Pheromone system parameters Q, which is a constant\n) -> tuple[list[int], float]:\n    \"\"\"\n    Ant colony algorithm main function\n    >>> main(cities=cities, ants_num=10, iterations_num=20,\n    ...      pheromone_evaporation=0.7, alpha=1.0, beta=5.0, q=10)\n    ([0, 1, 2, 3, 4, 5, 6, 7, 0], 37.909778143828696)\n    >>> main(cities={0: [0, 0], 1: [2, 2]}, ants_num=5, iterations_num=5,\n    ...      pheromone_evaporation=0.7, alpha=1.0, beta=5.0, q=10)\n    ([0, 1, 0], 5.656854249492381)\n    >>> main(cities={0: [0, 0], 1: [2, 2], 4: [4, 4]}, ants_num=5, iterations_num=5,\n    ...      pheromone_evaporation=0.7, alpha=1.0, beta=5.0, q=10)\n    Traceback (most recent call last):\n      ...\n    IndexError: list index out of range\n    >>> main(cities={}, ants_num=5, iterations_num=5,\n    ...      pheromone_evaporation=0.7, alpha=1.0, beta=5.0, q=10)\n    Traceback (most recent call last):\n      ...\n    StopIteration\n    >>> main(cities={0: [0, 0], 1: [2, 2]}, ants_num=0, iterations_num=5,\n    ...      pheromone_evaporation=0.7, alpha=1.0, beta=5.0, q=10)\n    ([], inf)\n    >>> main(cities={0: [0, 0], 1: [2, 2]}, ants_num=5, iterations_num=0,\n    ...      pheromone_evaporation=0.7, alpha=1.0, beta=5.0, q=10)\n    ([], inf)\n    >>> main(cities={0: [0, 0], 1: [2, 2]}, ants_num=5, iterations_num=5,\n    ...      pheromone_evaporation=1, alpha=1.0, beta=5.0, q=10)\n    ([0, 1, 0], 5.656854249492381)\n    >>> main(cities={0: [0, 0], 1: [2, 2]}, ants_num=5, iterations_num=5,\n    ...      pheromone_evaporation=0, alpha=1.0, beta=5.0, q=10)\n    ([0, 1, 0], 5.656854249492381)\n    \"\"\"\n    # Initialize the pheromone matrix\n    cities_num = len(cities)\n    pheromone = [[1.0] * cities_num] * cities_num\n\n    best_path: list[int] = []\n    best_distance = float(\"inf\")\n    for _ in range(iterations_num):\n        ants_route = []\n        for _ in range(ants_num):\n            unvisited_cities = copy.deepcopy(cities)\n            current_city = {next(iter(cities.keys())): next(iter(cities.values()))}\n            del unvisited_cities[next(iter(current_city.keys()))]\n            ant_route = [next(iter(current_city.keys()))]\n            while unvisited_cities:\n                current_city, unvisited_cities = city_select(\n                    pheromone, current_city, unvisited_cities, alpha, beta\n                )\n                ant_route.append(next(iter(current_city.keys())))\n            ant_route.append(0)\n            ants_route.append(ant_route)\n\n        pheromone, best_path, best_distance = pheromone_update(\n            pheromone,\n            cities,\n            pheromone_evaporation,\n            ants_route,\n            q,\n            best_path,\n            best_distance,\n        )\n    return best_path, best_distance\n\n\ndef distance(city1: list[int], city2: list[int]) -> float:\n    \"\"\"\n    Calculate the distance between two coordinate points\n    >>> distance([0, 0], [3, 4] )\n    5.0\n    >>> distance([0, 0], [-3, 4] )\n    5.0\n    >>> distance([0, 0], [-3, -4] )\n    5.0\n    \"\"\"\n    return (((city1[0] - city2[0]) ** 2) + ((city1[1] - city2[1]) ** 2)) ** 0.5\n\n\ndef pheromone_update(\n    pheromone: list[list[float]],\n    cities: dict[int, list[int]],\n    pheromone_evaporation: float,\n    ants_route: list[list[int]],\n    q: float,  # Pheromone system parameters Q, which is a constant\n    best_path: list[int],\n    best_distance: float,\n) -> tuple[list[list[float]], list[int], float]:\n    \"\"\"\n    Update pheromones on the route and update the best route\n    >>>\n    >>> pheromone_update(pheromone=[[1.0, 1.0], [1.0, 1.0]],\n    ...                  cities={0: [0,0], 1: [2,2]}, pheromone_evaporation=0.7,\n    ...                  ants_route=[[0, 1, 0]], q=10, best_path=[],\n    ...                  best_distance=float(\"inf\"))\n    ([[0.7, 4.235533905932737], [4.235533905932737, 0.7]], [0, 1, 0], 5.656854249492381)\n    >>> pheromone_update(pheromone=[],\n    ...                  cities={0: [0,0], 1: [2,2]}, pheromone_evaporation=0.7,\n    ...                  ants_route=[[0, 1, 0]], q=10, best_path=[],\n    ...                  best_distance=float(\"inf\"))\n    Traceback (most recent call last):\n      ...\n    IndexError: list index out of range\n    >>> pheromone_update(pheromone=[[1.0, 1.0], [1.0, 1.0]],\n    ...                  cities={}, pheromone_evaporation=0.7,\n    ...                  ants_route=[[0, 1, 0]], q=10, best_path=[],\n    ...                  best_distance=float(\"inf\"))\n    Traceback (most recent call last):\n      ...\n    KeyError: 0\n    \"\"\"\n    for a in range(len(cities)):  # Update the volatilization of pheromone on all routes\n        for b in range(len(cities)):\n            pheromone[a][b] *= pheromone_evaporation\n    for ant_route in ants_route:\n        total_distance = 0.0\n        for i in range(len(ant_route) - 1):  # Calculate total distance\n            total_distance += distance(cities[ant_route[i]], cities[ant_route[i + 1]])\n        delta_pheromone = q / total_distance\n        for i in range(len(ant_route) - 1):  # Update pheromones\n            pheromone[ant_route[i]][ant_route[i + 1]] += delta_pheromone\n            pheromone[ant_route[i + 1]][ant_route[i]] = pheromone[ant_route[i]][\n                ant_route[i + 1]\n            ]\n\n        if total_distance < best_distance:\n            best_path = ant_route\n            best_distance = total_distance\n\n    return pheromone, best_path, best_distance\n\n\ndef city_select(\n    pheromone: list[list[float]],\n    current_city: dict[int, list[int]],\n    unvisited_cities: dict[int, list[int]],\n    alpha: float,\n    beta: float,\n) -> tuple[dict[int, list[int]], dict[int, list[int]]]:\n    \"\"\"\n    Choose the next city for ants\n    >>> city_select(pheromone=[[1.0, 1.0], [1.0, 1.0]], current_city={0: [0, 0]},\n    ...             unvisited_cities={1: [2, 2]}, alpha=1.0, beta=5.0)\n    ({1: [2, 2]}, {})\n    >>> city_select(pheromone=[], current_city={0: [0,0]},\n    ...             unvisited_cities={1: [2, 2]}, alpha=1.0, beta=5.0)\n    Traceback (most recent call last):\n      ...\n    IndexError: list index out of range\n    >>> city_select(pheromone=[[1.0, 1.0], [1.0, 1.0]], current_city={},\n    ...             unvisited_cities={1: [2, 2]}, alpha=1.0, beta=5.0)\n    Traceback (most recent call last):\n      ...\n    StopIteration\n    >>> city_select(pheromone=[[1.0, 1.0], [1.0, 1.0]], current_city={0: [0, 0]},\n    ...             unvisited_cities={}, alpha=1.0, beta=5.0)\n    Traceback (most recent call last):\n      ...\n    IndexError: list index out of range\n    \"\"\"\n    probabilities = []\n    for city in unvisited_cities:\n        city_distance = distance(\n            unvisited_cities[city], next(iter(current_city.values()))\n        )\n        probability = (pheromone[city][next(iter(current_city.keys()))] ** alpha) * (\n            (1 / city_distance) ** beta\n        )\n        probabilities.append(probability)\n\n    chosen_city_i = random.choices(\n        list(unvisited_cities.keys()), weights=probabilities\n    )[0]\n    chosen_city = {chosen_city_i: unvisited_cities[chosen_city_i]}\n    del unvisited_cities[next(iter(chosen_city.keys()))]\n    return chosen_city, unvisited_cities\n\n\nif __name__ == \"__main__\":\n    best_path, best_distance = main(\n        cities=cities,\n        ants_num=10,\n        iterations_num=20,\n        pheromone_evaporation=0.7,\n        alpha=1.0,\n        beta=5.0,\n        q=10,\n    )\n\n    print(f\"{best_path = }\")\n    print(f\"{best_distance = }\")\n\n```"}], "metadata": {"prompt_id": "00000036", "row_id": 36, "seed_ids": [1034], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nProblem 78\nUrl: https://projecteuler.net/problem=78\nStatement:\nLet p(n) represent the number of different ways in which n coins\ncan be separated into piles. For example, five coins can be separated\ninto piles in exactly seven different ways, so p(5)=7.\n\n            OOOOO\n            OOOO   O\n            OOO   OO\n            OOO   O   O\n            OO   OO   O\n            OO   O   O   O\n            O   O   O   O   O\nFind the least value of n for which p(n) is divisible by one million.\n\"\"\"\n\nimport itertools\n\n\ndef solution(number: int = 1000000) -> int:\n    \"\"\"\n    >>> solution(1)\n    1\n\n    >>> solution(9)\n    14\n\n    >>> solution()\n    55374\n    \"\"\"\n    partitions = [1]\n\n    for i in itertools.count(len(partitions)):\n        item = 0\n        for j in itertools.count(1):\n            sign = -1 if j % 2 == 0 else +1\n            index = (j * j * 3 - j) // 2\n            if index > i:\n                break\n            item += partitions[i - index] * sign\n            item %= number\n            index += j\n            if index > i:\n                break\n            item += partitions[i - index] * sign\n            item %= number\n\n        if item == 0:\n            return i\n        partitions.append(item)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    print(f\"{solution() = }\")\n\n```"}], "metadata": {"prompt_id": "00000037", "row_id": 37, "seed_ids": [526], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nIn this problem, we want to determine all possible subsequences\nof the given sequence. We use backtracking to solve this problem.\n\nTime complexity: O(2^n),\nwhere n denotes the length of the given sequence.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any\n\n\ndef generate_all_subsequences(sequence: list[Any]) -> None:\n    create_state_space_tree(sequence, [], 0)\n\n\ndef create_state_space_tree(\n    sequence: list[Any], current_subsequence: list[Any], index: int\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which subsequences are generated.\n    :param current_subsequence: The current subsequence being built.\n    :param index: The current index in the sequence.\n\n    Example:\n    >>> sequence = [3, 2, 1]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [1]\n    [2]\n    [2, 1]\n    [3]\n    [3, 1]\n    [3, 2]\n    [3, 2, 1]\n\n    >>> sequence = [\"A\", \"B\"]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    ['B']\n    ['A']\n    ['A', 'B']\n\n    >>> sequence = []\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n\n    >>> sequence = [1, 2, 3, 4]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [4]\n    [3]\n    [3, 4]\n    [2]\n    [2, 4]\n    [2, 3]\n    [2, 3, 4]\n    [1]\n    [1, 4]\n    [1, 3]\n    [1, 3, 4]\n    [1, 2]\n    [1, 2, 4]\n    [1, 2, 3]\n    [1, 2, 3, 4]\n    \"\"\"\n\n    if index == len(sequence):\n        print(current_subsequence)\n        return\n\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.append(sequence[index])\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.pop()\n\n\nif __name__ == \"__main__\":\n    seq: list[Any] = [1, 2, 3]\n    generate_all_subsequences(seq)\n\n    seq.clear()\n    seq.extend([\"A\", \"B\", \"C\"])\n    generate_all_subsequences(seq)\n\n```"}], "metadata": {"prompt_id": "00000038", "row_id": 38, "seed_ids": [167], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\ndef perfect_cube(n: int) -> bool:\n    \"\"\"\n    Check if a number is a perfect cube or not.\n\n    >>> perfect_cube(27)\n    True\n    >>> perfect_cube(4)\n    False\n    \"\"\"\n    val = n ** (1 / 3)\n    return (val * val * val) == n\n\n\ndef perfect_cube_binary_search(n: int) -> bool:\n    \"\"\"\n    Check if a number is a perfect cube or not using binary search.\n    Time complexity : O(Log(n))\n    Space complexity: O(1)\n\n    >>> perfect_cube_binary_search(27)\n    True\n    >>> perfect_cube_binary_search(64)\n    True\n    >>> perfect_cube_binary_search(4)\n    False\n    >>> perfect_cube_binary_search(\"a\")\n    Traceback (most recent call last):\n        ...\n    TypeError: perfect_cube_binary_search() only accepts integers\n    >>> perfect_cube_binary_search(0.1)\n    Traceback (most recent call last):\n        ...\n    TypeError: perfect_cube_binary_search() only accepts integers\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"perfect_cube_binary_search() only accepts integers\")\n    if n < 0:\n        n = -n\n    left = 0\n    right = n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid * mid * mid == n:\n            return True\n        elif mid * mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000039", "row_id": 39, "seed_ids": [729], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nImplements a disjoint set using Lists and some added heuristics for efficiency\nUnion by Rank Heuristic and Path Compression\n\"\"\"\n\n\nclass DisjointSet:\n    def __init__(self, set_counts: list) -> None:\n        \"\"\"\n        Initialize with a list of the number of items in each set\n        and with rank = 1 for each set\n        \"\"\"\n        self.set_counts = set_counts\n        self.max_set = max(set_counts)\n        num_sets = len(set_counts)\n        self.ranks = [1] * num_sets\n        self.parents = list(range(num_sets))\n\n    def merge(self, src: int, dst: int) -> bool:\n        \"\"\"\n        Merge two sets together using Union by rank heuristic\n        Return True if successful\n        Merge two disjoint sets\n        >>> A = DisjointSet([1, 1, 1])\n        >>> A.merge(1, 2)\n        True\n        >>> A.merge(0, 2)\n        True\n        >>> A.merge(0, 1)\n        False\n        \"\"\"\n        src_parent = self.get_parent(src)\n        dst_parent = self.get_parent(dst)\n\n        if src_parent == dst_parent:\n            return False\n\n        if self.ranks[dst_parent] >= self.ranks[src_parent]:\n            self.set_counts[dst_parent] += self.set_counts[src_parent]\n            self.set_counts[src_parent] = 0\n            self.parents[src_parent] = dst_parent\n            if self.ranks[dst_parent] == self.ranks[src_parent]:\n                self.ranks[dst_parent] += 1\n            joined_set_size = self.set_counts[dst_parent]\n        else:\n            self.set_counts[src_parent] += self.set_counts[dst_parent]\n            self.set_counts[dst_parent] = 0\n            self.parents[dst_parent] = src_parent\n            joined_set_size = self.set_counts[src_parent]\n\n        self.max_set = max(self.max_set, joined_set_size)\n        return True\n\n    def get_parent(self, disj_set: int) -> int:\n        \"\"\"\n        Find the Parent of a given set\n        >>> A = DisjointSet([1, 1, 1])\n        >>> A.merge(1, 2)\n        True\n        >>> A.get_parent(0)\n        0\n        >>> A.get_parent(1)\n        2\n        \"\"\"\n        if self.parents[disj_set] == disj_set:\n            return disj_set\n        self.parents[disj_set] = self.get_parent(self.parents[disj_set])\n        return self.parents[disj_set]\n\n```"}], "metadata": {"prompt_id": "00000040", "row_id": 40, "seed_ids": [318], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nA pure Python implementation of the quick sort algorithm\n\nFor doctests run following command:\npython3 -m doctest -v quick_sort.py\n\nFor manual testing run:\npython3 quick_sort.py\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom random import randrange\n\n\ndef quick_sort(collection: list) -> list:\n    \"\"\"A pure Python implementation of quicksort algorithm.\n\n    :param collection: a mutable collection of comparable items\n    :return: the same collection ordered in ascending order\n\n    Examples:\n    >>> quick_sort([0, 5, 3, 2, 2])\n    [0, 2, 2, 3, 5]\n    >>> quick_sort([])\n    []\n    >>> quick_sort([-2, 5, 0, -45])\n    [-45, -2, 0, 5]\n    \"\"\"\n    # Base case: if the collection has 0 or 1 elements, it is already sorted\n    if len(collection) < 2:\n        return collection\n\n    # Randomly select a pivot index and remove the pivot element from the collection\n    pivot_index = randrange(len(collection))\n    pivot = collection.pop(pivot_index)\n\n    # Partition the remaining elements into two groups: lesser or equal, and greater\n    lesser = [item for item in collection if item <= pivot]\n    greater = [item for item in collection if item > pivot]\n\n    # Recursively sort the lesser and greater groups, and combine with the pivot\n    return [*quick_sort(lesser), pivot, *quick_sort(greater)]\n\n\nif __name__ == \"__main__\":\n    # Get user input and convert it into a list of integers\n    user_input = input(\"Enter numbers separated by a comma:\\n\").strip()\n    unsorted = [int(item) for item in user_input.split(\",\")]\n\n    # Print the result of sorting the user-provided list\n    print(quick_sort(unsorted))\n\n```"}], "metadata": {"prompt_id": "00000041", "row_id": 41, "seed_ids": [233], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nLychrel numbers\nProblem 55: https://projecteuler.net/problem=55\n\nIf we take 47, reverse and add, 47 + 74 = 121, which is palindromic.\n\nNot all numbers produce palindromes so quickly. For example,\n349 + 943 = 1292,\n1292 + 2921 = 4213\n4213 + 3124 = 7337\nThat is, 349 took three iterations to arrive at a palindrome.\n\nAlthough no one has proved it yet, it is thought that some numbers, like 196,\nnever produce a palindrome. A number that never forms a palindrome through the\nreverse and add process is called a Lychrel number. Due to the theoretical nature\nof these numbers, and for the purpose of this problem, we shall assume that a number\nis Lychrel until proven otherwise. In addition you are given that for every number\nbelow ten-thousand, it will either (i) become a palindrome in less than fifty\niterations, or, (ii) no one, with all the computing power that exists, has managed\nso far to map it to a palindrome. In fact, 10677 is the first number to be shown\nto require over fifty iterations before producing a palindrome:\n4668731596684224866951378664 (53 iterations, 28-digits).\n\nSurprisingly, there are palindromic numbers that are themselves Lychrel numbers;\nthe first example is 4994.\nHow many Lychrel numbers are there below ten-thousand?\n\"\"\"\n\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\"\n    Returns True if a number is palindrome.\n    >>> is_palindrome(12567321)\n    False\n    >>> is_palindrome(1221)\n    True\n    >>> is_palindrome(9876789)\n    True\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\ndef sum_reverse(n: int) -> int:\n    \"\"\"\n    Returns the sum of n and reverse of n.\n    >>> sum_reverse(123)\n    444\n    >>> sum_reverse(3478)\n    12221\n    >>> sum_reverse(12)\n    33\n    \"\"\"\n    return int(n) + int(str(n)[::-1])\n\n\ndef solution(limit: int = 10000) -> int:\n    \"\"\"\n    Returns the count of all lychrel numbers below limit.\n    >>> solution(10000)\n    249\n    >>> solution(5000)\n    76\n    >>> solution(1000)\n    13\n    \"\"\"\n    lychrel_nums = []\n    for num in range(1, limit):\n        iterations = 0\n        a = num\n        while iterations < 50:\n            num = sum_reverse(num)\n            iterations += 1\n            if is_palindrome(num):\n                break\n        else:\n            lychrel_nums.append(a)\n    return len(lychrel_nums)\n\n\nif __name__ == \"__main__\":\n    print(f\"{solution() = }\")\n\n```"}], "metadata": {"prompt_id": "00000042", "row_id": 42, "seed_ids": [589], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\ndef calculate_pi(limit: int) -> str:\n    \"\"\"\n    https://en.wikipedia.org/wiki/Leibniz_formula_for_%CF%80\n    Leibniz Formula for Pi\n\n    The Leibniz formula is the special case arctan(1) = pi / 4.\n    Leibniz's formula converges extremely slowly: it exhibits sublinear convergence.\n\n    Convergence (https://en.wikipedia.org/wiki/Leibniz_formula_for_%CF%80#Convergence)\n\n    We cannot try to prove against an interrupted, uncompleted generation.\n    https://en.wikipedia.org/wiki/Leibniz_formula_for_%CF%80#Unusual_behaviour\n    The errors can in fact be predicted, but those calculations also approach infinity\n    for accuracy.\n\n    Our output will be a string so that we can definitely store all digits.\n\n    >>> import math\n    >>> float(calculate_pi(15)) == math.pi\n    True\n\n    Since we cannot predict errors or interrupt any infinite alternating series\n    generation since they approach infinity, or interrupt any alternating series, we'll\n    need math.isclose()\n\n    >>> math.isclose(float(calculate_pi(50)), math.pi)\n    True\n    >>> math.isclose(float(calculate_pi(100)), math.pi)\n    True\n\n    Since math.pi contains only 16 digits, here are some tests with known values:\n\n    >>> calculate_pi(50)\n    '3.14159265358979323846264338327950288419716939937510'\n    >>> calculate_pi(80)\n    '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899'\n    \"\"\"\n    # Variables used for the iteration process\n    q = 1\n    r = 0\n    t = 1\n    k = 1\n    n = 3\n    m = 3\n\n    decimal = limit\n    counter = 0\n\n    result = \"\"\n\n    # We can't compare against anything if we make a generator,\n    # so we'll stick with plain return logic\n    while counter != decimal + 1:\n        if 4 * q + r - t < n * t:\n            result += str(n)\n            if counter == 0:\n                result += \".\"\n\n            if decimal == counter:\n                break\n\n            counter += 1\n            nr = 10 * (r - n * t)\n            n = ((10 * (3 * q + r)) // t) - 10 * n\n            q *= 10\n            r = nr\n        else:\n            nr = (2 * q + r) * m\n            nn = (q * (7 * k) + 2 + (r * m)) // (t * m)\n            q *= k\n            t *= m\n            m += 2\n            k += 1\n            n = nn\n            r = nr\n    return result\n\n\ndef main() -> None:\n    print(f\"{calculate_pi(50) = }\")\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()\n\n```"}], "metadata": {"prompt_id": "00000043", "row_id": 43, "seed_ids": [781], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nThis is pure Python implementation of comb sort algorithm.\nComb sort is a relatively simple sorting algorithm originally designed by Wlodzimierz\nDobosiewicz in 1980.  It was rediscovered by Stephen Lacey and Richard Box in 1991.\nComb sort improves on bubble sort algorithm.\nIn bubble sort, distance (or gap) between two compared elements is always one.\nComb sort improvement is that gap can be much more than 1, in order to prevent slowing\ndown by small values\nat the end of a list.\n\nMore info on: https://en.wikipedia.org/wiki/Comb_sort\n\nFor doctests run following command:\npython -m doctest -v comb_sort.py\nor\npython3 -m doctest -v comb_sort.py\n\nFor manual testing run:\npython comb_sort.py\n\"\"\"\n\n\ndef comb_sort(data: list) -> list:\n    \"\"\"Pure implementation of comb sort algorithm in Python\n    :param data: mutable collection with comparable items\n    :return: the same collection in ascending order\n    Examples:\n    >>> comb_sort([0, 5, 3, 2, 2])\n    [0, 2, 2, 3, 5]\n    >>> comb_sort([])\n    []\n    >>> comb_sort([99, 45, -7, 8, 2, 0, -15, 3])\n    [-15, -7, 0, 2, 3, 8, 45, 99]\n    \"\"\"\n    shrink_factor = 1.3\n    gap = len(data)\n    completed = False\n\n    while not completed:\n        # Update the gap value for a next comb\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            completed = True\n\n        index = 0\n        while index + gap < len(data):\n            if data[index] > data[index + gap]:\n                # Swap values\n                data[index], data[index + gap] = data[index + gap], data[index]\n                completed = False\n            index += 1\n\n    return data\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    user_input = input(\"Enter numbers separated by a comma:\\n\").strip()\n    unsorted = [int(item) for item in user_input.split(\",\")]\n    print(comb_sort(unsorted))\n\n```"}], "metadata": {"prompt_id": "00000044", "row_id": 44, "seed_ids": [224], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nfrom maths.greatest_common_divisor import gcd_by_iterative\n\n\ndef find_mod_inverse(a: int, m: int) -> int:\n    if gcd_by_iterative(a, m) != 1:\n        msg = f\"mod inverse of {a!r} and {m!r} does not exist\"\n        raise ValueError(msg)\n    u1, u2, u3 = 1, 0, a\n    v1, v2, v3 = 0, 1, m\n    while v3 != 0:\n        q = u3 // v3\n        v1, v2, v3, u1, u2, u3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3\n    return u1 % m\n\n```"}], "metadata": {"prompt_id": "00000045", "row_id": 45, "seed_ids": [75], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\n== Liouville Lambda Function ==\nThe Liouville Lambda function, denoted by \u03bb(n)\nand \u03bb(n) is 1 if n is the product of an even number of prime numbers,\nand -1 if it is the product of an odd number of primes.\n\nhttps://en.wikipedia.org/wiki/Liouville_function\n\"\"\"\n\n# Author : Akshay Dubey (https://github.com/itsAkshayDubey)\nfrom maths.prime_factors import prime_factors\n\n\ndef liouville_lambda(number: int) -> int:\n    \"\"\"\n    This functions takes an integer number as input.\n    returns 1 if n has even number of prime factors and -1 otherwise.\n    >>> liouville_lambda(10)\n    1\n    >>> liouville_lambda(11)\n    -1\n    >>> liouville_lambda(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a positive integer\n    >>> liouville_lambda(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a positive integer\n    >>> liouville_lambda(11.0)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value of [number=11.0] must be an integer\n    \"\"\"\n    if not isinstance(number, int):\n        msg = f\"Input value of [number={number}] must be an integer\"\n        raise TypeError(msg)\n    if number < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    return -1 if len(prime_factors(number)) % 2 else 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000046", "row_id": 46, "seed_ids": [752], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nExtended Euclidean Algorithm.\n\nFinds 2 numbers a and b such that it satisfies\nthe equation am + bn = gcd(m, n) (a.k.a Bezout's Identity)\n\nhttps://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n\"\"\"\n\n# @Author: S. Sharma <silentcat>\n# @Date:   2019-02-25T12:08:53-06:00\n# @Email:  silentcat@protonmail.com\n# @Last modified by:   pikulet\n# @Last modified time: 2020-10-02\nfrom __future__ import annotations\n\nimport sys\n\n\ndef extended_euclidean_algorithm(a: int, b: int) -> tuple[int, int]:\n    \"\"\"\n    Extended Euclidean Algorithm.\n\n    Finds 2 numbers a and b such that it satisfies\n    the equation am + bn = gcd(m, n) (a.k.a Bezout's Identity)\n\n    >>> extended_euclidean_algorithm(1, 24)\n    (1, 0)\n\n    >>> extended_euclidean_algorithm(8, 14)\n    (2, -1)\n\n    >>> extended_euclidean_algorithm(240, 46)\n    (-9, 47)\n\n    >>> extended_euclidean_algorithm(1, -4)\n    (1, 0)\n\n    >>> extended_euclidean_algorithm(-2, -4)\n    (-1, 0)\n\n    >>> extended_euclidean_algorithm(0, -4)\n    (0, -1)\n\n    >>> extended_euclidean_algorithm(2, 0)\n    (1, 0)\n\n    \"\"\"\n    # base cases\n    if abs(a) == 1:\n        return a, 0\n    elif abs(b) == 1:\n        return 0, b\n\n    old_remainder, remainder = a, b\n    old_coeff_a, coeff_a = 1, 0\n    old_coeff_b, coeff_b = 0, 1\n\n    while remainder != 0:\n        quotient = old_remainder // remainder\n        old_remainder, remainder = remainder, old_remainder - quotient * remainder\n        old_coeff_a, coeff_a = coeff_a, old_coeff_a - quotient * coeff_a\n        old_coeff_b, coeff_b = coeff_b, old_coeff_b - quotient * coeff_b\n\n    # sign correction for negative numbers\n    if a < 0:\n        old_coeff_a = -old_coeff_a\n    if b < 0:\n        old_coeff_b = -old_coeff_b\n\n    return old_coeff_a, old_coeff_b\n\n\ndef main():\n    \"\"\"Call Extended Euclidean Algorithm.\"\"\"\n    if len(sys.argv) < 3:\n        print(\"2 integer arguments required\")\n        return 1\n    a = int(sys.argv[1])\n    b = int(sys.argv[2])\n    print(extended_euclidean_algorithm(a, b))\n    return 0\n\n\nif __name__ == \"__main__\":\n    raise SystemExit(main())\n\n```"}], "metadata": {"prompt_id": "00000047", "row_id": 47, "seed_ids": [702], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nGiven a list of tasks, each with a deadline and reward, calculate which tasks can be\ncompleted to yield the maximum reward.  Each task takes one unit of time to complete,\nand we can only work on one task at a time.  Once a task has passed its deadline, it\ncan no longer be scheduled.\n\nExample :\ntasks_info = [(4, 20), (1, 10), (1, 40), (1, 30)]\nmax_tasks will return (2, [2, 0]) -\nScheduling these tasks would result in a reward of 40 + 20\n\nThis problem can be solved using the concept of \"GREEDY ALGORITHM\".\nTime Complexity - O(n log n)\nhttps://medium.com/@nihardudhat2000/job-sequencing-with-deadline-17ddbb5890b5\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom operator import attrgetter\n\n\n@dataclass\nclass Task:\n    task_id: int\n    deadline: int\n    reward: int\n\n\ndef max_tasks(tasks_info: list[tuple[int, int]]) -> list[int]:\n    \"\"\"\n    Create a list of Task objects that are sorted so the highest rewards come first.\n    Return a list of those task ids that can be completed before i becomes too high.\n    >>> max_tasks([(4, 20), (1, 10), (1, 40), (1, 30)])\n    [2, 0]\n    >>> max_tasks([(1, 10), (2, 20), (3, 30), (2, 40)])\n    [3, 2]\n    >>> max_tasks([(9, 10)])\n    [0]\n    >>> max_tasks([(-9, 10)])\n    []\n    >>> max_tasks([])\n    []\n    >>> max_tasks([(0, 10), (0, 20), (0, 30), (0, 40)])\n    []\n    >>> max_tasks([(-1, 10), (-2, 20), (-3, 30), (-4, 40)])\n    []\n    \"\"\"\n    tasks = sorted(\n        (\n            Task(task_id, deadline, reward)\n            for task_id, (deadline, reward) in enumerate(tasks_info)\n        ),\n        key=attrgetter(\"reward\"),\n        reverse=True,\n    )\n    return [task.task_id for i, task in enumerate(tasks, start=1) if task.deadline >= i]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(f\"{max_tasks([(4, 20), (1, 10), (1, 40), (1, 30)]) = }\")\n    print(f\"{max_tasks([(1, 10), (2, 20), (3, 30), (2, 40)]) = }\")\n\n```"}], "metadata": {"prompt_id": "00000048", "row_id": 48, "seed_ids": [894], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nThis script demonstrates the implementation of the Sigmoid function.\n\nThe function takes a vector of K real numbers as input and then 1 / (1 + exp(-x)).\nAfter through Sigmoid, the element of the vector mostly 0 between 1. or 1 between -1.\n\nScript inspired from its corresponding Wikipedia article\nhttps://en.wikipedia.org/wiki/Sigmoid_function\n\"\"\"\n\nimport numpy as np\n\n\ndef sigmoid(vector: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Implements the sigmoid function\n\n    Parameters:\n        vector (np.array): A  numpy array of shape (1,n)\n        consisting of real values\n\n    Returns:\n        sigmoid_vec (np.array): The input numpy array, after applying\n        sigmoid.\n\n    Examples:\n    >>> sigmoid(np.array([-1.0, 1.0, 2.0]))\n    array([0.26894142, 0.73105858, 0.88079708])\n\n    >>> sigmoid(np.array([0.0]))\n    array([0.5])\n    \"\"\"\n    return 1 / (1 + np.exp(-vector))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000049", "row_id": 49, "seed_ids": [784], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nfrom __future__ import annotations\n\nfrom typing import Any\n\n\nclass Matrix:\n    \"\"\"\n    <class Matrix>\n    Matrix structure.\n    \"\"\"\n\n    def __init__(self, row: int, column: int, default_value: float = 0) -> None:\n        \"\"\"\n        <method Matrix.__init__>\n        Initialize matrix with given size and default value.\n        Example:\n        >>> a = Matrix(2, 3, 1)\n        >>> a\n        Matrix consist of 2 rows and 3 columns\n        [1, 1, 1]\n        [1, 1, 1]\n        \"\"\"\n\n        self.row, self.column = row, column\n        self.array = [[default_value for _ in range(column)] for _ in range(row)]\n\n    def __str__(self) -> str:\n        \"\"\"\n        <method Matrix.__str__>\n        Return string representation of this matrix.\n        \"\"\"\n\n        # Prefix\n        s = f\"Matrix consist of {self.row} rows and {self.column} columns\\n\"\n\n        # Make string identifier\n        max_element_length = 0\n        for row_vector in self.array:\n            for obj in row_vector:\n                max_element_length = max(max_element_length, len(str(obj)))\n        string_format_identifier = f\"%{max_element_length}s\"\n\n        # Make string and return\n        def single_line(row_vector: list[float]) -> str:\n            nonlocal string_format_identifier\n            line = \"[\"\n            line += \", \".join(string_format_identifier % (obj,) for obj in row_vector)\n            line += \"]\"\n            return line\n\n        s += \"\\n\".join(single_line(row_vector) for row_vector in self.array)\n        return s\n\n    def __repr__(self) -> str:\n        return str(self)\n\n    def validate_indices(self, loc: tuple[int, int]) -> bool:\n        \"\"\"\n        <method Matrix.validate_indicies>\n        Check if given indices are valid to pick element from matrix.\n        Example:\n        >>> a = Matrix(2, 6, 0)\n        >>> a.validate_indices((2, 7))\n        False\n        >>> a.validate_indices((0, 0))\n        True\n        \"\"\"\n        if not (isinstance(loc, (list, tuple)) and len(loc) == 2):  # noqa: SIM114\n            return False\n        elif not (0 <= loc[0] < self.row and 0 <= loc[1] < self.column):\n            return False\n        else:\n            return True\n\n    def __getitem__(self, loc: tuple[int, int]) -> Any:\n        \"\"\"\n        <method Matrix.__getitem__>\n        Return array[row][column] where loc = (row, column).\n        Example:\n        >>> a = Matrix(3, 2, 7)\n        >>> a[1, 0]\n        7\n        \"\"\"\n        assert self.validate_indices(loc)\n        return self.array[loc[0]][loc[1]]\n\n    def __setitem__(self, loc: tuple[int, int], value: float) -> None:\n        \"\"\"\n        <method Matrix.__setitem__>\n        Set array[row][column] = value where loc = (row, column).\n        Example:\n        >>> a = Matrix(2, 3, 1)\n        >>> a[1, 2] = 51\n        >>> a\n        Matrix consist of 2 rows and 3 columns\n        [ 1,  1,  1]\n        [ 1,  1, 51]\n        \"\"\"\n        assert self.validate_indices(loc)\n        self.array[loc[0]][loc[1]] = value\n\n    def __add__(self, another: Matrix) -> Matrix:\n        \"\"\"\n        <method Matrix.__add__>\n        Return self + another.\n        Example:\n        >>> a = Matrix(2, 1, -4)\n        >>> b = Matrix(2, 1, 3)\n        >>> a+b\n        Matrix consist of 2 rows and 1 columns\n        [-1]\n        [-1]\n        \"\"\"\n\n        # Validation\n        assert isinstance(another, Matrix)\n        assert self.row == another.row\n        assert self.column == another.column\n\n        # Add\n        result = Matrix(self.row, self.column)\n        for r in range(self.row):\n            for c in range(self.column):\n                result[r, c] = self[r, c] + another[r, c]\n        return result\n\n    def __neg__(self) -> Matrix:\n        \"\"\"\n        <method Matrix.__neg__>\n        Return -self.\n        Example:\n        >>> a = Matrix(2, 2, 3)\n        >>> a[0, 1] = a[1, 0] = -2\n        >>> -a\n        Matrix consist of 2 rows and 2 columns\n        [-3,  2]\n        [ 2, -3]\n        \"\"\"\n\n        result = Matrix(self.row, self.column)\n        for r in range(self.row):\n            for c in range(self.column):\n                result[r, c] = -self[r, c]\n        return result\n\n    def __sub__(self, another: Matrix) -> Matrix:\n        return self + (-another)\n\n    def __mul__(self, another: float | Matrix) -> Matrix:\n        \"\"\"\n        <method Matrix.__mul__>\n        Return self * another.\n        Example:\n        >>> a = Matrix(2, 3, 1)\n        >>> a[0,2] = a[1,2] = 3\n        >>> a * -2\n        Matrix consist of 2 rows and 3 columns\n        [-2, -2, -6]\n        [-2, -2, -6]\n        \"\"\"\n\n        if isinstance(another, (int, float)):  # Scalar multiplication\n            result = Matrix(self.row, self.column)\n            for r in range(self.row):\n                for c in range(self.column):\n                    result[r, c] = self[r, c] * another\n            return result\n        elif isinstance(another, Matrix):  # Matrix multiplication\n            assert self.column == another.row\n            result = Matrix(self.row, another.column)\n            for r in range(self.row):\n                for c in range(another.column):\n                    for i in range(self.column):\n                        result[r, c] += self[r, i] * another[i, c]\n            return result\n        else:\n            msg = f\"Unsupported type given for another ({type(another)})\"\n            raise TypeError(msg)\n\n    def transpose(self) -> Matrix:\n        \"\"\"\n        <method Matrix.transpose>\n        Return self^T.\n        Example:\n        >>> a = Matrix(2, 3)\n        >>> for r in range(2):\n        ...     for c in range(3):\n        ...             a[r,c] = r*c\n        ...\n        >>> a.transpose()\n        Matrix consist of 3 rows and 2 columns\n        [0, 0]\n        [0, 1]\n        [0, 2]\n        \"\"\"\n\n        result = Matrix(self.column, self.row)\n        for r in range(self.row):\n            for c in range(self.column):\n                result[c, r] = self[r, c]\n        return result\n\n    def sherman_morrison(self, u: Matrix, v: Matrix) -> Any:\n        \"\"\"\n        <method Matrix.sherman_morrison>\n        Apply Sherman-Morrison formula in O(n^2).\n        To learn this formula, please look this:\n        https://en.wikipedia.org/wiki/Sherman%E2%80%93Morrison_formula\n        This method returns (A + uv^T)^(-1) where A^(-1) is self. Returns None if it's\n        impossible to calculate.\n        Warning: This method doesn't check if self is invertible.\n            Make sure self is invertible before execute this method.\n        Example:\n        >>> ainv = Matrix(3, 3, 0)\n        >>> for i in range(3): ainv[i,i] = 1\n        ...\n        >>> u = Matrix(3, 1, 0)\n        >>> u[0,0], u[1,0], u[2,0] = 1, 2, -3\n        >>> v = Matrix(3, 1, 0)\n        >>> v[0,0], v[1,0], v[2,0] = 4, -2, 5\n        >>> ainv.sherman_morrison(u, v)\n        Matrix consist of 3 rows and 3 columns\n        [  1.2857142857142856, -0.14285714285714285,   0.3571428571428571]\n        [  0.5714285714285714,   0.7142857142857143,   0.7142857142857142]\n        [ -0.8571428571428571,  0.42857142857142855,  -0.0714285714285714]\n        \"\"\"\n\n        # Size validation\n        assert isinstance(u, Matrix)\n        assert isinstance(v, Matrix)\n        assert self.row == self.column == u.row == v.row  # u, v should be column vector\n        assert u.column == v.column == 1  # u, v should be column vector\n\n        # Calculate\n        v_t = v.transpose()\n        numerator_factor = (v_t * self * u)[0, 0] + 1\n        if numerator_factor == 0:\n            return None  # It's not invertible\n        return self - ((self * u) * (v_t * self) * (1.0 / numerator_factor))\n\n\n# Testing\nif __name__ == \"__main__\":\n\n    def test1() -> None:\n        # a^(-1)\n        ainv = Matrix(3, 3, 0)\n        for i in range(3):\n            ainv[i, i] = 1\n        print(f\"a^(-1) is {ainv}\")\n        # u, v\n        u = Matrix(3, 1, 0)\n        u[0, 0], u[1, 0], u[2, 0] = 1, 2, -3\n        v = Matrix(3, 1, 0)\n        v[0, 0], v[1, 0], v[2, 0] = 4, -2, 5\n        print(f\"u is {u}\")\n        print(f\"v is {v}\")\n        print(f\"uv^T is {u * v.transpose()}\")\n        # Sherman Morrison\n        print(f\"(a + uv^T)^(-1) is {ainv.sherman_morrison(u, v)}\")\n\n    def test2() -> None:\n        import doctest\n\n        doctest.testmod()\n\n    test2()\n\n```"}], "metadata": {"prompt_id": "00000050", "row_id": 50, "seed_ids": [1096], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nIllustrate how to implement inorder traversal in binary search tree.\nAuthor: Gurneet Singh\nhttps://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/\n\"\"\"\n\n\nclass BinaryTreeNode:\n    \"\"\"Defining the structure of BinaryTreeNode\"\"\"\n\n    def __init__(self, data: int) -> None:\n        self.data = data\n        self.left_child: BinaryTreeNode | None = None\n        self.right_child: BinaryTreeNode | None = None\n\n\ndef insert(node: BinaryTreeNode | None, new_value: int) -> BinaryTreeNode | None:\n    \"\"\"\n    If the binary search tree is empty, make a new node and declare it as root.\n    >>> node_a = BinaryTreeNode(12345)\n    >>> node_b = insert(node_a, 67890)\n    >>> node_a.left_child == node_b.left_child\n    True\n    >>> node_a.right_child == node_b.right_child\n    True\n    >>> node_a.data == node_b.data\n    True\n    \"\"\"\n    if node is None:\n        node = BinaryTreeNode(new_value)\n        return node\n\n    # binary search tree is not empty,\n    # so we will insert it into the tree\n    # if new_value is less than value of data in node,\n    #  add it to left subtree and proceed recursively\n    if new_value < node.data:\n        node.left_child = insert(node.left_child, new_value)\n    else:\n        # if new_value is greater than value of data in node,\n        #  add it to right subtree and proceed recursively\n        node.right_child = insert(node.right_child, new_value)\n    return node\n\n\ndef inorder(node: None | BinaryTreeNode) -> list[int]:  # if node is None,return\n    \"\"\"\n    >>> inorder(make_tree())\n    [6, 10, 14, 15, 20, 25, 60]\n    \"\"\"\n    if node:\n        inorder_array = inorder(node.left_child)\n        inorder_array = [*inorder_array, node.data]\n        inorder_array = inorder_array + inorder(node.right_child)\n    else:\n        inorder_array = []\n    return inorder_array\n\n\ndef make_tree() -> BinaryTreeNode | None:\n    root = insert(None, 15)\n    insert(root, 10)\n    insert(root, 25)\n    insert(root, 6)\n    insert(root, 14)\n    insert(root, 20)\n    insert(root, 60)\n    return root\n\n\ndef main() -> None:\n    # main function\n    root = make_tree()\n    print(\"Printing values of binary search tree in Inorder Traversal.\")\n    inorder(root)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()\n\n```"}], "metadata": {"prompt_id": "00000051", "row_id": 51, "seed_ids": [358], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\ndef find_previous_power_of_two(number: int) -> int:\n    \"\"\"\n    Find the largest power of two that is less than or equal to a given integer.\n    https://stackoverflow.com/questions/1322510\n\n    >>> [find_previous_power_of_two(i) for i in range(18)]\n    [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16]\n    >>> find_previous_power_of_two(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> find_previous_power_of_two(10.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n    if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if number == 0:\n        return 0\n    power = 1\n    while power <= number:\n        power <<= 1  # Equivalent to multiplying by 2\n    return power >> 1 if number > 1 else 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000052", "row_id": 52, "seed_ids": [1050], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nA bag contains one red disc and one blue disc. In a game of chance a player takes a\ndisc at random and its colour is noted. After each turn the disc is returned to the\nbag, an extra red disc is added, and another disc is taken at random.\n\nThe player pays \u00a31 to play and wins if they have taken more blue discs than red\ndiscs at the end of the game.\n\nIf the game is played for four turns, the probability of a player winning is exactly\n11/120, and so the maximum prize fund the banker should allocate for winning in this\ngame would be \u00a310 before they would expect to incur a loss. Note that any payout will\nbe a whole number of pounds and also includes the original \u00a31 paid to play the game,\nso in the example given the player actually wins \u00a39.\n\nFind the maximum prize fund that should be allocated to a single game in which\nfifteen turns are played.\n\n\nSolution:\n    For each 15-disc sequence of red and blue for which there are more red than blue,\n    we calculate the probability of that sequence and add it to the total probability\n    of the player winning. The inverse of this probability gives an upper bound for\n    the prize if the banker wants to avoid an expected loss.\n\"\"\"\n\nfrom itertools import product\n\n\ndef solution(num_turns: int = 15) -> int:\n    \"\"\"\n    Find the maximum prize fund that should be allocated to a single game in which\n    fifteen turns are played.\n    >>> solution(4)\n    10\n    >>> solution(10)\n    225\n    \"\"\"\n    total_prob: float = 0.0\n    prob: float\n    num_blue: int\n    num_red: int\n    ind: int\n    col: int\n    series: tuple[int, ...]\n\n    for series in product(range(2), repeat=num_turns):\n        num_blue = series.count(1)\n        num_red = num_turns - num_blue\n        if num_red >= num_blue:\n            continue\n        prob = 1.0\n        for ind, col in enumerate(series, 2):\n            if col == 0:\n                prob *= (ind - 1) / ind\n            else:\n                prob *= 1 / ind\n\n        total_prob += prob\n\n    return int(1 / total_prob)\n\n\nif __name__ == \"__main__\":\n    print(f\"{solution() = }\")\n\n```"}], "metadata": {"prompt_id": "00000053", "row_id": 53, "seed_ids": [595], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nFinding the peak of a unimodal list using divide and conquer.\nA unimodal array is defined as follows: array is increasing up to index p,\nthen decreasing afterwards. (for p >= 1)\nAn obvious solution can be performed in O(n),\nto find the maximum of the array.\n(From Kleinberg and Tardos. Algorithm Design.\nAddison Wesley 2006: Chapter 5 Solved Exercise 1)\n\"\"\"\n\nfrom __future__ import annotations\n\n\ndef peak(lst: list[int]) -> int:\n    \"\"\"\n    Return the peak value of `lst`.\n    >>> peak([1, 2, 3, 4, 5, 4, 3, 2, 1])\n    5\n    >>> peak([1, 10, 9, 8, 7, 6, 5, 4])\n    10\n    >>> peak([1, 9, 8, 7])\n    9\n    >>> peak([1, 2, 3, 4, 5, 6, 7, 0])\n    7\n    >>> peak([1, 2, 3, 4, 3, 2, 1, 0, -1, -2])\n    4\n    \"\"\"\n    # middle index\n    m = len(lst) // 2\n\n    # choose the middle 3 elements\n    three = lst[m - 1 : m + 2]\n\n    # if middle element is peak\n    if three[1] > three[0] and three[1] > three[2]:\n        return three[1]\n\n    # if increasing, recurse on right\n    elif three[0] < three[2]:\n        if len(lst[:m]) == 2:\n            m -= 1\n        return peak(lst[m:])\n\n    # decreasing\n    else:\n        if len(lst[:m]) == 2:\n            m += 1\n        return peak(lst[:m])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000054", "row_id": 54, "seed_ids": [942], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nProblem 15: https://projecteuler.net/problem=15\n\nStarting in the top left corner of a 2x2 grid, and only being able to move to\nthe right and down, there are exactly 6 routes to the bottom right corner.\nHow many such routes are there through a 20x20 grid?\n\"\"\"\n\nfrom math import factorial\n\n\ndef solution(n: int = 20) -> int:\n    \"\"\"\n    Returns the number of paths possible in a n x n grid starting at top left\n    corner going to bottom right corner and being able to move right and down\n    only.\n    >>> solution(25)\n    126410606437752\n    >>> solution(23)\n    8233430727600\n    >>> solution(20)\n    137846528820\n    >>> solution(15)\n    155117520\n    >>> solution(1)\n    2\n    \"\"\"\n    n = 2 * n  # middle entry of odd rows starting at row 3 is the solution for n = 1,\n    # 2, 3,...\n    k = n // 2\n\n    return int(factorial(n) / (factorial(k) * factorial(n - k)))\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    if len(sys.argv) == 1:\n        print(solution(20))\n    else:\n        try:\n            n = int(sys.argv[1])\n            print(solution(n))\n        except ValueError:\n            print(\"Invalid entry - please enter a number.\")\n\n```"}], "metadata": {"prompt_id": "00000055", "row_id": 55, "seed_ids": [474], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\ndef gray_code(bit_count: int) -> list:\n    \"\"\"\n    Takes in an integer n and returns a n-bit\n    gray code sequence\n    An n-bit gray code sequence is a sequence of 2^n\n    integers where:\n\n    a) Every integer is between [0,2^n -1] inclusive\n    b) The sequence begins with 0\n    c) An integer appears at most one times in the sequence\n    d)The binary representation of every pair of integers differ\n       by exactly one bit\n    e) The binary representation of first and last bit also\n       differ by exactly one bit\n\n    >>> gray_code(2)\n    [0, 1, 3, 2]\n\n    >>> gray_code(1)\n    [0, 1]\n\n    >>> gray_code(3)\n    [0, 1, 3, 2, 6, 7, 5, 4]\n\n    >>> gray_code(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: The given input must be positive\n\n    >>> gray_code(10.6)\n    Traceback (most recent call last):\n        ...\n    TypeError: unsupported operand type(s) for <<: 'int' and 'float'\n    \"\"\"\n\n    # bit count represents no. of bits in the gray code\n    if bit_count < 0:\n        raise ValueError(\"The given input must be positive\")\n\n    # get the generated string sequence\n    sequence = gray_code_sequence_string(bit_count)\n    #\n    # convert them to integers\n    for i in range(len(sequence)):\n        sequence[i] = int(sequence[i], 2)\n\n    return sequence\n\n\ndef gray_code_sequence_string(bit_count: int) -> list:\n    \"\"\"\n    Will output the n-bit grey sequence as a\n    string of bits\n\n    >>> gray_code_sequence_string(2)\n    ['00', '01', '11', '10']\n\n    >>> gray_code_sequence_string(1)\n    ['0', '1']\n    \"\"\"\n\n    # The approach is a recursive one\n    # Base case achieved when either n = 0 or n=1\n    if bit_count == 0:\n        return [\"0\"]\n\n    if bit_count == 1:\n        return [\"0\", \"1\"]\n\n    seq_len = 1 << bit_count  # defines the length of the sequence\n    # 1<< n is equivalent to 2^n\n\n    # recursive answer will generate answer for n-1 bits\n    smaller_sequence = gray_code_sequence_string(bit_count - 1)\n\n    sequence = []\n\n    # append 0 to first half of the smaller sequence generated\n    for i in range(seq_len // 2):\n        generated_no = \"0\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    # append 1 to second half ... start from the end of the list\n    for i in reversed(range(seq_len // 2)):\n        generated_no = \"1\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    return sequence\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000056", "row_id": 56, "seed_ids": [1055], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nImplementation of gaussian filter algorithm\n\"\"\"\n\nfrom itertools import product\n\nfrom cv2 import COLOR_BGR2GRAY, cvtColor, imread, imshow, waitKey\nfrom numpy import dot, exp, mgrid, pi, ravel, square, uint8, zeros\n\n\ndef gen_gaussian_kernel(k_size, sigma):\n    center = k_size // 2\n    x, y = mgrid[0 - center : k_size - center, 0 - center : k_size - center]\n    g = 1 / (2 * pi * sigma) * exp(-(square(x) + square(y)) / (2 * square(sigma)))\n    return g\n\n\ndef gaussian_filter(image, k_size, sigma):\n    height, width = image.shape[0], image.shape[1]\n    # dst image height and width\n    dst_height = height - k_size + 1\n    dst_width = width - k_size + 1\n\n    # im2col, turn the k_size*k_size pixels into a row and np.vstack all rows\n    image_array = zeros((dst_height * dst_width, k_size * k_size))\n    for row, (i, j) in enumerate(product(range(dst_height), range(dst_width))):\n        window = ravel(image[i : i + k_size, j : j + k_size])\n        image_array[row, :] = window\n\n    #  turn the kernel into shape(k*k, 1)\n    gaussian_kernel = gen_gaussian_kernel(k_size, sigma)\n    filter_array = ravel(gaussian_kernel)\n\n    # reshape and get the dst image\n    dst = dot(image_array, filter_array).reshape(dst_height, dst_width).astype(uint8)\n\n    return dst\n\n\nif __name__ == \"__main__\":\n    # read original image\n    img = imread(r\"../image_data/lena.jpg\")\n    # turn image in gray scale value\n    gray = cvtColor(img, COLOR_BGR2GRAY)\n\n    # get values with two different mask size\n    gaussian3x3 = gaussian_filter(gray, 3, sigma=1)\n    gaussian5x5 = gaussian_filter(gray, 5, sigma=0.8)\n\n    # show result images\n    imshow(\"gaussian filter with 3x3 mask\", gaussian3x3)\n    imshow(\"gaussian filter with 5x5 mask\", gaussian5x5)\n    waitKey()\n\n```"}], "metadata": {"prompt_id": "00000057", "row_id": 57, "seed_ids": [844], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nhttps://projecteuler.net/problem=234\n\nFor an integer n \u2265 4, we define the lower prime square root of n, denoted by\nlps(n), as the largest prime \u2264 \u221an and the upper prime square root of n, ups(n),\nas the smallest prime \u2265 \u221an.\n\nSo, for example, lps(4) = 2 = ups(4), lps(1000) = 31, ups(1000) = 37. Let us\ncall an integer n \u2265 4 semidivisible, if one of lps(n) and ups(n) divides n,\nbut not both.\n\nThe sum of the semidivisible numbers not exceeding 15 is 30, the numbers are 8,\n10 and 12. 15 is not semidivisible because it is a multiple of both lps(15) = 3\nand ups(15) = 5. As a further example, the sum of the 92 semidivisible numbers\nup to 1000 is 34825.\n\nWhat is the sum of all semidivisible numbers not exceeding 999966663333 ?\n\"\"\"\n\nimport math\n\n\ndef prime_sieve(n: int) -> list:\n    \"\"\"\n    Sieve of Erotosthenes\n    Function to return all the prime numbers up to a certain number\n    https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n    >>> prime_sieve(3)\n    [2]\n    >>> prime_sieve(50)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    \"\"\"\n    is_prime = [True] * n\n    is_prime[0] = False\n    is_prime[1] = False\n    is_prime[2] = True\n\n    for i in range(3, int(n**0.5 + 1), 2):\n        index = i * 2\n        while index < n:\n            is_prime[index] = False\n            index = index + i\n\n    primes = [2]\n\n    for i in range(3, n, 2):\n        if is_prime[i]:\n            primes.append(i)\n\n    return primes\n\n\ndef solution(limit: int = 999_966_663_333) -> int:\n    \"\"\"\n    Computes the solution to the problem up to the specified limit\n    >>> solution(1000)\n    34825\n\n    >>> solution(10_000)\n    1134942\n\n    >>> solution(100_000)\n    36393008\n    \"\"\"\n    primes_upper_bound = math.floor(math.sqrt(limit)) + 100\n    primes = prime_sieve(primes_upper_bound)\n\n    matches_sum = 0\n    prime_index = 0\n    last_prime = primes[prime_index]\n\n    while (last_prime**2) <= limit:\n        next_prime = primes[prime_index + 1]\n\n        lower_bound = last_prime**2\n        upper_bound = next_prime**2\n\n        # Get numbers divisible by lps(current)\n        current = lower_bound + last_prime\n        while upper_bound > current <= limit:\n            matches_sum += current\n            current += last_prime\n\n        # Reset the upper_bound\n        while (upper_bound - next_prime) > limit:\n            upper_bound -= next_prime\n\n        # Add the numbers divisible by ups(current)\n        current = upper_bound - next_prime\n        while current > lower_bound:\n            matches_sum += current\n            current -= next_prime\n\n        # Remove the numbers divisible by both ups and lps\n        current = 0\n        while upper_bound > current <= limit:\n            if current <= lower_bound:\n                # Increment the current number\n                current += last_prime * next_prime\n                continue\n\n            if current > limit:\n                break\n\n            # Remove twice since it was added by both ups and lps\n            matches_sum -= current * 2\n\n            # Increment the current number\n            current += last_prime * next_prime\n\n        # Setup for next pair\n        last_prime = next_prime\n        prime_index += 1\n\n    return matches_sum\n\n\nif __name__ == \"__main__\":\n    print(solution())\n\n```"}], "metadata": {"prompt_id": "00000058", "row_id": 58, "seed_ids": [586], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\ndef selection_sort(collection: list[int]) -> list[int]:\n    \"\"\"\n    Sorts a list in ascending order using the selection sort algorithm.\n\n    :param collection: A list of integers to be sorted.\n    :return: The sorted list.\n\n    Examples:\n    >>> selection_sort([0, 5, 3, 2, 2])\n    [0, 2, 2, 3, 5]\n\n    >>> selection_sort([])\n    []\n\n    >>> selection_sort([-2, -5, -45])\n    [-45, -5, -2]\n    \"\"\"\n\n    length = len(collection)\n    for i in range(length - 1):\n        min_index = i\n        for k in range(i + 1, length):\n            if collection[k] < collection[min_index]:\n                min_index = k\n        if min_index != i:\n            collection[i], collection[min_index] = collection[min_index], collection[i]\n    return collection\n\n\nif __name__ == \"__main__\":\n    user_input = input(\"Enter numbers separated by a comma:\\n\").strip()\n    unsorted = [int(item) for item in user_input.split(\",\")]\n    sorted_list = selection_sort(unsorted)\n    print(\"Sorted List:\", sorted_list)\n\n```"}], "metadata": {"prompt_id": "00000059", "row_id": 59, "seed_ids": [223], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nfrom __future__ import annotations\n\nfrom maths.greatest_common_divisor import greatest_common_divisor\n\n\ndef diophantine(a: int, b: int, c: int) -> tuple[float, float]:\n    \"\"\"\n    Diophantine Equation : Given integers a,b,c ( at least one of a and b != 0), the\n    diophantine equation a*x + b*y = c has a solution (where x and y are integers)\n    iff greatest_common_divisor(a,b) divides c.\n\n    GCD ( Greatest Common Divisor ) or HCF ( Highest Common Factor )\n\n    >>> diophantine(10,6,14)\n    (-7.0, 14.0)\n\n    >>> diophantine(391,299,-69)\n    (9.0, -12.0)\n\n    But above equation has one more solution i.e., x = -4, y = 5.\n    That's why we need diophantine all solution function.\n\n    \"\"\"\n\n    assert (\n        c % greatest_common_divisor(a, b) == 0\n    )  # greatest_common_divisor(a,b) is in maths directory\n    (d, x, y) = extended_gcd(a, b)  # extended_gcd(a,b) function implemented below\n    r = c / d\n    return (r * x, r * y)\n\n\ndef diophantine_all_soln(a: int, b: int, c: int, n: int = 2) -> None:\n    \"\"\"\n    Lemma : if n|ab and gcd(a,n) = 1, then n|b.\n\n    Finding All solutions of Diophantine Equations:\n\n    Theorem : Let gcd(a,b) = d, a = d*p, b = d*q. If (x0,y0) is a solution of\n    Diophantine Equation a*x + b*y = c.  a*x0 + b*y0 = c, then all the\n    solutions have the form a(x0 + t*q) + b(y0 - t*p) = c,\n    where t is an arbitrary integer.\n\n    n is the number of solution you want, n = 2 by default\n\n    >>> diophantine_all_soln(10, 6, 14)\n    -7.0 14.0\n    -4.0 9.0\n\n    >>> diophantine_all_soln(10, 6, 14, 4)\n    -7.0 14.0\n    -4.0 9.0\n    -1.0 4.0\n    2.0 -1.0\n\n    >>> diophantine_all_soln(391, 299, -69, n = 4)\n    9.0 -12.0\n    22.0 -29.0\n    35.0 -46.0\n    48.0 -63.0\n\n    \"\"\"\n    (x0, y0) = diophantine(a, b, c)  # Initial value\n    d = greatest_common_divisor(a, b)\n    p = a // d\n    q = b // d\n\n    for i in range(n):\n        x = x0 + i * q\n        y = y0 - i * p\n        print(x, y)\n\n\ndef extended_gcd(a: int, b: int) -> tuple[int, int, int]:\n    \"\"\"\n    Extended Euclid's Algorithm : If d divides a and b and d = a*x + b*y for integers\n    x and y, then d = gcd(a,b)\n\n    >>> extended_gcd(10, 6)\n    (2, -1, 2)\n\n    >>> extended_gcd(7, 5)\n    (1, -2, 3)\n\n    \"\"\"\n    assert a >= 0\n    assert b >= 0\n\n    if b == 0:\n        d, x, y = a, 1, 0\n    else:\n        (d, p, q) = extended_gcd(b, a % b)\n        x = q\n        y = p - q * (a // b)\n\n    assert a % d == 0\n    assert b % d == 0\n    assert d == a * x + b * y\n\n    return (d, x, y)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod(name=\"diophantine\", verbose=True)\n    testmod(name=\"diophantine_all_soln\", verbose=True)\n    testmod(name=\"extended_gcd\", verbose=True)\n    testmod(name=\"greatest_common_divisor\", verbose=True)\n\n```"}], "metadata": {"prompt_id": "00000060", "row_id": 60, "seed_ids": [924], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nProject Euler Problem 9: https://projecteuler.net/problem=9\n\nSpecial Pythagorean triplet\n\nA Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n\n    a^2 + b^2 = c^2\n\nFor example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n\nThere exists exactly one Pythagorean triplet for which a + b + c = 1000.\nFind the product a*b*c.\n\nReferences:\n    - https://en.wikipedia.org/wiki/Pythagorean_triple\n\"\"\"\n\n\ndef solution(n: int = 1000) -> int:\n    \"\"\"\n    Return the product of a,b,c which are Pythagorean Triplet that satisfies\n    the following:\n      1. a < b < c\n      2. a**2 + b**2 = c**2\n      3. a + b + c = n\n\n    >>> solution(36)\n    1620\n    >>> solution(126)\n    66780\n    \"\"\"\n\n    product = -1\n    candidate = 0\n    for a in range(1, n // 3):\n        # Solving the two equations a**2+b**2=c**2 and a+b+c=N eliminating c\n        b = (n * n - 2 * a * n) // (2 * n - 2 * a)\n        c = n - a - b\n        if c * c == (a * a + b * b):\n            candidate = a * b * c\n            product = max(product, candidate)\n    return product\n\n\nif __name__ == \"__main__\":\n    print(f\"{solution() = }\")\n\n```"}], "metadata": {"prompt_id": "00000061", "row_id": 61, "seed_ids": [465], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nBase85 (Ascii85) encoding and decoding\n\nhttps://en.wikipedia.org/wiki/Ascii85\n\"\"\"\n\n\ndef _base10_to_85(d: int) -> str:\n    return \"\".join(chr(d % 85 + 33)) + _base10_to_85(d // 85) if d > 0 else \"\"\n\n\ndef _base85_to_10(digits: list) -> int:\n    return sum(char * 85**i for i, char in enumerate(reversed(digits)))\n\n\ndef ascii85_encode(data: bytes) -> bytes:\n    \"\"\"\n    >>> ascii85_encode(b\"\")\n    b''\n    >>> ascii85_encode(b\"12345\")\n    b'0etOA2#'\n    >>> ascii85_encode(b\"base 85\")\n    b'@UX=h+?24'\n    \"\"\"\n    binary_data = \"\".join(bin(ord(d))[2:].zfill(8) for d in data.decode(\"utf-8\"))\n    null_values = (32 * ((len(binary_data) // 32) + 1) - len(binary_data)) // 8\n    binary_data = binary_data.ljust(32 * ((len(binary_data) // 32) + 1), \"0\")\n    b85_chunks = [int(_s, 2) for _s in map(\"\".join, zip(*[iter(binary_data)] * 32))]\n    result = \"\".join(_base10_to_85(chunk)[::-1] for chunk in b85_chunks)\n    return bytes(result[:-null_values] if null_values % 4 != 0 else result, \"utf-8\")\n\n\ndef ascii85_decode(data: bytes) -> bytes:\n    \"\"\"\n    >>> ascii85_decode(b\"\")\n    b''\n    >>> ascii85_decode(b\"0etOA2#\")\n    b'12345'\n    >>> ascii85_decode(b\"@UX=h+?24\")\n    b'base 85'\n    \"\"\"\n    null_values = 5 * ((len(data) // 5) + 1) - len(data)\n    binary_data = data.decode(\"utf-8\") + \"u\" * null_values\n    b85_chunks = map(\"\".join, zip(*[iter(binary_data)] * 5))\n    b85_segments = [[ord(_s) - 33 for _s in chunk] for chunk in b85_chunks]\n    results = [bin(_base85_to_10(chunk))[2::].zfill(32) for chunk in b85_segments]\n    char_chunks = [\n        [chr(int(_s, 2)) for _s in map(\"\".join, zip(*[iter(r)] * 8))] for r in results\n    ]\n    result = \"\".join(\"\".join(char) for char in char_chunks)\n    offset = int(null_values % 5 == 0)\n    return bytes(result[: offset - null_values], \"utf-8\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000062", "row_id": 62, "seed_ids": [47], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nrender 3d points for 2d surfaces.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\n\n__version__ = \"2020.9.26\"\n__author__ = \"xcodz-dot, cclaus, dhruvmanila\"\n\n\ndef convert_to_2d(\n    x: float, y: float, z: float, scale: float, distance: float\n) -> tuple[float, float]:\n    \"\"\"\n    Converts 3d point to a 2d drawable point\n\n    >>> convert_to_2d(1.0, 2.0, 3.0, 10.0, 10.0)\n    (7.6923076923076925, 15.384615384615385)\n\n    >>> convert_to_2d(1, 2, 3, 10, 10)\n    (7.6923076923076925, 15.384615384615385)\n\n    >>> convert_to_2d(\"1\", 2, 3, 10, 10)  # '1' is str\n    Traceback (most recent call last):\n        ...\n    TypeError: Input values must either be float or int: ['1', 2, 3, 10, 10]\n    \"\"\"\n    if not all(isinstance(val, (float, int)) for val in locals().values()):\n        msg = f\"Input values must either be float or int: {list(locals().values())}\"\n        raise TypeError(msg)\n    projected_x = ((x * distance) / (z + distance)) * scale\n    projected_y = ((y * distance) / (z + distance)) * scale\n    return projected_x, projected_y\n\n\ndef rotate(\n    x: float, y: float, z: float, axis: str, angle: float\n) -> tuple[float, float, float]:\n    \"\"\"\n    rotate a point around a certain axis with a certain angle\n    angle can be any integer between 1, 360 and axis can be any one of\n    'x', 'y', 'z'\n\n    >>> rotate(1.0, 2.0, 3.0, 'y', 90.0)\n    (3.130524675073759, 2.0, 0.4470070007889556)\n\n    >>> rotate(1, 2, 3, \"z\", 180)\n    (0.999736015495891, -2.0001319704760485, 3)\n\n    >>> rotate('1', 2, 3, \"z\", 90.0)  # '1' is str\n    Traceback (most recent call last):\n        ...\n    TypeError: Input values except axis must either be float or int: ['1', 2, 3, 90.0]\n\n    >>> rotate(1, 2, 3, \"n\", 90)  # 'n' is not a valid axis\n    Traceback (most recent call last):\n        ...\n    ValueError: not a valid axis, choose one of 'x', 'y', 'z'\n\n    >>> rotate(1, 2, 3, \"x\", -90)\n    (1, -2.5049096187183877, -2.5933429780983657)\n\n    >>> rotate(1, 2, 3, \"x\", 450)  # 450 wrap around to 90\n    (1, 3.5776792428178217, -0.44744970165427644)\n    \"\"\"\n    if not isinstance(axis, str):\n        raise TypeError(\"Axis must be a str\")\n    input_variables = locals()\n    del input_variables[\"axis\"]\n    if not all(isinstance(val, (float, int)) for val in input_variables.values()):\n        msg = (\n            \"Input values except axis must either be float or int: \"\n            f\"{list(input_variables.values())}\"\n        )\n        raise TypeError(msg)\n    angle = (angle % 360) / 450 * 180 / math.pi\n    if axis == \"z\":\n        new_x = x * math.cos(angle) - y * math.sin(angle)\n        new_y = y * math.cos(angle) + x * math.sin(angle)\n        new_z = z\n    elif axis == \"x\":\n        new_y = y * math.cos(angle) - z * math.sin(angle)\n        new_z = z * math.cos(angle) + y * math.sin(angle)\n        new_x = x\n    elif axis == \"y\":\n        new_x = x * math.cos(angle) - z * math.sin(angle)\n        new_z = z * math.cos(angle) + x * math.sin(angle)\n        new_y = y\n    else:\n        raise ValueError(\"not a valid axis, choose one of 'x', 'y', 'z'\")\n\n    return new_x, new_y, new_z\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(f\"{convert_to_2d(1.0, 2.0, 3.0, 10.0, 10.0) = }\")\n    print(f\"{rotate(1.0, 2.0, 3.0, 'y', 90.0) = }\")\n\n```"}], "metadata": {"prompt_id": "00000063", "row_id": 63, "seed_ids": [429], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nFactorial of a positive integer -- https://en.wikipedia.org/wiki/Factorial\n\"\"\"\n\n\ndef factorial(number: int) -> int:\n    \"\"\"\n    Calculate the factorial of specified number (n!).\n\n    >>> import math\n    >>> all(factorial(i) == math.factorial(i) for i in range(20))\n    True\n    >>> factorial(0.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: factorial() only accepts integral values\n    >>> factorial(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: factorial() not defined for negative values\n    >>> factorial(1)\n    1\n    >>> factorial(6)\n    720\n    >>> factorial(0)\n    1\n    \"\"\"\n    if number != int(number):\n        raise ValueError(\"factorial() only accepts integral values\")\n    if number < 0:\n        raise ValueError(\"factorial() not defined for negative values\")\n    value = 1\n    for i in range(1, number + 1):\n        value *= i\n    return value\n\n\ndef factorial_recursive(n: int) -> int:\n    \"\"\"\n    Calculate the factorial of a positive integer\n    https://en.wikipedia.org/wiki/Factorial\n\n    >>> import math\n    >>> all(factorial(i) == math.factorial(i) for i in range(20))\n    True\n    >>> factorial(0.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: factorial() only accepts integral values\n    >>> factorial(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: factorial() not defined for negative values\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"factorial() only accepts integral values\")\n    if n < 0:\n        raise ValueError(\"factorial() not defined for negative values\")\n    return 1 if n in {0, 1} else n * factorial(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    n = int(input(\"Enter a positive integer: \").strip() or 0)\n    print(f\"factorial{n} is {factorial(n)}\")\n\n```"}], "metadata": {"prompt_id": "00000064", "row_id": 64, "seed_ids": [694], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nThis is an implementation of odd-even transposition sort.\n\nIt works by performing a series of parallel swaps between odd and even pairs of\nvariables in the list.\n\nThis implementation represents each variable in the list with a process and\neach process communicates with its neighboring processes in the list to perform\ncomparisons.\nThey are synchronized with locks and message passing but other forms of\nsynchronization could be used.\n\"\"\"\n\nimport multiprocessing as mp\n\n# lock used to ensure that two processes do not access a pipe at the same time\n# NOTE This breaks testing on build runner. May work better locally\n# process_lock = mp.Lock()\n\n\"\"\"\nThe function run by the processes that sorts the list\n\nposition = the position in the list the process represents, used to know which\n            neighbor we pass our value to\nvalue = the initial value at list[position]\nLSend, RSend = the pipes we use to send to our left and right neighbors\nLRcv, RRcv = the pipes we use to receive from our left and right neighbors\nresultPipe = the pipe used to send results back to main\n\"\"\"\n\n\ndef oe_process(\n    position,\n    value,\n    l_send,\n    r_send,\n    lr_cv,\n    rr_cv,\n    result_pipe,\n    multiprocessing_context,\n):\n    process_lock = multiprocessing_context.Lock()\n\n    # we perform n swaps since after n swaps we know we are sorted\n    # we *could* stop early if we are sorted already, but it takes as long to\n    # find out we are sorted as it does to sort the list with this algorithm\n    for i in range(10):\n        if (i + position) % 2 == 0 and r_send is not None:\n            # send your value to your right neighbor\n            with process_lock:\n                r_send[1].send(value)\n\n            # receive your right neighbor's value\n            with process_lock:\n                temp = rr_cv[0].recv()\n\n            # take the lower value since you are on the left\n            value = min(value, temp)\n        elif (i + position) % 2 != 0 and l_send is not None:\n            # send your value to your left neighbor\n            with process_lock:\n                l_send[1].send(value)\n\n            # receive your left neighbor's value\n            with process_lock:\n                temp = lr_cv[0].recv()\n\n            # take the higher value since you are on the right\n            value = max(value, temp)\n    # after all swaps are performed, send the values back to main\n    result_pipe[1].send(value)\n\n\n\"\"\"\nthe function which creates the processes that perform the parallel swaps\n\narr = the list to be sorted\n\"\"\"\n\n\ndef odd_even_transposition(arr):\n    \"\"\"\n    >>> odd_even_transposition(list(range(10)[::-1])) == sorted(list(range(10)[::-1]))\n    True\n    >>> odd_even_transposition([\"a\", \"x\", \"c\"]) == sorted([\"x\", \"a\", \"c\"])\n    True\n    >>> odd_even_transposition([1.9, 42.0, 2.8]) == sorted([1.9, 42.0, 2.8])\n    True\n    >>> odd_even_transposition([False, True, False]) == sorted([False, False, True])\n    True\n    >>> odd_even_transposition([1, 32.0, 9]) == sorted([False, False, True])\n    False\n    >>> odd_even_transposition([1, 32.0, 9]) == sorted([1.0, 32, 9.0])\n    True\n    >>> unsorted_list = [-442, -98, -554, 266, -491, 985, -53, -529, 82, -429]\n    >>> odd_even_transposition(unsorted_list) == sorted(unsorted_list)\n    True\n    >>> unsorted_list = [-442, -98, -554, 266, -491, 985, -53, -529, 82, -429]\n    >>> odd_even_transposition(unsorted_list) == sorted(unsorted_list + [1])\n    False\n    \"\"\"\n    # spawn method is considered safer than fork\n    multiprocessing_context = mp.get_context(\"spawn\")\n\n    process_array_ = []\n    result_pipe = []\n    # initialize the list of pipes where the values will be retrieved\n    for _ in arr:\n        result_pipe.append(multiprocessing_context.Pipe())\n    # creates the processes\n    # the first and last process only have one neighbor so they are made outside\n    # of the loop\n    temp_rs = multiprocessing_context.Pipe()\n    temp_rr = multiprocessing_context.Pipe()\n    process_array_.append(\n        multiprocessing_context.Process(\n            target=oe_process,\n            args=(\n                0,\n                arr[0],\n                None,\n                temp_rs,\n                None,\n                temp_rr,\n                result_pipe[0],\n                multiprocessing_context,\n            ),\n        )\n    )\n    temp_lr = temp_rs\n    temp_ls = temp_rr\n\n    for i in range(1, len(arr) - 1):\n        temp_rs = multiprocessing_context.Pipe()\n        temp_rr = multiprocessing_context.Pipe()\n        process_array_.append(\n            multiprocessing_context.Process(\n                target=oe_process,\n                args=(\n                    i,\n                    arr[i],\n                    temp_ls,\n                    temp_rs,\n                    temp_lr,\n                    temp_rr,\n                    result_pipe[i],\n                    multiprocessing_context,\n                ),\n            )\n        )\n        temp_lr = temp_rs\n        temp_ls = temp_rr\n\n    process_array_.append(\n        multiprocessing_context.Process(\n            target=oe_process,\n            args=(\n                len(arr) - 1,\n                arr[len(arr) - 1],\n                temp_ls,\n                None,\n                temp_lr,\n                None,\n                result_pipe[len(arr) - 1],\n                multiprocessing_context,\n            ),\n        )\n    )\n\n    # start the processes\n    for p in process_array_:\n        p.start()\n\n    # wait for the processes to end and write their values to the list\n    for p in range(len(result_pipe)):\n        arr[p] = result_pipe[p][0].recv()\n        process_array_[p].join()\n    return arr\n\n\n# creates a reverse sorted list and sorts it\ndef main():\n    arr = list(range(10, 0, -1))\n    print(\"Initial List\")\n    print(*arr)\n    arr = odd_even_transposition(arr)\n    print(\"Sorted List\\n\")\n    print(*arr)\n\n\nif __name__ == \"__main__\":\n    main()\n\n```"}], "metadata": {"prompt_id": "00000065", "row_id": 65, "seed_ids": [203], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nfrom __future__ import annotations\n\n\"\"\"\n    Calculate the frequency and/or duty cycle of an astable 555 timer.\n    * https://en.wikipedia.org/wiki/555_timer_IC#Astable\n\n    These functions take in the value of the external resistances (in ohms)\n    and capacitance (in Microfarad), and calculates the following:\n\n    -------------------------------------\n    | Freq = 1.44 /[( R1+ 2 x R2) x C1] |               ... in Hz\n    -------------------------------------\n    where Freq is the frequency,\n          R1 is the first resistance in ohms,\n          R2 is the second resistance in ohms,\n          C1 is the capacitance in Microfarads.\n\n    ------------------------------------------------\n    | Duty Cycle = (R1 + R2) / (R1 + 2 x R2) x 100 |    ... in %\n    ------------------------------------------------\n    where R1 is the first resistance in ohms,\n          R2 is the second resistance in ohms.\n\"\"\"\n\n\ndef astable_frequency(\n    resistance_1: float, resistance_2: float, capacitance: float\n) -> float:\n    \"\"\"\n    Usage examples:\n    >>> astable_frequency(resistance_1=45, resistance_2=45, capacitance=7)\n    1523.8095238095239\n    >>> astable_frequency(resistance_1=356, resistance_2=234, capacitance=976)\n    1.7905459175553078\n    >>> astable_frequency(resistance_1=2, resistance_2=-1, capacitance=2)\n    Traceback (most recent call last):\n        ...\n    ValueError: All values must be positive\n    >>> astable_frequency(resistance_1=45, resistance_2=45, capacitance=0)\n    Traceback (most recent call last):\n        ...\n    ValueError: All values must be positive\n    \"\"\"\n\n    if resistance_1 <= 0 or resistance_2 <= 0 or capacitance <= 0:\n        raise ValueError(\"All values must be positive\")\n    return (1.44 / ((resistance_1 + 2 * resistance_2) * capacitance)) * 10**6\n\n\ndef astable_duty_cycle(resistance_1: float, resistance_2: float) -> float:\n    \"\"\"\n    Usage examples:\n    >>> astable_duty_cycle(resistance_1=45, resistance_2=45)\n    66.66666666666666\n    >>> astable_duty_cycle(resistance_1=356, resistance_2=234)\n    71.60194174757282\n    >>> astable_duty_cycle(resistance_1=2, resistance_2=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: All values must be positive\n    >>> astable_duty_cycle(resistance_1=0, resistance_2=0)\n    Traceback (most recent call last):\n        ...\n    ValueError: All values must be positive\n    \"\"\"\n\n    if resistance_1 <= 0 or resistance_2 <= 0:\n        raise ValueError(\"All values must be positive\")\n    return (resistance_1 + resistance_2) / (resistance_1 + 2 * resistance_2) * 100\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000066", "row_id": 66, "seed_ids": [193], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nProject Euler Problem 8: https://projecteuler.net/problem=8\n\nLargest product in a series\n\nThe four adjacent digits in the 1000-digit number that have the greatest\nproduct are 9 x 9 x 8 x 9 = 5832.\n\n    73167176531330624919225119674426574742355349194934\n    96983520312774506326239578318016984801869478851843\n    85861560789112949495459501737958331952853208805511\n    12540698747158523863050715693290963295227443043557\n    66896648950445244523161731856403098711121722383113\n    62229893423380308135336276614282806444486645238749\n    30358907296290491560440772390713810515859307960866\n    70172427121883998797908792274921901699720888093776\n    65727333001053367881220235421809751254540594752243\n    52584907711670556013604839586446706324415722155397\n    53697817977846174064955149290862569321978468622482\n    83972241375657056057490261407972968652414535100474\n    82166370484403199890008895243450658541227588666881\n    16427171479924442928230863465674813919123162824586\n    17866458359124566529476545682848912883142607690042\n    24219022671055626321111109370544217506941658960408\n    07198403850962455444362981230987879927244284909188\n    84580156166097919133875499200524063689912560717606\n    05886116467109405077541002256983155200055935729725\n    71636269561882670428252483600823257530420752963450\n\nFind the thirteen adjacent digits in the 1000-digit number that have the\ngreatest product. What is the value of this product?\n\"\"\"\n\nfrom functools import reduce\n\nN = (\n    \"73167176531330624919225119674426574742355349194934\"\n    \"96983520312774506326239578318016984801869478851843\"\n    \"85861560789112949495459501737958331952853208805511\"\n    \"12540698747158523863050715693290963295227443043557\"\n    \"66896648950445244523161731856403098711121722383113\"\n    \"62229893423380308135336276614282806444486645238749\"\n    \"30358907296290491560440772390713810515859307960866\"\n    \"70172427121883998797908792274921901699720888093776\"\n    \"65727333001053367881220235421809751254540594752243\"\n    \"52584907711670556013604839586446706324415722155397\"\n    \"53697817977846174064955149290862569321978468622482\"\n    \"83972241375657056057490261407972968652414535100474\"\n    \"82166370484403199890008895243450658541227588666881\"\n    \"16427171479924442928230863465674813919123162824586\"\n    \"17866458359124566529476545682848912883142607690042\"\n    \"24219022671055626321111109370544217506941658960408\"\n    \"07198403850962455444362981230987879927244284909188\"\n    \"84580156166097919133875499200524063689912560717606\"\n    \"05886116467109405077541002256983155200055935729725\"\n    \"71636269561882670428252483600823257530420752963450\"\n)\n\n\ndef solution(n: str = N) -> int:\n    \"\"\"\n    Find the thirteen adjacent digits in the 1000-digit number n that have\n    the greatest product and returns it.\n\n    >>> solution(\"13978431290823798458352374\")\n    609638400\n    >>> solution(\"13978431295823798458352374\")\n    2612736000\n    >>> solution(\"1397843129582379841238352374\")\n    209018880\n    \"\"\"\n\n    return max(\n        # mypy cannot properly interpret reduce\n        int(reduce(lambda x, y: str(int(x) * int(y)), n[i : i + 13]))\n        for i in range(len(n) - 12)\n    )\n\n\nif __name__ == \"__main__\":\n    print(f\"{solution() = }\")\n\n```"}], "metadata": {"prompt_id": "00000067", "row_id": 67, "seed_ids": [613], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nThis script demonstrates the implementation of the Binary Step function.\n\nIt's an activation function in which the neuron is activated if the input is positive\nor 0, else it is deactivated\n\nIt's a simple activation function which is mentioned in this wikipedia article:\nhttps://en.wikipedia.org/wiki/Activation_function\n\"\"\"\n\nimport numpy as np\n\n\ndef binary_step(vector: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Implements the binary step function\n\n    Parameters:\n        vector (ndarray): A vector that consists of numeric values\n\n    Returns:\n        vector (ndarray): Input vector after applying binary step function\n\n    >>> vector = np.array([-1.2, 0, 2, 1.45, -3.7, 0.3])\n    >>> binary_step(vector)\n    array([0, 1, 1, 1, 0, 1])\n    \"\"\"\n\n    return np.where(vector >= 0, 1, 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000068", "row_id": 68, "seed_ids": [910], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nfrom random import shuffle\n\nimport tensorflow as tf\nfrom numpy import array\n\n\ndef tf_k_means_cluster(vectors, noofclusters):\n    \"\"\"\n    K-Means Clustering using TensorFlow.\n    'vectors' should be a n*k 2-D NumPy array, where n is the number\n    of vectors of dimensionality k.\n    'noofclusters' should be an integer.\n    \"\"\"\n\n    noofclusters = int(noofclusters)\n    assert noofclusters < len(vectors)\n\n    # Find out the dimensionality\n    dim = len(vectors[0])\n\n    # Will help select random centroids from among the available vectors\n    vector_indices = list(range(len(vectors)))\n    shuffle(vector_indices)\n\n    # GRAPH OF COMPUTATION\n    # We initialize a new graph and set it as the default during each run\n    # of this algorithm. This ensures that as this function is called\n    # multiple times, the default graph doesn't keep getting crowded with\n    # unused ops and Variables from previous function calls.\n\n    graph = tf.Graph()\n\n    with graph.as_default():\n        # SESSION OF COMPUTATION\n\n        sess = tf.Session()\n\n        ##CONSTRUCTING THE ELEMENTS OF COMPUTATION\n\n        ##First lets ensure we have a Variable vector for each centroid,\n        ##initialized to one of the vectors from the available data points\n        centroids = [\n            tf.Variable(vectors[vector_indices[i]]) for i in range(noofclusters)\n        ]\n        ##These nodes will assign the centroid Variables the appropriate\n        ##values\n        centroid_value = tf.placeholder(\"float64\", [dim])\n        cent_assigns = []\n        for centroid in centroids:\n            cent_assigns.append(tf.assign(centroid, centroid_value))\n\n        ##Variables for cluster assignments of individual vectors(initialized\n        ##to 0 at first)\n        assignments = [tf.Variable(0) for i in range(len(vectors))]\n        ##These nodes will assign an assignment Variable the appropriate\n        ##value\n        assignment_value = tf.placeholder(\"int32\")\n        cluster_assigns = []\n        for assignment in assignments:\n            cluster_assigns.append(tf.assign(assignment, assignment_value))\n\n        ##Now lets construct the node that will compute the mean\n        # The placeholder for the input\n        mean_input = tf.placeholder(\"float\", [None, dim])\n        # The Node/op takes the input and computes a mean along the 0th\n        # dimension, i.e. the list of input vectors\n        mean_op = tf.reduce_mean(mean_input, 0)\n\n        ##Node for computing Euclidean distances\n        # Placeholders for input\n        v1 = tf.placeholder(\"float\", [dim])\n        v2 = tf.placeholder(\"float\", [dim])\n        euclid_dist = tf.sqrt(tf.reduce_sum(tf.pow(tf.sub(v1, v2), 2)))\n\n        ##This node will figure out which cluster to assign a vector to,\n        ##based on Euclidean distances of the vector from the centroids.\n        # Placeholder for input\n        centroid_distances = tf.placeholder(\"float\", [noofclusters])\n        cluster_assignment = tf.argmin(centroid_distances, 0)\n\n        ##INITIALIZING STATE VARIABLES\n\n        ##This will help initialization of all Variables defined with respect\n        ##to the graph. The Variable-initializer should be defined after\n        ##all the Variables have been constructed, so that each of them\n        ##will be included in the initialization.\n        init_op = tf.initialize_all_variables()\n\n        # Initialize all variables\n        sess.run(init_op)\n\n        ##CLUSTERING ITERATIONS\n\n        # Now perform the Expectation-Maximization steps of K-Means clustering\n        # iterations. To keep things simple, we will only do a set number of\n        # iterations, instead of using a Stopping Criterion.\n        noofiterations = 100\n        for _ in range(noofiterations):\n            ##EXPECTATION STEP\n            ##Based on the centroid locations till last iteration, compute\n            ##the _expected_ centroid assignments.\n            # Iterate over each vector\n            for vector_n in range(len(vectors)):\n                vect = vectors[vector_n]\n                # Compute Euclidean distance between this vector and each\n                # centroid. Remember that this list cannot be named\n                #'centroid_distances', since that is the input to the\n                # cluster assignment node.\n                distances = [\n                    sess.run(euclid_dist, feed_dict={v1: vect, v2: sess.run(centroid)})\n                    for centroid in centroids\n                ]\n                # Now use the cluster assignment node, with the distances\n                # as the input\n                assignment = sess.run(\n                    cluster_assignment, feed_dict={centroid_distances: distances}\n                )\n                # Now assign the value to the appropriate state variable\n                sess.run(\n                    cluster_assigns[vector_n], feed_dict={assignment_value: assignment}\n                )\n\n            ##MAXIMIZATION STEP\n            # Based on the expected state computed from the Expectation Step,\n            # compute the locations of the centroids so as to maximize the\n            # overall objective of minimizing within-cluster Sum-of-Squares\n            for cluster_n in range(noofclusters):\n                # Collect all the vectors assigned to this cluster\n                assigned_vects = [\n                    vectors[i]\n                    for i in range(len(vectors))\n                    if sess.run(assignments[i]) == cluster_n\n                ]\n                # Compute new centroid location\n                new_location = sess.run(\n                    mean_op, feed_dict={mean_input: array(assigned_vects)}\n                )\n                # Assign value to appropriate variable\n                sess.run(\n                    cent_assigns[cluster_n], feed_dict={centroid_value: new_location}\n                )\n\n        # Return centroids and assignments\n        centroids = sess.run(centroids)\n        assignments = sess.run(assignments)\n        return centroids, assignments\n\n```"}], "metadata": {"prompt_id": "00000069", "row_id": 69, "seed_ids": [18], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\ndef lower(word: str) -> str:\n    \"\"\"\n    Will convert the entire string to lowercase letters\n\n    >>> lower(\"wow\")\n    'wow'\n    >>> lower(\"HellZo\")\n    'hellzo'\n    >>> lower(\"WHAT\")\n    'what'\n    >>> lower(\"wh[]32\")\n    'wh[]32'\n    >>> lower(\"whAT\")\n    'what'\n    \"\"\"\n\n    # Converting to ASCII value, obtaining the integer representation\n    # and checking to see if the character is a capital letter.\n    # If it is a capital letter, it is shifted by 32, making it a lowercase letter.\n    return \"\".join(chr(ord(char) + 32) if \"A\" <= char <= \"Z\" else char for char in word)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n\n```"}], "metadata": {"prompt_id": "00000070", "row_id": 70, "seed_ids": [286], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nimport shutil\n\nimport requests\n\n\ndef get_apod_data(api_key: str) -> dict:\n    \"\"\"\n    Get the APOD(Astronomical Picture of the day) data\n    Get your API Key from: https://api.nasa.gov/\n    \"\"\"\n    url = \"https://api.nasa.gov/planetary/apod\"\n    return requests.get(url, params={\"api_key\": api_key}, timeout=10).json()\n\n\ndef save_apod(api_key: str, path: str = \".\") -> dict:\n    apod_data = get_apod_data(api_key)\n    img_url = apod_data[\"url\"]\n    img_name = img_url.split(\"/\")[-1]\n    response = requests.get(img_url, stream=True, timeout=10)\n\n    with open(f\"{path}/{img_name}\", \"wb+\") as img_file:\n        shutil.copyfileobj(response.raw, img_file)\n    del response\n    return apod_data\n\n\ndef get_archive_data(query: str) -> dict:\n    \"\"\"\n    Get the data of a particular query from NASA archives\n    \"\"\"\n    url = \"https://images-api.nasa.gov/search\"\n    return requests.get(url, params={\"q\": query}, timeout=10).json()\n\n\nif __name__ == \"__main__\":\n    print(save_apod(\"YOUR API KEY\"))\n    apollo_2011_items = get_archive_data(\"apollo 2011\")[\"collection\"][\"items\"]\n    print(apollo_2011_items[0][\"data\"][0][\"description\"])\n\n```"}], "metadata": {"prompt_id": "00000071", "row_id": 71, "seed_ids": [464], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nPeak signal-to-noise ratio - PSNR\n    https://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio\nSource:\nhttps://tutorials.techonical.com/how-to-calculate-psnr-value-of-two-images-using-python\n\"\"\"\n\nimport math\nimport os\n\nimport cv2\nimport numpy as np\n\nPIXEL_MAX = 255.0\n\n\ndef peak_signal_to_noise_ratio(original: float, contrast: float) -> float:\n    mse = np.mean((original - contrast) ** 2)\n    if mse == 0:\n        return 100\n\n    return 20 * math.log10(PIXEL_MAX / math.sqrt(mse))\n\n\ndef main() -> None:\n    dir_path = os.path.dirname(os.path.realpath(__file__))\n    # Loading images (original image and compressed image)\n    original = cv2.imread(os.path.join(dir_path, \"image_data/original_image.png\"))\n    contrast = cv2.imread(os.path.join(dir_path, \"image_data/compressed_image.png\"), 1)\n\n    original2 = cv2.imread(os.path.join(dir_path, \"image_data/PSNR-example-base.png\"))\n    contrast2 = cv2.imread(\n        os.path.join(dir_path, \"image_data/PSNR-example-comp-10.jpg\"), 1\n    )\n\n    # Value expected: 29.73dB\n    print(\"-- First Test --\")\n    print(f\"PSNR value is {peak_signal_to_noise_ratio(original, contrast)} dB\")\n\n    # # Value expected: 31.53dB (Wikipedia Example)\n    print(\"\\n-- Second Test --\")\n    print(f\"PSNR value is {peak_signal_to_noise_ratio(original2, contrast2)} dB\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n```"}], "metadata": {"prompt_id": "00000072", "row_id": 72, "seed_ids": [956], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nimport requests\nfrom bs4 import BeautifulSoup\n\n\ndef horoscope(zodiac_sign: int, day: str) -> str:\n    url = (\n        \"https://www.horoscope.com/us/horoscopes/general/\"\n        f\"horoscope-general-daily-{day}.aspx?sign={zodiac_sign}\"\n    )\n    soup = BeautifulSoup(requests.get(url, timeout=10).content, \"html.parser\")\n    return soup.find(\"div\", class_=\"main-horoscope\").p.text\n\n\nif __name__ == \"__main__\":\n    print(\"Daily Horoscope. \\n\")\n    print(\n        \"enter your Zodiac sign number:\\n\",\n        \"1. Aries\\n\",\n        \"2. Taurus\\n\",\n        \"3. Gemini\\n\",\n        \"4. Cancer\\n\",\n        \"5. Leo\\n\",\n        \"6. Virgo\\n\",\n        \"7. Libra\\n\",\n        \"8. Scorpio\\n\",\n        \"9. Sagittarius\\n\",\n        \"10. Capricorn\\n\",\n        \"11. Aquarius\\n\",\n        \"12. Pisces\\n\",\n    )\n    zodiac_sign = int(input(\"number> \").strip())\n    print(\"choose some day:\\n\", \"yesterday\\n\", \"today\\n\", \"tomorrow\\n\")\n    day = input(\"enter the day> \")\n    horoscope_text = horoscope(zodiac_sign, day)\n    print(horoscope_text)\n\n```"}], "metadata": {"prompt_id": "00000073", "row_id": 73, "seed_ids": [449], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nProject Euler problem 145: https://projecteuler.net/problem=145\nAuthor: Vineet Rao, Maxim Smolskiy\nProblem statement:\n\nSome positive integers n have the property that the sum [ n + reverse(n) ]\nconsists entirely of odd (decimal) digits.\nFor instance, 36 + 63 = 99 and 409 + 904 = 1313.\nWe will call such numbers reversible; so 36, 63, 409, and 904 are reversible.\nLeading zeroes are not allowed in either n or reverse(n).\n\nThere are 120 reversible numbers below one-thousand.\n\nHow many reversible numbers are there below one-billion (10^9)?\n\"\"\"\n\nEVEN_DIGITS = [0, 2, 4, 6, 8]\nODD_DIGITS = [1, 3, 5, 7, 9]\n\n\ndef slow_reversible_numbers(\n    remaining_length: int, remainder: int, digits: list[int], length: int\n) -> int:\n    \"\"\"\n    Count the number of reversible numbers of given length.\n    Iterate over possible digits considering parity of current sum remainder.\n    >>> slow_reversible_numbers(1, 0, [0], 1)\n    0\n    >>> slow_reversible_numbers(2, 0, [0] * 2, 2)\n    20\n    >>> slow_reversible_numbers(3, 0, [0] * 3, 3)\n    100\n    \"\"\"\n    if remaining_length == 0:\n        if digits[0] == 0 or digits[-1] == 0:\n            return 0\n\n        for i in range(length // 2 - 1, -1, -1):\n            remainder += digits[i] + digits[length - i - 1]\n\n            if remainder % 2 == 0:\n                return 0\n\n            remainder //= 10\n\n        return 1\n\n    if remaining_length == 1:\n        if remainder % 2 == 0:\n            return 0\n\n        result = 0\n        for digit in range(10):\n            digits[length // 2] = digit\n            result += slow_reversible_numbers(\n                0, (remainder + 2 * digit) // 10, digits, length\n            )\n        return result\n\n    result = 0\n    for digit1 in range(10):\n        digits[(length + remaining_length) // 2 - 1] = digit1\n\n        if (remainder + digit1) % 2 == 0:\n            other_parity_digits = ODD_DIGITS\n        else:\n            other_parity_digits = EVEN_DIGITS\n\n        for digit2 in other_parity_digits:\n            digits[(length - remaining_length) // 2] = digit2\n            result += slow_reversible_numbers(\n                remaining_length - 2,\n                (remainder + digit1 + digit2) // 10,\n                digits,\n                length,\n            )\n    return result\n\n\ndef slow_solution(max_power: int = 9) -> int:\n    \"\"\"\n    To evaluate the solution, use solution()\n    >>> slow_solution(3)\n    120\n    >>> slow_solution(6)\n    18720\n    >>> slow_solution(7)\n    68720\n    \"\"\"\n    result = 0\n    for length in range(1, max_power + 1):\n        result += slow_reversible_numbers(length, 0, [0] * length, length)\n    return result\n\n\ndef reversible_numbers(\n    remaining_length: int, remainder: int, digits: list[int], length: int\n) -> int:\n    \"\"\"\n    Count the number of reversible numbers of given length.\n    Iterate over possible digits considering parity of current sum remainder.\n    >>> reversible_numbers(1, 0, [0], 1)\n    0\n    >>> reversible_numbers(2, 0, [0] * 2, 2)\n    20\n    >>> reversible_numbers(3, 0, [0] * 3, 3)\n    100\n    \"\"\"\n    # There exist no reversible 1, 5, 9, 13 (ie. 4k+1) digit numbers\n    if (length - 1) % 4 == 0:\n        return 0\n\n    return slow_reversible_numbers(remaining_length, remainder, digits, length)\n\n\ndef solution(max_power: int = 9) -> int:\n    \"\"\"\n    To evaluate the solution, use solution()\n    >>> solution(3)\n    120\n    >>> solution(6)\n    18720\n    >>> solution(7)\n    68720\n    \"\"\"\n    result = 0\n    for length in range(1, max_power + 1):\n        result += reversible_numbers(length, 0, [0] * length, length)\n    return result\n\n\ndef benchmark() -> None:\n    \"\"\"\n    Benchmarks\n    \"\"\"\n    # Running performance benchmarks...\n    # slow_solution : 292.9300301000003\n    # solution      : 54.90970860000016\n\n    from timeit import timeit\n\n    print(\"Running performance benchmarks...\")\n\n    print(f\"slow_solution : {timeit('slow_solution()', globals=globals(), number=10)}\")\n    print(f\"solution      : {timeit('solution()', globals=globals(), number=10)}\")\n\n\nif __name__ == \"__main__\":\n    print(f\"Solution : {solution()}\")\n    benchmark()\n\n    # for i in range(1, 15):\n    #     print(f\"{i}. {reversible_numbers(i, 0, [0]*i, i)}\")\n\n```"}], "metadata": {"prompt_id": "00000074", "row_id": 74, "seed_ids": [578], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nfrom collections.abc import Sequence\n\n\ndef max_subsequence_sum(nums: Sequence[int] | None = None) -> int:\n    \"\"\"Return the maximum possible sum amongst all non - empty subsequences.\n\n    Raises:\n      ValueError: when nums is empty.\n\n    >>> max_subsequence_sum([1,2,3,4,-2])\n    10\n    >>> max_subsequence_sum([-2, -3, -1, -4, -6])\n    -1\n    >>> max_subsequence_sum([])\n    Traceback (most recent call last):\n        . . .\n    ValueError: Input sequence should not be empty\n    >>> max_subsequence_sum()\n    Traceback (most recent call last):\n        . . .\n    ValueError: Input sequence should not be empty\n    \"\"\"\n    if nums is None or not nums:\n        raise ValueError(\"Input sequence should not be empty\")\n\n    ans = nums[0]\n    for i in range(1, len(nums)):\n        num = nums[i]\n        ans = max(ans, ans + num, num)\n\n    return ans\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    # Try on a sample input from the user\n    n = int(input(\"Enter number of elements : \").strip())\n    array = list(map(int, input(\"\\nEnter the numbers : \").strip().split()))[:n]\n    print(max_subsequence_sum(array))\n\n```"}], "metadata": {"prompt_id": "00000075", "row_id": 75, "seed_ids": [979], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\ndef hex_to_bin(hex_num: str) -> int:\n    \"\"\"\n    Convert a hexadecimal value to its binary equivalent\n    #https://stackoverflow.com/questions/1425493/convert-hex-to-binary\n    Here, we have used the bitwise right shift operator: >>\n    Shifts the bits of the number to the right and fills 0 on voids left as a result.\n    Similar effect as of dividing the number with some power of two.\n    Example:\n    a = 10\n    a >> 1 = 5\n\n    >>> hex_to_bin(\"AC\")\n    10101100\n    >>> hex_to_bin(\"9A4\")\n    100110100100\n    >>> hex_to_bin(\"   12f   \")\n    100101111\n    >>> hex_to_bin(\"FfFf\")\n    1111111111111111\n    >>> hex_to_bin(\"-fFfF\")\n    -1111111111111111\n    >>> hex_to_bin(\"F-f\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid value was passed to the function\n    >>> hex_to_bin(\"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: No value was passed to the function\n    \"\"\"\n\n    hex_num = hex_num.strip()\n    if not hex_num:\n        raise ValueError(\"No value was passed to the function\")\n\n    is_negative = hex_num[0] == \"-\"\n    if is_negative:\n        hex_num = hex_num[1:]\n\n    try:\n        int_num = int(hex_num, 16)\n    except ValueError:\n        raise ValueError(\"Invalid value was passed to the function\")\n\n    bin_str = \"\"\n    while int_num > 0:\n        bin_str = str(int_num % 2) + bin_str\n        int_num >>= 1\n\n    return int((\"-\" + bin_str) if is_negative else bin_str)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000076", "row_id": 76, "seed_ids": [650], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\n== Liouville Lambda Function ==\nThe Liouville Lambda function, denoted by \u03bb(n)\nand \u03bb(n) is 1 if n is the product of an even number of prime numbers,\nand -1 if it is the product of an odd number of primes.\n\nhttps://en.wikipedia.org/wiki/Liouville_function\n\"\"\"\n\n# Author : Akshay Dubey (https://github.com/itsAkshayDubey)\nfrom maths.prime_factors import prime_factors\n\n\ndef liouville_lambda(number: int) -> int:\n    \"\"\"\n    This functions takes an integer number as input.\n    returns 1 if n has even number of prime factors and -1 otherwise.\n    >>> liouville_lambda(10)\n    1\n    >>> liouville_lambda(11)\n    -1\n    >>> liouville_lambda(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a positive integer\n    >>> liouville_lambda(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a positive integer\n    >>> liouville_lambda(11.0)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value of [number=11.0] must be an integer\n    \"\"\"\n    if not isinstance(number, int):\n        msg = f\"Input value of [number={number}] must be an integer\"\n        raise TypeError(msg)\n    if number < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    return -1 if len(prime_factors(number)) % 2 else 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000077", "row_id": 77, "seed_ids": [752], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nThis is used to convert the currency using the Amdoren Currency API\nhttps://www.amdoren.com\n\"\"\"\n\nimport os\n\nimport requests\n\nURL_BASE = \"https://www.amdoren.com/api/currency.php\"\n\n\n# Currency and their description\nlist_of_currencies = \"\"\"\nAED\tUnited Arab Emirates Dirham\nAFN\tAfghan Afghani\nALL\tAlbanian Lek\nAMD\tArmenian Dram\nANG\tNetherlands Antillean Guilder\nAOA\tAngolan Kwanza\nARS\tArgentine Peso\nAUD\tAustralian Dollar\nAWG\tAruban Florin\nAZN\tAzerbaijani Manat\nBAM\tBosnia & Herzegovina Convertible Mark\nBBD\tBarbadian Dollar\nBDT\tBangladeshi Taka\nBGN\tBulgarian Lev\nBHD\tBahraini Dinar\nBIF\tBurundian Franc\nBMD\tBermudian Dollar\nBND\tBrunei Dollar\nBOB\tBolivian Boliviano\nBRL\tBrazilian Real\nBSD\tBahamian Dollar\nBTN\tBhutanese Ngultrum\nBWP\tBotswana Pula\nBYN\tBelarus Ruble\nBZD\tBelize Dollar\nCAD\tCanadian Dollar\nCDF\tCongolese Franc\nCHF\tSwiss Franc\nCLP\tChilean Peso\nCNY\tChinese Yuan\nCOP\tColombian Peso\nCRC\tCosta Rican Colon\nCUC\tCuban Convertible Peso\nCVE\tCape Verdean Escudo\nCZK\tCzech Republic Koruna\nDJF\tDjiboutian Franc\nDKK\tDanish Krone\nDOP\tDominican Peso\nDZD\tAlgerian Dinar\nEGP\tEgyptian Pound\nERN\tEritrean Nakfa\nETB\tEthiopian Birr\nEUR\tEuro\nFJD\tFiji Dollar\nGBP\tBritish Pound Sterling\nGEL\tGeorgian Lari\nGHS\tGhanaian Cedi\nGIP\tGibraltar Pound\nGMD\tGambian Dalasi\nGNF\tGuinea Franc\nGTQ\tGuatemalan Quetzal\nGYD\tGuyanaese Dollar\nHKD\tHong Kong Dollar\nHNL\tHonduran Lempira\nHRK\tCroatian Kuna\nHTG\tHaiti Gourde\nHUF\tHungarian Forint\nIDR\tIndonesian Rupiah\nILS\tIsraeli Shekel\nINR\tIndian Rupee\nIQD\tIraqi Dinar\nIRR\tIranian Rial\nISK\tIcelandic Krona\nJMD\tJamaican Dollar\nJOD\tJordanian Dinar\nJPY\tJapanese Yen\nKES\tKenyan Shilling\nKGS\tKyrgystani Som\nKHR\tCambodian Riel\nKMF\tComorian Franc\nKPW\tNorth Korean Won\nKRW\tSouth Korean Won\nKWD\tKuwaiti Dinar\nKYD\tCayman Islands Dollar\nKZT\tKazakhstan Tenge\nLAK\tLaotian Kip\nLBP\tLebanese Pound\nLKR\tSri Lankan Rupee\nLRD\tLiberian Dollar\nLSL\tLesotho Loti\nLYD\tLibyan Dinar\nMAD\tMoroccan Dirham\nMDL\tMoldovan Leu\nMGA\tMalagasy Ariary\nMKD\tMacedonian Denar\nMMK\tMyanma Kyat\nMNT\tMongolian Tugrik\nMOP\tMacau Pataca\nMRO\tMauritanian Ouguiya\nMUR\tMauritian Rupee\nMVR\tMaldivian Rufiyaa\nMWK\tMalawi Kwacha\nMXN\tMexican Peso\nMYR\tMalaysian Ringgit\nMZN\tMozambican Metical\nNAD\tNamibian Dollar\nNGN\tNigerian Naira\nNIO\tNicaragua Cordoba\nNOK\tNorwegian Krone\nNPR\tNepalese Rupee\nNZD\tNew Zealand Dollar\nOMR\tOmani Rial\nPAB\tPanamanian Balboa\nPEN\tPeruvian Nuevo Sol\nPGK\tPapua New Guinean Kina\nPHP\tPhilippine Peso\nPKR\tPakistani Rupee\nPLN\tPolish Zloty\nPYG\tParaguayan Guarani\nQAR\tQatari Riyal\nRON\tRomanian Leu\nRSD\tSerbian Dinar\nRUB\tRussian Ruble\nRWF\tRwanda Franc\nSAR\tSaudi Riyal\nSBD\tSolomon Islands Dollar\nSCR\tSeychellois Rupee\nSDG\tSudanese Pound\nSEK\tSwedish Krona\nSGD\tSingapore Dollar\nSHP\tSaint Helena Pound\nSLL\tSierra Leonean Leone\nSOS\tSomali Shilling\nSRD\tSurinamese Dollar\nSSP\tSouth Sudanese Pound\nSTD\tSao Tome and Principe Dobra\nSYP\tSyrian Pound\nSZL\tSwazi Lilangeni\nTHB\tThai Baht\nTJS\tTajikistan Somoni\nTMT\tTurkmenistani Manat\nTND\tTunisian Dinar\nTOP\tTonga Paanga\nTRY\tTurkish Lira\nTTD\tTrinidad and Tobago Dollar\nTWD\tNew Taiwan Dollar\nTZS\tTanzanian Shilling\nUAH\tUkrainian Hryvnia\nUGX\tUgandan Shilling\nUSD\tUnited States Dollar\nUYU\tUruguayan Peso\nUZS\tUzbekistan Som\nVEF\tVenezuelan Bolivar\nVND\tVietnamese Dong\nVUV\tVanuatu Vatu\nWST\tSamoan Tala\nXAF\tCentral African CFA franc\nXCD\tEast Caribbean Dollar\nXOF\tWest African CFA franc\nXPF\tCFP Franc\nYER\tYemeni Rial\nZAR\tSouth African Rand\nZMW\tZambian Kwacha\n\"\"\"\n\n\ndef convert_currency(\n    from_: str = \"USD\", to: str = \"INR\", amount: float = 1.0, api_key: str = \"\"\n) -> str:\n    \"\"\"https://www.amdoren.com/currency-api/\"\"\"\n    # Instead of manually generating parameters\n    params = locals()\n    # from is a reserved keyword\n    params[\"from\"] = params.pop(\"from_\")\n    res = requests.get(URL_BASE, params=params, timeout=10).json()\n    return str(res[\"amount\"]) if res[\"error\"] == 0 else res[\"error_message\"]\n\n\nif __name__ == \"__main__\":\n    TESTING = os.getenv(\"CI\", \"\")\n    API_KEY = os.getenv(\"AMDOREN_API_KEY\", \"\")\n\n    if not API_KEY and not TESTING:\n        raise KeyError(\n            \"API key must be provided in the 'AMDOREN_API_KEY' environment variable.\"\n        )\n\n    print(\n        convert_currency(\n            input(\"Enter from currency: \").strip(),\n            input(\"Enter to currency: \").strip(),\n            float(input(\"Enter the amount: \").strip()),\n            API_KEY,\n        )\n    )\n\n```"}], "metadata": {"prompt_id": "00000078", "row_id": 78, "seed_ids": [455], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nWiggle Sort.\n\nGiven an unsorted array nums, reorder it such\nthat nums[0] < nums[1] > nums[2] < nums[3]....\nFor example:\nif input numbers = [3, 5, 2, 1, 6, 4]\none possible Wiggle Sorted answer is [3, 5, 1, 6, 2, 4].\n\"\"\"\n\n\ndef wiggle_sort(nums: list) -> list:\n    \"\"\"\n    Python implementation of wiggle.\n    Example:\n    >>> wiggle_sort([0, 5, 3, 2, 2])\n    [0, 5, 2, 3, 2]\n    >>> wiggle_sort([])\n    []\n    >>> wiggle_sort([-2, -5, -45])\n    [-45, -2, -5]\n    >>> wiggle_sort([-2.1, -5.68, -45.11])\n    [-45.11, -2.1, -5.68]\n    \"\"\"\n    for i, _ in enumerate(nums):\n        if (i % 2 == 1) == (nums[i - 1] > nums[i]):\n            nums[i - 1], nums[i] = nums[i], nums[i - 1]\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    print(\"Enter the array elements:\")\n    array = list(map(int, input().split()))\n    print(\"The unsorted array is:\")\n    print(array)\n    print(\"Array after Wiggle sort:\")\n    print(wiggle_sort(array))\n\n```"}], "metadata": {"prompt_id": "00000079", "row_id": 79, "seed_ids": [218], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\n== Automorphic Numbers ==\nA number n is said to be a Automorphic number if\nthe square of n \"ends\" in the same digits as n itself.\n\nExamples of Automorphic Numbers: 0, 1, 5, 6, 25, 76, 376, 625, 9376, 90625, ...\nhttps://en.wikipedia.org/wiki/Automorphic_number\n\"\"\"\n\n# Author : Akshay Dubey (https://github.com/itsAkshayDubey)\n# Time Complexity : O(log10n)\n\n\ndef is_automorphic_number(number: int) -> bool:\n    \"\"\"\n    # doctest: +NORMALIZE_WHITESPACE\n    This functions takes an integer number as input.\n    returns True if the number is automorphic.\n    >>> is_automorphic_number(-1)\n    False\n    >>> is_automorphic_number(0)\n    True\n    >>> is_automorphic_number(5)\n    True\n    >>> is_automorphic_number(6)\n    True\n    >>> is_automorphic_number(7)\n    False\n    >>> is_automorphic_number(25)\n    True\n    >>> is_automorphic_number(259918212890625)\n    True\n    >>> is_automorphic_number(259918212890636)\n    False\n    >>> is_automorphic_number(740081787109376)\n    True\n    >>> is_automorphic_number(5.0)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value of [number=5.0] must be an integer\n    \"\"\"\n    if not isinstance(number, int):\n        msg = f\"Input value of [number={number}] must be an integer\"\n        raise TypeError(msg)\n    if number < 0:\n        return False\n    number_square = number * number\n    while number > 0:\n        if number % 10 != number_square % 10:\n            return False\n        number //= 10\n        number_square //= 10\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000080", "row_id": 80, "seed_ids": [802], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nProject Euler Problem 91: https://projecteuler.net/problem=91\n\nThe points P (x1, y1) and Q (x2, y2) are plotted at integer coordinates and\nare joined to the origin, O(0,0), to form \u0394OPQ.\n\ufffc\nThere are exactly fourteen triangles containing a right angle that can be formed\nwhen each coordinate lies between 0 and 2 inclusive; that is,\n0 \u2264 x1, y1, x2, y2 \u2264 2.\n\ufffc\nGiven that 0 \u2264 x1, y1, x2, y2 \u2264 50, how many right triangles can be formed?\n\"\"\"\n\nfrom itertools import combinations, product\n\n\ndef is_right(x1: int, y1: int, x2: int, y2: int) -> bool:\n    \"\"\"\n    Check if the triangle described by P(x1,y1), Q(x2,y2) and O(0,0) is right-angled.\n    Note: this doesn't check if P and Q are equal, but that's handled by the use of\n    itertools.combinations in the solution function.\n\n    >>> is_right(0, 1, 2, 0)\n    True\n    >>> is_right(1, 0, 2, 2)\n    False\n    \"\"\"\n    if x1 == y1 == 0 or x2 == y2 == 0:\n        return False\n    a_square = x1 * x1 + y1 * y1\n    b_square = x2 * x2 + y2 * y2\n    c_square = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)\n    return (\n        a_square + b_square == c_square\n        or a_square + c_square == b_square\n        or b_square + c_square == a_square\n    )\n\n\ndef solution(limit: int = 50) -> int:\n    \"\"\"\n    Return the number of right triangles OPQ that can be formed by two points P, Q\n    which have both x- and y- coordinates between 0 and limit inclusive.\n\n    >>> solution(2)\n    14\n    >>> solution(10)\n    448\n    \"\"\"\n    return sum(\n        1\n        for pt1, pt2 in combinations(product(range(limit + 1), repeat=2), 2)\n        if is_right(*pt1, *pt2)\n    )\n\n\nif __name__ == \"__main__\":\n    print(f\"{solution() = }\")\n\n```"}], "metadata": {"prompt_id": "00000081", "row_id": 81, "seed_ids": [611], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nLCS Problem Statement: Given two sequences, find the length of longest subsequence\npresent in both of them.  A subsequence is a sequence that appears in the same relative\norder, but not necessarily continuous.\nExample:\"abc\", \"abg\" are subsequences of \"abcdefgh\".\n\"\"\"\n\n\ndef longest_common_subsequence(x: str, y: str):\n    \"\"\"\n    Finds the longest common subsequence between two strings. Also returns the\n    The subsequence found\n\n    Parameters\n    ----------\n\n    x: str, one of the strings\n    y: str, the other string\n\n    Returns\n    -------\n    L[m][n]: int, the length of the longest subsequence. Also equal to len(seq)\n    Seq: str, the subsequence found\n\n    >>> longest_common_subsequence(\"programming\", \"gaming\")\n    (6, 'gaming')\n    >>> longest_common_subsequence(\"physics\", \"smartphone\")\n    (2, 'ph')\n    >>> longest_common_subsequence(\"computer\", \"food\")\n    (1, 'o')\n    >>> longest_common_subsequence(\"\", \"abc\")  # One string is empty\n    (0, '')\n    >>> longest_common_subsequence(\"abc\", \"\")  # Other string is empty\n    (0, '')\n    >>> longest_common_subsequence(\"\", \"\")  # Both strings are empty\n    (0, '')\n    >>> longest_common_subsequence(\"abc\", \"def\")  # No common subsequence\n    (0, '')\n    >>> longest_common_subsequence(\"abc\", \"abc\")  # Identical strings\n    (3, 'abc')\n    >>> longest_common_subsequence(\"a\", \"a\")  # Single character match\n    (1, 'a')\n    >>> longest_common_subsequence(\"a\", \"b\")  # Single character no match\n    (0, '')\n    >>> longest_common_subsequence(\"abcdef\", \"ace\")  # Interleaved subsequence\n    (3, 'ace')\n    >>> longest_common_subsequence(\"ABCD\", \"ACBD\")  # No repeated characters\n    (3, 'ABD')\n    \"\"\"\n    # find the length of strings\n\n    assert x is not None\n    assert y is not None\n\n    m = len(x)\n    n = len(y)\n\n    # declaring the array for storing the dp values\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            match = 1 if x[i - 1] == y[j - 1] else 0\n\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1] + match)\n\n    seq = \"\"\n    i, j = m, n\n    while i > 0 and j > 0:\n        match = 1 if x[i - 1] == y[j - 1] else 0\n\n        if dp[i][j] == dp[i - 1][j - 1] + match:\n            if match == 1:\n                seq = x[i - 1] + seq\n            i -= 1\n            j -= 1\n        elif dp[i][j] == dp[i - 1][j]:\n            i -= 1\n        else:\n            j -= 1\n\n    return dp[m][n], seq\n\n\nif __name__ == \"__main__\":\n    a = \"AGGTAB\"\n    b = \"GXTXAYB\"\n    expected_ln = 4\n    expected_subseq = \"GTAB\"\n\n    ln, subseq = longest_common_subsequence(a, b)\n    print(\"len =\", ln, \", sub-sequence =\", subseq)\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000082", "row_id": 82, "seed_ids": [28], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nimport os\nfrom itertools import chain\nfrom random import randrange, shuffle\n\nimport pytest\n\nfrom .sol1 import PokerHand\n\nSORTED_HANDS = (\n    \"4S 3H 2C 7S 5H\",\n    \"9D 8H 2C 6S 7H\",\n    \"2D 6D 9D TH 7D\",\n    \"TC 8C 2S JH 6C\",\n    \"JH 8S TH AH QH\",\n    \"TS KS 5S 9S AC\",\n    \"KD 6S 9D TH AD\",\n    \"KS 8D 4D 9S 4S\",  # pair\n    \"8C 4S KH JS 4D\",  # pair\n    \"QH 8H KD JH 8S\",  # pair\n    \"KC 4H KS 2H 8D\",  # pair\n    \"KD 4S KC 3H 8S\",  # pair\n    \"AH 8S AS KC JH\",  # pair\n    \"3H 4C 4H 3S 2H\",  # 2 pairs\n    \"5S 5D 2C KH KH\",  # 2 pairs\n    \"3C KH 5D 5S KH\",  # 2 pairs\n    \"AS 3C KH AD KH\",  # 2 pairs\n    \"7C 7S 3S 7H 5S\",  # 3 of a kind\n    \"7C 7S KH 2H 7H\",  # 3 of a kind\n    \"AC KH QH AH AS\",  # 3 of a kind\n    \"2H 4D 3C AS 5S\",  # straight (low ace)\n    \"3C 5C 4C 2C 6H\",  # straight\n    \"6S 8S 7S 5H 9H\",  # straight\n    \"JS QS 9H TS KH\",  # straight\n    \"QC KH TS JS AH\",  # straight (high ace)\n    \"8C 9C 5C 3C TC\",  # flush\n    \"3S 8S 9S 5S KS\",  # flush\n    \"4C 5C 9C 8C KC\",  # flush\n    \"JH 8H AH KH QH\",  # flush\n    \"3D 2H 3H 2C 2D\",  # full house\n    \"2H 2C 3S 3H 3D\",  # full house\n    \"KH KC 3S 3H 3D\",  # full house\n    \"JC 6H JS JD JH\",  # 4 of a kind\n    \"JC 7H JS JD JH\",  # 4 of a kind\n    \"JC KH JS JD JH\",  # 4 of a kind\n    \"2S AS 4S 5S 3S\",  # straight flush (low ace)\n    \"2D 6D 3D 4D 5D\",  # straight flush\n    \"5C 6C 3C 7C 4C\",  # straight flush\n    \"JH 9H TH KH QH\",  # straight flush\n    \"JH AH TH KH QH\",  # royal flush (high ace straight flush)\n)\n\nTEST_COMPARE = (\n    (\"2H 3H 4H 5H 6H\", \"KS AS TS QS JS\", \"Loss\"),\n    (\"2H 3H 4H 5H 6H\", \"AS AD AC AH JD\", \"Win\"),\n    (\"AS AH 2H AD AC\", \"JS JD JC JH 3D\", \"Win\"),\n    (\"2S AH 2H AS AC\", \"JS JD JC JH AD\", \"Loss\"),\n    (\"2S AH 2H AS AC\", \"2H 3H 5H 6H 7H\", \"Win\"),\n    (\"AS 3S 4S 8S 2S\", \"2H 3H 5H 6H 7H\", \"Win\"),\n    (\"2H 3H 5H 6H 7H\", \"2S 3H 4H 5S 6C\", \"Win\"),\n    (\"2S 3H 4H 5S 6C\", \"3D 4C 5H 6H 2S\", \"Tie\"),\n    (\"2S 3H 4H 5S 6C\", \"AH AC 5H 6H AS\", \"Win\"),\n    (\"2S 2H 4H 5S 4C\", \"AH AC 5H 6H AS\", \"Loss\"),\n    (\"2S 2H 4H 5S 4C\", \"AH AC 5H 6H 7S\", \"Win\"),\n    (\"6S AD 7H 4S AS\", \"AH AC 5H 6H 7S\", \"Loss\"),\n    (\"2S AH 4H 5S KC\", \"AH AC 5H 6H 7S\", \"Loss\"),\n    (\"2S 3H 6H 7S 9C\", \"7H 3C TH 6H 9S\", \"Loss\"),\n    (\"4S 5H 6H TS AC\", \"3S 5H 6H TS AC\", \"Win\"),\n    (\"2S AH 4H 5S 6C\", \"AD 4C 5H 6H 2C\", \"Tie\"),\n    (\"AS AH 3H AD AC\", \"AS AH 2H AD AC\", \"Win\"),\n    (\"AH AC 5H 5C QS\", \"AH AC 5H 5C KS\", \"Loss\"),\n    (\"AH AC 5H 5C QS\", \"KH KC 5H 5C QS\", \"Win\"),\n    (\"7C 7S KH 2H 7H\", \"3C 3S AH 2H 3H\", \"Win\"),\n    (\"3C 3S AH 2H 3H\", \"7C 7S KH 2H 7H\", \"Loss\"),\n    (\"6H 5H 4H 3H 2H\", \"5H 4H 3H 2H AH\", \"Win\"),\n    (\"5H 4H 3H 2H AH\", \"5H 4H 3H 2H AH\", \"Tie\"),\n    (\"5H 4H 3H 2H AH\", \"6H 5H 4H 3H 2H\", \"Loss\"),\n    (\"AH AD KS KC AC\", \"AH KD KH AC KC\", \"Win\"),\n    (\"2H 4D 3C AS 5S\", \"2H 4D 3C 6S 5S\", \"Loss\"),\n    (\"2H 3S 3C 3H 2S\", \"3S 3C 2S 2H 2D\", \"Win\"),\n    (\"4D 6D 5D 2D JH\", \"3S 8S 3H TC KH\", \"Loss\"),\n    (\"4S 6C 8S 3S 7S\", \"AD KS 2D 7D 7C\", \"Loss\"),\n    (\"6S 4C 7H 8C 3H\", \"5H JC AH 9D 9C\", \"Loss\"),\n    (\"9D 9H JH TC QH\", \"3C 2S JS 5C 7H\", \"Win\"),\n    (\"2H TC 8S AD 9S\", \"4H TS 7H 2C 5C\", \"Win\"),\n    (\"9D 3S 2C 7S 7C\", \"JC TD 3C TC 9H\", \"Loss\"),\n)\n\nTEST_FLUSH = (\n    (\"2H 3H 4H 5H 6H\", True),\n    (\"AS AH 2H AD AC\", False),\n    (\"2H 3H 5H 6H 7H\", True),\n    (\"KS AS TS QS JS\", True),\n    (\"8H 9H QS JS TH\", False),\n    (\"AS 3S 4S 8S 2S\", True),\n)\n\nTEST_STRAIGHT = (\n    (\"2H 3H 4H 5H 6H\", True),\n    (\"AS AH 2H AD AC\", False),\n    (\"2H 3H 5H 6H 7H\", False),\n    (\"KS AS TS QS JS\", True),\n    (\"8H 9H QS JS TH\", True),\n)\n\nTEST_FIVE_HIGH_STRAIGHT = (\n    (\"2H 4D 3C AS 5S\", True, [5, 4, 3, 2, 14]),\n    (\"2H 5D 3C AS 5S\", False, [14, 5, 5, 3, 2]),\n    (\"JH QD KC AS TS\", False, [14, 13, 12, 11, 10]),\n    (\"9D 3S 2C 7S 7C\", False, [9, 7, 7, 3, 2]),\n)\n\nTEST_KIND = (\n    (\"JH AH TH KH QH\", 0),\n    (\"JH 9H TH KH QH\", 0),\n    (\"JC KH JS JD JH\", 7),\n    (\"KH KC 3S 3H 3D\", 6),\n    (\"8C 9C 5C 3C TC\", 0),\n    (\"JS QS 9H TS KH\", 0),\n    (\"7C 7S KH 2H 7H\", 3),\n    (\"3C KH 5D 5S KH\", 2),\n    (\"QH 8H KD JH 8S\", 1),\n    (\"2D 6D 9D TH 7D\", 0),\n)\n\nTEST_TYPES = (\n    (\"JH AH TH KH QH\", 23),\n    (\"JH 9H TH KH QH\", 22),\n    (\"JC KH JS JD JH\", 21),\n    (\"KH KC 3S 3H 3D\", 20),\n    (\"8C 9C 5C 3C TC\", 19),\n    (\"JS QS 9H TS KH\", 18),\n    (\"7C 7S KH 2H 7H\", 17),\n    (\"3C KH 5D 5S KH\", 16),\n    (\"QH 8H KD JH 8S\", 15),\n    (\"2D 6D 9D TH 7D\", 14),\n)\n\n\ndef generate_random_hand():\n    play, oppo = randrange(len(SORTED_HANDS)), randrange(len(SORTED_HANDS))\n    expected = [\"Loss\", \"Tie\", \"Win\"][(play >= oppo) + (play > oppo)]\n    hand, other = SORTED_HANDS[play], SORTED_HANDS[oppo]\n    return hand, other, expected\n\n\ndef generate_random_hands(number_of_hands: int = 100):\n    return (generate_random_hand() for _ in range(number_of_hands))\n\n\n@pytest.mark.parametrize((\"hand\", \"expected\"), TEST_FLUSH)\ndef test_hand_is_flush(hand, expected):\n    assert PokerHand(hand)._is_flush() == expected\n\n\n@pytest.mark.parametrize((\"hand\", \"expected\"), TEST_STRAIGHT)\ndef test_hand_is_straight(hand, expected):\n    assert PokerHand(hand)._is_straight() == expected\n\n\n@pytest.mark.parametrize((\"hand\", \"expected\", \"card_values\"), TEST_FIVE_HIGH_STRAIGHT)\ndef test_hand_is_five_high_straight(hand, expected, card_values):\n    player = PokerHand(hand)\n    assert player._is_five_high_straight() == expected\n    assert player._card_values == card_values\n\n\n@pytest.mark.parametrize((\"hand\", \"expected\"), TEST_KIND)\ndef test_hand_is_same_kind(hand, expected):\n    assert PokerHand(hand)._is_same_kind() == expected\n\n\n@pytest.mark.parametrize((\"hand\", \"expected\"), TEST_TYPES)\ndef test_hand_values(hand, expected):\n    assert PokerHand(hand)._hand_type == expected\n\n\n@pytest.mark.parametrize((\"hand\", \"other\", \"expected\"), TEST_COMPARE)\ndef test_compare_simple(hand, other, expected):\n    assert PokerHand(hand).compare_with(PokerHand(other)) == expected\n\n\n@pytest.mark.parametrize((\"hand\", \"other\", \"expected\"), generate_random_hands())\ndef test_compare_random(hand, other, expected):\n    assert PokerHand(hand).compare_with(PokerHand(other)) == expected\n\n\ndef test_hand_sorted():\n    poker_hands = [PokerHand(hand) for hand in SORTED_HANDS]\n    list_copy = poker_hands.copy()\n    shuffle(list_copy)\n    user_sorted = chain(sorted(list_copy))\n    for index, hand in enumerate(user_sorted):\n        assert hand == poker_hands[index]\n\n\ndef test_custom_sort_five_high_straight():\n    # Test that five high straights are compared correctly.\n    pokerhands = [PokerHand(\"2D AC 3H 4H 5S\"), PokerHand(\"2S 3H 4H 5S 6C\")]\n    pokerhands.sort(reverse=True)\n    assert pokerhands[0].__str__() == \"2S 3H 4H 5S 6C\"\n\n\ndef test_multiple_calls_five_high_straight():\n    # Multiple calls to five_high_straight function should still return True\n    # and shouldn't mutate the list in every call other than the first.\n    pokerhand = PokerHand(\"2C 4S AS 3D 5C\")\n    expected = True\n    expected_card_values = [5, 4, 3, 2, 14]\n    for _ in range(10):\n        assert pokerhand._is_five_high_straight() == expected\n        assert pokerhand._card_values == expected_card_values\n\n\ndef test_euler_project():\n    # Problem number 54 from Project Euler\n    # Testing from poker_hands.txt file\n    answer = 0\n    script_dir = os.path.abspath(os.path.dirname(__file__))\n    poker_hands = os.path.join(script_dir, \"poker_hands.txt\")\n    with open(poker_hands) as file_hand:\n        for line in file_hand:\n            player_hand = line[:14].strip()\n            opponent_hand = line[15:].strip()\n            player, opponent = PokerHand(player_hand), PokerHand(opponent_hand)\n            output = player.compare_with(opponent)\n            if output == \"Win\":\n                answer += 1\n    assert answer == 376\n\n```"}], "metadata": {"prompt_id": "00000083", "row_id": 83, "seed_ids": [599], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nProject Euler Problem 70: https://projecteuler.net/problem=70\n\nEuler's Totient function, \u03c6(n) [sometimes called the phi function], is used to\ndetermine the number of positive numbers less than or equal to n which are\nrelatively prime to n. For example, as 1, 2, 4, 5, 7, and 8, are all less than\nnine and relatively prime to nine, \u03c6(9)=6.\n\nThe number 1 is considered to be relatively prime to every positive number, so\n\u03c6(1)=1.\n\nInterestingly, \u03c6(87109)=79180, and it can be seen that 87109 is a permutation\nof 79180.\n\nFind the value of n, 1 < n < 10^7, for which \u03c6(n) is a permutation of n and\nthe ratio n/\u03c6(n) produces a minimum.\n\n-----\n\nThis is essentially brute force. Calculate all totients up to 10^7 and\nfind the minimum ratio of n/\u03c6(n) that way. To minimize the ratio, we want\nto minimize n and maximize \u03c6(n) as much as possible, so we can store the\nminimum fraction's numerator and denominator and calculate new fractions\nwith each totient to compare against. To avoid dividing by zero, I opt to\nuse cross multiplication.\n\nReferences:\nFinding totients\nhttps://en.wikipedia.org/wiki/Euler's_totient_function#Euler's_product_formula\n\"\"\"\n\nfrom __future__ import annotations\n\nimport numpy as np\n\n\ndef get_totients(max_one: int) -> list[int]:\n    \"\"\"\n    Calculates a list of totients from 0 to max_one exclusive, using the\n    definition of Euler's product formula.\n\n    >>> get_totients(5)\n    [0, 1, 1, 2, 2]\n\n    >>> get_totients(10)\n    [0, 1, 1, 2, 2, 4, 2, 6, 4, 6]\n    \"\"\"\n    totients = np.arange(max_one)\n\n    for i in range(2, max_one):\n        if totients[i] == i:\n            x = np.arange(i, max_one, i)  # array of indexes to select\n            totients[x] -= totients[x] // i\n\n    return totients.tolist()\n\n\ndef has_same_digits(num1: int, num2: int) -> bool:\n    \"\"\"\n    Return True if num1 and num2 have the same frequency of every digit, False\n    otherwise.\n\n    >>> has_same_digits(123456789, 987654321)\n    True\n\n    >>> has_same_digits(123, 23)\n    False\n\n    >>> has_same_digits(1234566, 123456)\n    False\n    \"\"\"\n    return sorted(str(num1)) == sorted(str(num2))\n\n\ndef solution(max_n: int = 10000000) -> int:\n    \"\"\"\n    Finds the value of n from 1 to max such that n/\u03c6(n) produces a minimum.\n\n    >>> solution(100)\n    21\n\n    >>> solution(10000)\n    4435\n    \"\"\"\n\n    min_numerator = 1  # i\n    min_denominator = 0  # \u03c6(i)\n    totients = get_totients(max_n + 1)\n\n    for i in range(2, max_n + 1):\n        t = totients[i]\n\n        if i * min_denominator < min_numerator * t and has_same_digits(i, t):\n            min_numerator = i\n            min_denominator = t\n\n    return min_numerator\n\n\nif __name__ == \"__main__\":\n    print(f\"{solution() = }\")\n\n```"}], "metadata": {"prompt_id": "00000084", "row_id": 84, "seed_ids": [503], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nfrom __future__ import annotations\n\nfrom cmath import sqrt\n\n\ndef quadratic_roots(a: int, b: int, c: int) -> tuple[complex, complex]:\n    \"\"\"\n    Given the numerical coefficients a, b and c,\n    calculates the roots for any quadratic equation of the form ax^2 + bx + c\n\n    >>> quadratic_roots(a=1, b=3, c=-4)\n    (1.0, -4.0)\n    >>> quadratic_roots(5, 6, 1)\n    (-0.2, -1.0)\n    >>> quadratic_roots(1, -6, 25)\n    ((3+4j), (3-4j))\n    \"\"\"\n\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must not be zero.\")\n    delta = b * b - 4 * a * c\n\n    root_1 = (-b + sqrt(delta)) / (2 * a)\n    root_2 = (-b - sqrt(delta)) / (2 * a)\n\n    return (\n        root_1.real if not root_1.imag else root_1,\n        root_2.real if not root_2.imag else root_2,\n    )\n\n\ndef main():\n    solution1, solution2 = quadratic_roots(a=5, b=6, c=1)\n    print(f\"The solutions are: {solution1} and {solution2}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n```"}], "metadata": {"prompt_id": "00000085", "row_id": 85, "seed_ids": [721], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n# https://en.wikipedia.org/wiki/Electrical_reactance#Inductive_reactance\nfrom __future__ import annotations\n\nfrom math import pi\n\n\ndef ind_reactance(\n    inductance: float, frequency: float, reactance: float\n) -> dict[str, float]:\n    \"\"\"\n    Calculate inductive reactance, frequency or inductance from two given electrical\n    properties then return name/value pair of the zero value in a Python dict.\n\n    Parameters\n    ----------\n    inductance : float with units in Henries\n\n    frequency : float with units in Hertz\n\n    reactance : float with units in Ohms\n\n    >>> ind_reactance(-35e-6, 1e3, 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Inductance cannot be negative\n\n    >>> ind_reactance(35e-6, -1e3, 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Frequency cannot be negative\n\n    >>> ind_reactance(35e-6, 0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Inductive reactance cannot be negative\n\n    >>> ind_reactance(0, 10e3, 50)\n    {'inductance': 0.0007957747154594767}\n\n    >>> ind_reactance(35e-3, 0, 50)\n    {'frequency': 227.36420441699332}\n\n    >>> ind_reactance(35e-6, 1e3, 0)\n    {'reactance': 0.2199114857512855}\n\n    \"\"\"\n\n    if (inductance, frequency, reactance).count(0) != 1:\n        raise ValueError(\"One and only one argument must be 0\")\n    if inductance < 0:\n        raise ValueError(\"Inductance cannot be negative\")\n    if frequency < 0:\n        raise ValueError(\"Frequency cannot be negative\")\n    if reactance < 0:\n        raise ValueError(\"Inductive reactance cannot be negative\")\n    if inductance == 0:\n        return {\"inductance\": reactance / (2 * pi * frequency)}\n    elif frequency == 0:\n        return {\"frequency\": reactance / (2 * pi * inductance)}\n    elif reactance == 0:\n        return {\"reactance\": 2 * pi * frequency * inductance}\n    else:\n        raise ValueError(\"Exactly one argument must be 0\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000086", "row_id": 86, "seed_ids": [181], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nThe function below will convert any binary string to the octal equivalent.\n\n>>> bin_to_octal(\"1111\")\n'17'\n\n>>> bin_to_octal(\"101010101010011\")\n'52523'\n\n>>> bin_to_octal(\"\")\nTraceback (most recent call last):\n    ...\nValueError: Empty string was passed to the function\n>>> bin_to_octal(\"a-1\")\nTraceback (most recent call last):\n    ...\nValueError: Non-binary value was passed to the function\n\"\"\"\n\n\ndef bin_to_octal(bin_string: str) -> str:\n    if not all(char in \"01\" for char in bin_string):\n        raise ValueError(\"Non-binary value was passed to the function\")\n    if not bin_string:\n        raise ValueError(\"Empty string was passed to the function\")\n    oct_string = \"\"\n    while len(bin_string) % 3 != 0:\n        bin_string = \"0\" + bin_string\n    bin_string_in_3_list = [\n        bin_string[index : index + 3]\n        for index in range(len(bin_string))\n        if index % 3 == 0\n    ]\n    for bin_group in bin_string_in_3_list:\n        oct_val = 0\n        for index, val in enumerate(bin_group):\n            oct_val += int(2 ** (2 - index) * int(val))\n        oct_string += str(oct_val)\n    return oct_string\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n\n```"}], "metadata": {"prompt_id": "00000087", "row_id": 87, "seed_ids": [651], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nhttps://en.wikipedia.org/wiki/Running_key_cipher\n\"\"\"\n\n\ndef running_key_encrypt(key: str, plaintext: str) -> str:\n    \"\"\"\n    Encrypts the plaintext using the Running Key Cipher.\n\n    :param key: The running key (long piece of text).\n    :param plaintext: The plaintext to be encrypted.\n    :return: The ciphertext.\n    \"\"\"\n    plaintext = plaintext.replace(\" \", \"\").upper()\n    key = key.replace(\" \", \"\").upper()\n    key_length = len(key)\n    ciphertext = []\n    ord_a = ord(\"A\")\n\n    for i, char in enumerate(plaintext):\n        p = ord(char) - ord_a\n        k = ord(key[i % key_length]) - ord_a\n        c = (p + k) % 26\n        ciphertext.append(chr(c + ord_a))\n\n    return \"\".join(ciphertext)\n\n\ndef running_key_decrypt(key: str, ciphertext: str) -> str:\n    \"\"\"\n    Decrypts the ciphertext using the Running Key Cipher.\n\n    :param key: The running key (long piece of text).\n    :param ciphertext: The ciphertext to be decrypted.\n    :return: The plaintext.\n    \"\"\"\n    ciphertext = ciphertext.replace(\" \", \"\").upper()\n    key = key.replace(\" \", \"\").upper()\n    key_length = len(key)\n    plaintext = []\n    ord_a = ord(\"A\")\n\n    for i, char in enumerate(ciphertext):\n        c = ord(char) - ord_a\n        k = ord(key[i % key_length]) - ord_a\n        p = (c - k) % 26\n        plaintext.append(chr(p + ord_a))\n\n    return \"\".join(plaintext)\n\n\ndef test_running_key_encrypt() -> None:\n    \"\"\"\n    >>> key = \"How does the duck know that? said Victor\"\n    >>> ciphertext = running_key_encrypt(key, \"DEFEND THIS\")\n    >>> running_key_decrypt(key, ciphertext) == \"DEFENDTHIS\"\n    True\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    test_running_key_encrypt()\n\n    plaintext = input(\"Enter the plaintext: \").upper()\n    print(f\"\\n{plaintext = }\")\n\n    key = \"How does the duck know that? said Victor\"\n    encrypted_text = running_key_encrypt(key, plaintext)\n    print(f\"{encrypted_text = }\")\n\n    decrypted_text = running_key_decrypt(key, encrypted_text)\n    print(f\"{decrypted_text = }\")\n\n```"}], "metadata": {"prompt_id": "00000088", "row_id": 88, "seed_ids": [61], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n#!/usr/bin/env python3\n\"\"\"\nmodule to operations with prime numbers\n\"\"\"\n\nimport math\n\n\ndef is_prime(number: int) -> bool:\n    \"\"\"Checks to see if a number is a prime in O(sqrt(n)).\n\n    A number is prime if it has exactly two factors: 1 and itself.\n\n    >>> is_prime(0)\n    False\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(27)\n    False\n    >>> is_prime(87)\n    False\n    >>> is_prime(563)\n    True\n    >>> is_prime(2999)\n    True\n    >>> is_prime(67483)\n    False\n    \"\"\"\n\n    # precondition\n    assert isinstance(number, int) and (\n        number >= 0\n    ), \"'number' must been an int and positive\"\n\n    if 1 < number < 4:\n        # 2 and 3 are primes\n        return True\n    elif number < 2 or not number % 2:\n        # Negatives, 0, 1 and all even numbers are not primes\n        return False\n\n    odd_numbers = range(3, int(math.sqrt(number) + 1), 2)\n    return not any(not number % i for i in odd_numbers)\n\n\ndef next_prime(value, factor=1, **kwargs):\n    value = factor * value\n    first_value_val = value\n\n    while not is_prime(value):\n        value += 1 if not (\"desc\" in kwargs and kwargs[\"desc\"] is True) else -1\n\n    if value == first_value_val:\n        return next_prime(value + 1, **kwargs)\n    return value\n\n```"}], "metadata": {"prompt_id": "00000089", "row_id": 89, "seed_ids": [326], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nProject Euler Problem 6: https://projecteuler.net/problem=6\n\nSum square difference\n\nThe sum of the squares of the first ten natural numbers is,\n    1^2 + 2^2 + ... + 10^2 = 385\n\nThe square of the sum of the first ten natural numbers is,\n    (1 + 2 + ... + 10)^2 = 55^2 = 3025\n\nHence the difference between the sum of the squares of the first ten\nnatural numbers and the square of the sum is 3025 - 385 = 2640.\n\nFind the difference between the sum of the squares of the first one\nhundred natural numbers and the square of the sum.\n\"\"\"\n\n\ndef solution(n: int = 100) -> int:\n    \"\"\"\n    Returns the difference between the sum of the squares of the first n\n    natural numbers and the square of the sum.\n\n    >>> solution(10)\n    2640\n    >>> solution(15)\n    13160\n    >>> solution(20)\n    41230\n    >>> solution(50)\n    1582700\n    \"\"\"\n\n    sum_of_squares = n * (n + 1) * (2 * n + 1) / 6\n    square_of_sum = (n * (n + 1) / 2) ** 2\n    return int(square_of_sum - sum_of_squares)\n\n\nif __name__ == \"__main__\":\n    print(f\"{solution() = }\")\n\n```"}], "metadata": {"prompt_id": "00000090", "row_id": 90, "seed_ids": [585], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n# This theorem states that the number of prime factors of n\n# will be approximately log(log(n)) for most natural numbers n\n\nimport math\n\n\ndef exact_prime_factor_count(n: int) -> int:\n    \"\"\"\n    >>> exact_prime_factor_count(51242183)\n    3\n    \"\"\"\n    count = 0\n    if n % 2 == 0:\n        count += 1\n        while n % 2 == 0:\n            n = int(n / 2)\n    # the n input value must be odd so that\n    # we can skip one element (ie i += 2)\n\n    i = 3\n\n    while i <= int(math.sqrt(n)):\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = int(n / i)\n        i = i + 2\n\n    # this condition checks the prime\n    # number n is greater than 2\n\n    if n > 2:\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = 51242183\n    print(f\"The number of distinct prime factors is/are {exact_prime_factor_count(n)}\")\n    print(f\"The value of log(log(n)) is {math.log(math.log(n)):.4f}\")\n\n    \"\"\"\n    The number of distinct prime factors is/are 3\n    The value of log(log(n)) is 2.8765\n    \"\"\"\n\n```"}], "metadata": {"prompt_id": "00000091", "row_id": 91, "seed_ids": [736], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nEuler Problem 26\nhttps://projecteuler.net/problem=26\n\nProblem Statement:\n\nA unit fraction contains 1 in the numerator. The decimal representation of the\nunit fractions with denominators 2 to 10 are given:\n\n1/2\t= \t0.5\n1/3\t= \t0.(3)\n1/4\t= \t0.25\n1/5\t= \t0.2\n1/6\t= \t0.1(6)\n1/7\t= \t0.(142857)\n1/8\t= \t0.125\n1/9\t= \t0.(1)\n1/10\t= \t0.1\nWhere 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be\nseen that 1/7 has a 6-digit recurring cycle.\n\nFind the value of d < 1000 for which 1/d contains the longest recurring cycle\nin its decimal fraction part.\n\"\"\"\n\n\ndef solution(numerator: int = 1, digit: int = 1000) -> int:\n    \"\"\"\n    Considering any range can be provided,\n    because as per the problem, the digit d < 1000\n    >>> solution(1, 10)\n    7\n    >>> solution(10, 100)\n    97\n    >>> solution(10, 1000)\n    983\n    \"\"\"\n    the_digit = 1\n    longest_list_length = 0\n\n    for divide_by_number in range(numerator, digit + 1):\n        has_been_divided: list[int] = []\n        now_divide = numerator\n        for _ in range(1, digit + 1):\n            if now_divide in has_been_divided:\n                if longest_list_length < len(has_been_divided):\n                    longest_list_length = len(has_been_divided)\n                    the_digit = divide_by_number\n            else:\n                has_been_divided.append(now_divide)\n                now_divide = now_divide * 10 % divide_by_number\n\n    return the_digit\n\n\n# Tests\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000092", "row_id": 92, "seed_ids": [487], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nThe Frequent Pattern Growth algorithm (FP-Growth) is a widely used data mining\ntechnique for discovering frequent itemsets in large transaction databases.\n\nIt overcomes some of the limitations of traditional methods such as Apriori by\nefficiently constructing the FP-Tree\n\nWIKI: https://athena.ecs.csus.edu/~mei/associationcw/FpGrowth.html\n\nExamples: https://www.javatpoint.com/fp-growth-algorithm-in-data-mining\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass, field\n\n\n@dataclass\nclass TreeNode:\n    \"\"\"\n    A node in a Frequent Pattern tree.\n\n    Args:\n        name: The name of this node.\n        num_occur: The number of occurrences of the node.\n        parent_node: The parent node.\n\n    Example:\n    >>> parent = TreeNode(\"Parent\", 1, None)\n    >>> child = TreeNode(\"Child\", 2, parent)\n    >>> child.name\n    'Child'\n    >>> child.count\n    2\n    \"\"\"\n\n    name: str\n    count: int\n    parent: TreeNode | None = None\n    children: dict[str, TreeNode] = field(default_factory=dict)\n    node_link: TreeNode | None = None\n\n    def __repr__(self) -> str:\n        return f\"TreeNode({self.name!r}, {self.count!r}, {self.parent!r})\"\n\n    def inc(self, num_occur: int) -> None:\n        self.count += num_occur\n\n    def disp(self, ind: int = 1) -> None:\n        print(f\"{'  ' * ind} {self.name}  {self.count}\")\n        for child in self.children.values():\n            child.disp(ind + 1)\n\n\ndef create_tree(data_set: list, min_sup: int = 1) -> tuple[TreeNode, dict]:\n    \"\"\"\n    Create Frequent Pattern tree\n\n    Args:\n        data_set: A list of transactions, where each transaction is a list of items.\n        min_sup: The minimum support threshold.\n        Items with support less than this will be pruned. Default is 1.\n\n    Returns:\n        The root of the FP-Tree.\n        header_table: The header table dictionary with item information.\n\n    Example:\n    >>> data_set = [\n    ...    ['A', 'B', 'C'],\n    ...    ['A', 'C'],\n    ...    ['A', 'B', 'E'],\n    ...    ['A', 'B', 'C', 'E'],\n    ...    ['B', 'E']\n    ... ]\n    >>> min_sup = 2\n    >>> fp_tree, header_table = create_tree(data_set, min_sup)\n    >>> fp_tree\n    TreeNode('Null Set', 1, None)\n    >>> len(header_table)\n    4\n    >>> header_table[\"A\"]\n    [[4, None], TreeNode('A', 4, TreeNode('Null Set', 1, None))]\n    >>> header_table[\"E\"][1]  # doctest: +NORMALIZE_WHITESPACE\n    TreeNode('E', 1, TreeNode('B', 3, TreeNode('A', 4, TreeNode('Null Set', 1, None))))\n    >>> sorted(header_table)\n    ['A', 'B', 'C', 'E']\n    >>> fp_tree.name\n    'Null Set'\n    >>> sorted(fp_tree.children)\n    ['A', 'B']\n    >>> fp_tree.children['A'].name\n    'A'\n    >>> sorted(fp_tree.children['A'].children)\n    ['B', 'C']\n    \"\"\"\n    header_table: dict = {}\n    for trans in data_set:\n        for item in trans:\n            header_table[item] = header_table.get(item, [0, None])\n            header_table[item][0] += 1\n\n    for k in list(header_table):\n        if header_table[k][0] < min_sup:\n            del header_table[k]\n\n    if not (freq_item_set := set(header_table)):\n        return TreeNode(\"Null Set\", 1, None), {}\n\n    for k in header_table:\n        header_table[k] = [header_table[k], None]\n\n    fp_tree = TreeNode(\"Null Set\", 1, None)  # Parent is None for the root node\n    for tran_set in data_set:\n        local_d = {\n            item: header_table[item][0] for item in tran_set if item in freq_item_set\n        }\n        if local_d:\n            sorted_items = sorted(\n                local_d.items(), key=lambda item_info: item_info[1], reverse=True\n            )\n            ordered_items = [item[0] for item in sorted_items]\n            update_tree(ordered_items, fp_tree, header_table, 1)\n\n    return fp_tree, header_table\n\n\ndef update_tree(items: list, in_tree: TreeNode, header_table: dict, count: int) -> None:\n    \"\"\"\n    Update the FP-Tree with a transaction.\n\n    Args:\n        items: List of items in the transaction.\n        in_tree: The current node in the FP-Tree.\n        header_table: The header table dictionary with item information.\n        count: The count of the transaction.\n\n    Example:\n    >>> data_set = [\n    ...    ['A', 'B', 'C'],\n    ...    ['A', 'C'],\n    ...    ['A', 'B', 'E'],\n    ...    ['A', 'B', 'C', 'E'],\n    ...    ['B', 'E']\n    ... ]\n    >>> min_sup = 2\n    >>> fp_tree, header_table = create_tree(data_set, min_sup)\n    >>> fp_tree\n    TreeNode('Null Set', 1, None)\n    >>> transaction = ['A', 'B', 'E']\n    >>> update_tree(transaction, fp_tree, header_table, 1)\n    >>> fp_tree\n    TreeNode('Null Set', 1, None)\n    >>> fp_tree.children['A'].children['B'].children['E'].children\n    {}\n    >>> fp_tree.children['A'].children['B'].children['E'].count\n    2\n    >>> header_table['E'][1].name\n    'E'\n    \"\"\"\n    if items[0] in in_tree.children:\n        in_tree.children[items[0]].inc(count)\n    else:\n        in_tree.children[items[0]] = TreeNode(items[0], count, in_tree)\n        if header_table[items[0]][1] is None:\n            header_table[items[0]][1] = in_tree.children[items[0]]\n        else:\n            update_header(header_table[items[0]][1], in_tree.children[items[0]])\n    if len(items) > 1:\n        update_tree(items[1:], in_tree.children[items[0]], header_table, count)\n\n\ndef update_header(node_to_test: TreeNode, target_node: TreeNode) -> TreeNode:\n    \"\"\"\n    Update the header table with a node link.\n\n    Args:\n        node_to_test: The node to be updated in the header table.\n        target_node: The node to link to.\n\n    Example:\n    >>> data_set = [\n    ...    ['A', 'B', 'C'],\n    ...    ['A', 'C'],\n    ...    ['A', 'B', 'E'],\n    ...    ['A', 'B', 'C', 'E'],\n    ...    ['B', 'E']\n    ... ]\n    >>> min_sup = 2\n    >>> fp_tree, header_table = create_tree(data_set, min_sup)\n    >>> fp_tree\n    TreeNode('Null Set', 1, None)\n    >>> node1 = TreeNode(\"A\", 3, None)\n    >>> node2 = TreeNode(\"B\", 4, None)\n    >>> node1\n    TreeNode('A', 3, None)\n    >>> node1 = update_header(node1, node2)\n    >>> node1\n    TreeNode('A', 3, None)\n    >>> node1.node_link\n    TreeNode('B', 4, None)\n    >>> node2.node_link is None\n    True\n    \"\"\"\n    while node_to_test.node_link is not None:\n        node_to_test = node_to_test.node_link\n    if node_to_test.node_link is None:\n        node_to_test.node_link = target_node\n    # Return the updated node\n    return node_to_test\n\n\ndef ascend_tree(leaf_node: TreeNode, prefix_path: list[str]) -> None:\n    \"\"\"\n    Ascend the FP-Tree from a leaf node to its root, adding item names to the prefix\n    path.\n\n    Args:\n        leaf_node: The leaf node to start ascending from.\n        prefix_path: A list to store the item as they are ascended.\n\n    Example:\n    >>> data_set = [\n    ...    ['A', 'B', 'C'],\n    ...    ['A', 'C'],\n    ...    ['A', 'B', 'E'],\n    ...    ['A', 'B', 'C', 'E'],\n    ...    ['B', 'E']\n    ... ]\n    >>> min_sup = 2\n    >>> fp_tree, header_table = create_tree(data_set, min_sup)\n\n    >>> path = []\n    >>> ascend_tree(fp_tree.children['A'], path)\n    >>> path # ascending from a leaf node 'A'\n    ['A']\n    \"\"\"\n    if leaf_node.parent is not None:\n        prefix_path.append(leaf_node.name)\n        ascend_tree(leaf_node.parent, prefix_path)\n\n\ndef find_prefix_path(base_pat: frozenset, tree_node: TreeNode | None) -> dict:  # noqa: ARG001\n    \"\"\"\n    Find the conditional pattern base for a given base pattern.\n\n    Args:\n        base_pat: The base pattern for which to find the conditional pattern base.\n        tree_node: The node in the FP-Tree.\n\n    Example:\n    >>> data_set = [\n    ...    ['A', 'B', 'C'],\n    ...    ['A', 'C'],\n    ...    ['A', 'B', 'E'],\n    ...    ['A', 'B', 'C', 'E'],\n    ...    ['B', 'E']\n    ... ]\n    >>> min_sup = 2\n    >>> fp_tree, header_table = create_tree(data_set, min_sup)\n    >>> fp_tree\n    TreeNode('Null Set', 1, None)\n    >>> len(header_table)\n    4\n    >>> base_pattern = frozenset(['A'])\n    >>> sorted(find_prefix_path(base_pattern, fp_tree.children['A']))\n    []\n    \"\"\"\n    cond_pats: dict = {}\n    while tree_node is not None:\n        prefix_path: list = []\n        ascend_tree(tree_node, prefix_path)\n        if len(prefix_path) > 1:\n            cond_pats[frozenset(prefix_path[1:])] = tree_node.count\n        tree_node = tree_node.node_link\n    return cond_pats\n\n\ndef mine_tree(\n    in_tree: TreeNode,  # noqa: ARG001\n    header_table: dict,\n    min_sup: int,\n    pre_fix: set,\n    freq_item_list: list,\n) -> None:\n    \"\"\"\n    Mine the FP-Tree recursively to discover frequent itemsets.\n\n    Args:\n        in_tree: The FP-Tree to mine.\n        header_table: The header table dictionary with item information.\n        min_sup: The minimum support threshold.\n        pre_fix: A set of items as a prefix for the itemsets being mined.\n        freq_item_list: A list to store the frequent itemsets.\n\n    Example:\n    >>> data_set = [\n    ...    ['A', 'B', 'C'],\n    ...    ['A', 'C'],\n    ...    ['A', 'B', 'E'],\n    ...    ['A', 'B', 'C', 'E'],\n    ...    ['B', 'E']\n    ... ]\n    >>> min_sup = 2\n    >>> fp_tree, header_table = create_tree(data_set, min_sup)\n    >>> fp_tree\n    TreeNode('Null Set', 1, None)\n    >>> frequent_itemsets = []\n    >>> mine_tree(fp_tree, header_table, min_sup, set([]), frequent_itemsets)\n    >>> expe_itm = [{'C'}, {'C', 'A'}, {'E'}, {'A', 'E'}, {'E', 'B'}, {'A'}, {'B'}]\n    >>> all(expected in frequent_itemsets for expected in expe_itm)\n    True\n    \"\"\"\n    sorted_items = sorted(header_table.items(), key=lambda item_info: item_info[1][0])\n    big_l = [item[0] for item in sorted_items]\n    for base_pat in big_l:\n        new_freq_set = pre_fix.copy()\n        new_freq_set.add(base_pat)\n        freq_item_list.append(new_freq_set)\n        cond_patt_bases = find_prefix_path(base_pat, header_table[base_pat][1])\n        my_cond_tree, my_head = create_tree(list(cond_patt_bases), min_sup)\n        if my_head is not None:\n            # Pass header_table[base_pat][1] as node_to_test to update_header\n            header_table[base_pat][1] = update_header(\n                header_table[base_pat][1], my_cond_tree\n            )\n            mine_tree(my_cond_tree, my_head, min_sup, new_freq_set, freq_item_list)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n    data_set: list[frozenset] = [\n        frozenset([\"bread\", \"milk\", \"cheese\"]),\n        frozenset([\"bread\", \"milk\"]),\n        frozenset([\"bread\", \"diapers\"]),\n        frozenset([\"bread\", \"milk\", \"diapers\"]),\n        frozenset([\"milk\", \"diapers\"]),\n        frozenset([\"milk\", \"cheese\"]),\n        frozenset([\"diapers\", \"cheese\"]),\n        frozenset([\"bread\", \"milk\", \"cheese\", \"diapers\"]),\n    ]\n    print(f\"{len(data_set) = }\")\n    fp_tree, header_table = create_tree(data_set, min_sup=3)\n    print(f\"{fp_tree = }\")\n    print(f\"{len(header_table) = }\")\n    freq_items: list = []\n    mine_tree(fp_tree, header_table, 3, set(), freq_items)\n    print(f\"{freq_items = }\")\n\n```"}], "metadata": {"prompt_id": "00000093", "row_id": 93, "seed_ids": [115], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nUse the Runge-Kutta-Fehlberg method to solve Ordinary Differential Equations.\n\"\"\"\n\nfrom collections.abc import Callable\n\nimport numpy as np\n\n\ndef runge_kutta_fehlberg_45(\n    func: Callable,\n    x_initial: float,\n    y_initial: float,\n    step_size: float,\n    x_final: float,\n) -> np.ndarray:\n    \"\"\"\n    Solve an Ordinary Differential Equations using Runge-Kutta-Fehlberg Method (rkf45)\n    of order 5.\n\n    https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta%E2%80%93Fehlberg_method\n\n    args:\n    func: An ordinary differential equation (ODE) as function of x and y.\n    x_initial: The initial value of x.\n    y_initial: The initial value of y.\n    step_size: The increment value of x.\n    x_final: The final value of x.\n\n    Returns:\n        Solution of y at each nodal point\n\n    # exact value of y[1] is tan(0.2) = 0.2027100937470787\n    >>> def f(x, y):\n    ...     return 1 + y**2\n    >>> y = runge_kutta_fehlberg_45(f, 0, 0, 0.2, 1)\n    >>> float(y[1])\n    0.2027100937470787\n    >>> def f(x,y):\n    ...     return x\n    >>> y = runge_kutta_fehlberg_45(f, -1, 0, 0.2, 0)\n    >>> float(y[1])\n    -0.18000000000000002\n    >>> y = runge_kutta_fehlberg_45(5, 0, 0, 0.1, 1)\n    Traceback (most recent call last):\n        ...\n    TypeError: 'int' object is not callable\n    >>> def f(x, y):\n    ...     return x + y\n    >>> y = runge_kutta_fehlberg_45(f, 0, 0, 0.2, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: The final value of x must be greater than initial value of x.\n    >>> def f(x, y):\n    ...     return x\n    >>> y = runge_kutta_fehlberg_45(f, -1, 0, -0.2, 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Step size must be positive.\n    \"\"\"\n    if x_initial >= x_final:\n        raise ValueError(\n            \"The final value of x must be greater than initial value of x.\"\n        )\n\n    if step_size <= 0:\n        raise ValueError(\"Step size must be positive.\")\n\n    n = int((x_final - x_initial) / step_size)\n    y = np.zeros(\n        (n + 1),\n    )\n    x = np.zeros(n + 1)\n    y[0] = y_initial\n    x[0] = x_initial\n    for i in range(n):\n        k1 = step_size * func(x[i], y[i])\n        k2 = step_size * func(x[i] + step_size / 4, y[i] + k1 / 4)\n        k3 = step_size * func(\n            x[i] + (3 / 8) * step_size, y[i] + (3 / 32) * k1 + (9 / 32) * k2\n        )\n        k4 = step_size * func(\n            x[i] + (12 / 13) * step_size,\n            y[i] + (1932 / 2197) * k1 - (7200 / 2197) * k2 + (7296 / 2197) * k3,\n        )\n        k5 = step_size * func(\n            x[i] + step_size,\n            y[i] + (439 / 216) * k1 - 8 * k2 + (3680 / 513) * k3 - (845 / 4104) * k4,\n        )\n        k6 = step_size * func(\n            x[i] + step_size / 2,\n            y[i]\n            - (8 / 27) * k1\n            + 2 * k2\n            - (3544 / 2565) * k3\n            + (1859 / 4104) * k4\n            - (11 / 40) * k5,\n        )\n        y[i + 1] = (\n            y[i]\n            + (16 / 135) * k1\n            + (6656 / 12825) * k3\n            + (28561 / 56430) * k4\n            - (9 / 50) * k5\n            + (2 / 55) * k6\n        )\n        x[i + 1] = step_size + x[i]\n    return y\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000094", "row_id": 94, "seed_ids": [827], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nThe nested brackets problem is a problem that determines if a sequence of\nbrackets are properly nested.  A sequence of brackets s is considered properly nested\nif any of the following conditions are true:\n\n    - s is empty\n    - s has the form (U) or [U] or {U} where U is a properly nested string\n    - s has the form VW where V and W are properly nested strings\n\nFor example, the string \"()()[()]\" is properly nested but \"[(()]\" is not.\n\nThe function called is_balanced takes as input a string S which is a sequence of\nbrackets and returns true if S is nested and false otherwise.\n\"\"\"\n\n\ndef is_balanced(s: str) -> bool:\n    \"\"\"\n    >>> is_balanced(\"\")\n    True\n    >>> is_balanced(\"()\")\n    True\n    >>> is_balanced(\"[]\")\n    True\n    >>> is_balanced(\"{}\")\n    True\n    >>> is_balanced(\"()[]{}\")\n    True\n    >>> is_balanced(\"(())\")\n    True\n    >>> is_balanced(\"[[\")\n    False\n    >>> is_balanced(\"([{}])\")\n    True\n    >>> is_balanced(\"(()[)]\")\n    False\n    >>> is_balanced(\"([)]\")\n    False\n    >>> is_balanced(\"[[()]]\")\n    True\n    >>> is_balanced(\"(()(()))\")\n    True\n    >>> is_balanced(\"]\")\n    False\n    >>> is_balanced(\"Life is a bowl of cherries.\")\n    True\n    >>> is_balanced(\"Life is a bowl of che{}ies.\")\n    True\n    >>> is_balanced(\"Life is a bowl of che}{ies.\")\n    False\n    \"\"\"\n    open_to_closed = {\"{\": \"}\", \"[\": \"]\", \"(\": \")\"}\n    stack = []\n    for symbol in s:\n        if symbol in open_to_closed:\n            stack.append(symbol)\n        elif symbol in open_to_closed.values() and (\n            not stack or open_to_closed[stack.pop()] != symbol\n        ):\n            return False\n    return not stack  # stack should be empty\n\n\ndef main():\n    s = input(\"Enter sequence of brackets: \")\n    print(f\"'{s}' is {'' if is_balanced(s) else 'not '}balanced.\")\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n    main()\n\n```"}], "metadata": {"prompt_id": "00000095", "row_id": 95, "seed_ids": [970], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\nfrom __future__ import annotations\n\nfrom collections.abc import Callable\nfrom typing import Generic, TypeVar\n\nT = TypeVar(\"T\")\nU = TypeVar(\"U\")\n\n\nclass DoubleLinkedListNode(Generic[T, U]):\n    \"\"\"\n    Double Linked List Node built specifically for LFU Cache\n\n    >>> node = DoubleLinkedListNode(1,1)\n    >>> node\n    Node: key: 1, val: 1, freq: 0, has next: False, has prev: False\n    \"\"\"\n\n    def __init__(self, key: T | None, val: U | None):\n        self.key = key\n        self.val = val\n        self.freq: int = 0\n        self.next: DoubleLinkedListNode[T, U] | None = None\n        self.prev: DoubleLinkedListNode[T, U] | None = None\n\n    def __repr__(self) -> str:\n        return (\n            f\"Node: key: {self.key}, val: {self.val}, freq: {self.freq}, \"\n            f\"has next: {self.next is not None}, has prev: {self.prev is not None}\"\n        )\n\n\nclass DoubleLinkedList(Generic[T, U]):\n    \"\"\"\n    Double Linked List built specifically for LFU Cache\n\n    >>> dll: DoubleLinkedList = DoubleLinkedList()\n    >>> dll\n    DoubleLinkedList,\n        Node: key: None, val: None, freq: 0, has next: True, has prev: False,\n        Node: key: None, val: None, freq: 0, has next: False, has prev: True\n\n    >>> first_node = DoubleLinkedListNode(1,10)\n    >>> first_node\n    Node: key: 1, val: 10, freq: 0, has next: False, has prev: False\n\n\n    >>> dll.add(first_node)\n    >>> dll\n    DoubleLinkedList,\n        Node: key: None, val: None, freq: 0, has next: True, has prev: False,\n        Node: key: 1, val: 10, freq: 1, has next: True, has prev: True,\n        Node: key: None, val: None, freq: 0, has next: False, has prev: True\n\n    >>> # node is mutated\n    >>> first_node\n    Node: key: 1, val: 10, freq: 1, has next: True, has prev: True\n\n    >>> second_node = DoubleLinkedListNode(2,20)\n    >>> second_node\n    Node: key: 2, val: 20, freq: 0, has next: False, has prev: False\n\n    >>> dll.add(second_node)\n    >>> dll\n    DoubleLinkedList,\n        Node: key: None, val: None, freq: 0, has next: True, has prev: False,\n        Node: key: 1, val: 10, freq: 1, has next: True, has prev: True,\n        Node: key: 2, val: 20, freq: 1, has next: True, has prev: True,\n        Node: key: None, val: None, freq: 0, has next: False, has prev: True\n\n    >>> removed_node = dll.remove(first_node)\n    >>> assert removed_node == first_node\n    >>> dll\n    DoubleLinkedList,\n        Node: key: None, val: None, freq: 0, has next: True, has prev: False,\n        Node: key: 2, val: 20, freq: 1, has next: True, has prev: True,\n        Node: key: None, val: None, freq: 0, has next: False, has prev: True\n\n\n    >>> # Attempt to remove node not on list\n    >>> removed_node = dll.remove(first_node)\n    >>> removed_node is None\n    True\n\n    >>> # Attempt to remove head or rear\n    >>> dll.head\n    Node: key: None, val: None, freq: 0, has next: True, has prev: False\n    >>> dll.remove(dll.head) is None\n    True\n\n    >>> # Attempt to remove head or rear\n    >>> dll.rear\n    Node: key: None, val: None, freq: 0, has next: False, has prev: True\n    >>> dll.remove(dll.rear) is None\n    True\n\n\n    \"\"\"\n\n    def __init__(self) -> None:\n        self.head: DoubleLinkedListNode[T, U] = DoubleLinkedListNode(None, None)\n        self.rear: DoubleLinkedListNode[T, U] = DoubleLinkedListNode(None, None)\n        self.head.next, self.rear.prev = self.rear, self.head\n\n    def __repr__(self) -> str:\n        rep = [\"DoubleLinkedList\"]\n        node = self.head\n        while node.next is not None:\n            rep.append(str(node))\n            node = node.next\n        rep.append(str(self.rear))\n        return \",\\n    \".join(rep)\n\n    def add(self, node: DoubleLinkedListNode[T, U]) -> None:\n        \"\"\"\n        Adds the given node at the tail of the list and shifting it to proper position\n        \"\"\"\n\n        previous = self.rear.prev\n\n        # All nodes other than self.head are guaranteed to have non-None previous\n        assert previous is not None\n\n        previous.next = node\n        node.prev = previous\n        self.rear.prev = node\n        node.next = self.rear\n        node.freq += 1\n        self._position_node(node)\n\n    def _position_node(self, node: DoubleLinkedListNode[T, U]) -> None:\n        \"\"\"\n        Moves node forward to maintain invariant of sort by freq value\n        \"\"\"\n\n        while node.prev is not None and node.prev.freq > node.freq:\n            # swap node with previous node\n            previous_node = node.prev\n\n            node.prev = previous_node.prev\n            previous_node.next = node.prev\n            node.next = previous_node\n            previous_node.prev = node\n\n    def remove(\n        self, node: DoubleLinkedListNode[T, U]\n    ) -> DoubleLinkedListNode[T, U] | None:\n        \"\"\"\n        Removes and returns the given node from the list\n\n        Returns None if node.prev or node.next is None\n        \"\"\"\n\n        if node.prev is None or node.next is None:\n            return None\n\n        node.prev.next = node.next\n        node.next.prev = node.prev\n        node.prev = None\n        node.next = None\n        return node\n\n\nclass LFUCache(Generic[T, U]):\n    \"\"\"\n    LFU Cache to store a given capacity of data. Can be used as a stand-alone object\n    or as a function decorator.\n\n    >>> cache = LFUCache(2)\n    >>> cache.put(1, 1)\n    >>> cache.put(2, 2)\n    >>> cache.get(1)\n    1\n    >>> cache.put(3, 3)\n    >>> cache.get(2) is None\n    True\n    >>> cache.put(4, 4)\n    >>> cache.get(1) is None\n    True\n    >>> cache.get(3)\n    3\n    >>> cache.get(4)\n    4\n    >>> cache\n    CacheInfo(hits=3, misses=2, capacity=2, current_size=2)\n    >>> @LFUCache.decorator(100)\n    ... def fib(num):\n    ...     if num in (1, 2):\n    ...         return 1\n    ...     return fib(num - 1) + fib(num - 2)\n\n    >>> for i in range(1, 101):\n    ...     res = fib(i)\n\n    >>> fib.cache_info()\n    CacheInfo(hits=196, misses=100, capacity=100, current_size=100)\n    \"\"\"\n\n    # class variable to map the decorator functions to their respective instance\n    decorator_function_to_instance_map: dict[Callable[[T], U], LFUCache[T, U]] = {}\n\n    def __init__(self, capacity: int):\n        self.list: DoubleLinkedList[T, U] = DoubleLinkedList()\n        self.capacity = capacity\n        self.num_keys = 0\n        self.hits = 0\n        self.miss = 0\n        self.cache: dict[T, DoubleLinkedListNode[T, U]] = {}\n\n    def __repr__(self) -> str:\n        \"\"\"\n        Return the details for the cache instance\n        [hits, misses, capacity, current_size]\n        \"\"\"\n\n        return (\n            f\"CacheInfo(hits={self.hits}, misses={self.miss}, \"\n            f\"capacity={self.capacity}, current_size={self.num_keys})\"\n        )\n\n    def __contains__(self, key: T) -> bool:\n        \"\"\"\n        >>> cache = LFUCache(1)\n\n        >>> 1 in cache\n        False\n\n        >>> cache.put(1, 1)\n        >>> 1 in cache\n        True\n        \"\"\"\n\n        return key in self.cache\n\n    def get(self, key: T) -> U | None:\n        \"\"\"\n        Returns the value for the input key and updates the Double Linked List. Returns\n        Returns None if key is not present in cache\n        \"\"\"\n\n        if key in self.cache:\n            self.hits += 1\n            value_node: DoubleLinkedListNode[T, U] = self.cache[key]\n            node = self.list.remove(self.cache[key])\n            assert node == value_node\n\n            # node is guaranteed not None because it is in self.cache\n            assert node is not None\n            self.list.add(node)\n            return node.val\n        self.miss += 1\n        return None\n\n    def put(self, key: T, value: U) -> None:\n        \"\"\"\n        Sets the value for the input key and updates the Double Linked List\n        \"\"\"\n\n        if key not in self.cache:\n            if self.num_keys >= self.capacity:\n                # delete first node when over capacity\n                first_node = self.list.head.next\n\n                # guaranteed to have a non-None first node when num_keys > 0\n                # explain to type checker via assertions\n                assert first_node is not None\n                assert first_node.key is not None\n                assert self.list.remove(first_node) is not None\n                # first_node guaranteed to be in list\n\n                del self.cache[first_node.key]\n                self.num_keys -= 1\n            self.cache[key] = DoubleLinkedListNode(key, value)\n            self.list.add(self.cache[key])\n            self.num_keys += 1\n\n        else:\n            node = self.list.remove(self.cache[key])\n            assert node is not None  # node guaranteed to be in list\n            node.val = value\n            self.list.add(node)\n\n    @classmethod\n    def decorator(\n        cls: type[LFUCache[T, U]], size: int = 128\n    ) -> Callable[[Callable[[T], U]], Callable[..., U]]:\n        \"\"\"\n        Decorator version of LFU Cache\n\n        Decorated function must be function of T -> U\n        \"\"\"\n\n        def cache_decorator_inner(func: Callable[[T], U]) -> Callable[..., U]:\n            def cache_decorator_wrapper(*args: T) -> U:\n                if func not in cls.decorator_function_to_instance_map:\n                    cls.decorator_function_to_instance_map[func] = LFUCache(size)\n\n                result = cls.decorator_function_to_instance_map[func].get(args[0])\n                if result is None:\n                    result = func(*args)\n                    cls.decorator_function_to_instance_map[func].put(args[0], result)\n                return result\n\n            def cache_info() -> LFUCache[T, U]:\n                return cls.decorator_function_to_instance_map[func]\n\n            setattr(cache_decorator_wrapper, \"cache_info\", cache_info)  # noqa: B010\n\n            return cache_decorator_wrapper\n\n        return cache_decorator_inner\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000096", "row_id": 96, "seed_ids": [975], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nImplemented an algorithm using opencv to tone an image with sepia technique\n\"\"\"\n\nfrom cv2 import destroyAllWindows, imread, imshow, waitKey\n\n\ndef make_sepia(img, factor: int):\n    \"\"\"\n    Function create sepia tone.\n    Source: https://en.wikipedia.org/wiki/Sepia_(color)\n    \"\"\"\n    pixel_h, pixel_v = img.shape[0], img.shape[1]\n\n    def to_grayscale(blue, green, red):\n        \"\"\"\n        Helper function to create pixel's greyscale representation\n        Src: https://pl.wikipedia.org/wiki/YUV\n        \"\"\"\n        return 0.2126 * red + 0.587 * green + 0.114 * blue\n\n    def normalize(value):\n        \"\"\"Helper function to normalize R/G/B value -> return 255 if value > 255\"\"\"\n        return min(value, 255)\n\n    for i in range(pixel_h):\n        for j in range(pixel_v):\n            greyscale = int(to_grayscale(*img[i][j]))\n            img[i][j] = [\n                normalize(greyscale),\n                normalize(greyscale + factor),\n                normalize(greyscale + 2 * factor),\n            ]\n\n    return img\n\n\nif __name__ == \"__main__\":\n    # read original image\n    images = {\n        percentage: imread(\"image_data/lena.jpg\", 1) for percentage in (10, 20, 30, 40)\n    }\n\n    for percentage, img in images.items():\n        make_sepia(img, percentage)\n\n    for percentage, img in images.items():\n        imshow(f\"Original image with sepia (factor: {percentage})\", img)\n\n    waitKey(0)\n    destroyAllWindows()\n\n```"}], "metadata": {"prompt_id": "00000097", "row_id": 97, "seed_ids": [837], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n\"\"\"\nTitle : Computing the terminal velocity of an object falling\n        through a fluid.\n\nTerminal velocity is defined as the highest velocity attained by an\nobject falling through a fluid. It is observed when the sum of drag force\nand buoyancy is equal to the downward gravity force acting on the\nobject. The acceleration of the object is zero as the net force acting on\nthe object is zero.\n\nVt = ((2 * m * g)/(p * A * Cd))^0.5\n\nwhere :\nVt = Terminal velocity (in m/s)\nm = Mass of the falling object (in Kg)\ng = Acceleration due to gravity (value taken : imported from scipy)\np = Density of the fluid through which the object is falling (in Kg/m^3)\nA = Projected area of the object (in m^2)\nCd = Drag coefficient (dimensionless)\n\nReference : https://byjus.com/physics/derivation-of-terminal-velocity/\n\"\"\"\n\nfrom scipy.constants import g\n\n\ndef terminal_velocity(\n    mass: float, density: float, area: float, drag_coefficient: float\n) -> float:\n    \"\"\"\n    >>> terminal_velocity(1, 25, 0.6, 0.77)\n    1.3031197996044768\n    >>> terminal_velocity(2, 100, 0.45, 0.23)\n    1.9467947148674276\n    >>> terminal_velocity(5, 50, 0.2, 0.5)\n    4.428690551393267\n    >>> terminal_velocity(-5, 50, -0.2, -2)\n    Traceback (most recent call last):\n        ...\n    ValueError: mass, density, area and the drag coefficient all need to be positive\n    >>> terminal_velocity(3, -20, -1, 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: mass, density, area and the drag coefficient all need to be positive\n    >>> terminal_velocity(-2, -1, -0.44, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: mass, density, area and the drag coefficient all need to be positive\n    \"\"\"\n    if mass <= 0 or density <= 0 or area <= 0 or drag_coefficient <= 0:\n        raise ValueError(\n            \"mass, density, area and the drag coefficient all need to be positive\"\n        )\n    return ((2 * mass * g) / (density * area * drag_coefficient)) ** 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n```"}], "metadata": {"prompt_id": "00000098", "row_id": 98, "seed_ids": [142], "mode": "algorithm"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAs an experienced programming instructor, you are designing programming questions to assess students' understanding of algorithms and data structures provided in the code snippets. Your question should require students to write code that demonstrates their comprehension of fundamental and advanced concepts from the code snippets.\n\n## Guidelines\n\n### Algorithm Analysis\nProvide a thorough analysis of the algorithm or data structure provided in the code snippets, including but not limited to the following aspects:\n\n#### Core Identification\n* **Algorithm/Data Structure**: State the name, type (e.g., sorting algorithm, tree data structure), and main purpose.\n* **Complexity**: Outline time and space complexity.\n* **Principles**: Summarize its core operational steps or key mechanisms.\n\n#### Characteristics & Applications\n* **Properties**: Highlight essential properties (e.g., sorting stability, traversal order).\n* **Common Use Cases**: Describe typical scenarios where this algorithm or structure is effective.\n* **Strengths/Limitations**: Identify its key advantages and drawbacks, and specify when it's most suitable to use or avoid.\n\n#### Implementation Challenges\n* **Edge Cases**: Describe common edge cases students should consider.\n* **Performance Bottlenecks**: Identify any parts that can slow down execution or use excess memory.\n* **Error Scenarios**: Explain situations that might lead to incorrect results if not handled correctly.\n* **Optimization Points**: Note potential improvements or alternatives to enhance performance.\n\n### Question Style\nBased on the above analysis, craft a question that is:\n* **Challenging** and requires a well-thought-out coding solution.\n* **Clear and self-contained**, with all necessary information for solving it provided.\n* **Focused on function implementation**, specifying:\n  * Expected **input and output formats**.\n  * Any **constraints or limitations**.\n  * **Performance requirements**, if applicable.\n* Enriched with a brief **scenario or context** (if it enhances clarity).\n* Thoroughly examining the algorithm or data structure without referencing any example code directly.\n\n## Output Format\nPlease use the following output format for consistency.\n\n<|Analysis Begin|>\n\n[Write your analysis here]\n\n<|Analysis End|>\n\n<|Question Begin|>\n\n[Write the coding question here]\n\n<|Question End|>\n\n## Code Snippets\n```python\n# Numbers of alphabet which we call base\nalphabet_size = 256\n# Modulus to hash a string\nmodulus = 1000003\n\n\ndef rabin_karp(pattern: str, text: str) -> bool:\n    \"\"\"\n    The Rabin-Karp Algorithm for finding a pattern within a piece of text\n    with complexity O(nm), most efficient when it is used with multiple patterns\n    as it is able to check if any of a set of patterns match a section of text in o(1)\n    given the precomputed hashes.\n\n    This will be the simple version which only assumes one pattern is being searched\n    for but it's not hard to modify\n\n    1) Calculate pattern hash\n\n    2) Step through the text one character at a time passing a window with the same\n        length as the pattern\n        calculating the hash of the text within the window compare it with the hash\n        of the pattern. Only testing equality if the hashes match\n    \"\"\"\n    p_len = len(pattern)\n    t_len = len(text)\n    if p_len > t_len:\n        return False\n\n    p_hash = 0\n    text_hash = 0\n    modulus_power = 1\n\n    # Calculating the hash of pattern and substring of text\n    for i in range(p_len):\n        p_hash = (ord(pattern[i]) + p_hash * alphabet_size) % modulus\n        text_hash = (ord(text[i]) + text_hash * alphabet_size) % modulus\n        if i == p_len - 1:\n            continue\n        modulus_power = (modulus_power * alphabet_size) % modulus\n\n    for i in range(t_len - p_len + 1):\n        if text_hash == p_hash and text[i : i + p_len] == pattern:\n            return True\n        if i == t_len - p_len:\n            continue\n        # Calculate the https://en.wikipedia.org/wiki/Rolling_hash\n        text_hash = (\n            (text_hash - ord(text[i]) * modulus_power) * alphabet_size\n            + ord(text[i + p_len])\n        ) % modulus\n    return False\n\n\ndef test_rabin_karp() -> None:\n    \"\"\"\n    >>> test_rabin_karp()\n    Success.\n    \"\"\"\n    # Test 1)\n    pattern = \"abc1abc12\"\n    text1 = \"alskfjaldsabc1abc1abc12k23adsfabcabc\"\n    text2 = \"alskfjaldsk23adsfabcabc\"\n    assert rabin_karp(pattern, text1)\n    assert not rabin_karp(pattern, text2)\n\n    # Test 2)\n    pattern = \"ABABX\"\n    text = \"ABABZABABYABABX\"\n    assert rabin_karp(pattern, text)\n\n    # Test 3)\n    pattern = \"AAAB\"\n    text = \"ABAAAAAB\"\n    assert rabin_karp(pattern, text)\n\n    # Test 4)\n    pattern = \"abcdabcy\"\n    text = \"abcxabcdabxabcdabcdabcy\"\n    assert rabin_karp(pattern, text)\n\n    # Test 5)\n    pattern = \"L\u00fc\"\n    text = \"L\u00fcsai\"\n    assert rabin_karp(pattern, text)\n    pattern = \"Lue\"\n    assert not rabin_karp(pattern, text)\n    print(\"Success.\")\n\n\nif __name__ == \"__main__\":\n    test_rabin_karp()\n\n```"}], "metadata": {"prompt_id": "00000099", "row_id": 99, "seed_ids": [259], "mode": "algorithm"}}
