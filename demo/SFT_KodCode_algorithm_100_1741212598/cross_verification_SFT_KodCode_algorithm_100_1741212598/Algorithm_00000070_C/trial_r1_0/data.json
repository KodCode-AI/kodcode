{
  "style": "instruct",
  "subset": "Algorithm",
  "question_id": "Algorithm_00000070_C",
  "question": "def enhanced_lower(text: str) -> str:\n    \"\"\" Converts all uppercase letters in the input string to lowercase.\n    Handles both ASCII and non-ASCII characters.\n    \"\"\"",
  "solution": "def enhanced_lower(text):\n    \"\"\"\n    Converts all uppercase letters in the input string to lowercase.\n    Handles both ASCII and non-ASCII characters.\n    \"\"\"\n    return text.lower()",
  "test_code": "import pytest\n\ndef test_enhanced_lower_ascii():\n    assert enhanced_lower(\"Hello, World!\") == 'hello, world!'\n    assert enhanced_lower(\"\u00a1Hola, MUNDO!\") == '\u00a1hola, mundo!'\n    assert enhanced_lower(\"Python 3.8\") == 'python 3.8'\n    assert enhanced_lower(\"12345\") == '12345'\n    assert enhanced_lower(\" caf\u00e9\") == ' caf\u00e9'\n\ndef test_enhanced_lower_non_ascii():\n    assert enhanced_lower(\"\u039a\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1\") == '\u03ba\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1'\n    assert enhanced_lower(\"\ud83d\ude00.prop\") == '\ud83d\ude00.prop'\n    assert enhanced_lower(\" teasers\") == ' teasers'\n    assert enhanced_lower(\"Teasers\") == 'teasers'\n    assert enhanced_lower(\"Teasers\ud83d\ude00\") == 'teasers\ud83d\ude00'",
  "test_info": [
    {
      "function_name": "enhanced_lower",
      "parameter_list": "(text)",
      "function_declaration": "def enhanced_lower(text):",
      "docstring": "Converts all uppercase letters in the input string to lowercase.\nHandles both ASCII and non-ASCII characters."
    }
  ],
  "gpt_pass_sequence": [
    1,
    0,
    1
  ],
  "gpt_pass_trial_num": 2,
  "gpt_difficulty": "easy",
  "gpt_pass_percentage": 0.667,
  "r1_response": "<think>\nOkay, I need to write a Python function called enhanced_lower that converts all uppercase letters in a given string to lowercase. The function should handle both ASCII and non-ASCII characters. Hmm, how do I approach this?\n\nI remember that Python strings have a lower() method, which mainly handles ASCII. But the problem says it should handle non-ASCII as well. Wait, does the regular lower() method cover that? Maybe not entirely for some special cases.\n\nWait, perhaps the issue is that some uppercase letters in Unicode don't have a direct lowercase counterpart. For example, certain characters might have different lowercase forms or behave differently when lowercased. So I need a way to handle all Unicode characters correctly.\n\nMaybe I can use the locale module or the unicodedata module. Oh right, the unicodedata module has functions for normalization, which might help in case transformations. Or perhaps I should see if there's a more straightforward way.\n\nWait, perhaps using the lower() method on each character. So I can iterate through each character in the text, convert each one to lowercase, and then join them back together. But wait, some characters might be lowercase, and others might already be processed, but that seems redundant.\n\nAlternatively, maybe using a function that can handle case conversions for any Unicode character. I think the unicodedata module's normalize function might not directly help with lowercasing but it's more for compatibility.\n\nAnother thought: What if I check if a character is uppercase and then convert it? But for non-ASCII, checking isupper() might not be reliable. So for each character, I'll check if it's uppercase, and if so, convert it to lowercase. But how?\n\nWait, I remember that Python's case conversions are Unicode-aware now. So using text.lower() might already handle non-ASCII cases appropriately. Oh, maybe I just need to return text.lower().\n\nBut wait, why is the function called 'enhanced_lower'? Maybe it's intended to go beyond the basic lower() function. Are there cases where lower() doesn't cover everything?\n\nAlternatively, perhaps in some locales, certain characters have different lowercase transformations, but I'm not sure. The function's description says it converts all uppercase letters to lowercase, handling both ASCII and non-ASCII.\n\nSo perhaps I can simply use the lower() method and that's sufficient. But I'm not entirely certain whether this covers all cases. Maybe I need to write a helper that for each character, if it's uppercase, convert it.\n\nWait, maybe I should use the unicodedata module's normalize function. Let me think. No, because normalization would not convert case. Maybe using a combination of isupper() and lower() for each character would be more reliable.\n\nLet me outline the steps:\n\n1. Iterate over each character in the input text.\n2. For each character, check if it's uppercase using the isupper() method.\n3. If it is uppercase, convert it to lowercase using the lower() method.\n4. If not, leave it as it is.\n5. Join all the processed characters back into a string.\n\nBut wait, the lower() method of a string might affect more than just the cases. Or maybe not, but I think for each character, using their own lower() is sufficient.\n\nWait, but there's a caveat: Some characters don't have a lowercase. For example, certain symbols or emojis. In such cases, lower() might leave them unchanged, which is acceptable.\n\nSo, for example, for a string with '\u00c4', applying lower() should give '\u00e4'.\n\nBut then again, perhaps the built-in lower() method already handles all these cases. So, perhaps, the function can simply return text.lower().\n\nIs there a scenario where the built-in method fails for non-ASCII? I'm not sure, but maybe for the scope of this problem, using the lower() method is sufficient.\n\nBut wait, the problem's function is named 'enhanced_lower', suggesting it's a more robust version. So perhaps the built-in lower isn't sufficient, and we need a more comprehensive approach.\n\nIn that case, perhaps using the unicodedata module's normalize function can help. Let me check: unicodedata.normalize('NFD', text) might decompose the text, and then perhaps converting to lowercase would be more consistent.\n\nAnother approach is to use a translation table. But I'm not sure how to create one for all possible cases.\n\nAlternatively, using a regular expression substitution, but that might complicate things.\n\nWait, perhaps the built-in lower() does handle all cases correctly. For example, testing with '\u0130' (Uppercase I with dot). Lowercase is 'i' with a dot. Let me check: '\u0130'.lower() in Python gives 'i' but without the dot? Hmm, no. Wait, in Python, I think I recall that '\u0130'.lower() is 'i' and '\u0130'.lower() becomes 'i' because the dot is removed. But is that correct?\n\nWait no, I should double-check. Let me think: In some languages like Turkish, the uppercase \u0130 (with dot) should lowercase to i without the dot, because the dot is part of the uppercase. So Python's case conversions might handle this correctly.\n\nAlternatively, perhaps it's better to use the casefold() method, which is more aggressive in removing case distinctions.\n\nWait, the function's purpose is to make all uppercase letters lowercase. So perhaps using lower() is better than casefold(), since casefold() also does additional case NORMALIZATION beyond conversion, like handling the German \u00df to 'ss' in lowercase.\n\nBut the function is not intended to handle that, just to make uppercase letters lowercase.\n\nWait, the original description says 'converts all uppercase letters in the input string to lowercase. Handles both ASCII and non-ASCII.' So, perhaps it's best to stick with text.lower(), as that method does exactly that, handling all Unicode cases.\n\nSo, perhaps the function is as simple as returning text.lower().\n\nBut why is the function called 'enhanced_lower'? Oh, perhaps because it's designed to handle cases beyond normal lower(), but maybe not. Maybe the function expects each lowercase conversion to handle all cases, and the implementation just uses lower(), but perhaps with some error handling.\n\nWait, perhaps in some cases, applying lower() to certain non-ASCII strings may cause issues with encoding if not handled properly. But in Python 3, strings are Unicode by default, so perhaps that's not an issue.\n\nAlternatively, maybe for characters where the lowercase version is more than one character, like some ligatures or certain Unicode characters that decompose when lowercased. For example, \"\u0130\" becomes \"i\" when lowercased. Is that correct? Alternatively, perhaps in certain locales, it's handled differently.\n\nBut unless the problem requires handling such cases, perhaps using lower() is sufficient.\n\nSo, perhaps the implementation is simply:\n\nreturn text.lower()\n\nBut I'm not certain, but given the problem statement, perhaps that's the intended solution.\n\nAlternatively, perhaps the function expects to ensure that all cased letters are converted, but not change symbols or other non-letters. But that's what lower() already does.\n\nSo, I think the solution is to return text.lower().\n\nWait, in the function docstring, it says 'Converts all uppercase letters in the input string to lowercase.' So that includes only uppercase letters. So perhaps using lower() is appropriate, as it only converts uppercase letters to lowercase, and leaves others as-is.\n\nWait, perhaps the lower() method changes some non-letters, like in certain contexts, but generally it's designed to change letters only.\n\nSo, perhaps the function is just a wrapper for text.lower().\n\nBut why is it called enhanced then? Oh, perhaps because it's supposed to handle cases where lower() does not. For example, in the past, was lower() not handling certain characters, but now it's better.\n\nBut given the information, perhaps the correct solution is just to return the lowercased string using the lower() method.\n\nThus, the function can be written as:\n\ndef enhanced_lower(text: str) -> str:\n    return text.lower()\n\nBut wait, to check, perhaps looking at examples would help.\n\nFor example, 'owitz'.upper() is 'OWITZ', and 'OWITZ'.lower() is 'owitz' \u2192 which is correct.\n\nWhat about non-ASCII: '\u00c4\u00d6\u00dd'.lower() should return '\u00e4\u00f6y'.\n\nTesting this in Python shows that lower() indeed handles these cases correctly.\n\nAnother test is the German \u00df. '\u00df'.upper() is 'SS', and 'SS'.lower() is 'ss'. So lower() correctly handles that.\n\nSo, yes, using lower() is sufficient.\n\nTherefore, the enhanced_lower function can simply return text.lower().\n</think>\n\nTo solve this problem, we need to create a function that converts all uppercase letters in a given string to lowercase, handling both ASCII and non-ASCII characters effectively. \n\n### Approach\nThe goal is to ensure that every uppercase letter, regardless of whether it is an ASCII or a non-ASCII character, is converted to its corresponding lowercase letter. Python's built-in string method `lower()` is well-suited for this task as it is designed to handle case conversion for both ASCII and non-ASCII characters efficiently. This method converts all uppercase letters to their lowercase counterparts while leaving other characters unchanged.\n\n### Solution Code\n```python\ndef enhanced_lower(text: str) -> str:\n    \"\"\" Converts all uppercase letters in the input string to lowercase.\n    Handles both ASCII and non-ASCII characters.\"\"\"\n    return text.lower()\n```\n\n### Explanation\nThe function `enhanced_lower` takes a string `text` as input and returns the string with all uppercase letters converted to lowercase. The conversion is achieved using Python's built-in `lower()` method, which handles both ASCII and non-ASCII characters, ensuring that every uppercase letter is accurately converted to its lowercase form. This approach is efficient and concise, leveraging Python's robust string handling capabilities.",
  "r1_solution": "def enhanced_lower(text: str) -> str:\n    \"\"\" Converts all uppercase letters in the input string to lowercase.\n    Handles both ASCII and non-ASCII characters.\"\"\"\n    return text.lower()",
  "metadata": {
    "prompt_id": "00000070",
    "row_id": 70,
    "seed_ids": [
      286
    ],
    "mode": "algorithm",
    "original_instruction": "**Scenario**: You are working on a project that involves processing text data in various languages, including those that use non-ASCII characters. You need a function to convert all uppercase letters to lowercase letters in a string, handling both ASCII and non-ASCII characters correctly.\n\n**Question**: Implement a function `enhanced_lower` that takes a string as input and returns a new string with all uppercase letters converted to lowercase. The function should handle both ASCII and non-ASCII characters and preserve the original order of characters in the string.\n\n**Input**: A string `text` (1 <= len(text) <= 10^5) consisting of alphanumeric characters, spaces, and punctuation marks. The string may contain non-ASCII characters.\n\n**Output**: A string where all uppercase letters in the input string are converted to lowercase.\n\n**Example**:\n```python\n>>> enhanced_lower(\"Hello, World!\")\n'hello, world!'\n>>> enhanced_lower(\"\u00a1Hola, MUNDO!\")\n'\u00a1hola, mundo!'\n>>> enhanced_lower(\"Python 3.8\")\n'python 3.8'\n>>> enhanced_lower(\"12345\")\n'12345'\n>>> enhanced_lower(\" caf\u00e9\")\n' caf\u00e9'\n```\n\n**Constraints**:\n- The input string will contain at least one character and at most 10^5 characters.\n- The string may contain non-ASCII characters.\n\n**Performance Requirement**: The function should handle large strings efficiently, aiming for a time complexity of O(n) and a space complexity of O(n)."
  },
  "file_source": "KodCode_algorithm_100_1741212598_prepared_results0.jsonl"
}