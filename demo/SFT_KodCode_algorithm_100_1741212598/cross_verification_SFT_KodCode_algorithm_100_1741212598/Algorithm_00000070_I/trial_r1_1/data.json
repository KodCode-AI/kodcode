{
  "style": "instruct",
  "subset": "Algorithm",
  "question_id": "Algorithm_00000070_I",
  "question": "**Scenario**: You are working on a project that involves processing text data in various languages, including those that use non-ASCII characters. You need a function to convert all uppercase letters to lowercase letters in a string, handling both ASCII and non-ASCII characters correctly.\n\n**Question**: Implement a function `enhanced_lower` that takes a string as input and returns a new string with all uppercase letters converted to lowercase. The function should handle both ASCII and non-ASCII characters and preserve the original order of characters in the string.\n\n**Input**: A string `text` (1 <= len(text) <= 10^5) consisting of alphanumeric characters, spaces, and punctuation marks. The string may contain non-ASCII characters.\n\n**Output**: A string where all uppercase letters in the input string are converted to lowercase.\n\n**Example**:\n```python\n>>> enhanced_lower(\"Hello, World!\")\n'hello, world!'\n>>> enhanced_lower(\"\u00a1Hola, MUNDO!\")\n'\u00a1hola, mundo!'\n>>> enhanced_lower(\"Python 3.8\")\n'python 3.8'\n>>> enhanced_lower(\"12345\")\n'12345'\n>>> enhanced_lower(\" caf\u00e9\")\n' caf\u00e9'\n```\n\n**Constraints**:\n- The input string will contain at least one character and at most 10^5 characters.\n- The string may contain non-ASCII characters.\n\n**Performance Requirement**: The function should handle large strings efficiently, aiming for a time complexity of O(n) and a space complexity of O(n).",
  "solution": "def enhanced_lower(text):\n    \"\"\"\n    Converts all uppercase letters in the input string to lowercase.\n    Handles both ASCII and non-ASCII characters.\n    \"\"\"\n    return text.lower()",
  "test_code": "import pytest\n\ndef test_enhanced_lower_ascii():\n    assert enhanced_lower(\"Hello, World!\") == 'hello, world!'\n    assert enhanced_lower(\"\u00a1Hola, MUNDO!\") == '\u00a1hola, mundo!'\n    assert enhanced_lower(\"Python 3.8\") == 'python 3.8'\n    assert enhanced_lower(\"12345\") == '12345'\n    assert enhanced_lower(\" caf\u00e9\") == ' caf\u00e9'\n\ndef test_enhanced_lower_non_ascii():\n    assert enhanced_lower(\"\u039a\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1\") == '\u03ba\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1'\n    assert enhanced_lower(\"\ud83d\ude00.prop\") == '\ud83d\ude00.prop'\n    assert enhanced_lower(\" teasers\") == ' teasers'\n    assert enhanced_lower(\"Teasers\") == 'teasers'\n    assert enhanced_lower(\"Teasers\ud83d\ude00\") == 'teasers\ud83d\ude00'",
  "test_info": [
    {
      "function_name": "enhanced_lower",
      "parameter_list": "(text)",
      "function_declaration": "def enhanced_lower(text):",
      "docstring": "Converts all uppercase letters in the input string to lowercase.\nHandles both ASCII and non-ASCII characters."
    }
  ],
  "gpt_pass_sequence": [
    1,
    0,
    1
  ],
  "gpt_pass_trial_num": 2,
  "gpt_difficulty": "easy",
  "gpt_pass_percentage": 0.667,
  "r1_response": "<think>\nOkay, I need to write a function called enhanced_lower that takes a string and returns it with all uppercase letters converted to lowercase. It should handle both ASCII and non-ASCII characters. Hmm, how do I approach this?\n\nWell, I remember that the standard string method lower() in Python does convert uppercase letters to lowercase, but does it handle non-ASCII characters correctly? Like, what happens if the string has accents or other Unicode letters?\n\nWait, Python's lower() method should handle Unicode case conversions because it's built on top of the Unicode standard. So for example, '\u00c1' becomes '\u00e1' and '\u03a3' becomes '\u03c3' when using lower().\n\nSo maybe the simplest solution is to create a new string by applying lower() to each character, but wait, that's not directly applicable because in Python, strings are handled as a whole. Oh right, the built-in lower() method of a string converts all uppercase letters to lowercase, whether they are ASCII or not.\n\nBut wait, is that enough? Let's think about the examples given.\n\nIn the first example, enhanced_lower(\"Hello, World!\") returns 'hello, world!', which is exactly what the standard lower() does. For the second example, \"\u00a1Hola, MUNDO!\" returns '\u00a1hola, mundo!', which also seems correct as lower() would handle the H, M, etc.\n\nSo, perhaps the function can be as simple as returning text.lower(), but I need to test if that's sufficient.\n\nBut then what about cases where case conversion isn't as straightforward, such as in Turkish locales where '\u0130'.lower() might behave differently? Oh wait, but the problem statement doesn't specify locale-sensitive handling, right? It just needs to follow the standard case conversions.\n\nSo, perhaps the function can simply return text.lower().\n\nWait, let me see the examples again. For example, in the second test case: 'HOLA' becomes 'hola' as 'H' is treated as such. Does the lower() function handle that?\n\nYes, because 'HOLA'.lower() is 'hola', which is correct.\n\nSo, perhaps the function can be as simple as:\n\ndef enhanced_lower(text):\n    return text.lower()\n\nBut wait, no, because non-letter characters should be preserved. Oh right, because lower() only affects letters; other characters like numbers, spaces, punctuation remain the same. So that's fine.\n\nTesting the examples:\n\nFor 'Hello, World!' the output is correct.\nFor '\u00a1Hola, MUNDO!' it becomes '\u00a1hola, mundo!'\nFor 'Python 3.8' it becomes 'python 3.8' which is right.\n12345 remains as is, because there's no letters.\nAnd for ' caf\u00e9', it remains ' caf\u00e9' as the space is preserved.\n\nSo, does this cover all required cases? It seems so.\n\nWait, but the problem is presented perhaps more complicated than that, which makes me think if the lower() method is sufficient.\n\nLet me think about non-ASCII uppercase letters, like '\u00c4' or '\u00cf'? The lower() method should handle them correctly. For example, '\u00c4 \u00d6 \u00dc'.lower() should return '\u00e4 \u00f6 \u00fc'.\n\nYes, because Python's strings handle Unicode properly when using the standard methods.\n\nThen, the function can indeed be implemented as simply returning text.lower(). But why would the problem even be posed if that's the case? Maybe I'm missing something.\n\nWait, perhaps the problem is more about non-letter characters or digits, but since the function lower() doesn't change them, they remain the same, which is correct.\n\nSo, to ensure efficiency, what's the time and space complexity of this approach?\n\ntext.lower() is an O(n) operation because each character is processed once, and it creates a new string, which for a string of length n is O(n) space.\n\nGiven that the input can be up to 1e5 characters, using text.lower() is efficient enough.\n\nHence, the function can simply return text.lower().\n\nBut to verify, perhaps I should test some cases, but the examples given in the problem are covered.\n\nSo, in conclusion, the enhanced_lower function can be implemented as:\n\ndef enhanced_lower(text):\n    return text.lower()\n\nI think that's the solution.\n</think>\n\nTo solve this problem, we need to create a function that converts all uppercase letters in a given string to lowercase while correctly handling both ASCII and non-ASCII characters. The function should preserve the original order of characters and should be efficient enough to handle large strings, up to 100,000 characters.\n\n### Approach\nThe approach to solve this problem is straightforward. We will leverage Python's built-in string method `lower()`, which efficiently converts all uppercase letters to lowercase. This method handles both ASCII and non-ASCII characters correctly by following the Unicode standard for case conversions. The method processes each character in the string in linear time, making it efficient with a time complexity of O(n) and a space complexity of O(n), where n is the length of the string.\n\n### Solution Code\n```python\ndef enhanced_lower(text):\n    return text.lower()\n```\n\n### Explanation\n1. **Problem Analysis**: The task requires converting uppercase letters to lowercase, handling both ASCII and non-ASCII characters correctly, and preserving the order of characters. The input string can be very large, so the solution must be efficient.\n\n2. **Intuition**: The built-in `lower()` method of Python strings is designed to handle case conversion for both ASCII and Unicode characters. It processes each character in linear time, which makes it suitable for large strings.\n\n3. **Algorithm Selection**: Using the `lower()` method is optimal because it meets the problem requirements and constraints, ensuring correct handling of case conversion while maintaining efficiency.\n\n4. **Complexity Analysis**: The `lower()` method operates in linear time, O(n), where n is the length of the string. It also uses O(n) space to create the new string with lowercase letters.\n\nThis approach efficiently and effectively solves the problem by leveraging Python's built-in capabilities, ensuring correctness and performance.",
  "r1_solution": "def enhanced_lower(text):\n    return text.lower()",
  "metadata": {
    "prompt_id": "00000070",
    "row_id": 70,
    "seed_ids": [
      286
    ],
    "mode": "algorithm",
    "original_instruction": ""
  },
  "file_source": "KodCode_algorithm_100_1741212598_prepared_results1.jsonl"
}