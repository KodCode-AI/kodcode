{
  "style": "instruct",
  "subset": "Algorithm",
  "question_id": "Algorithm_00000070_I",
  "question": "**Scenario**: You are working on a project that involves processing text data in various languages, including those that use non-ASCII characters. You need a function to convert all uppercase letters to lowercase letters in a string, handling both ASCII and non-ASCII characters correctly.\n\n**Question**: Implement a function `enhanced_lower` that takes a string as input and returns a new string with all uppercase letters converted to lowercase. The function should handle both ASCII and non-ASCII characters and preserve the original order of characters in the string.\n\n**Input**: A string `text` (1 <= len(text) <= 10^5) consisting of alphanumeric characters, spaces, and punctuation marks. The string may contain non-ASCII characters.\n\n**Output**: A string where all uppercase letters in the input string are converted to lowercase.\n\n**Example**:\n```python\n>>> enhanced_lower(\"Hello, World!\")\n'hello, world!'\n>>> enhanced_lower(\"\u00a1Hola, MUNDO!\")\n'\u00a1hola, mundo!'\n>>> enhanced_lower(\"Python 3.8\")\n'python 3.8'\n>>> enhanced_lower(\"12345\")\n'12345'\n>>> enhanced_lower(\" caf\u00e9\")\n' caf\u00e9'\n```\n\n**Constraints**:\n- The input string will contain at least one character and at most 10^5 characters.\n- The string may contain non-ASCII characters.\n\n**Performance Requirement**: The function should handle large strings efficiently, aiming for a time complexity of O(n) and a space complexity of O(n).",
  "solution": "def enhanced_lower(text):\n    \"\"\"\n    Converts all uppercase letters in the input string to lowercase.\n    Handles both ASCII and non-ASCII characters.\n    \"\"\"\n    return text.lower()",
  "test_code": "import pytest\n\ndef test_enhanced_lower_ascii():\n    assert enhanced_lower(\"Hello, World!\") == 'hello, world!'\n    assert enhanced_lower(\"\u00a1Hola, MUNDO!\") == '\u00a1hola, mundo!'\n    assert enhanced_lower(\"Python 3.8\") == 'python 3.8'\n    assert enhanced_lower(\"12345\") == '12345'\n    assert enhanced_lower(\" caf\u00e9\") == ' caf\u00e9'\n\ndef test_enhanced_lower_non_ascii():\n    assert enhanced_lower(\"\u039a\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1\") == '\u03ba\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1'\n    assert enhanced_lower(\"\ud83d\ude00.prop\") == '\ud83d\ude00.prop'\n    assert enhanced_lower(\" teasers\") == ' teasers'\n    assert enhanced_lower(\"Teasers\") == 'teasers'\n    assert enhanced_lower(\"Teasers\ud83d\ude00\") == 'teasers\ud83d\ude00'",
  "test_info": [
    {
      "function_name": "enhanced_lower",
      "parameter_list": "(text)",
      "function_declaration": "def enhanced_lower(text):",
      "docstring": "Converts all uppercase letters in the input string to lowercase.\nHandles both ASCII and non-ASCII characters."
    }
  ],
  "gpt_pass_sequence": [
    1,
    0,
    1
  ],
  "gpt_pass_trial_num": 2,
  "gpt_difficulty": "easy",
  "gpt_pass_percentage": 0.667,
  "r1_response": "<think>\nOkay, I need to write a Python function called enhanced_lower that converts all uppercase letters in a string to lowercase. But it has to handle both ASCII and non-ASCII characters properly. Hmm.\n\nWait, in Python, the string method lower() usually handles this, right? Because when I call 'HELLO'.lower(), it returns 'hello' and for non-ASCII characters like '\u00c4', it becomes '\u00e4'. So maybe the built-in lower() method already does what I need.\n\nLet me think about the examples provided. For instance, the second example: \"\u00a1Hola, MUNDO!\" becomes \"\u00a1hola, mundo!\". Let's see, in Python, if I take the string \"\u00a1Hola, MUNDO!\".lower(), would it correctly return \"\u00a1hola, mundo!\"? I think it should because the lower() method is Unicode-aware.\n\nBut wait, what about cases where the lowercase transformation might not be straightforward? Like for some Turkic characters, the dotless I, etc. But the problem states that I only need to handle letters that can be converted correctly, probably relying on the standard lowercasing.\n\nSo if the built-in lower() function works for both ASCII and non-ASCII, then maybe the solution is simple: return text.lower().\n\nWait, looking at the sample usage:\n\nFor example, ' caf\u00e9' becomes ' caf\u00e9' which makes sense. And 'Python 3.8' remains 'python 3.8' because the digits and punctuation are not affected.\n\nSo perhaps the enhanced_lower function can just return text.lower(). That would meet all the requirements.\n\nBut wait, what about non-ASCII uppercase letters in different languages? Like German \u00df? Well, '\u00df' is lowercase; its uppercase is 'SS'. So when you lower it, no change. But if the input string had 'SS', then lower() would make it 'ss' but perhaps some locales expect different behavior.\n\nBut according to the problem statement, just converting all uppercase letters to their lowercase is the task. So relying on the built-in lower() should suffice.\n\nSo the function would be as simple as:\n\ndef enhanced_lower(text):\n    return text.lower()\n\nWait, that's seems too easy. Let me make sure that this meets all the requirements.\n\nTesting the examples:\n\nSample 1: \"Hello, World!\" \u2192 \"hello, world!\". That's what .lower() does.\n\nSample 2: \"\u00a1Hola, MUNDO!\" \u2192 lower() gives \"\u00a1hola, mundo!\".\n\nSample 3: \"Python 3.8\" \u2192 \"python 3.8\".\n\nYes, this aligns with the examples.\n\nWhat about space and numbers? Since the function is supposed to preserve such characters, and lower() does that, all is good.\n\nWhat's the performance aspect? Each character is processed once, so O(n) time and space, which meets the constraints.\n\nI think that's the solution.\n</think>\n\nTo solve this problem, we need to create a function that converts all uppercase letters in a given string to lowercase. The function should handle both ASCII and non-ASCII characters efficiently while preserving the original order of characters and the structure of the string.\n\n### Approach\nThe approach to solving this problem is straightforward:\n- Utilize Python's built-in string method `lower()`, which is designed to handle both ASCII and Unicode characters. This method converts all uppercase characters to their corresponding lowercase characters without affecting other characters such as digits, spaces, and punctuation marks.\n- The `lower()` method is efficient, with a time complexity of O(n), where n is the length of the string, meaning it processes each character exactly once. This ensures the solution meets the performance requirements for handling large strings.\n\n### Solution Code\n\n```python\ndef enhanced_lower(text):\n    return text.lower()\n```\n\n### Explanation\n- The function `enhanced_lower` takes a single input parameter `text`, which is the string to be processed.\n- It returns the result of `text.lower()`, which converts all uppercase letters in the input string to lowercase while leaving other characters unchanged.\n- This solution efficiently handles both ASCII and non-ASCII characters, ensuring correct conversion while maintaining the original order and structure of the input string.",
  "r1_solution": "def enhanced_lower(text):\n    return text.lower()",
  "metadata": {
    "prompt_id": "00000070",
    "row_id": 70,
    "seed_ids": [
      286
    ],
    "mode": "algorithm",
    "original_instruction": ""
  },
  "file_source": "KodCode_algorithm_100_1741212598_prepared_results0.jsonl"
}