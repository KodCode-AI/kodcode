{
  "style": "instruct",
  "subset": "Algorithm",
  "question_id": "Algorithm_00000070_I",
  "question": "**Scenario**: You are working on a project that involves processing text data in various languages, including those that use non-ASCII characters. You need a function to convert all uppercase letters to lowercase letters in a string, handling both ASCII and non-ASCII characters correctly.\n\n**Question**: Implement a function `enhanced_lower` that takes a string as input and returns a new string with all uppercase letters converted to lowercase. The function should handle both ASCII and non-ASCII characters and preserve the original order of characters in the string.\n\n**Input**: A string `text` (1 <= len(text) <= 10^5) consisting of alphanumeric characters, spaces, and punctuation marks. The string may contain non-ASCII characters.\n\n**Output**: A string where all uppercase letters in the input string are converted to lowercase.\n\n**Example**:\n```python\n>>> enhanced_lower(\"Hello, World!\")\n'hello, world!'\n>>> enhanced_lower(\"\u00a1Hola, MUNDO!\")\n'\u00a1hola, mundo!'\n>>> enhanced_lower(\"Python 3.8\")\n'python 3.8'\n>>> enhanced_lower(\"12345\")\n'12345'\n>>> enhanced_lower(\" caf\u00e9\")\n' caf\u00e9'\n```\n\n**Constraints**:\n- The input string will contain at least one character and at most 10^5 characters.\n- The string may contain non-ASCII characters.\n\n**Performance Requirement**: The function should handle large strings efficiently, aiming for a time complexity of O(n) and a space complexity of O(n).",
  "solution": "def enhanced_lower(text):\n    \"\"\"\n    Converts all uppercase letters in the input string to lowercase.\n    Handles both ASCII and non-ASCII characters.\n    \"\"\"\n    return text.lower()",
  "test_code": "import pytest\n\ndef test_enhanced_lower_ascii():\n    assert enhanced_lower(\"Hello, World!\") == 'hello, world!'\n    assert enhanced_lower(\"\u00a1Hola, MUNDO!\") == '\u00a1hola, mundo!'\n    assert enhanced_lower(\"Python 3.8\") == 'python 3.8'\n    assert enhanced_lower(\"12345\") == '12345'\n    assert enhanced_lower(\" caf\u00e9\") == ' caf\u00e9'\n\ndef test_enhanced_lower_non_ascii():\n    assert enhanced_lower(\"\u039a\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1\") == '\u03ba\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1'\n    assert enhanced_lower(\"\ud83d\ude00.prop\") == '\ud83d\ude00.prop'\n    assert enhanced_lower(\" teasers\") == ' teasers'\n    assert enhanced_lower(\"Teasers\") == 'teasers'\n    assert enhanced_lower(\"Teasers\ud83d\ude00\") == 'teasers\ud83d\ude00'",
  "test_info": [
    {
      "function_name": "enhanced_lower",
      "parameter_list": "(text)",
      "function_declaration": "def enhanced_lower(text):",
      "docstring": "Converts all uppercase letters in the input string to lowercase.\nHandles both ASCII and non-ASCII characters."
    }
  ],
  "gpt_pass_sequence": [
    1,
    0,
    1
  ],
  "gpt_pass_trial_num": 2,
  "gpt_difficulty": "easy",
  "gpt_pass_percentage": 0.667,
  "r1_response": "<think>\nOkay, I need to implement a function called enhanced_lower that takes a string and returns a new string where all uppercase letters are converted to lowercase. But it has to handle both ASCII and non-ASCII characters correctly. Hmm, how do I approach this?\n\nSo, first, I remember that in Python, strings have a lower() method. But wait, does that handle non-ASCII characters properly? Oh right, in Python 3, the default lower() method is Unicode-aware, so it should handle characters beyond ASCII correctly. Like for example, '\u00a1Hola, MUNDO!' should become '\u00a1hola, mundo!' when lowercased.\n\nSo maybe the problem is just to return the lowercased version of the string. But wait, let's check the examples. The first example, enhanced_lower(\"Hello, World!\") gives 'hello, world!', which is the same as using the lower() method.\n\nSo is the solution just to return text.lower()? That seems too straightforward. But maybe I'm missing something. Let me think again.\n\nLooking at the constraints, the function needs to handle large strings up to 1e5 characters efficiently. How efficient is the lower() method in Python? Well, I believe it's implemented in C, so it runs in O(n) time, which meets the time complexity requirement. The space complexity will be O(n) as a new string is created.\n\nWait, but what about specific cases where some Unicode characters have different lowercasing rules? For example, the German \u00df becomes 'SS' when uppercased, so does lower() handle that correctly? Or what about the Turkish I, which has a dotless \u0131 when lowercased? Well, according to Unicode standards, those cases are handled properly by the lower() method, but perhaps I should verify.\n\nBut wait, the question says to handle both ASCII and non-ASCII correctly. So relying on the standard method should suffice.\n\nLet me look at the examples again. For example, \" caf\u00e9\" becomes ' caf\u00e9'\u2014the lowercase 'c' with a grave accent. The function needs to handle that properly. It seems that the lower() method is the right approach.\n\nSo perhaps the entire function can be written as:\n\ndef enhanced_lower(text):\n    return text.lower()\n\nBut that seems too simple. Did I miss anything?\n\nAnother thought: in some cases, certain Unicode characters might have context-specific lowercasing. For example, ligatures or other special characters. But in general, the lower() method should handle all these, as it's built on top of the Unicode Character Database.\n\nSo implementing the function with the built-in lower() method should meet all the requirements.\n\nBut wait, let me think about the performance. For large strings, each character is processed once, so the time should be O(n), which is acceptable. The space is O(n) because a new string is created, which is also within the constraints given.\n\nTherefore, the solution is to use the lower() method. So the code would be straightforward.\n</think>\n\nTo solve this problem, we need to implement a function that converts all uppercase letters in a given string to lowercase letters, handling both ASCII and non-ASCII characters correctly. The function should preserve the original order of characters and efficiently handle large strings.\n\n### Approach\nThe approach to solve this problem involves utilizing Python's built-in string method `lower()`, which is designed to handle both ASCII and non-ASCII characters correctly. This method is efficient and works in O(n) time complexity, where n is the length of the input string, making it suitable for large strings up to 100,000 characters. The method also adheres to Unicode standards, ensuring that special characters and non-ASCII letters are properly lowercased.\n\n### Solution Code\n\n```python\ndef enhanced_lower(text):\n    return text.lower()\n```\n\n### Explanation\nThe function `enhanced_lower` takes a single string argument `text` and returns a new string where all uppercase letters are converted to lowercase. This is achieved by calling the `lower()` method on the input string. The `lower()` method processes each character in the string, converting uppercase letters to their lowercase counterparts while leaving other characters unchanged. This approach ensures efficiency and correctness for both ASCII and non-ASCII characters, adhering to the problem constraints and requirements.",
  "r1_solution": "def enhanced_lower(text):\n    return text.lower()",
  "metadata": {
    "prompt_id": "00000070",
    "row_id": 70,
    "seed_ids": [
      286
    ],
    "mode": "algorithm",
    "original_instruction": ""
  },
  "file_source": "KodCode_algorithm_100_1741212598_prepared_results2.jsonl"
}