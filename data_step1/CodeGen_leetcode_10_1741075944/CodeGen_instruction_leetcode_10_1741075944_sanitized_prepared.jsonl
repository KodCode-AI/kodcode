{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` and an array of strings `words`. All the strings in `words` are of the same length. Your task is to find all the starting indices of substring(s) in `s` that is a concatenation of each word in `words` exactly once, without any intervening characters. The order of the words in the concatenation does not matter.\n\nReturn the starting indices of all such substrings in `s`. You can return the answer in any order.\n\n**Example:**\n\nInput: `s = \"barfoothefoobarman\"`, `words = [\"foo\",\"bar\"]`\n\nOutput: `[0,9]`\n\nExplanation: Substrings starting at index 0 and 9 are \"barfoo\" and \"foobar\" respectively."}], "metadata": {"prompt_id": "00000000", "row_id": 0, "problem_ids": ["1802", "2451", "39"], "mode": "leetcode", "instruction": "You are given a string `s` and an array of strings `words`. All the strings in `words` are of the same length. Your task is to find all the starting indices of substring(s) in `s` that is a concatenation of each word in `words` exactly once, without any intervening characters. The order of the words in the concatenation does not matter.\n\nReturn the starting indices of all such substrings in `s`. You can return the answer in any order.\n\n**Example:**\n\nInput: `s = \"barfoothefoobarman\"`, `words = [\"foo\",\"bar\"]`\n\nOutput: `[0,9]`\n\nExplanation: Substrings starting at index 0 and 9 are \"barfoo\" and \"foobar\" respectively."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of `n` integers `nums` and an integer `k`. Your task is to determine the maximum possible sum of a subarray of length `k` in the list `nums`. A subarray is a contiguous part of an array. \n\nWrite a function `maxSubarraySum(nums, k)` that takes in the list of integers `nums` and the integer `k`, and returns the maximum possible sum of a subarray of length `k`.\n\n### Example:\n```python\nmaxSubarraySum([1, 4, 2, 10, 23, 3, 1, 0, 20], 4)  # Output: 39\nmaxSubarraySum([2, 1, 5, 1, 3, 2], 3)  # Output: 9\nmaxSubarraySum([2, 3], 3)  # Output: -1 (since k is greater than the length of the list)\n```\n\n### Constraints:\n- `1 <= n <= 10^5`\n- `1 <= k <= n`\n- `-10^4 <= nums[i] <= 10^4`"}], "metadata": {"prompt_id": "00000001", "row_id": 1, "problem_ids": ["2603", "924", "1792"], "mode": "leetcode", "instruction": "You are given a list of `n` integers `nums` and an integer `k`. Your task is to determine the maximum possible sum of a subarray of length `k` in the list `nums`. A subarray is a contiguous part of an array. \n\nWrite a function `maxSubarraySum(nums, k)` that takes in the list of integers `nums` and the integer `k`, and returns the maximum possible sum of a subarray of length `k`.\n\n### Example:\n```python\nmaxSubarraySum([1, 4, 2, 10, 23, 3, 1, 0, 20], 4)  # Output: 39\nmaxSubarraySum([2, 1, 5, 1, 3, 2], 3)  # Output: 9\nmaxSubarraySum([2, 3], 3)  # Output: -1 (since k is greater than the length of the list)\n```\n\n### Constraints:\n- `1 <= n <= 10^5`\n- `1 <= k <= n`\n- `-10^4 <= nums[i] <= 10^4`"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a 2D grid of size `m x n` representing a map where `0` represents water and `1` represents land. An island is a group of `1`s (land) connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are surrounded by water. The area of an island is the number of cells with value `1` in the island. Return _the **maximum area** of an island in the given grid_. If there is no island, return `0`."}], "metadata": {"prompt_id": "00000002", "row_id": 2, "problem_ids": ["1668", "1713", "740"], "mode": "leetcode", "instruction": "You are given a 2D grid of size `m x n` representing a map where `0` represents water and `1` represents land. An island is a group of `1`s (land) connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are surrounded by water. The area of an island is the number of cells with value `1` in the island. Return _the **maximum area** of an island in the given grid_. If there is no island, return `0`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an integer array `nums` and an integer `k`, return the maximum sum of a subarray of length `k`. A subarray is a contiguous part of an array. If the length of `nums` is less than `k`, return `-1`. \n\nFor example, given `nums = [1, 4, 2, 10, 23, 3, 1, 0, 20]` and `k = 4`, the maximum sum of a subarray of length `k` is `39` (subarray `[4, 2, 10, 23]`)."}], "metadata": {"prompt_id": "00000003", "row_id": 3, "problem_ids": ["1547", "520", "1335"], "mode": "leetcode", "instruction": "Given an integer array `nums` and an integer `k`, return the maximum sum of a subarray of length `k`. A subarray is a contiguous part of an array. If the length of `nums` is less than `k`, return `-1`. \n\nFor example, given `nums = [1, 4, 2, 10, 23, 3, 1, 0, 20]` and `k = 4`, the maximum sum of a subarray of length `k` is `39` (subarray `[4, 2, 10, 23]`)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of `n` integers, `nums`, and an integer `k`, return _the length of the longest contiguous subarray that contains at most `k` distinct integers_. If there are multiple such subarrays, return the length of any one of them. \n\nFor example, given `nums = [1, 2, 1, 2, 3]` and `k = 2`, the longest subarray with at most 2 distinct integers is `[1, 2, 1, 2]`, so the function should return `4`.\n\nImplement the function `int longestSubarrayWithKDistinct(int[] nums, int k)` that returns the length of the longest contiguous subarray with at most `k` distinct integers."}], "metadata": {"prompt_id": "00000004", "row_id": 4, "problem_ids": ["1086", "1353", "2080"], "mode": "leetcode", "instruction": "Given a list of `n` integers, `nums`, and an integer `k`, return _the length of the longest contiguous subarray that contains at most `k` distinct integers_. If there are multiple such subarrays, return the length of any one of them. \n\nFor example, given `nums = [1, 2, 1, 2, 3]` and `k = 2`, the longest subarray with at most 2 distinct integers is `[1, 2, 1, 2]`, so the function should return `4`.\n\nImplement the function `int longestSubarrayWithKDistinct(int[] nums, int k)` that returns the length of the longest contiguous subarray with at most `k` distinct integers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, return _the length of the longest substring without repeating characters_. A substring is a contiguous sequence of characters within a string."}], "metadata": {"prompt_id": "00000005", "row_id": 5, "problem_ids": ["2455", "169", "1604"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, return _the length of the longest substring without repeating characters_. A substring is a contiguous sequence of characters within a string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of integers `nums` and an integer `target`. Your task is to find all unique combinations in `nums` where the numbers sum to `target`. Each number in `nums` may only be used once in the combination. The solution set must not contain duplicate combinations. Return the list of all unique combinations. The combinations can be returned in any order.\n\n**Example:**\n```\nInput: nums = [10,1,2,7,6,1,5], target = 8\nOutput: \n[\n  [1,1,6],\n  [1,2,5],\n  [1,7],\n  [2,6]\n]\n```\n\n**Constraints:**\n- `1 <= nums.length <= 100`\n- `1 <= nums[i] <= 50`\n- `1 <= target <= 500`"}], "metadata": {"prompt_id": "00000006", "row_id": 6, "problem_ids": ["2243", "774", "2"], "mode": "leetcode", "instruction": "You are given a list of integers `nums` and an integer `target`. Your task is to find all unique combinations in `nums` where the numbers sum to `target`. Each number in `nums` may only be used once in the combination. The solution set must not contain duplicate combinations. Return the list of all unique combinations. The combinations can be returned in any order.\n\n**Example:**\n```\nInput: nums = [10,1,2,7,6,1,5], target = 8\nOutput: \n[\n  [1,1,6],\n  [1,2,5],\n  [1,7],\n  [2,6]\n]\n```\n\n**Constraints:**\n- `1 <= nums.length <= 100`\n- `1 <= nums[i] <= 50`\n- `1 <= target <= 500`"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:A **valid parentheses string** is a string that consists of only the characters `'('` and `')'` and satisfies the following conditions:\n- It is an empty string, or\n- It can be written as `AB` (A concatenated with B), where A and B are valid parentheses strings, or\n- It can be written as `(A)`, where A is a valid parentheses string.\n\nGiven a valid parentheses string `s`, consider its **score** defined as follows:\n- The score of an empty string is 0.\n- The score of `()` is 1.\n- The score of `AB` is the sum of the scores of A and B.\n- The score of `(A)` is 2 times the score of A.\n\nImplement a function `scoreOfParentheses` that calculates the score of a given valid parentheses string `s`.\n\n**Example:**\n```\nInput: s = \"(()(()))\"\nOutput: 6\nExplanation: The score of \"(()(()))\" is 6.\n```\n\n**Constraints:**\n- `1 <= s.length <= 50`\n- `s` consists of only `'('` and `')'`.\n- `s` is a valid parentheses string."}], "metadata": {"prompt_id": "00000007", "row_id": 7, "problem_ids": ["919", "1415", "589"], "mode": "leetcode", "instruction": "A **valid parentheses string** is a string that consists of only the characters `'('` and `')'` and satisfies the following conditions:\n- It is an empty string, or\n- It can be written as `AB` (A concatenated with B), where A and B are valid parentheses strings, or\n- It can be written as `(A)`, where A is a valid parentheses string.\n\nGiven a valid parentheses string `s`, consider its **score** defined as follows:\n- The score of an empty string is 0.\n- The score of `()` is 1.\n- The score of `AB` is the sum of the scores of A and B.\n- The score of `(A)` is 2 times the score of A.\n\nImplement a function `scoreOfParentheses` that calculates the score of a given valid parentheses string `s`.\n\n**Example:**\n```\nInput: s = \"(()(()))\"\nOutput: 6\nExplanation: The score of \"(()(()))\" is 6.\n```\n\n**Constraints:**\n- `1 <= s.length <= 50`\n- `s` consists of only `'('` and `')'`.\n- `s` is a valid parentheses string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` containing only lowercase English letters, you need to find the length of the longest substring that contains at most two distinct characters. Implement the `Solution` class:\n\n* `Solution(String s)` Initializes the object with the string `s`.\n* `int lengthOfLongestSubstringTwoDistinct()` Returns the length of the longest substring that contains at most two distinct characters.\n\nFor example, given `s = \"eceba\"`, the method `lengthOfLongestSubstringTwoDistinct()` should return `3`, because the longest substring with at most two distinct characters is `\"ece\"`."}], "metadata": {"prompt_id": "00000008", "row_id": 8, "problem_ids": ["398", "2387", "1040"], "mode": "leetcode", "instruction": "Given a string `s` containing only lowercase English letters, you need to find the length of the longest substring that contains at most two distinct characters. Implement the `Solution` class:\n\n* `Solution(String s)` Initializes the object with the string `s`.\n* `int lengthOfLongestSubstringTwoDistinct()` Returns the length of the longest substring that contains at most two distinct characters.\n\nFor example, given `s = \"eceba\"`, the method `lengthOfLongestSubstringTwoDistinct()` should return `3`, because the longest substring with at most two distinct characters is `\"ece\"`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you need to find the length of the longest substring that contains at most two distinct characters.\n\nFor example:\n- Given `s = \"eceba\"`, the answer is `3`, because the longest substring is `\"ece\"`.\n- Given `s = \"ccaabbb\"`, the answer is `5`, because the longest substring is `\"aabbb\"`.\n\nWrite a function `longestSubstringTwoDistinct(s: str) -> int` that returns the length of the longest substring with at most two distinct characters."}], "metadata": {"prompt_id": "00000009", "row_id": 9, "problem_ids": ["2005", "179", "754"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you need to find the length of the longest substring that contains at most two distinct characters.\n\nFor example:\n- Given `s = \"eceba\"`, the answer is `3`, because the longest substring is `\"ece\"`.\n- Given `s = \"ccaabbb\"`, the answer is `5`, because the longest substring is `\"aabbb\"`.\n\nWrite a function `longestSubstringTwoDistinct(s: str) -> int` that returns the length of the longest substring with at most two distinct characters."}}
