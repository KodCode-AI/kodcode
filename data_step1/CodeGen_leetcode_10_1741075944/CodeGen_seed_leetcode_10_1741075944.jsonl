{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given three positive integers: `n`, `index`, and `maxSum`. You want to construct an array `nums` (**0-indexed**) that satisfies the following conditions:  *   `nums.length == n` *   `nums[i]` is a **positive** integer where `0 <= i < n`. *   `abs(nums[i] - nums[i+1]) <= 1` where `0 <= i < n-1`. *   The sum of all the elements of `nums` does not exceed `maxSum`. *   `nums[index]` is **maximized**.  Return `nums[index]` _of the constructed array_.  Note that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.\n\n[Question 2]: You are given an array of equal-length strings `words`. Assume that the length of each string is `n`.  Each string `words[i]` can be converted into a **difference integer array** `difference[i]` of length `n - 1` where `difference[i][j] = words[i][j+1] - words[i][j]` where `0 <= j <= n - 2`. Note that the difference between two letters is the difference between their **positions** in the alphabet i.e. the position of `'a'` is `0`, `'b'` is `1`, and `'z'` is `25`.  *   For example, for the string `\"acb \"`, the difference integer array is `[2 - 0, 1 - 2] = [2, -1]`.  All the strings in words have the same difference integer array, **except one**. You should find that string.  Return _the string in_ `words` _that has different **difference integer array**._\n\n[Question 3]: Given an array of **distinct** integers `candidates` and a target integer `target`, return _a list of all **unique combinations** of_ `candidates` _where the chosen numbers sum to_ `target`_._ You may return the combinations in **any order**.  The **same** number may be chosen from `candidates` an **unlimited number of times**. Two combinations are unique if the frequency of at least one of the chosen numbers is different.  The test cases are generated such that the number of unique combinations that sum up to `target` is less than `150` combinations for the given input.\n\n[Question 4]:"}], "metadata": {"prompt_id": "00000000", "row_id": 0, "problem_ids": ["1802", "2451", "39"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: There exists an undirected and unrooted tree with `n` nodes indexed from `0` to `n - 1`. You are given an integer `n` and a 2D integer array edges of length `n - 1`, where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. You are also given an array `coins` of size `n` where `coins[i]` can be either `0` or `1`, where `1` indicates the presence of a coin in the vertex `i`.  Initially, you choose to start at any vertex in the tree. Then, you can perform the following operations any number of times:  *   Collect all the coins that are at a distance of at most `2` from the current vertex, or *   Move to any adjacent vertex in the tree.  Find _the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex_.  Note that if you pass an edge several times, you need to count it into the answer several times.\n\n[Question 2]: You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`.  Some nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.  Suppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove **exactly one node** from `initial`.  Return the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with **the smallest index**.  Note that if a node was removed from the `initial` list of infected nodes, it might still be infected later due to the malware spread.\n\n[Question 3]: There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array `classes`, where `classes[i] = [passi, totali]`. You know beforehand that in the `ith` class, there are `totali` total students, but only `passi` number of students will pass the exam.  You are also given an integer `extraStudents`. There are another `extraStudents` brilliant students that are **guaranteed** to pass the exam of any class they are assigned to. You want to assign each of the `extraStudents` students to a class in a way that **maximizes** the **average** pass ratio across **all** the classes.  The **pass ratio** of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The **average pass ratio** is the sum of pass ratios of all the classes divided by the number of the classes.  Return _the **maximum** possible average pass ratio after assigning the_ `extraStudents` _students._ Answers within `10-5` of the actual answer will be accepted.\n\n[Question 4]:"}], "metadata": {"prompt_id": "00000001", "row_id": 1, "problem_ids": ["2603", "924", "1792"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: For a string `sequence`, a string `word` is **`k`\\-repeating** if `word` concatenated `k` times is a substring of `sequence`. The `word`'s **maximum `k`\\-repeating value** is the highest value `k` where `word` is `k`\\-repeating in `sequence`. If `word` is not a substring of `sequence`, `word`'s maximum `k`\\-repeating value is `0`.  Given strings `sequence` and `word`, return _the **maximum `k`\\-repeating value** of `word` in `sequence`_.\n\n[Question 2]: You are given an array `target` that consists of **distinct** integers and another integer array `arr` that **can** have duplicates.  In one operation, you can insert any integer at any position in `arr`. For example, if `arr = [1,4,1,2]`, you can add `3` in the middle and make it `[1,4,3,1,2]`. Note that you can insert the integer at the very beginning or end of the array.  Return _the **minimum** number of operations needed to make_ `target` _a **subsequence** of_ `arr`_._  A **subsequence** of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, `[2,7,4]` is a subsequence of `[4,2,3,7,2,1,4]` (the underlined elements), while `[2,4,2]` is not.\n\n[Question 3]: You are given an integer array `nums`. You want to maximize the number of points you get by performing the following operation any number of times:  *   Pick any `nums[i]` and delete it to earn `nums[i]` points. Afterwards, you must delete **every** element equal to `nums[i] - 1` and **every** element equal to `nums[i] + 1`.  Return _the **maximum number of points** you can earn by applying the above operation some number of times_.\n\n[Question 4]:"}], "metadata": {"prompt_id": "00000002", "row_id": 2, "problem_ids": ["1668", "1713", "740"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given a wooden stick of length `n` units. The stick is labelled from `0` to `n`. For example, a stick of length **6** is labelled as follows:  Given an integer array `cuts` where `cuts[i]` denotes a position you should perform a cut at.  You should perform the cuts in order, you can change the order of the cuts as you wish.  The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.  Return _the minimum total cost_ of the cuts.\n\n[Question 2]: We define the usage of capitals in a word to be right when one of the following cases holds:  *   All letters in this word are capitals, like `\"USA \"`. *   All letters in this word are not capitals, like `\"leetcode \"`. *   Only the first letter in this word is capital, like `\"Google \"`.  Given a string `word`, return `true` if the usage of capitals in it is right.\n\n[Question 3]: You want to schedule a list of jobs in `d` days. Jobs are dependent (i.e To work on the `ith` job, you have to finish all the jobs `j` where `0 <= j < i`).  You have to finish **at least** one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the `d` days. The difficulty of a day is the maximum difficulty of a job done on that day.  You are given an integer array `jobDifficulty` and an integer `d`. The difficulty of the `ith` job is `jobDifficulty[i]`.  Return _the minimum difficulty of a job schedule_. If you cannot find a schedule for the jobs return `-1`.\n\n[Question 4]:"}], "metadata": {"prompt_id": "00000003", "row_id": 3, "problem_ids": ["1547", "520", "1335"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given a list of the scores of different students, `items`, where `items[i] = [IDi, scorei]` represents one score from a student with `IDi`, calculate each student's **top five average**.  Return _the answer as an array of pairs_ `result`_, where_ `result[j] = [IDj, topFiveAveragej]` _represents the student with_ `IDj` _and their **top five average**. Sort_ `result` _by_ `IDj` _in **increasing order**._  A student's **top five average** is calculated by taking the sum of their top five scores and dividing it by `5` using **integer division**.\n\n[Question 2]: You are given an array of `events` where `events[i] = [startDayi, endDayi]`. Every event `i` starts at `startDayi` and ends at `endDayi`.  You can attend an event `i` at any day `d` where `startTimei <= d <= endTimei`. You can only attend one event at any time `d`.  Return _the maximum number of events you can attend_.\n\n[Question 3]: Design a data structure to find the **frequency** of a given value in a given subarray.  The **frequency** of a value in a subarray is the number of occurrences of that value in the subarray.  Implement the `RangeFreqQuery` class:  *   `RangeFreqQuery(int[] arr)` Constructs an instance of the class with the given **0-indexed** integer array `arr`. *   `int query(int left, int right, int value)` Returns the **frequency** of `value` in the subarray `arr[left...right]`.  A **subarray** is a contiguous sequence of elements within an array. `arr[left...right]` denotes the subarray that contains the elements of `nums` between indices `left` and `right` (**inclusive**).\n\n[Question 4]:"}], "metadata": {"prompt_id": "00000004", "row_id": 4, "problem_ids": ["1086", "1353", "2080"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given an integer array `nums` of **positive** integers, return _the average value of all even integers that are divisible by_ `3`_._  Note that the **average** of `n` elements is the **sum** of the `n` elements divided by `n` and **rounded down** to the nearest integer.\n\n[Question 2]: Given an array `nums` of size `n`, return _the majority element_.  The majority element is the element that appears more than `\u230an / 2\u230b` times. You may assume that the majority element always exists in the array.\n\n[Question 3]: LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an **alert** if any worker uses the key-card **three or more times** in a one-hour period.  You are given a list of strings `keyName` and `keyTime` where `[keyName[i], keyTime[i]]` corresponds to a person's name and the time when their key-card was used **in a** **single day**.  Access times are given in the **24-hour time format \"HH:MM \"**, such as `\"23:51 \"` and `\"09:49 \"`.  Return a _list of unique worker names who received an alert for frequent keycard use_. Sort the names in **ascending order alphabetically**.  Notice that `\"10:00 \"` - `\"11:00 \"` is considered to be within a one-hour period, while `\"22:51 \"` - `\"23:52 \"` is not considered to be within a one-hour period.\n\n[Question 4]:"}], "metadata": {"prompt_id": "00000005", "row_id": 5, "problem_ids": ["2455", "169", "1604"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: You are given a string `s` consisting of digits and an integer `k`.  A **round** can be completed if the length of `s` is greater than `k`. In one round, do the following:  1.  **Divide** `s` into **consecutive groups** of size `k` such that the first `k` characters are in the first group, the next `k` characters are in the second group, and so on. **Note** that the size of the last group can be smaller than `k`. 2.  **Replace** each group of `s` with a string representing the sum of all its digits. For example, `\"346 \"` is replaced with `\"13 \"` because `3 + 4 + 6 = 13`. 3.  **Merge** consecutive groups together to form a new string. If the length of the string is greater than `k`, repeat from step `1`.  Return `s` _after all rounds have been completed_.\n\n[Question 2]: You are given an integer array `stations` that represents the positions of the gas stations on the **x-axis**. You are also given an integer `k`.  You should add `k` new gas stations. You can add the stations anywhere on the **x-axis**, and not necessarily on an integer position.  Let `penalty()` be the maximum distance between **adjacent** gas stations after adding the `k` new stations.  Return _the smallest possible value of_ `penalty()`. Answers within `10-6` of the actual answer will be accepted.\n\n[Question 3]: You are given two **non-empty** linked lists representing two non-negative integers. The digits are stored in **reverse order**, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.  You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n[Question 4]:"}], "metadata": {"prompt_id": "00000006", "row_id": 6, "problem_ids": ["2243", "774", "2"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: A **complete binary tree** is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.  Design an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.  Implement the `CBTInserter` class:  *   `CBTInserter(TreeNode root)` Initializes the data structure with the `root` of the complete binary tree. *   `int insert(int v)` Inserts a `TreeNode` into the tree with value `Node.val == val` so that the tree remains complete, and returns the value of the parent of the inserted `TreeNode`. *   `TreeNode get_root()` Returns the root node of the tree.\n\n[Question 2]: A **happy string** is a string that:  *   consists only of letters of the set `['a', 'b', 'c']`. *   `s[i] != s[i + 1]` for all values of `i` from `1` to `s.length - 1` (string is 1-indexed).  For example, strings **\"abc \", \"ac \", \"b \"** and **\"abcbabcbcb \"** are all happy strings and strings **\"aa \", \"baa \"** and **\"ababbc \"** are not happy strings.  Given two integers `n` and `k`, consider a list of all happy strings of length `n` sorted in lexicographical order.  Return _the kth string_ of this list or return an **empty string** if there are less than `k` happy strings of length `n`.\n\n[Question 3]: Given the `root` of an n-ary tree, return _the preorder traversal of its nodes' values_.  Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\n\n[Question 4]:"}], "metadata": {"prompt_id": "00000007", "row_id": 7, "problem_ids": ["919", "1415", "589"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: Given an integer array `nums` with possible **duplicates**, randomly output the index of a given `target` number. You can assume that the given target number must exist in the array.  Implement the `Solution` class:  *   `Solution(int[] nums)` Initializes the object with the array `nums`. *   `int pick(int target)` Picks a random index `i` from `nums` where `nums[i] == target`. If there are multiple valid i's, then each index should have an equal probability of returning.\n\n[Question 2]: Given an `m x n` matrix `grid` containing an **odd** number of integers where each row is sorted in **non-decreasing** order, return _the **median** of the matrix_.  You must solve the problem in less than `O(m * n)` time complexity.\n\n[Question 3]: There are some stones in different positions on the X-axis. You are given an integer array `stones`, the positions of the stones.  Call a stone an **endpoint stone** if it has the smallest or largest position. In one move, you pick up an **endpoint stone** and move it to an unoccupied position so that it is no longer an **endpoint stone**.  *   In particular, if the stones are at say, `stones = [1,2,5]`, you cannot move the endpoint stone at position `5`, since moving it to any position (such as `0`, or `3`) will still keep that stone as an endpoint stone.  The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).  Return _an integer array_ `answer` _of length_ `2` _where_:  *   `answer[0]` _is the minimum number of moves you can play, and_ *   `answer[1]` _is the maximum number of moves you can play_.\n\n[Question 4]:"}], "metadata": {"prompt_id": "00000008", "row_id": 8, "problem_ids": ["398", "2387", "1040"], "mode": "leetcode"}}
{"messages": [{"role": "user", "content": "## Task\nDesign a **Coding Assessment Question**.\n\n## Objective\nAnalyze the provided sample questions and create an additional question that aligns with the existing set in terms of style, complexity, and scope.\n\n## Guidelines\n\n### Question Style\n- Carefully examine the format and presentation of the given questions.\n- Maintain a consistent tone and language used in the original set.\n\n### Question Length\n- Ensure your new question is of comparable length to the existing ones.\n- If the original questions vary in length, aim for the average length among them.\n\n### Difficulty Level\n- Assess the cognitive and technical challenges presented in the sample questions.\n- Match the complexity of concepts, algorithms, or programming techniques required.\n\n### Topic Alignment\n- Identify the core programming concepts or domains covered in the existing questions.\n- Create a question that explores a related or complementary area within the same general topic.\n\n### Question Uniqueness\n- While maintaining similarity, ensure your new question is not a mere rephrasing of an existing one.\n- Introduce a novel problem or scenario that tests the same skills in a different context.\n\n## Output\nCreate a new question that matches the style of the existing set of questions. Output one new question only. Direct output the question, without adding question number or any other text in the beginning.\n[Question 1]: A **Fibonacci** tree is a binary tree created using the order function `order(n)`:  *   `order(0)` is the empty tree. *   `order(1)` is a binary tree with only **one node**. *   `order(n)` is a binary tree that consists of a root node with the left subtree as `order(n - 2)` and the right subtree as `order(n - 1)`.  Alice and Bob are playing a game with a **Fibonacci** tree with Alice staring first. On each turn, a player selects a node and removes that node **and** its subtree. The player that is forced to delete `root` loses.  Given the integer `n`, return `true` if Alice wins the game or `false` if Bob wins, assuming both players play optimally.  A subtree of a binary tree `tree` is a tree that consists of a node in `tree` and all of this node's descendants. The tree `tree` could also be considered as a subtree of itself.\n\n[Question 2]: Given a list of non-negative integers `nums`, arrange them such that they form the largest number and return it.  Since the result may be very large, so you need to return a string instead of an integer.\n\n[Question 3]: You are standing at position `0` on an infinite number line. There is a destination at position `target`.  You can make some number of moves `numMoves` so that:  *   On each move, you can either go left or right. *   During the `ith` move (starting from `i == 1` to `i == numMoves`), you take `i` steps in the chosen direction.  Given the integer `target`, return _the **minimum** number of moves required (i.e., the minimum_ `numMoves`_) to reach the destination_.\n\n[Question 4]:"}], "metadata": {"prompt_id": "00000009", "row_id": 9, "problem_ids": ["2005", "179", "754"], "mode": "leetcode"}}
