{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a string `s` and an array of strings `words`. All the strings in `words` are of the same length. Your task is to find all the starting indices of substring(s) in `s` that is a concatenation of each word in `words` exactly once, without any intervening characters. The order of the words in the concatenation does not matter.\n\nReturn the starting indices of all such substrings in `s`. You can return the answer in any order.\n\n**Example:**\n\nInput: `s = \"barfoothefoobarman\"`, `words = [\"foo\",\"bar\"]`\n\nOutput: `[0,9]`\n\nExplanation: Substrings starting at index 0 and 9 are \"barfoo\" and \"foobar\" respectively."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef find_substring(s, words):\n    from collections import Counter\n    \n    if not s or not words or not words[0]:\n        return []\n    \n    word_length = len(words[0])\n    num_words = len(words)\n    total_length = word_length * num_words\n    word_count = Counter(words)\n    \n    result = []\n    \n    for i in range(len(s) - total_length + 1):\n        seen = {}\n        for j in range(num_words):\n            word_index = i + j * word_length\n            word = s[word_index:word_index + word_length]\n            if word in word_count:\n                seen[word] = seen.get(word, 0) + 1\n                if seen[word] > word_count[word]:\n                    break\n            else:\n                break\n        else:\n            result.append(i)\n    \n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import find_substring\n\ndef test_example_case():\n    s = \"barfoothefoobarman\"\n    words = [\"foo\", \"bar\"]\n    assert find_substring(s, words) == [0, 9]\n\ndef test_no_match():\n    s = \"wordgoodgoodgoodbestword\"\n    words = [\"word\", \"good\", \"best\", \"word\"]\n    assert find_substring(s, words) == []\n\ndef test_multiple_matches():\n    s = \"barfoofoobarthefoobarman\"\n    words = [\"bar\", \"foo\", \"the\"]\n    assert find_substring(s, words) == [6, 9, 12]\n\ndef test_single_word():\n    s = \"foobarfoobar\"\n    words = [\"foo\"]\n    assert find_substring(s, words) == [0, 3, 6, 9]\n\ndef test_empty_string():\n    s = \"\"\n    words = [\"foo\", \"bar\"]\n    assert find_substring(s, words) == []\n\ndef test_empty_words():\n    s = \"barfoothefoobarman\"\n    words = []\n    assert find_substring(s, words) == []\n\ndef test_words_with_different_lengths():\n    s = \"barfoothefoobarman\"\n    words = [\"foo\", \"bar\", \"the\"]\n    assert find_substring(s, words) == []\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000000", "row_id": 0, "problem_ids": ["1802", "2451", "39"], "mode": "leetcode", "instruction": "You are given a string `s` and an array of strings `words`. All the strings in `words` are of the same length. Your task is to find all the starting indices of substring(s) in `s` that is a concatenation of each word in `words` exactly once, without any intervening characters. The order of the words in the concatenation does not matter.\n\nReturn the starting indices of all such substrings in `s`. You can return the answer in any order.\n\n**Example:**\n\nInput: `s = \"barfoothefoobarman\"`, `words = [\"foo\",\"bar\"]`\n\nOutput: `[0,9]`\n\nExplanation: Substrings starting at index 0 and 9 are \"barfoo\" and \"foobar\" respectively."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of `n` integers `nums` and an integer `k`. Your task is to determine the maximum possible sum of a subarray of length `k` in the list `nums`. A subarray is a contiguous part of an array. \n\nWrite a function `maxSubarraySum(nums, k)` that takes in the list of integers `nums` and the integer `k`, and returns the maximum possible sum of a subarray of length `k`.\n\n### Example:\n```python\nmaxSubarraySum([1, 4, 2, 10, 23, 3, 1, 0, 20], 4)  # Output: 39\nmaxSubarraySum([2, 1, 5, 1, 3, 2], 3)  # Output: 9\nmaxSubarraySum([2, 3], 3)  # Output: -1 (since k is greater than the length of the list)\n```\n\n### Constraints:\n- `1 <= n <= 10^5`\n- `1 <= k <= n`\n- `-10^4 <= nums[i] <= 10^4`"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef maxSubarraySum(nums, k):\n    \"\"\"\n    Returns the maximum possible sum of a subarray of length k in the list nums.\n    \"\"\"\n    n = len(nums)\n    if k > n:\n        return -1  # If k is greater than the length of the list, return -1\n    \n    # Calculate the sum of the first subarray of length k\n    max_sum = current_sum = sum(nums[:k])\n    \n    # Use sliding window technique to find the maximum sum of subarray of length k\n    for i in range(k, n):\n        current_sum += nums[i] - nums[i - k]\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import maxSubarraySum\n\ndef test_maxSubarraySum_example1():\n    assert maxSubarraySum([1, 4, 2, 10, 23, 3, 1, 0, 20], 4) == 39\n\ndef test_maxSubarraySum_example2():\n    assert maxSubarraySum([2, 1, 5, 1, 3, 2], 3) == 9\n\ndef test_maxSubarraySum_k_greater_than_length():\n    assert maxSubarraySum([2, 3], 3) == -1\n\ndef test_maxSubarraySum_single_element():\n    assert maxSubarraySum([5], 1) == 5\n\ndef test_maxSubarraySum_all_negative():\n    assert maxSubarraySum([-1, -2, -3, -4], 2) == -3\n\ndef test_maxSubarraySum_mixed_numbers():\n    assert maxSubarraySum([1, -2, 3, 10, -4, 7, 2, -5], 3) == 15\n\ndef test_maxSubarraySum_large_k():\n    assert maxSubarraySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 55\n\ndef test_maxSubarraySum_k_equals_1():\n    assert maxSubarraySum([1, 2, 3, 4, 5], 1) == 5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000001", "row_id": 1, "problem_ids": ["2603", "924", "1792"], "mode": "leetcode", "instruction": "You are given a list of `n` integers `nums` and an integer `k`. Your task is to determine the maximum possible sum of a subarray of length `k` in the list `nums`. A subarray is a contiguous part of an array. \n\nWrite a function `maxSubarraySum(nums, k)` that takes in the list of integers `nums` and the integer `k`, and returns the maximum possible sum of a subarray of length `k`.\n\n### Example:\n```python\nmaxSubarraySum([1, 4, 2, 10, 23, 3, 1, 0, 20], 4)  # Output: 39\nmaxSubarraySum([2, 1, 5, 1, 3, 2], 3)  # Output: 9\nmaxSubarraySum([2, 3], 3)  # Output: -1 (since k is greater than the length of the list)\n```\n\n### Constraints:\n- `1 <= n <= 10^5`\n- `1 <= k <= n`\n- `-10^4 <= nums[i] <= 10^4`"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a 2D grid of size `m x n` representing a map where `0` represents water and `1` represents land. An island is a group of `1`s (land) connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are surrounded by water. The area of an island is the number of cells with value `1` in the island. Return _the **maximum area** of an island in the given grid_. If there is no island, return `0`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_area_of_island(grid):\n    \"\"\"\n    Returns the maximum area of an island in the given grid.\n    \"\"\"\n    if not grid or not grid[0]:\n        return 0\n\n    m, n = len(grid), len(grid[0])\n    max_area = 0\n\n    def dfs(x, y):\n        if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == 0:\n            return 0\n        grid[x][y] = 0  # Mark the cell as visited\n        area = 1\n        area += dfs(x + 1, y)\n        area += dfs(x - 1, y)\n        area += dfs(x, y + 1)\n        area += dfs(x, y - 1)\n        return area\n\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                max_area = max(max_area, dfs(i, j))\n\n    return max_area\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_area_of_island\n\ndef test_single_island():\n    grid = [\n        [0, 0, 0, 0, 0],\n        [0, 1, 1, 0, 0],\n        [0, 1, 1, 0, 0],\n        [0, 0, 0, 0, 0]\n    ]\n    assert max_area_of_island(grid) == 4\n\ndef test_multiple_islands():\n    grid = [\n        [0, 0, 1, 0, 0],\n        [0, 1, 1, 0, 0],\n        [0, 0, 0, 1, 1],\n        [0, 0, 0, 1, 1]\n    ]\n    assert max_area_of_island(grid) == 4\n\ndef test_no_island():\n    grid = [\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0]\n    ]\n    assert max_area_of_island(grid) == 0\n\ndef test_entire_grid_island():\n    grid = [\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1]\n    ]\n    assert max_area_of_island(grid) == 9\n\ndef test_islands_with_different_sizes():\n    grid = [\n        [1, 0, 0, 1, 1],\n        [1, 0, 0, 1, 0],\n        [0, 0, 0, 0, 0],\n        [1, 1, 0, 0, 1]\n    ]\n    assert max_area_of_island(grid) == 3\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000002", "row_id": 2, "problem_ids": ["1668", "1713", "740"], "mode": "leetcode", "instruction": "You are given a 2D grid of size `m x n` representing a map where `0` represents water and `1` represents land. An island is a group of `1`s (land) connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are surrounded by water. The area of an island is the number of cells with value `1` in the island. Return _the **maximum area** of an island in the given grid_. If there is no island, return `0`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given an integer array `nums` and an integer `k`, return the maximum sum of a subarray of length `k`. A subarray is a contiguous part of an array. If the length of `nums` is less than `k`, return `-1`. \n\nFor example, given `nums = [1, 4, 2, 10, 23, 3, 1, 0, 20]` and `k = 4`, the maximum sum of a subarray of length `k` is `39` (subarray `[4, 2, 10, 23]`)."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef max_sum_subarray(nums, k):\n    \"\"\"\n    Returns the maximum sum of a subarray of length k.\n    If the length of nums is less than k, returns -1.\n    \"\"\"\n    n = len(nums)\n    if n < k:\n        return -1\n    \n    # Compute the sum of the first window of size k\n    max_sum = sum(nums[:k])\n    current_sum = max_sum\n    \n    # Slide the window over the array\n    for i in range(k, n):\n        current_sum += nums[i] - nums[i - k]\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import max_sum_subarray\n\ndef test_max_sum_subarray_basic():\n    assert max_sum_subarray([1, 4, 2, 10, 23, 3, 1, 0, 20], 4) == 39\n\ndef test_max_sum_subarray_single_element():\n    assert max_sum_subarray([5], 1) == 5\n\ndef test_max_sum_subarray_k_greater_than_length():\n    assert max_sum_subarray([1, 2, 3], 4) == -1\n\ndef test_max_sum_subarray_all_negative():\n    assert max_sum_subarray([-1, -2, -3, -4], 2) == -3\n\ndef test_max_sum_subarray_mixed_numbers():\n    assert max_sum_subarray([1, -2, 3, 4, -1, 2, 1, -5, 4], 3) == 6\n\ndef test_max_sum_subarray_k_equals_length():\n    assert max_sum_subarray([1, 2, 3, 4, 5], 5) == 15\n\ndef test_max_sum_subarray_empty_array():\n    assert max_sum_subarray([], 1) == -1\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000003", "row_id": 3, "problem_ids": ["1547", "520", "1335"], "mode": "leetcode", "instruction": "Given an integer array `nums` and an integer `k`, return the maximum sum of a subarray of length `k`. A subarray is a contiguous part of an array. If the length of `nums` is less than `k`, return `-1`. \n\nFor example, given `nums = [1, 4, 2, 10, 23, 3, 1, 0, 20]` and `k = 4`, the maximum sum of a subarray of length `k` is `39` (subarray `[4, 2, 10, 23]`)."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a list of `n` integers, `nums`, and an integer `k`, return _the length of the longest contiguous subarray that contains at most `k` distinct integers_. If there are multiple such subarrays, return the length of any one of them. \n\nFor example, given `nums = [1, 2, 1, 2, 3]` and `k = 2`, the longest subarray with at most 2 distinct integers is `[1, 2, 1, 2]`, so the function should return `4`.\n\nImplement the function `int longestSubarrayWithKDistinct(int[] nums, int k)` that returns the length of the longest contiguous subarray with at most `k` distinct integers."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longestSubarrayWithKDistinct(nums, k):\n    \"\"\"\n    Returns the length of the longest contiguous subarray with at most k distinct integers.\n    \"\"\"\n    from collections import defaultdict\n\n    n = len(nums)\n    if n == 0 or k == 0:\n        return 0\n\n    left = 0\n    right = 0\n    max_length = 0\n    distinct_count = 0\n    freq_map = defaultdict(int)\n\n    while right < n:\n        if freq_map[nums[right]] == 0:\n            distinct_count += 1\n        freq_map[nums[right]] += 1\n        right += 1\n\n        while distinct_count > k:\n            freq_map[nums[left]] -= 1\n            if freq_map[nums[left]] == 0:\n                distinct_count -= 1\n            left += 1\n\n        max_length = max(max_length, right - left)\n\n    return max_length\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import longestSubarrayWithKDistinct\n\ndef test_example_case():\n    assert longestSubarrayWithKDistinct([1, 2, 1, 2, 3], 2) == 4\n\ndef test_single_element():\n    assert longestSubarrayWithKDistinct([1], 1) == 1\n    assert longestSubarrayWithKDistinct([1], 0) == 0\n\ndef test_all_distinct_elements():\n    assert longestSubarrayWithKDistinct([1, 2, 3, 4, 5], 3) == 3\n    assert longestSubarrayWithKDistinct([1, 2, 3, 4, 5], 5) == 5\n\ndef test_all_same_elements():\n    assert longestSubarrayWithKDistinct([1, 1, 1, 1], 1) == 4\n    assert longestSubarrayWithKDistinct([1, 1, 1, 1], 2) == 4\n\ndef test_k_greater_than_distinct_elements():\n    assert longestSubarrayWithKDistinct([1, 2, 3], 5) == 3\n\ndef test_empty_array():\n    assert longestSubarrayWithKDistinct([], 1) == 0\n\ndef test_large_k():\n    assert longestSubarrayWithKDistinct([1, 2, 1, 3, 4, 5, 6, 7, 8, 9], 10) == 10\n\ndef test_k_is_zero():\n    assert longestSubarrayWithKDistinct([1, 2, 3, 4, 5], 0) == 0\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000004", "row_id": 4, "problem_ids": ["1086", "1353", "2080"], "mode": "leetcode", "instruction": "Given a list of `n` integers, `nums`, and an integer `k`, return _the length of the longest contiguous subarray that contains at most `k` distinct integers_. If there are multiple such subarrays, return the length of any one of them. \n\nFor example, given `nums = [1, 2, 1, 2, 3]` and `k = 2`, the longest subarray with at most 2 distinct integers is `[1, 2, 1, 2]`, so the function should return `4`.\n\nImplement the function `int longestSubarrayWithKDistinct(int[] nums, int k)` that returns the length of the longest contiguous subarray with at most `k` distinct integers."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, return _the length of the longest substring without repeating characters_. A substring is a contiguous sequence of characters within a string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef length_of_longest_substring(s):\n    \"\"\"\n    Returns the length of the longest substring without repeating characters.\n    \"\"\"\n    char_index_map = {}\n    longest = 0\n    start = 0\n\n    for i, char in enumerate(s):\n        if char in char_index_map and char_index_map[char] >= start:\n            start = char_index_map[char] + 1\n        char_index_map[char] = i\n        longest = max(longest, i - start + 1)\n\n    return longest\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import length_of_longest_substring\n\ndef test_length_of_longest_substring():\n    assert length_of_longest_substring(\"abcabcbb\") == 3\n    assert length_of_longest_substring(\"bbbbb\") == 1\n    assert length_of_longest_substring(\"pwwkew\") == 3\n    assert length_of_longest_substring(\"\") == 0\n    assert length_of_longest_substring(\"abcdef\") == 6\n    assert length_of_longest_substring(\"aab\") == 2\n    assert length_of_longest_substring(\"dvdf\") == 3\n    assert length_of_longest_substring(\"anviaj\") == 5\n    assert length_of_longest_substring(\"tmmzuxt\") == 5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000005", "row_id": 5, "problem_ids": ["2455", "169", "1604"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, return _the length of the longest substring without repeating characters_. A substring is a contiguous sequence of characters within a string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:You are given a list of integers `nums` and an integer `target`. Your task is to find all unique combinations in `nums` where the numbers sum to `target`. Each number in `nums` may only be used once in the combination. The solution set must not contain duplicate combinations. Return the list of all unique combinations. The combinations can be returned in any order.\n\n**Example:**\n```\nInput: nums = [10,1,2,7,6,1,5], target = 8\nOutput: \n[\n  [1,1,6],\n  [1,2,5],\n  [1,7],\n  [2,6]\n]\n```\n\n**Constraints:**\n- `1 <= nums.length <= 100`\n- `1 <= nums[i] <= 50`\n- `1 <= target <= 500`"}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef combination_sum2(nums, target):\n    def backtrack(start, target, path):\n        if target == 0:\n            result.append(path)\n            return\n        if target < 0:\n            return\n        \n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i - 1]:\n                continue\n            backtrack(i + 1, target - nums[i], path + [nums[i]])\n    \n    nums.sort()\n    result = []\n    backtrack(0, target, [])\n    return result\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import combination_sum2\n\ndef test_combination_sum2_example():\n    nums = [10, 1, 2, 7, 6, 1, 5]\n    target = 8\n    expected_output = [\n        [1, 1, 6],\n        [1, 2, 5],\n        [1, 7],\n        [2, 6]\n    ]\n    assert sorted(combination_sum2(nums, target)) == sorted(expected_output)\n\ndef test_combination_sum2_no_combination():\n    nums = [2, 4, 6]\n    target = 5\n    expected_output = []\n    assert combination_sum2(nums, target) == expected_output\n\ndef test_combination_sum2_single_element():\n    nums = [3]\n    target = 3\n    expected_output = [[3]]\n    assert combination_sum2(nums, target) == expected_output\n\ndef test_combination_sum2_multiple_combinations():\n    nums = [2, 3, 5, 7]\n    target = 10\n    expected_output = [\n        [3, 7],\n        [2, 3, 5]\n    ]\n    assert sorted(combination_sum2(nums, target)) == sorted(expected_output)\n\ndef test_combination_sum2_duplicates():\n    nums = [1, 1, 1, 1, 1]\n    target = 2\n    expected_output = [[1, 1]]\n    assert combination_sum2(nums, target) == expected_output\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000006", "row_id": 6, "problem_ids": ["2243", "774", "2"], "mode": "leetcode", "instruction": "You are given a list of integers `nums` and an integer `target`. Your task is to find all unique combinations in `nums` where the numbers sum to `target`. Each number in `nums` may only be used once in the combination. The solution set must not contain duplicate combinations. Return the list of all unique combinations. The combinations can be returned in any order.\n\n**Example:**\n```\nInput: nums = [10,1,2,7,6,1,5], target = 8\nOutput: \n[\n  [1,1,6],\n  [1,2,5],\n  [1,7],\n  [2,6]\n]\n```\n\n**Constraints:**\n- `1 <= nums.length <= 100`\n- `1 <= nums[i] <= 50`\n- `1 <= target <= 500`"}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:A **valid parentheses string** is a string that consists of only the characters `'('` and `')'` and satisfies the following conditions:\n- It is an empty string, or\n- It can be written as `AB` (A concatenated with B), where A and B are valid parentheses strings, or\n- It can be written as `(A)`, where A is a valid parentheses string.\n\nGiven a valid parentheses string `s`, consider its **score** defined as follows:\n- The score of an empty string is 0.\n- The score of `()` is 1.\n- The score of `AB` is the sum of the scores of A and B.\n- The score of `(A)` is 2 times the score of A.\n\nImplement a function `scoreOfParentheses` that calculates the score of a given valid parentheses string `s`.\n\n**Example:**\n```\nInput: s = \"(()(()))\"\nOutput: 6\nExplanation: The score of \"(()(()))\" is 6.\n```\n\n**Constraints:**\n- `1 <= s.length <= 50`\n- `s` consists of only `'('` and `')'`.\n- `s` is a valid parentheses string."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef scoreOfParentheses(s):\n    \"\"\"\n    Calculate the score of a valid parentheses string.\n    \n    :param s: A valid parentheses string\n    :return: The score of the string\n    \"\"\"\n    stack = [0]  # The stack to keep track of scores\n\n    for char in s:\n        if char == '(':\n            stack.append(0)\n        else:\n            v = stack.pop()\n            stack[-1] += max(2 * v, 1)\n\n    return stack.pop()\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\ndef test_scoreOfParentheses_single_pair():\n    assert scoreOfParentheses(\"()\") == 1\n\ndef test_scoreOfParentheses_nested_pairs():\n    assert scoreOfParentheses(\"(())\") == 2\n\ndef test_scoreOfParentheses_concatenated_pairs():\n    assert scoreOfParentheses(\"()()\") == 2\n\ndef test_scoreOfParentheses_complex_case():\n    assert scoreOfParentheses(\"(()(()))\") == 6\n\ndef test_scoreOfParentheses_empty_string():\n    assert scoreOfParentheses(\"\") == 0\n\ndef test_scoreOfParentheses_multiple_nested():\n    assert scoreOfParentheses(\"(((())))\") == 8\n\ndef test_scoreOfParentheses_mixed_structure():\n    assert scoreOfParentheses(\"()(()())\") == 5\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000007", "row_id": 7, "problem_ids": ["919", "1415", "589"], "mode": "leetcode", "instruction": "A **valid parentheses string** is a string that consists of only the characters `'('` and `')'` and satisfies the following conditions:\n- It is an empty string, or\n- It can be written as `AB` (A concatenated with B), where A and B are valid parentheses strings, or\n- It can be written as `(A)`, where A is a valid parentheses string.\n\nGiven a valid parentheses string `s`, consider its **score** defined as follows:\n- The score of an empty string is 0.\n- The score of `()` is 1.\n- The score of `AB` is the sum of the scores of A and B.\n- The score of `(A)` is 2 times the score of A.\n\nImplement a function `scoreOfParentheses` that calculates the score of a given valid parentheses string `s`.\n\n**Example:**\n```\nInput: s = \"(()(()))\"\nOutput: 6\nExplanation: The score of \"(()(()))\" is 6.\n```\n\n**Constraints:**\n- `1 <= s.length <= 50`\n- `s` consists of only `'('` and `')'`.\n- `s` is a valid parentheses string."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` containing only lowercase English letters, you need to find the length of the longest substring that contains at most two distinct characters. Implement the `Solution` class:\n\n* `Solution(String s)` Initializes the object with the string `s`.\n* `int lengthOfLongestSubstringTwoDistinct()` Returns the length of the longest substring that contains at most two distinct characters.\n\nFor example, given `s = \"eceba\"`, the method `lengthOfLongestSubstringTwoDistinct()` should return `3`, because the longest substring with at most two distinct characters is `\"ece\"`."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\nclass Solution:\n    def __init__(self, s: str):\n        self.s = s\n\n    def lengthOfLongestSubstringTwoDistinct(self) -> int:\n        n = len(self.s)\n        if n < 3:\n            return n\n\n        left, right = 0, 0\n        hashmap = {}\n\n        max_len = 2\n\n        while right < n:\n            if len(hashmap) < 3:\n                hashmap[self.s[right]] = right\n                right += 1\n\n            if len(hashmap) == 3:\n                del_idx = min(hashmap.values())\n                del hashmap[self.s[del_idx]]\n                left = del_idx + 1\n\n            max_len = max(max_len, right - left)\n\n        return max_len\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import Solution\n\ndef test_length_of_longest_substring_two_distinct():\n    assert Solution(\"eceba\").lengthOfLongestSubstringTwoDistinct() == 3\n    assert Solution(\"ccaabbb\").lengthOfLongestSubstringTwoDistinct() == 5\n    assert Solution(\"a\").lengthOfLongestSubstringTwoDistinct() == 1\n    assert Solution(\"abaccc\").lengthOfLongestSubstringTwoDistinct() == 4\n    assert Solution(\"abcabcabc\").lengthOfLongestSubstringTwoDistinct() == 2\n    assert Solution(\"aabbcc\").lengthOfLongestSubstringTwoDistinct() == 4\n    assert Solution(\"aabacbebebe\").lengthOfLongestSubstringTwoDistinct() == 7\n    assert Solution(\"aaaa\").lengthOfLongestSubstringTwoDistinct() == 4\n    assert Solution(\"ab\").lengthOfLongestSubstringTwoDistinct() == 2\n    assert Solution(\"abc\").lengthOfLongestSubstringTwoDistinct() == 2\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000008", "row_id": 8, "problem_ids": ["398", "2387", "1040"], "mode": "leetcode", "instruction": "Given a string `s` containing only lowercase English letters, you need to find the length of the longest substring that contains at most two distinct characters. Implement the `Solution` class:\n\n* `Solution(String s)` Initializes the object with the string `s`.\n* `int lengthOfLongestSubstringTwoDistinct()` Returns the length of the longest substring that contains at most two distinct characters.\n\nFor example, given `s = \"eceba\"`, the method `lengthOfLongestSubstringTwoDistinct()` should return `3`, because the longest substring with at most two distinct characters is `\"ece\"`."}}
{"messages": [{"role": "user", "content": "## Task:\nPlease Answer the question and generate unit tests to verify your answer.\n\n## Output Format:\nYour solution and unit tests should be presented in markdown Python code format within the specified sections below. Ensure your code is within code blocks. For the tests, use pytest style by defining individual test functions (without classes) and using assert statements. \n\n<|Solution Begin|>\n[Solution Code in Python]\n<|Solution End|>\n<|Test Begin|>\n[Unit Test Code in Python]\n<|Test End|>\n\n## Example\nBelow is an example output format implementing a simple a + b function.\n\n<|Solution Begin|>\n```python\ndef add(a, b):\n    \"\"\"\n    Returns the sum of a and b.\n    \"\"\"\n    return a + b\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import add\n\ndef test_add_positive_numbers():\n    assert add(2, 3) == 5\n\ndef test_add_with_zero():\n    assert add(0, 5) == 5\n    assert add(5, 0) == 5\n\ndef test_add_negative_numbers():\n    assert add(-1, -1) == -2\n\ndef test_add_mixed_sign_numbers():\n    assert add(-1, 3) == 2\n```\n<|Test End|>\n\n## Question:Given a string `s` consisting of lowercase English letters, you need to find the length of the longest substring that contains at most two distinct characters.\n\nFor example:\n- Given `s = \"eceba\"`, the answer is `3`, because the longest substring is `\"ece\"`.\n- Given `s = \"ccaabbb\"`, the answer is `5`, because the longest substring is `\"aabbb\"`.\n\nWrite a function `longestSubstringTwoDistinct(s: str) -> int` that returns the length of the longest substring with at most two distinct characters."}, {"role": "assistant", "content": "<|Solution Begin|>\n```python\ndef longestSubstringTwoDistinct(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring with at most two distinct characters.\n    \"\"\"\n    if not s:\n        return 0\n\n    left = 0\n    right = 0\n    max_len = 0\n    char_map = {}\n\n    while right < len(s):\n        char_map[s[right]] = char_map.get(s[right], 0) + 1\n        right += 1\n\n        while len(char_map) > 2:\n            char_map[s[left]] -= 1\n            if char_map[s[left]] == 0:\n                del char_map[s[left]]\n            left += 1\n\n        max_len = max(max_len, right - left)\n\n    return max_len\n```\n<|Solution End|>\n\n<|Test Begin|>\n```python\nfrom solution import longestSubstringTwoDistinct\n\ndef test_example_cases():\n    assert longestSubstringTwoDistinct(\"eceba\") == 3\n    assert longestSubstringTwoDistinct(\"ccaabbb\") == 5\n\ndef test_empty_string():\n    assert longestSubstringTwoDistinct(\"\") == 0\n\ndef test_single_character_string():\n    assert longestSubstringTwoDistinct(\"a\") == 1\n\ndef test_two_distinct_characters():\n    assert longestSubstringTwoDistinct(\"ab\") == 2\n    assert longestSubstringTwoDistinct(\"aabb\") == 4\n\ndef test_more_complex_cases():\n    assert longestSubstringTwoDistinct(\"abcabcabc\") == 2\n    assert longestSubstringTwoDistinct(\"abaccc\") == 4\n    assert longestSubstringTwoDistinct(\"aabbcc\") == 4\n\ndef test_all_same_characters():\n    assert longestSubstringTwoDistinct(\"aaaa\") == 4\n```\n<|Test End|>"}], "metadata": {"prompt_id": "00000009", "row_id": 9, "problem_ids": ["2005", "179", "754"], "mode": "leetcode", "instruction": "Given a string `s` consisting of lowercase English letters, you need to find the length of the longest substring that contains at most two distinct characters.\n\nFor example:\n- Given `s = \"eceba\"`, the answer is `3`, because the longest substring is `\"ece\"`.\n- Given `s = \"ccaabbb\"`, the answer is `5`, because the longest substring is `\"aabbb\"`.\n\nWrite a function `longestSubstringTwoDistinct(s: str) -> int` that returns the length of the longest substring with at most two distinct characters."}}
